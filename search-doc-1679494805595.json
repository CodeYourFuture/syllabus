[{"title":"Coursework","type":0,"sectionRef":"#","url":"/contributing/example/homework-template","content":"","keywords":""},{"title":"Resources​","type":1,"pageTitle":"Coursework","url":"/contributing/example/homework-template#resources","content":"Resource 1 to learn more about Topic 1Resource 2 for Topic 2 "},{"title":"Coursework​","type":1,"pageTitle":"Coursework","url":"/contributing/example/homework-template#coursework","content":"First part of Homework - EasySecond part of Homework - Intermediate/Hard[Bonus/Optional] Third part/optional - HardestResearch: "},{"title":"Prepare for the next class​","type":1,"pageTitle":"Coursework","url":"/contributing/example/homework-template#prepare-for-the-next-class","content":"Read this Some Tutorial or Video etc... "},{"title":"Editing The Syllabus","type":0,"sectionRef":"#","url":"/contributing/editing","content":"","keywords":""},{"title":"Editing a Page​","type":1,"pageTitle":"Editing The Syllabus","url":"/contributing/editing#editing-a-page","content":"All documents can be found in the docs folder in their relevant folder. All files are written using Markdown. Docusaurus also has additionally Markdown functionality that you might find interesting. Additionally, you can scroll to the bottom of any page and click the edit button to edit directly in Github. "},{"title":"Adding a Page​","type":1,"pageTitle":"Editing The Syllabus","url":"/contributing/editing#adding-a-page","content":"To add a page to Docusaurus you can create a .md file anywhere in the docs folder. The location is unimportant technically however you should put it in the correct folder depending on the topic of the page i.e. React content should go in the react folder. "},{"title":"Markdown Headers​","type":1,"pageTitle":"Editing The Syllabus","url":"/contributing/editing#markdown-headers","content":"At the top of your .md page it's important that you include the below snippet of text to describe the page. For example, the snippet for this page would be: --- id: editing title: Editing The Syllabus sidebar_label: Editing The Syllabus ---  You can then continue to write your content below the line as normal. More information on markdown headers can be found here "},{"title":"Sidebar​","type":1,"pageTitle":"Editing The Syllabus","url":"/contributing/editing#sidebar","content":"The Sidebar is the element shown to the left of this page that allows users to navigate internally around the sections. It's important to add your page to the relevant sidebar for each navigation around the site. To do this you should navigate to the sidebars.js folder in the root of the website. Here is an example of the file for this:  &quot;Contributing&quot;: { &quot;Overview&quot;: [ &quot;contributing/overview&quot;, &quot;contributing/technical&quot;, &quot;contributing/editing&quot;, ], &quot;Template Lesson&quot;: [ &quot;contributing/example/lesson-template&quot;, &quot;contributing/example/homework-template&quot;, &quot;contributing/example/instructors-template&quot;, ], },  In the above example Contributing is the group that the sidebar belongs to. You should add a link to your new page in the section that you want this to appear. The path is defined as The folder path of the file (where docs is the root) e.g. /contributing/ Followed the id that you used in the Markdown Header e.g. editing You can find more details about the Sidebar here "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/contributing/example/instructors-template","content":"","keywords":""},{"title":"Presentations​","type":1,"pageTitle":"Instructor Notes","url":"/contributing/example/instructors-template#presentations","content":"Name of Presentation - Name of Module [Platform] - 01/01/2020 Created by School and Individual Creator Name of Presentation - Name of Module [Platform] - 01/01/2020 Created by School and Individual Creator "},{"title":"Videos​","type":1,"pageTitle":"Instructor Notes","url":"/contributing/example/instructors-template#videos","content":"Name of Video - 01/01/2020 Created by School and Individual Creator Name of Video - 01/01/2020 Created by School and Individual Creator "},{"title":"Lesson Overview​","type":1,"pageTitle":"Instructor Notes","url":"/contributing/example/instructors-template#lesson-overview","content":""},{"title":"Topic 1​","type":1,"pageTitle":"Instructor Notes","url":"/contributing/example/instructors-template#topic-1","content":"Explanation of the aims of the topic and any advice on how this can be delivered Exercise: A link to a completed example to be used by teachers "},{"title":"Topic 2​","type":1,"pageTitle":"Instructor Notes","url":"/contributing/example/instructors-template#topic-2","content":"Explanation of the aims of the topic and any advice on how this can be delivered Exercise: A link to a completed example to be used by teachers "},{"title":"Topic 3​","type":1,"pageTitle":"Instructor Notes","url":"/contributing/example/instructors-template#topic-3","content":"Explanation of the aims of the topic and any advice on how this can be delivered Exercise: A link to a completed example to be used by teachers "},{"title":"Notes​","type":1,"pageTitle":"Instructor Notes","url":"/contributing/example/instructors-template#notes","content":""},{"title":"What worked well in the past​","type":1,"pageTitle":"Instructor Notes","url":"/contributing/example/instructors-template#what-worked-well-in-the-past","content":"What the trainees have enjoyed and got the most out of "},{"title":"What hasn't worked well in the past​","type":1,"pageTitle":"Instructor Notes","url":"/contributing/example/instructors-template#what-hasnt-worked-well-in-the-past","content":"Any common gotchas to watch out forAny technical pitfalls that the trainees fall intoThe best areas to spend your lesson time on "},{"title":"[Class Name]","type":0,"sectionRef":"#","url":"/contributing/example/lesson-template","content":"","keywords":""},{"title":"Learning Objectives​","type":1,"pageTitle":"[Class Name]","url":"/contributing/example/lesson-template#learning-objectives","content":"By the end of this lesson a trainee will be able to Do XDescribe YList Z "},{"title":"Contents​","type":1,"pageTitle":"[Class Name]","url":"/contributing/example/lesson-template#contents","content":"Topic 1 Topic 1.1 Topic 2Topic 3Topic 4  "},{"title":"Topic 1​","type":1,"pageTitle":"[Class Name]","url":"/contributing/example/lesson-template#topic-1","content":"High level explanation of Topic 1 - rely on the exercises Exercise 1: Always have exercises Exercise 2: Always have exercises Harder Exercise 3: Always have exercises "},{"title":"Topic 2​","type":1,"pageTitle":"[Class Name]","url":"/contributing/example/lesson-template#topic-2","content":"High level explanation of Topic 2 - rely on the exercises Exercise 1: Always have exercises Exercise 2: Always have exercises Harder Exercise 3: Always have exercises "},{"title":"Topic​","type":1,"pageTitle":"[Class Name]","url":"/contributing/example/lesson-template#topic","content":"High level explanation of Topic 3 - rely on the exercises Exercise 1: Always have exercises Exercise 2: Always have exercises Harder Exercise 3: Always have exercises "},{"title":"Overview","type":0,"sectionRef":"#","url":"/contributing/overview","content":"","keywords":""},{"title":"Preamble​","type":1,"pageTitle":"Overview","url":"/contributing/overview#preamble","content":""},{"title":"Syllabus Aims​","type":1,"pageTitle":"Overview","url":"/contributing/overview#syllabus-aims","content":"This syllabus has the following aims To direct teachers across our network to our contentTo share content developed by volunteers between our cities (slides, videos, exercises etc)To ease the load of planning lessons for our teachersTo be a repository of exercises for our traineesTo be a resource for our trainees to refer to "},{"title":"Target Trainees​","type":1,"pageTitle":"Overview","url":"/contributing/overview#target-trainees","content":"The vast majority of our trainees fit this profile: Non-native English speakingLimited to zero prior experience in programmingMany do not have higher education certificates (Bachelors or higher)Some have not worked in a professional setting before This means that in general our trainees Respond better to exercises than written materialWill quickly become overwhelmed with long, meandering lecturesMay have a lower resilience to failure and errors You should keep these qualities in mind whenever we develop content for our trainees. You can find some concrete guidelines around content in this document: Our Approach. "},{"title":"Organisational Documents​","type":1,"pageTitle":"Overview","url":"/contributing/overview#organisational-documents","content":"This website contains everything that we teach our trainees. For organisational documents you can reference the Docs website. https://docs.codeyourfuture.io "},{"title":"How We Organise​","type":1,"pageTitle":"Overview","url":"/contributing/overview#how-we-organise","content":""},{"title":"Planning Boards​","type":1,"pageTitle":"Overview","url":"/contributing/overview#planning-boards","content":"We currently have two planning boards to coordinate tasks on the Syllabus Syllabus Planning - here These tasks are to do with one of our modules. These modules are living documents that changes and react to development over time. This board includes all associated homework and challenges to do with our courses. Workshop Development - here These tasks are one day workshops that provide non-essential skills or experiences to our trainees. For example, modules in Mobile Application Development or Machine Learning. Once run, these modules are kept as a library for future trainees and volunteers to refer back to. "},{"title":"Github​","type":1,"pageTitle":"Overview","url":"/contributing/overview#github","content":"To contribute to the Code Your Future syllabus, fork and open a pull request to this repository. Significant contributions are accepted strictly through approved pull requests, even for administrators of the repo. "},{"title":"Slack​","type":1,"pageTitle":"Overview","url":"/contributing/overview#slack","content":"Syllabus wide discussion happens in cyf-syllabus-tech Module or workshop specific discussion happens in cyf-module-$subject. For example, the React module discussion can be found in cyf-module-react. Track specific discussion happens in cyf-$subject-track "},{"title":"Lesson Template​","type":1,"pageTitle":"Overview","url":"/contributing/overview#lesson-template","content":"You can find an example of the a lesson plan here "},{"title":"Lesson​","type":1,"pageTitle":"Overview","url":"/contributing/overview#lesson","content":"A lesson must have Learning ObjectivesContents of the lessonSeveral topics that are covered in the lesson Each topic must have appropriate exercises A link to the homework Focus on exercises in the class rather than presentations or long explanations. "},{"title":"Coursework​","type":1,"pageTitle":"Overview","url":"/contributing/overview#coursework","content":"Homework should contain Resources to help the trainee study the material in the lessonA set of homework that the trainee must complete before the next lessonAny tasks the trainee should complete before the next lesson The homework should be relevant, get harder gradually with an (optional) stretch goal for more advanced trainees. "},{"title":"Instructor Notes​","type":1,"pageTitle":"Overview","url":"/contributing/overview#instructor-notes","content":"Instructor Notes should contain Links to presentations made by other schoolsLinks to any videos of previous classesExplanations of how the lesson should be taughtAny other useful information about the lesson content These notes are (along with Slack) one of the key ways that we should share knowledge and learnings between schools. "},{"title":"React Module Syllabus Team Minutes","type":0,"sectionRef":"#","url":"/contributing/react/minutes","content":"","keywords":""},{"title":"2022-11-07​","type":1,"pageTitle":"React Module Syllabus Team Minutes","url":"/contributing/react/minutes#2022-11-07","content":"Present: Ali, Tom "},{"title":"Agenda Items​","type":1,"pageTitle":"React Module Syllabus Team Minutes","url":"/contributing/react/minutes#agenda-items","content":"Ali leaving the React module team (@Ali) Ali is planning to leave the React module syllabus team (as he originally planned), though will still be around in CYF to helpHis role was to set up the team and get the ball rolling, which has been successfulAll of the team are free to join the Global Syllabus team meeting Team time/task progress - something's not working (@Tom) Not everyone in attendance at regular meetings, and often rescheduledFew agenda points and not much work in progress on the boardThis not a problem with the individuals in the team! It is a symptom of the team's setupThe Global Syllabus team generally has enough work on so that everyone has a task assigned, meaning there are always agenda point for the regular meetingThe React module is generally complete and only needs a few improvements, with no specific deadlines, so tickets are not always in progressNo specific feedback from module coordinators to update the module - does this mean the module is good, or is there just no feedback?Even if there was enough work (i.e. feedback to re-write the whole module, which is unlikely), would it take 4 people more than 1 month?Maybe the team needs restructuring &amp; re-focussing. Current 'TODO' work could be completed in less than 1 month, will the team have no purpose after this? How can we get feedback for the module? Cape Town towards end of module instruction, Birmingham and Manchester starting in November, London in MarchA good opportunity to get feedback from module coordinators "},{"title":"Action Items​","type":1,"pageTitle":"React Module Syllabus Team Minutes","url":"/contributing/react/minutes#action-items","content":"Ali: reach out/refer us to city coordinators who can tell us who the most recent module instructor was, to get feedbackAli: discuss with Global Syllabus team re above agenda itemsTom: create ticket to update module coordinator page to 'keep notes on questions &amp; feedback and submit tickets at end of teaching'  "},{"title":"2022-10-17 - React Syllabus​","type":1,"pageTitle":"React Module Syllabus Team Minutes","url":"/contributing/react/minutes#2022-10-17---react-syllabus","content":"Attendees: AliAlexZachTom "},{"title":"3 => 4 Week​","type":1,"pageTitle":"React Module Syllabus Team Minutes","url":"/contributing/react/minutes#3--4-week","content":"Alex introduced the concept of separating course into 4Presentational components -&gt; state -&gt; syncronosity -&gt; formsOld syllabus kind of covered this slightly betterForms were always 'tacked on' to cover for final projects as it always comes up with students.Data fetching used to be a lot simpler, edge cases are now a lot harder. Dependency array adds a lot of complexity.Ali has always had a bias to skip some of this complexity if it comes up, just focus on the empty dependency array.Beneficial to change it to a real API - Glitch app in the coursework that's a basic express server. Microserver somewhere on free infrastructure.Possible free access to some kind of server at some point, check with ops team.React Assessment also available - Codewars not brilliant for React. (success is usually tied to engagement rather than the code quality on Codewars). Has a netlify functions app.South Africa has already gone through the three weeks, recapping the material is probably best for now.Ali needs to let Sally know we're slightly further ahead in SA than previously thought.Aim for a London release, so that Ali / Tom / Alex can be present and see how it's going. "},{"title":"Action Items​","type":1,"pageTitle":"React Module Syllabus Team Minutes","url":"/contributing/react/minutes#action-items-1","content":"Alex to set up a drop in to start the work on coding the final form.Zach to grab feedback on the React module itself from SA students.Ali to figure out the next actual React cohortHave a gander through repos to ensure that they are using latest CRA.Ali to raise migrating away from CRA with the syllabus team.Keep meeting for regular time. "},{"title":"Other business​","type":1,"pageTitle":"React Module Syllabus Team Minutes","url":"/contributing/react/minutes#other-business","content":"Should we add subtasks to the 3 =&gt; 4 weeks ?We should think more about coursework, does it flow properly with the new week format?Look through additional material, should we write some more? How can we help other teachers teach?What questions are the students currently asking? Can we provide them with more information on this sort of thing? Maybe this would be more useful after the course and we don't need to worry too much. Redux good example of this, deliberately we have chosen to keep it as outside of the scope of the syllabus.Can we use more React documentation as additional material as the quality increases over time? Can we get rid of import React from &quot;react&quot;;? Probably yes!We may need to update the code sandboxes and the coursework repo. Can we link out to a post on what bundling is? Probably not a priority for the lesson itself, might be useful to have. Go to dev tools and see minified JavaScript and generated HTML?Used to be on the course, but added a lot of complexity. Possibly beyond the 'minimum viable lesson'. Shorten the loop. Syllabus team looking into Front End specific course, job market implications though. "},{"title":"Action Items from Last Time​","type":1,"pageTitle":"React Module Syllabus Team Minutes","url":"/contributing/react/minutes#action-items-from-last-time","content":"All to complete reading the syllabus and coursework Tom has looked over it and has corrected typosAlex to still look at the coursework Sharlu added ticket for testing ticketInternal push for more testing - open call for TDD Alex to join call on 1st of November  "},{"title":"2022-09-12​","type":1,"pageTitle":"React Module Syllabus Team Minutes","url":"/contributing/react/minutes#2022-09-12","content":"Present: Ali, Alex, Tom, Sharlu "},{"title":"Syllabus corrections​","type":1,"pageTitle":"React Module Syllabus Team Minutes","url":"/contributing/react/minutes#syllabus-corrections","content":"Create a PR for any small typos/invalid link corrections, no need to create a ticketIf links are invalid due to permission issues, reach out to Global Syllabus team for helpFor more 'controversial' tickets (e.g. #345), no need to wait to discuss in a meeting, create a PR and discuss async in comments "},{"title":"Style Guides​","type":1,"pageTitle":"React Module Syllabus Team Minutes","url":"/contributing/react/minutes#style-guides","content":"The syllabus contains some strong opinions around styling, would a specific style guide help to be clear around style? A 'CYF style guide exists but is not React specificSticking to a strict style guide can be confusing; trainees will find 'unstyled' code online which can be confusingUsing Prettier in JS projects in a good standard "},{"title":"Meeting the Global Syllabus team​","type":1,"pageTitle":"React Module Syllabus Team Minutes","url":"/contributing/react/minutes#meeting-the-global-syllabus-team","content":"Ali suggested to meet the global syllabus team during one of the bi-weekly Thursday meetings to find out what they do and how they work "},{"title":"Updating React module syllabus team meeting​","type":1,"pageTitle":"React Module Syllabus Team Minutes","url":"/contributing/react/minutes#updating-react-module-syllabus-team-meeting","content":"Time changed to 19:30 (GMT+1) "},{"title":"Actions​","type":1,"pageTitle":"React Module Syllabus Team Minutes","url":"/contributing/react/minutes#actions","content":"All: complete reading syllabus and courseworkTom: create PR to correct typos/dead linksSharlu: create ticket to add optional testing module (done: #478)Ali: ask Global Syllabus team about adding testing to other modulesAli: update meeting invite to new time (19:30)Alex: convert lessons into a single .md file to find 'splitting points'All: discuss sync/async suitable 'splitting points' in the 3 week course for updating to a 4 week course (#468)  "},{"title":"2022-08-01​","type":1,"pageTitle":"React Module Syllabus Team Minutes","url":"/contributing/react/minutes#2022-08-01","content":"Present: Ali, Alex, Tom, Sharlu, Zach "},{"title":"The board​","type":1,"pageTitle":"React Module Syllabus Team Minutes","url":"/contributing/react/minutes#the-board","content":"https://github.com/CodeYourFuture/syllabus/projects/10?fullscreen=trueUse this to plan and track our work (kanban-style)Feel free to open tickets if there is work that you would like to doMonthly planning: move tickets to the Todo column if someone is going to pick up the ticket in the next month "},{"title":"Expanding the Hotel coursework​","type":1,"pageTitle":"React Module Syllabus Team Minutes","url":"/contributing/react/minutes#expanding-the-hotel-coursework","content":"Problem The Hotel homework only takes a hour or 2 a week to complete, it could be expanded to have some more exercisesExercises cover most or all of the content covered in the lesson - but need more practice of those conceptsStrong trainees could do with some more stretch goals - those that challenge them to extend knowledge of the concepts We have a very good set of alternative &quot;challenge&quot; projects that are part of the coursework However, these are (intentionally) not very &quot;prescriptive&quot;, unlike the Hotel courseworkBut would still like to keep because trainees gain experience of setting up different React projects, and different problems to solve "},{"title":"Actions​","type":1,"pageTitle":"React Module Syllabus Team Minutes","url":"/contributing/react/minutes#actions-1","content":"Everyone: get familiar with the React module in it's current stateTom: write up ticket for splitting content over 4 weeksAli: write up ticket for expanding courseworkAlex: write up ticket for improving teaching of the concept of state "},{"title":"Setup Guide","type":0,"sectionRef":"#","url":"/contributing/setup","content":"","keywords":""},{"title":"Website Details​","type":1,"pageTitle":"Setup Guide","url":"/contributing/setup#website-details","content":"This website is built using Docusaurus 2. "},{"title":"1. Download the Code​","type":1,"pageTitle":"Setup Guide","url":"/contributing/setup#1-download-the-code","content":"All of the code for this website can be found on the Syllabus Repository You should clone this repo using the command $ git clone https://github.com/CodeYourFuture/syllabus.git  "},{"title":"2. Installation​","type":1,"pageTitle":"Setup Guide","url":"/contributing/setup#2-installation","content":"$ npm install  "},{"title":"3. Local Development​","type":1,"pageTitle":"Setup Guide","url":"/contributing/setup#3-local-development","content":"$ npm run start  This command starts a local development server and open up a browser window. Most changes are reflected live without having to restart the server. "},{"title":"Deployment​","type":1,"pageTitle":"Setup Guide","url":"/contributing/setup#deployment","content":""},{"title":"Local Building​","type":1,"pageTitle":"Setup Guide","url":"/contributing/setup#local-building","content":"$ npm run build  This command generates static content into the build directory and can be served using any static contents hosting service. "},{"title":"To Production​","type":1,"pageTitle":"Setup Guide","url":"/contributing/setup#to-production","content":"All commits are deployed automatically when they are merged into main. "},{"title":"Join The Team","type":0,"sectionRef":"#","url":"/contributing/team","content":"","keywords":""},{"title":"Background​","type":1,"pageTitle":"Join The Team","url":"/contributing/team#background","content":"Our syllabus is used by all of our schools to give them direction on what we teach, provide outlines for our lessons and be a central hub of CodeYourFuture's education knowledge. Historically, all of the content was created and maintained by the Lead Teachers of each module. This has some benefits in that teachers get to teach their content immediately for instant feedback - however we've often found that incremental improvements have been harder to achieve as volunteers are moved onto the next module. For this reason, it makes sense to have a team of people who can focus outside of a class cycle on improving and maintaining the syllabus. By giving people the space to work on class material and exercises outside of the rush class time we can build a culture of continuous improvement and iteration. "},{"title":"Why would you do this role?​","type":1,"pageTitle":"Join The Team","url":"/contributing/team#why-would-you-do-this-role","content":"You might be interested in this role if you want to be a driving force in the direction of our teachinghave an impact on all of the schools in our networkcontribute to an open-source first communitytuning your skills in content creation "},{"title":"Role & Responsibilities​","type":1,"pageTitle":"Join The Team","url":"/contributing/team#role--responsibilities","content":""},{"title":"Exercises & Challenges​","type":1,"pageTitle":"Join The Team","url":"/contributing/team#exercises--challenges","content":"Our syllabus has a small but growing array of homework, exercises and challenges that we can assign to our trainees to teach and test what they learning in the class. This content makes up the bulk of our content and is one of the main ways that our trainees can learn what we are teaching in classes. This role involves Developing coursework exercises for modulesDeveloping challenges for React/Node/MongoDBCurating broader coursework for modules "},{"title":"Updating Teaching Contents​","type":1,"pageTitle":"Join The Team","url":"/contributing/team#updating-teaching-contents","content":"Over time, certain areas of our syllabus age and have to re-written or replaced as the technology evolves. In addition, volunteers may flag areas of the syllabus as being weaker of lesser quality than others. This role involves Turning teacher changes into teachable contentRe-writing specific content as we see fit "},{"title":"Coordinating and Running Workshop​","type":1,"pageTitle":"Join The Team","url":"/contributing/team#coordinating-and-running-workshop","content":"We have many other topics that our community wants to learn about that lie outside of our syllabus. Additionally, we also have a lot of subject area experts come to us with topics for workshops that would not be helpful for all of our trainees. This role involves Coordinating workshops with course creatorsOrganising workshop events for our trainees &amp; graduates "},{"title":"Reviewing Changes​","type":1,"pageTitle":"Join The Team","url":"/contributing/team#reviewing-changes","content":"For all of the above, we need a Peer Review system in place to catch any bugs or errors. This will also include contributions made from outside of the Syllabus Contributor team This role involves Checking Pull Requests for error when they are raisedApproving or Rejecting changes "},{"title":"Commitment​","type":1,"pageTitle":"Join The Team","url":"/contributing/team#commitment","content":"This role can grow and shrink depending how much time you have. At a minimum it requires One meeting every two weeks for sprint planningAn hour a week to review Pull Requests In addition to this, time you can commit to the above tasks is where the bulk of the work will happen. "},{"title":"Organisation​","type":1,"pageTitle":"Join The Team","url":"/contributing/team#organisation","content":"We are organised into bi-weekly sprints where members of the team can pick up as much as little work as they like. Work is coordinated on these Planning Boards Syllabus PlanningWorkshop Planning Communication primarily happens on Slack in #cyf-syllabus - General discussion and planning#cyf-syllabus-feed - Updates via a Slack bot for PRs to the Syllabus "},{"title":"Training","type":0,"sectionRef":"#","url":"/contributing/training","content":"","keywords":""},{"title":"Aims​","type":1,"pageTitle":"Training","url":"/contributing/training#aims","content":"Participants will be able to: Run the syllabus locallyAdd a page to the syllabusEdit a page of the syllabusBe able to write simple markdownUnderstand the rules of making changes to the Syllabus "},{"title":"Presentation​","type":1,"pageTitle":"Training","url":"/contributing/training#presentation","content":"An overview of how to work with the Syllabus can be found here  "},{"title":"Databases (SQL)","type":0,"sectionRef":"#","url":"/db/","content":"","keywords":""},{"title":"Coordination​","type":1,"pageTitle":"Databases (SQL)","url":"/db/#coordination","content":"Coordination details for this module can be found on the Module Coordinator's page. "},{"title":"Module Coordinator","type":0,"sectionRef":"#","url":"/db/coordinator","content":"","keywords":""},{"title":"1) Preparation​","type":1,"pageTitle":"Module Coordinator","url":"/db/coordinator#1-preparation","content":"This module has some preparation work that should be set as coursework before the module starts You can find the preparation work here "},{"title":"Preparation","type":0,"sectionRef":"#","url":"/db/prep","content":"","keywords":""},{"title":"Let's Get Started​","type":1,"pageTitle":"Preparation","url":"/db/prep#lets-get-started","content":"We shall be using PostgreSQL - a widely used relational database. It's open-source and free to use. If you haven't already installed it then follow the instructions below: If you use Ubuntu then see here.If you have Mac-OS then see here. If you get stuck at any stage please post a message requesting help on your class channel. If you don't use any of the above operating systems then please talk to a mentor about how to proceed.  "},{"title":"Ubuntu​","type":1,"pageTitle":"Preparation","url":"/db/prep#ubuntu","content":""},{"title":"Install​","type":1,"pageTitle":"Preparation","url":"/db/prep#install","content":"If you have Ubuntu as your operating system you can install PostgreSQL using the following commands in the terminal (note: the $ is the system prompt): $ sudo apt-get install postgresql postgresql-contrib  Enter your ubuntu password when asked for it (it's needed for the sudo command). For this command you must confirm that you are happy to install the packages and any needed dependencies that the package manager identifies. Generally just type Y or y to proceed. To verify your installation enter the following commands: $ sudo -u postgres psql --version  Again, enter your Ubuntu user password when prompted. The command should display something like this: psql (PostgreSQL) 12.2 (Ubuntu 12.2.4)  "},{"title":"Create Your User and Database​","type":1,"pageTitle":"Preparation","url":"/db/prep#create-your-user-and-database","content":"Create the database user with the same name as your Ubuntu username (this makes logging in a bit easier): $ sudo -u postgres createuser -P --createdb &lt;username&gt;  This will ask for your Ubuntu login password to run the sudo command. The other parts of the line are: -u postgres tells sudo to run createuser as user postgres (set up when you installed postgres) createuser the shell command to create a PostgeSQL user -P (upper case) tells createuser to ask for the new user's password --createdb grants the user the privileges to create databases &lt;username&gt; the new username (hint: make it the same as your o/s username)  You'll be asked for the new database user's password (twice) - you'll need this later for when we connect to the database from Node. Remember the new username and password details - you will need them later. "},{"title":"Creating a new database​","type":1,"pageTitle":"Preparation","url":"/db/prep#creating-a-new-database","content":"In a terminal, create a new database named cyf_hotels with the following command: $ createdb cyf_hotels  Then connect to your database with: $ psql cyf_hotels  Note that if you chose to use your Ubuntu username for the database you don't need it (or the password) to log in to psql. If you used a different username then you'll need to log in with: $ psql -U &lt;username&gt; cyf_hotels  and you'll be prompted for the password. The output from this command should look something like this:  psql (12.2 (Ubuntu 12.2.4)) Type &quot;help&quot; for help. cyf_hotels=&gt;  The last line (cyf_hotels=&gt;) is the psql command prompt, made up of your database name plus '=&gt;'. Note that to exit psql back to the terminal prompt use the command \\q. Ubuntu Install Complete  "},{"title":"MacOS​","type":1,"pageTitle":"Preparation","url":"/db/prep#macos","content":"With the Apple Mac you can choose either a graphical installation or a command line method. The graphical method mostly involves dragging and dropping icons with a little bit of command line to configure the tools we need. The command line method uses only command line but is fairly simple. "},{"title":"Graphical Installation​","type":1,"pageTitle":"Preparation","url":"/db/prep#graphical-installation","content":"Note that you must be logged in as a user with Administrator privileges on OSX for all these steps. From the Macintosh OSX system you can install PostgreSQL from the Postgres.app package. Download this from https://postgresapp.com but make sure you choose PostgreSQL version 12 and the appropriate platform for your Mac. Once you have downloaded Postgres you can open the disk image from your Downloads folder. Drag the Postgres icon to the Applications folder.  Open Applications in the Finder and start Postgres. When you receive the alert &quot;Postgres&quot; is an application downloaded from the internet... then click on the Open button. You may be prompted for other options (e.g. auto update, ...) and you can choose your own preference. When the PostgreSQL window appears then click on the Initialise button to create your local PostgreSQL database and user - they will both have the same name as your OSX username.  PostgreSQL initialises itself, creating the initial databases (template1, postgres and &lt;your user name&gt;) along with corresponding users. These should then be displayed in the PostgreSQL window, as below:  "},{"title":"Configure the Command Line Interface (CLI)​","type":1,"pageTitle":"Preparation","url":"/db/prep#configure-the-command-line-interface-cli","content":"To use the PostgreSQL command line tools you need to add the directory to your path (used to find commands in the terminal). There are several ways to do this but the simplest is to create a file containing the directory path name. Open the terminal and enter the appropriate commands from the list below (note: you may not need to create the directory):  # First check the destination directory exists: ls /etc/paths.d/ # If the directory doesn't exist then create it: sudo mkdir /etc/paths.d # Create the path entry for Postgres: echo /Applications/Postgres.app/Contents/Versions/latest/bin | sudo tee /etc/paths.d/postgresapp  From the terminal you can now type the simple command:  psql  and this should produce something like the following:  psql (12.4) Type &quot;help&quot; for help. keith=#  The final line is the psql command prompt, waiting for you to enter a command. It comprises your database name (created with the same name as your username, in the example this is 'keith') followed by '=#'. You are going to rename the database to cyf_hotels for the purposes of this course, so from the psql prompt (as above) first disconnect from your database by connecting to database postgres: keith=# \\connect postgres  Now, still at the psql prompt, rename the database: keith=# alter database keith rename to cyf_hotels;  Clearly, you'll use your own name as the name of the database to be renamed. Note that to exit psql back to the terminal prompt use the command \\q. MacOS Graphical Install Complete "},{"title":"MacOS Command Line Installation​","type":1,"pageTitle":"Preparation","url":"/db/prep#macos-command-line-installation","content":"You need Homebrew installed on your Mac to use this approach. If you don't yet have it then you should probably use the graphical method. If you already have Homebrew installed then the following command installs PostgreSQL: brew install postgresql  This will install the software, set up the postgres user and a user with the same name as your Mac OS user and create some databases. It should leave the PostgreSQL server running on your Mac but if you power off the machine you'll need to restart it. To restart the server, type: brew services start postgresql  This starts the server and ensures that it will be started each time you power up your Mac. Note you can stop the server at any time by using: brew services stop postgresql  MacOS Command Line Installation Complete "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/db/week-1/homework","content":"","keywords":""},{"title":"1) PostgreSQL Exercises (3 hours)​","type":1,"pageTitle":"Coursework","url":"/db/week-1/homework#1-postgresql-exercises-3-hours","content":"Please try to complete the first six of these 'Simple' SQL Queries. https://pgexercises.com/questions/basic/ If you have time you can look at some of the others, but they may require extra research to complete. "},{"title":"2) Writing SQL Queries (5 Hours)​","type":1,"pageTitle":"Coursework","url":"/db/week-1/homework#2-writing-sql-queries-5-hours","content":"In this project you will find several tasks for you to complete https://github.com/CodeYourFuture/SQL-Coursework-Week1 "},{"title":"3) Full Stack Project - Week 1 (8 hours) 🔑​","type":1,"pageTitle":"Coursework","url":"/db/week-1/homework#3-full-stack-project---week-1-8-hours-","content":"Over the next three weeks, you'll be bringing everything you've learnt together into a Full Stack project. This week, you'll only be building the Front End of your website. You can find all of the details for this project here https://github.com/CodeYourFuture/Full-Stack-Project-Assessment For this week, you should complete Level 100 If you finish all of Level 100, continue to Level 199 "},{"title":"4) CodeWars (1 hour)​","type":1,"pageTitle":"Coursework","url":"/db/week-1/homework#4-codewars-1-hour","content":"https://docs.codeyourfuture.io/course-processes/running-the-course/codewars#codeyourfuture-collections Every week you need to complete at least three kata. Spend at least 20 minutes, three times a week, on your kata workout. Find the collection on the CodeYourFuture account: https://www.codewars.com/users/CodeYourFuture/authored_collections "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/db/week-1/instructors","content":"","keywords":""},{"title":"IMPORTANT - Setup Needed For Trainees​","type":1,"pageTitle":"Instructor Notes","url":"/db/week-1/instructors#important---setup-needed-for-trainees","content":"If you are teaching this class in the coming weeks you must instruct your trainees to complete the instructions below. PostgreSQL Preparation If you trainees do not arrive with these steps completed then you will lose a lot of time on your first lesson. You should consider running short mid-week sessions the week before to help trainees get set up. "},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/db/week-1/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-db For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"What worked well​","type":1,"pageTitle":"Instructor Notes","url":"/db/week-1/instructors#what-worked-well","content":""},{"title":"Things to improve​","type":1,"pageTitle":"Instructor Notes","url":"/db/week-1/instructors#things-to-improve","content":""},{"title":"Other thoughts​","type":1,"pageTitle":"Instructor Notes","url":"/db/week-1/instructors#other-thoughts","content":" "},{"title":"Windows set up instructions - ideally everyone should be on linux/mac but just in case...​","type":1,"pageTitle":"Instructor Notes","url":"/db/week-1/instructors#windows-set-up-instructions---ideally-everyone-should-be-on-linuxmac-but-just-in-case","content":""},{"title":"WSL (Windows Subsystem for Linux)​","type":1,"pageTitle":"Instructor Notes","url":"/db/week-1/instructors#wsl-windows-subsystem-for-linux","content":"If your computer supports WSL, you can - and should - use that instead. Follow the instructions above for Ubuntu in WSL. Note: Some of CYF members have reported that WSL will be buggy when used in the VSCode terminal. To ensure this is working properly, run WSL from the Windows command prompt. "},{"title":"Install​","type":1,"pageTitle":"Instructor Notes","url":"/db/week-1/instructors#install","content":"Note that you must be logged in as a user with Administrator privileges on Windows for all these steps. If you have Windows as your operating system you can install PostgreSQL from the installer executable. Download this from https://www.postgresql.org/download/windows/ but make sure you choose PostgreSQL version 12 for 64-bit or version 10 for 32-bit. Once you have downloaded the installer then run the file (postgresql-12.3-2-windows-x64.exe or similar). The installer prompts for various information as it initialises and you can mostly take the default values. Make a note of the installation folder when prompted for it - you don't need to change it. You must, however, provide a password for the postgres user - make sure you remember this password! If prompted to configure StackBuilder at the end of installation, just click Cancel - we won't need it. Before you can use any of the command line tools you must first add the PostgreSQL software to your PATH variable. This is a bit convoluted on Windows so please go carefully: In the File Explorer find This PC and right-click on it.In the menu select PropertiesIn the properties dialog (Control Panel) click on the Advanced system settings option (on left hand side)In the System Properties dialog, Advanced tab, click the Environment Variables button near the bottom of the windowIn the Environment Variables window, in the top half (User variables for ...) select the Path variable then click EditIn the Edit environment variable window first check that the PostgreSQL pathname hasn't been added already by the installer (if it has you can cancel out of all these dialogs)To add the PostgreSQL pathname you must click the New button on the right then type (or paste) the path C:\\Program Files\\PostgreSQL\\12\\bin into the new entry space. (Note: if you installed version 10 or 11 then the pathname will be slightly different - check using File Explorer)Click the OK button in each dialog to exit back to the Control Panel window, which you can just close normally If the next step (trying the psql command) fails you may need to log out and log back in again to apply the new PATH variable. The default installation provides only one user and no databases. To verify your installation open the Command Prompt and enter the following command:  C:\\...&gt; psql -U postgres --version  Enter the password for user postgres (defined during installation) when prompted. The command should display something like this: psql (PostgreSQL) 12.2  "},{"title":"Create a User and the Database​","type":1,"pageTitle":"Instructor Notes","url":"/db/week-1/instructors#create-a-user-and-the-database","content":"PostgreSQL initially uses an authorisation mode that depends on the operating system username; that is why we had to switch to user postgres to verify our installation because the installer only creates this user. You must create a user that you can use to access PostgreSQL, one that is not postgres (which we shouldn't use for normal work). You can use your operating system (Windows) username and this makes access to the database easier. To find your Windows username start a command prompt session and you should see your username in the prompt, for example: C:\\Users\\keith&gt; ^^^^^ is my username  Now create the PostgreSQL user that you'll use for the lessons C:...&gt; createuser -U postgres -P --createdb &lt;your user name&gt;  You must supply the password for the postgres user for this command. Obviously you substitute your own username for &lt;your user name&gt;, so for me (keith) I would use: C:\\Users\\keith&gt; createuser -U postgres -P --createdb keith  To create a database you can now use your new username: C:\\...&gt; createdb -U &lt;your user name&gt; cyf_hotels  On Windows you'll need to enter your password for the new account each time you use the username. To access your new database you just need to enter: C:\\...&gt; psql -U &lt;username&gt; cyf_hotels  then enter your password when prompted. Windows users need to change the console character code page for each new session. Issue the command: C:\\...&gt; chcp 65001  to set the current code page to use UTF-8 encoding. You will see a warning message when you enter psql as follows: WARNING: Console code page (65001) differs from Windows code page (1252) 8-bit characters might not work correctly. See psql reference page &quot;Notes for Windows users&quot; for details.  Please ignore this - your setting will allow psql to display customer names, etc., which are stored in UTF-8 format, correctly. "},{"title":"Enabling Passwordless Logins​","type":1,"pageTitle":"Instructor Notes","url":"/db/week-1/instructors#enabling-passwordless-logins","content":"If you have chosen your username as the same as your windows user you can allow passwordless logins from your own PC. To do this you need to modify a configuration file. Locate the file pg_hba.conf in the installation directory's data subdirectory. For example, if the installation directory is: C:\\Progam Files\\PostgreSQL\\12  then look for pg_hba.conf in C:\\Program Files\\PostgreSQL\\12\\data. Open this file using your favourite text editor (Visual Studio should work OK). Scroll down past all the comment lines (starting with #) until you find the header line: # TYPE DATABASE USER ADDRESS METHOD  You should find a number of non-comment lines below this - these define login methods for different situations. Enter the following line just below the header line: host cyf_hotels all ::1/128 trust  Save the changes. Finally you must restart the PostgreSQL service so that the configuration changes are used. To do this right click in the taskbar at the bottom of the screen and choose Task Manager. Click the Services tab and locate the postgresql service (named postgresql-x64-12 or similar). Right click and choose Restart. From here onwards you shouldn't need to switch to the postgres user again nor enter a password. You can get into the PostgreSQL command-line tool using just: C:\\...&gt; psql cyf_hotels  This connects you to the database named cyf_hotels and connects as the same username as your Windows user. The output from this command should look something like this:  psql (12.4) Type &quot;help&quot; for help. WARNING: Console code page (65001) differs from Windows code page (1252) 8-bit characters might not work correctly. See psql reference page &quot;Notes for Windows users&quot; for details. cyf_hotels=&gt;  Note that to exit psql back to the terminal prompt use the command \\q. Windows Install Complete "},{"title":"Database 1 - Introduction to SQL","type":0,"sectionRef":"#","url":"/db/week-1/lesson","content":"","keywords":""},{"title":"What will we learn today?​","type":1,"pageTitle":"Database 1 - Introduction to SQL","url":"/db/week-1/lesson#what-will-we-learn-today","content":"Introduction to databases Why do we need them?Different types of database Introduction to PostgreSQL What is SQL?What is a RDBMS?What characterises a relational database?Database modeling exerciseCheck your PostgreSQL installation Communicating with the database using SQL Creating a new databaseCreating a tableInserting dataRetrieving dataRetrieving data with conditions Coursework  "},{"title":"Learning Objectives​","type":1,"pageTitle":"Database 1 - Introduction to SQL","url":"/db/week-1/lesson#learning-objectives","content":"By the end of this lesson trainees should be able to Explain why databases are needed in Web DevelopmentDefine what SQL is and what it is used forDescribe what table, rows and columns are used for in a relational databaseInstall and create a database using PostgreSQLCreate a table in a database using PostgreSQLInsert data into a table using PostgreSQLRetrieve data from a table using PostgreSQLRetrieve data from a table using conditionals in PostgreSQLList the different kinds of data that can be held in a PostgreSQL database  "},{"title":"Before you start​","type":1,"pageTitle":"Database 1 - Introduction to SQL","url":"/db/week-1/lesson#before-you-start","content":"Before you arrive at class you must have completed the following setup work. PostgreSQL Preparation If you are a teacher reading this, please check the Instructor Notes "},{"title":"Introduction to databases​","type":1,"pageTitle":"Database 1 - Introduction to SQL","url":"/db/week-1/lesson#introduction-to-databases","content":"A database is a structured set of data held in a computer. It provides ways to store, retrieve and organize information. "},{"title":"Why do we need them?​","type":1,"pageTitle":"Database 1 - Introduction to SQL","url":"/db/week-1/lesson#why-do-we-need-them","content":"In the past few weeks, you stored and retrieved data using files. This is fine for simple data but it can quickly become an issue as your application becomes more complex and needs to store and manipulate more complicated data. For example, imagine you want to develop the next biggest hotel booking application. You will need to store the list of hotels available for booking somewhere, and as you add more features, you will need to save users information, the reviews they post for each hotel, but also the bookings each user makes. You can see that the data you need to handle can become very complicated, especially when you need to consider that data are not static, as they can be updated or deleted. To work more effectively with data, we can then use a database, which present the following benefits: A database defines a structure for your data and the relationships between entitiesA database provides convenient and performant ways to safely store and retrieve dataA database provides a mechanism to check the validity of your data "},{"title":"Different types of database​","type":1,"pageTitle":"Database 1 - Introduction to SQL","url":"/db/week-1/lesson#different-types-of-database","content":"There are many different kinds of database and different implementations. Sometimes, a database type is a better fit to certain use case or certain problems. The most well-known database types include relational database, key/value database, graph database and document database (also known as NoSQL). For this class, we will focus specifically on relational database as they are the most widely used and supported. You can consult DB-Engines to see a ranking of the most used database, as you can see, there is a lot of them! "},{"title":"Introduction to PostgreSQL​","type":1,"pageTitle":"Database 1 - Introduction to SQL","url":"/db/week-1/lesson#introduction-to-postgresql","content":"&quot;PostgreSQL is a powerful, open source object-relational database system that uses and extends the SQL language combined with many features that safely store and scale the most complicated data workloads. The origins of PostgreSQL date back to 1986 as part of the POSTGRES project at the University of California at Berkeley and has more than 30 years of active development on the core platform.&quot; (source: postgresql.org) "},{"title":"What is SQL?​","type":1,"pageTitle":"Database 1 - Introduction to SQL","url":"/db/week-1/lesson#what-is-sql","content":"Pronounced S-Q-L or sequelStands for Structured Query LanguageSQL is the standard language used to communicate with relational databaseSQL statements are used to query, create, update, delete records in a databaseSQL statements are executed by a RDBMS. "},{"title":"What is a RDBMS?​","type":1,"pageTitle":"Database 1 - Introduction to SQL","url":"/db/week-1/lesson#what-is-a-rdbms","content":"Stands for Relational Database Management SystemIt is a program that processes SQL statements to manage a relational databasePostgreSQL is a RDBMS. "},{"title":"What characterizes a relational database?​","type":1,"pageTitle":"Database 1 - Introduction to SQL","url":"/db/week-1/lesson#what-characterizes-a-relational-database","content":"As mentioned previously, a relational database is a specific type of database. Data is stored in tables of rows and columns as per the example below:  How about storing everything in one big table as shown below? Why isn't it a good idea? A customer could have several bookings. If the customer changes their telephone number, you would have to update every single rows for this customer with their new number, which is more prone to errors. As a general rule, try to avoid duplication of data, and instead design your system in a way that you have a single source of truth for each piece of data. The example below is NOT a good solution.  "},{"title":"Database modeling exercise​","type":1,"pageTitle":"Database 1 - Introduction to SQL","url":"/db/week-1/lesson#database-modeling-exercise","content":"Scenario: You've been hired to create a database for a new company which wants to revolutionize the hotel booking market. The first task you've been given is to model how the company would store its data in a database. Here are your requirements: The company wants to store in the database all the hotels available on their websiteFor each hotel, the company wants to record the name and the number of rooms. Also each hotel can have several room types and each room type has a specific price.The company also needs to store the information of customers who registered on their website with a name, an email and an address.Customers need to be able to record their bank details which consist of an account number and a sort code. Each customer can register several bank accounts if they want.Finally, as customers can book a room in an hotel starting on a specific date for a specific number of nights, the company wants to store the bookings. With mentors help, model the database for this company. In particular, show the different entities, fields and relationships between each entity. "},{"title":"Check your PostgreSQL installation​","type":1,"pageTitle":"Database 1 - Introduction to SQL","url":"/db/week-1/lesson#check-your-postgresql-installation","content":"Open a terminal in your laptop and verify the command psql -V returns the version of PostgreSQL. In psql, you can type use the command help to show the help menu. Within the command prompt, you can enter SQL statements and run them against PostgreSQL. To quit psql, enter the command \\q. "},{"title":"Communicating with the database using SQL​","type":1,"pageTitle":"Database 1 - Introduction to SQL","url":"/db/week-1/lesson#communicating-with-the-database-using-sql","content":"All commands in the following need to be entered in a psql command prompt. However, sometimes it's easier to write the code in a file and then load the file with psql. For example, if you write your SQL code in a file called test.sql, you can then execute it with psql -d DATABASE_NAME -f test.sql. "},{"title":"Creating a new database​","type":1,"pageTitle":"Database 1 - Introduction to SQL","url":"/db/week-1/lesson#creating-a-new-database","content":"In a terminal, create a new database named cyf_hotels with the following command: createdb cyf_hotels  Then connect to your database with: psql cyf_hotels  "},{"title":"Creating a table​","type":1,"pageTitle":"Database 1 - Introduction to SQL","url":"/db/week-1/lesson#creating-a-table","content":"Data are stored in tables. Let's first create a customers table to hold the details of customers. CREATE TABLE customers ( id SERIAL PRIMARY KEY, name VARCHAR(30) NOT NULL, email VARCHAR(120) NOT NULL, address VARCHAR(120), city VARCHAR(30), postcode VARCHAR(12), country VARCHAR(20) );  Few things to mention from the SQL statement above: SERIAL PRIMARY KEY defines the column id as a unique identifier for each row. Moreover, this identifier will automatically incremented every time data is inserted. id is called the primary key of the table customers.VARCHAR(20) defines the column to hold text data with a maximum length of 20 charactersNOT NULL defines the column as not nullable, which means that you must set a value.Other useful types include INT, TEXT, BOOLEAN and DATE.The database will reject any values which don't match the type. Exercise 1​ Exercise Create the customers table in the cyf_hotels database.Verify that the table customers is created with the psql command \\dt which lists the existing tables.Display the table customers definition with the command \\d customers and verify that it matches what you expect.Create a new table hotels in the cyf_hotels database with the following columns: an id, a name, the number of rooms and the hotel postcode. Use the commands above to verify that the table is correctly created. Now that we have a table to store customers and a table to store hotels, we can create a table to hold the bookings of customers for an hotel with the checkin date and the number of nights they intend to stay: CREATE TABLE bookings ( id SERIAL PRIMARY KEY, customer_id INT REFERENCES customers(id), hotel_id INT REFERENCES hotels(id), checkin_date DATE NOT NULL, nights INT NOT NULL ); In the above, customer_id and hotel_id are called foreign keys as they reference an id from a different table. This set a very strong constraint as you will not be able to create a booking for a customer id which does not exist in the customers table! Exercise 2​ Exercise Create the table bookings in your cyf_hotels database and verify that it is correctly created. "},{"title":"Inserting data​","type":1,"pageTitle":"Database 1 - Introduction to SQL","url":"/db/week-1/lesson#inserting-data","content":"Once your customers, hotels and bookings table are created, you can insert data with the following SQL statements: INSERT INTO customers (name, email, address, city, postcode, country) VALUES ('John Smith','j.smith@johnsmith.org','11 New Road','Liverpool','L10 2AB','UK'); INSERT INTO hotels (name, rooms, postcode) VALUES ('Triple Point Hotel', 10, 'CM194JS'); INSERT INTO bookings (customer_id, hotel_id, checkin_date, nights) VALUES (1, 1, '2019-10-01', 2);  The data you insert should be of the same type with your table definition. For example, the following insert statement will fail: INSERT INTO bookings (customer_id, hotel_id, checkin_date, nights) VALUES (1, 1, '2019-14-01', 2);  Exercise 3​ Exercise Run the 3 SQL statements above.Insert yourself in the customers table.Insert the following 3 hotels in the hotels table: The Triple Point Hotel has 10 rooms, its postcode is CM194JSThe Royal Cosmos Hotel has 5 rooms, its postcode is TR209AXThe Pacific Petal Motel has 15 rooms, its postcode is BN180TG Try to insert a booking for a customer id which does not exist in the customers table (for example ID 100). What is happening and why? "},{"title":"Retrieving data​","type":1,"pageTitle":"Database 1 - Introduction to SQL","url":"/db/week-1/lesson#retrieving-data","content":"Previously, you have inserted data in your tables. How do you make sure these data have been inserted correctly? The following SQL statement is used to request data from a specific table: SELECT * FROM customers;  Exercise 4​ Exercise Use the above SQL statement to display all the data inserted in the customers table.Use the above SQL statement to display all the data inserted in the hotels table.Use the above SQL statement to display all the data inserted in the bookings table. "},{"title":"Retrieving data with conditions​","type":1,"pageTitle":"Database 1 - Introduction to SQL","url":"/db/week-1/lesson#retrieving-data-with-conditions","content":"Actually, the SELECT statement is very powerful and you will see you can request a lot of different things with it. Have you seen the * character in the SQL statement above? It means that you want to see the data for all the columns of the table. What if you want to only return specific columns? For example, to retrieve all customers name and address from the table customers: SELECT name,address FROM customers;  Sometimes, you want to retrieve only data which verify a specific condition. In this case, you can use a WHERE clause. For example, to retrieve all hotels having more than 7 rooms: SELECT * FROM hotels WHERE rooms &gt; 7;  To retrieve the customer name and address with id 1: SELECT name,address FROM customers WHERE id = 1;  To retrieve all the bookings starting after 2019/10/01: SELECT * FROM bookings WHERE checkin_date &gt; '2019/10/01';  To retrieve all the bookings starting after 2019/10/01 for a minimum of 2 nights: SELECT * FROM bookings WHERE checkin_date &gt; '2019/10/01' AND nights &gt;= 2;  To retrieve all the hotels with the postcode CM194JS or TR209AX: SELECT * FROM hotels WHERE postcode = 'CM194JS' OR postcode = 'TR209AX';  Exercise 5​ Exercise Execute the file cyf_hotels_exercise5.sql which will reset your existing tables and insert more data in the customers, hotels and bookings tables. (hint: in the terminal, use psql -d cyf_hotels -f cyf_hotels_exercise5.sql).Retrieve all information for the customer Laurence Lebihan.Retrieve all customers name living in UK.Retrieve the address, city and postcode of Melinda Marsh.Retrieve all hotels located in the postcode DGQ127.Retrieve all hotels with more than 11 rooms.Retrieve all hotels with more than 6 rooms but less than 15 rooms.Retrieve all hotels with exactly 10 rooms or 20 rooms.Retrieve all bookings for customer id 1.Retrieve all bookings for more than 4 nights.Retrieve all bookings starting in 2020.Retrieve all bookings before 2020 for less than 4 nights. "},{"title":"Coursework​","type":1,"pageTitle":"Database 1 - Introduction to SQL","url":"/db/week-1/lesson#coursework","content":"All of the coursework for this week can be found here. "},{"title":"Feedback​","type":1,"pageTitle":"Database 1 - Introduction to SQL","url":"/db/week-1/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Global Syllabus Team Minutes","type":0,"sectionRef":"#","url":"/contributing/minutes","content":"","keywords":""},{"title":"{DATE HERE}​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#date-here","content":"Attendees: "},{"title":"❗Actions from last time​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-from-last-time","content":""},{"title":"📝 Agenda points​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#-agenda-points","content":""},{"title":"❗Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions","content":" "},{"title":"{2023-03-02}​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#2023-03-02","content":"Attendees: Sally, Keith, Ali, Greg "},{"title":"❗Actions from last time​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-from-last-time-1","content":" Mitch: Invite Keith Bremer to a syllabus meeting Mitch: Raise an issue with acceptance criteria (for restructuring JS1?) Sally: Organise a regular joint PD &amp; Tech syllabus team meetings Ali &amp; Mitch: share concept maps Ali thought he had one for JS but can't find itWe have the syllabus from Fatemeh -&gt; Mitch or Greg should share "},{"title":"📝 Agenda points​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#-agenda-points-1","content":"SQL​ Keith: has a background as a trainer for Oracle + long-term involvement in CYFWhen you teach it: clear that there is not enough time to properly teach SQL LockingTransactionsAggregate functions Greg: worried that with a medium SQL module we are both failing advanced trainees who are not learning enough, and struggling trainees who need to practice writing small full stack appsGreg: Wish that the last module was a &quot;full stack apps&quot; module with absolute bare minimum of SQLGreg: Maybe we could have both?Ali: Let's gather existing modules that existsAli: ideally every module would be longerSally: maybe we should put databases earlier, so that trainees who like this could branch into it (maybe just before React?)Sally: then have a bigger SQL module for themAli: the &quot;frontend path&quot; is not really frontendAli: might there be difficulty in recruiting volunteers for SQL?Keith: could we have a beginning of SQL before node/react and then gradually build as we make our full stack apps more complex?Maybe we should have a &quot;taster module&quot; with different parts of a full stack app (but how would we make it nicely decoupled) Pitch workshops (so that you can just drop into them), maybe tied to job titles (a day in the life of...)e.g. Data EngineeringHow do we help trainees understand how things fit into the rest of the universe?Has to be very hands on - exercises in various technologies? Fits into the bigger picture of how to make practical projects that they work on every moduleStructure of syllabus is pointlessly constrainingLet's make projects / small increments as if we were already in the future where it all makes sense 1000 paper cranes​ Could be for trainees near graduation to understand that a tool is just a tool and there are some underlying ChatGPT​ How can we support trainees in learning using it? Great at variable namingGiven tests it can write pretty good codeIt is not good at even slightly unusual requirementsIt can't admit mistakes / confidently doubles down or spouts nonsense Someone wanted to join the syllabus team? Invite them?​ yes! "},{"title":"❗Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-1","content":" Keith (with support), get Keith's SQL material into the syllabus Sally -&gt; reach out to person who would like to join syllabus team Mitch: Raise an issue for fixing JS1 in short term with acceptance criteria Sally: Organise a regular joint PD &amp; Tech syllabus team meetings Ali &amp; Mitch: share concept maps Greg: tag Ali in on tidying up js1 coursework Greg: put a meeting in for Sally to teach her how to write a block for CYF Blocks  "},{"title":"2023-02-16​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#2023-02-16","content":"Attendees: Ali, Sally, Mitch, Greg, Daniel, Karen N/A - apparently we haven't made minutes for a while "},{"title":"❗Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-2","content":" Mitch: Raise an issue with acceptance criteria (for restructuring JS1?) Sally: Organise a regular joint PD &amp; Tech syllabus team meetings Ali &amp; Mitch: share concept maps JS1 Week changes​ What is the larger refactoring referenced in ticket? The complete redo of all JS modulesWant to make the smallest possible changeAny further questions should be recorded so we can discuss them in more depth We're interested in getting together to discuss goals - like we did with the fundamentalsDaniel: propose an experimental JS in the browser to see if it actually works Put together a 1 day workshop and test with some trainees JS in the browser Greg: Would like to try this Can we figure out a migration path to this in the current work Flipped classroom shows that we have too much content in JS1W1Mitch: only audited Week 1 Changing this will have a ripple effect for following weeksSuggestion: create new files in which to make the changes - prevent scope creeping out into the main discussion Greg: loops Let's not teach all of the types of loops together - keep it restricted in the syllabusBut keep a &quot;glossary&quot; of materials on other types of loops Ali: Concept mapping Can we try to map out the mapping of all the concepts we cover in JSDecision: it shouldn't block this round of workThere's interest in syllabus development workshops Mitch has a rough version of this, is happy PD Syllabus​ Karen from PD syllabus teamCurrently mapping the syllabus Compare tech vs PD syllabusTrying to align soft skills that cross over between tech and PD Ultimate goal is to reduce friction in final projects But intermediate goal is to try find module splits for syllabus Also keen for PD &amp; Tech syllabus teams to work togetherSally: consider that we may be moving parts of tech syllabus around (particularly in JS) Problem: the syllabus is inflexibleTech syllabus is working towards making pieces more independent, so we can move aroundBroadly we want to stay within a module format Greg: we're in favour of integrating with PD Trainees have historically not looked at PD as &quot;real content&quot;Separating the content into separate sites was not helpfulSo have been working to move the content into the &quot;main&quot; syllabus Greg: will PD modules map onto Tech modules e.g. feedback module would be taught alongside JS1? Code review is similar to feedbackTech picks up code review in JS1 - so makes sense to links these togetherGreg: encouragement to revisit concept multiple times across Daniel: super short term - Esma has lots of PRs open &amp; how will we handle them Karen has reviewed them There's some feedback from Sally - try to avoid things that are inaccessible Reviewing the learning objectives are out-of-scopeMain immediate objective is to get into the syllabus And then iterate from there Should tech syllabus be involved at all? We don't know Daniel thinks that we can get through them Sally: to make things easier, we could use labels for topics Can filter PRs? Ali: should we communicate the current/near future state of PD content, and that we want to iterate on it Sounded like the consensus was noAlready put a message in the PD channels Ali: is the split of PD &amp; Tech artificial? General agreement that it's somewhat artificialHaving small teams is a benefitWe'd like to have more joint meetings Codespaces​ Sally: have created lots of small ticketsWant to encourage small contributions - Codespaces make this easy New database module​ Sally: a new database module has apparently appearedWe still like the database module that Keith Bremer wrote "},{"title":"❗Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-3","content":" Mitch: Invite Keith Bremer to a syllabus meeting Mitch: Raise an issue with acceptance criteria Sally: Organise a regular joint PD &amp; Tech syllabus team meetings Ali &amp; Mitch: share concept maps "},{"title":"2022-11-24​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#2022-11-24","content":"Attendees: "},{"title":"❗Actions from last time​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-from-last-time-2","content":"Open a ticket to add the Bandit to the terminal lesson (Sally) [] "},{"title":"📝 Agenda points​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#-agenda-points-2","content":"Feedback from flipped classroom Q &amp; A​ Here's a link to the notes from the Q&amp;A session with Shaun and Zacheé re flipped classroom in S AfricaGreg likes to think of flipped classroom more as having really well thought out prep work that makes the Saturday class run more smoothly Brief talk through Saturday flipped classroom presentation​ Some discussion around the grouping of trainees on a Saturday: Ask trainees how long they've spent on the prep work in a given weekMay need to say in advance that someone in their group is going to be slightly/considerably more advanced than themVery important to normalise the differentiationAlternatively leave it vague who is strong/weak before grouping up traineesIf 2 people are trying to learn the same thing, say useEffect, then it makes sense for the useEffect people to work togetherIn general, the less they know specifically -&gt; more mixed ability becomes possibleCould potentially get more frustration with people working at different levelsIf we assume people are learning different things then groups don't matter massively Peer-2-peer collaboration will work better if trainees provide verbal explanations of how their code works Video recording volunteers​ Lo-fi recordings done with volunteersGreg, very interested in helping with recordings - at some point in the future making some videos when he gains capacityWill to observe something beforehand to see how it works Welcome to Will​ Welcome to Will who's joining on syllabus! 🎉Will was previously a mentor in 2nd LDN class in 2018 "},{"title":"❗Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-4","content":"[] Mitch and Will to catch up on a module PR later this week  "},{"title":"2022-11-10​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#2022-11-10","content":""},{"title":"❗ Actions from last time​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#-actions-from-last-time","content":"Still copying forward the tasks from last time. "},{"title":"📝 Agenda points​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#-agenda-points-3","content":"React module team​ Ali has been leading/encouraging progress but is going to be busy with moving soonIdeas for getting increasing engagement Could we invite them to the Summit in Jan?Run an ideas meeting, encourage ownership/long-term vision Sally has lots of ideas that they could try, potentially could join Coursework Reduction​ Sally created a bunch of tickets to reduce the amount of mandatory courseworkDo we know how long it takes trainees to work through the coursework We've had a trainee who took 2 - 4 hours per weekBut we've also had trainees take much longer Idea: reorder the coursework So trainees are doing the most important work firstCould potentially do up to the 20 hour deadline Consistency Can we make coursework clearer through consistency, so they're more likely to do it?Top priorities have a CodeWars exercise &amp; PR to main coursework repoNext is to review the solutions A lot of trainees skip this, which may be a problem --- don't know which way the causality is around Boilerplate classroom Has a break down of coursework by weekGlobal syllabus should have access to thisIt's used to set up new classes --- so editing this will affect all subsequent classes There is a mechanism for updating existing classes, but it's on the cities to do it Goal of tickets: have a look through the tickets and see what can be removed Some of the coursework might go, some might notJust need to assess it Flipped Classroom​ Is the syllabus ready for this? Has ZA made progress/notes on how well this has worked? Sally moved coursework ahead 1 week So trainees should be working ahead, seeing new conceptsAnd coming with questions to the next class Have coursework items to prepare for the next class Encouraged to come with questions Mitch is planning to introduce flipped classroom model to NW soonConcerns that flipped classroom model will heighten the &quot;I don't know what I'm doing so I won't say anything&quot; issue Need to encourage a culture of sharing blockers/vulnerability Think that just giving notes to trainees ahead of time isn't enough Mitch plans to work with experienced teachers to prepare recordings alongside grads Training for software engineers to &quot;get out of the way&quot; This was a suggestion that Ali had out of Mitch's teacher training session: we need a session on &quot;practicing&quot;, basically solving exercises, pairing with trainees, etc Will trainees come to class having written some code? Some but not lotsGoal: they have an introduction and have started thinking about questions when they arrive at class Syllabus tries to guide teachers on what they should cover in class Do we need to go through it and add in some time for flipped classroom? Yes probably Naming &quot;Flipped classroom&quot; may have something of a bad rap, maybe we should call it something different The Bandit​ https://overthewire.org/wargames/bandit/bandit0.html Levels 1 - 10Challenges to SSH onto a box, and move around to find files, using various CLI tools Was added to CYF+ syllabus Sally did it, and thought it was good We should add it to the main syllabus, as an stretch goal for terminal lessons "},{"title":"❗ Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#-actions","content":"Open a ticket to add the Bandit to the terminal lesson "},{"title":"2022-10-27​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#2022-10-27","content":"Attendees: Sally, Ali, Greg &amp; Mitch "},{"title":"❗Actions from last time​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-from-last-time-3","content":"(3 tasks put back in actions for next time) "},{"title":"📝 Agenda points​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#-agenda-points-4","content":"Check github actions for unit tests for coursework repos​ need a ticket for thisunclear in how many places it is/isn't running@Ali is writing a ticket Ali is moving​ Problem solving workshop in WM​ basics to help trainees with their problem solving skillse.g. how do the start solving codewars: (understanding the problem, inputs, outputs)biggest problem is &quot;how to get started&quot;other problem is TV show: &quot;giant function nightmare&quot;TV show project could be better scaffoldedSuggestions: Maybe TDD could helpStarting earlier with complexityAdding katasScaffolding for how to solve the problem (how much scaffolding is too much? too little?) TDD intersecting with scaffolding (pre-writing tests)Write some broken implementations Need to make a changeEasier with an existing test suite -&gt; helpsNeed for a new test We don't expose students to (good or bad) codeWhat are we taking out of the course/coursework to make room for more problem solving? And the job marketAnd the TDDetc. We could make a lot less coursework mandatoryNeed a doc with some requirements probably starting with TV Show is the wrong placebreak down the requirements -&gt; and then figure out how we can distribute them Goals for TDD discussion next week​ Sally will make a post where we can post agenda pointsGreg has started working on a document "},{"title":"❗Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-5","content":"[] Sally: Post the fundamentals job ad[] Greg: For js2, create at ticket to create an exercise that can be done with both Blockly and Javascript[] Greg: Write a ticket forming a module team for Fundamentals (possibly with some steps that can be checked off)  "},{"title":"2022-10-13​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#2022-10-13","content":"Attendees: Sally, Ali, Greg &amp; Mitch "},{"title":"❗Actions from last time​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-from-last-time-4","content":" Sally: For HTML Karma-clone, create a ticket for a &quot;build a hamburger&quot; exercise that can be done with Blockly Sally: Organise a discussion around TDD incorporation "},{"title":"📝 Agenda points​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#-agenda-points-5","content":"Syllabus team recruitment​ Keep on the lookout for new members of the Syllabus Team 4 week React​ React module is being converted to 4 weeks ( along with all other modules )Potentially split week 1 - too densely packed at the momentS Africa very good at trialling new stuff - good place to trial new 4 weeks React Netlify deployment PR​ Polishing PR ▶️ https://github.com/CodeYourFuture/syllabus/pull/481Scope for more drastic changes to the Netlify deployment workshopProposal: take instruction pieces and turn into a guide, remove workshop and move content into HTML module "},{"title":"❗Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-6","content":"[] Sally: Post the fundamentals job ad[] Greg: For js2, create at ticket to create an exercise that can be done with both Blockly and Javascript[] Greg: Write a ticket forming a module team for Fundamentals (possibly with some steps that can be checked off)  "},{"title":"2022-09-29​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#2022-09-29","content":"Attendees: Mitch, Greg, Sally "},{"title":"❗Actions from last time​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-from-last-time-5","content":""},{"title":"📝 Agenda points​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#-agenda-points-6","content":"Forming a module team needs more work that being an &quot;action point&quot; Write a tickethttps://docs.google.com/document/d/1DbES2Ttw99AOT9Ib2Qe8HbAcFgIvxarv8iASFfFCWSA/edit?usp=sharingHave someone from PD part of the fundamentals module team -&gt; ask Elizabeth P2P learning should read and comment documentshould trial it (smaller city sounds easier than London)trial would have to have people (i.e. Mitch) be involved very directly to build up the culturehaving coursework on wednesday sounds really good Employer feedback incompetence with git (commits that are too big, merge conflicts, poor commit messages and PR titles) Sally video for trainees what CYF is and isn't "},{"title":"❗Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-7","content":"[] Greg: For js2, create at ticket to create an exercise that can be done with both Blockly and Javascript[] Sally: For HTML Karma-clone, create a ticket for a &quot;build a hamburger&quot; exercise that can be done with Blockly[] Greg: Write a ticket forming a module team for Fundamentals (possibly with some steps that can be checked off)[] Sally: Organise a discussion around TDD incorporation  "},{"title":"2022-09-15​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#2022-09-15","content":"Attendees: Barath, Lorenzo, Ali, Sally, Mitch, Greg "},{"title":"❗Actions from last time​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-from-last-time-6","content":""},{"title":"📝 Agenda points​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#-agenda-points-7","content":"Barath's marvellous machine 🤖​ (Raised by Sally) Barath started explaining certain concepts in JS like how array methods work Starting with an mental image and forming words to explain the particular concept - difficult with non-native speakers Barath wanted to devise a more visual way of explaining some of the concepts Built an awesome UI to visualise how some of the JS array methods work Enables you to change the input array elements, the iteratee and the array method you want to visualise The app can be found here Will really help with difficult concepts like the difference between map and forEach Great to extend this kind of visualisation app to other things like async code and HTTP requests Great to think about how we can use tooling to really get the most out of our trainees Next steps... 👣 Barath will continue using with LDN9Try it with a running cohortGet feedback and survey the traineesPossibly create a smaller version and make other methods discoverable ❓ CYF cloud track 🌧️​ (Raised by Sally) This is a Postgrad modulePedro originally ran an informal version of this course - people would go away and study something and then come back to discuss itTension between teaching something interesting vs teach something step by step that is useful to a companyTrainees can use free tier AWS accounts - but will be billed if you make mistakesPlan has been created here for the CYF cloud trackPossible dates: Saturday 17th / 24th SeptemberCourse is going to be more like a discussion with Q&amp;AFocus of module: have some sort of application that you need to deployWant to support unbanked students as part of digital inclusion so they can access platforms like AWSNeed to get the balance right between videos and resources and independent learning and too many passive videosSometimes trainees can get lost if the steps aren't clear and they're given too much independence - then have to introduce more structureThis ties in with some of the emerging issues re peer-2-peer learning Sprint planning / ticket taking 🎫​ (Raised by Sally) Autumn winter goals ⚾ Greg: Syllabus work for JS1 / JS2 with Richard, Transition materials for BlocklyAli: Teacher training pair up, Develop teaching community in London,Mitch: MVP Teacher training write up,Everyone: Continuing to incorporate TDD into syllabus, Organise a meetup to discuss JS1/2/3 and our goals TDD 🧪​ (Raised by Ali) Confusion around Enzyme raised by someone in SlackTDD asked for more and more by trainees and employersUseful way to teach new stuffDon't really teach how to write tests at the momentDon't actually run the tests either tooHaving tests that run in the browser is a potential goalTasks broken down with writing a test for each requirement: 1 a) Write a test that asserts some func returns []1 b) Write a test that asserts some other requirement ... Scaffolding for how to write tests properly with red-green-refactor etcNeed to keep modelling good TDD practices over multiple weeks "},{"title":"❗Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-8","content":"[] For js2, create at ticket to create an exercise that can be done with both Blockly and Javascript[] For HTML Karma-clone, create a ticket for a &quot;build a hamburger&quot; exercise that can be done with Blockly[] Form a module team for Fundamentals[] Organise a discussion around TDD incorporation  "},{"title":"2022-07-21​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#2022-07-21","content":"Attendees: Sally, Apoorva, Greg, Mitch "},{"title":"❗Actions from last time​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-from-last-time-7","content":" Sally: send list of some more people for React module team Ali: chat with Lily about more people for React module team Ali: coordinate with applicants so far for React module team Sally: follow up with ZA at some point about why they needed to conduct interviews "},{"title":"Fundamentals feedback​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#fundamentals-feedback","content":"Feels like we need a lot of TA support for FundamentalsAdd something to the module coordinator notes to think about the number of TAs required for a Fundamentals sessionTAs not assigned to a room in Scotland - so they all jump aroundThey need experienced people to guide them when they go off pisteLDN9 is a completely new group of volunteers - so good test of our unspoken assumptionsCovering a lot of blocks in the Fundamentals courseA lot of pushback from trainees, why are we using Blocks - like kids stuffFound the Blockly fundamentals homework overwhelmingGreg: The split up of the homework was arbitrary - so we can rearrange it so we can add some more homework to Week 1 if required, for exampleA section on MVP in Week 2 - not realistic for it to be completed in 10 mins - more like 20 &amp; 20 or 15 &amp; 15Students said stuff &quot;user stories&quot; wasn't importantFundamentals will give students a better though far from complete impression of what being a software engineer involvesCome up with a concrete outcome for the coursework - as trainees struggle to follow more abstract instructionsTrainees are very wary of people in institutions - experience of being lied to etcSome things like create a discussion in a slack thread aren't happeningSmaller spaces with games and retreat spaces good for breaking up large classes with 50+ peopleRainbird and interview selection figures are very similar - vindication for Rainbird!Assumption that Fundamentals is different because Fun is a lot bigger than the rest of the course. Fun was supposed to be capped to 40 and come down to 30 for the main courseWant to get a reduction in the early course dropout rate - target for next year60+ for fundamentals is too big!Need to keep encouraging trainees to ask questions in main channels and not DM TAsAsking questions, handling conflict are all essentials skills we need to keep developing in trainees as they progress through the course "},{"title":"Immersive program​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#immersive-program","content":"Far more selective and demanding than the main courseSee link for more detail -&gt; https://docs.google.com/document/d/1hNolfVFbwb3mYML3OaNw1zStACZbw5np-Obpx6eLtJ4/editCourse structure here -&gt; https://docs.google.com/document/d/1V6HEu_OcJ3MHH-aHzUfANf06VJa1rPcGHcpBwql7QLA/edit#heading=h.dgaqq1am7dquInvitation has been sent out to traineesProgram is designed around x5 10 day sprintsHardly anyone has applied for the course so far - despite there being no consequences for applying "},{"title":"Teacher training​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#teacher-training","content":"Currently running 2 iterations of the teacher training course in West Midlands and North West. West Midlands -&gt; completely remote, North West -&gt; Hybrid.Current format involves 4/5 x 2 hour workshops ( with plenty .of attendee participation and engagement). Using Miro to collect ideas - working well thus far.Course structure so far: take a section from a Saturday session and over the course of the workshops discuss and plan a short 20 - 25 mins lesson. The idea being that attendees ultimately feel more confident and empowered in taking on and delivering a section of the course.End of the course, Mitch is going to deliver the 20/25 mins of teaching that was planned and deliver it to the trainees on a Saturday class. Then volunteers will get the opportunity to observe what was successful and what can be improved next timeEmphasis on planning and teaching as an iterative process "},{"title":"❗Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-9","content":" For js2, create at ticket to create an exercise that can be done with both Blockly and Javascript For HTML Karma-clone, create a ticket for a &quot;build a hamburger&quot; exercise that can be done with Blockly  "},{"title":"2022-07-07​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#2022-07-07","content":"Attendees: Greg, Sanyia, Ali "},{"title":"Actions from last time​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-from-last-time-8","content":" Sanyia: to speak to potential Deliveroo candidate for global syllabus team Sanyia: start onboarding for Tom Daly for React module team Sanyia: speak to Carmen from Deliveroo for React module team "},{"title":"React module syllabus team​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#react-module-syllabus-team","content":"We have a team of 4 (including 1 grad) forming Ali is arranging a kick off call with them, likely next week Sanyia has a third Deliveroo person interested in volunteering Since we have a team forming, we think it's best to hold them in reserve for now They are interested in hands-on teaching in London, so possible a syllabus team wouldn't be well suited for them - suggested connecting with London organisers since London 8 are currently doing final projects and they nearly always use React Since we have a team forming, we think it's best to hold them in reserve for now They are interested in hands-on teaching in London, so possible a syllabus team wouldn't be well suited for them - suggested connecting with London organisers since London 8 are currently doing final projects and they nearly always use React Ali to write down some ideas for what the team could work on in the first few months "},{"title":"Blocky​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#blocky","content":"Greg still owes some review to Mitch "},{"title":"Missed agenda items​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#missed-agenda-items","content":"Sally had other meetings running over, but had some agenda items which we can cover next time 4 week revision updateCyf+ update "},{"title":"2022-06-23​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#2022-06-23","content":"Attendees: Sanyia, Sally, Ali "},{"title":"Actions from last time​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-from-last-time-9","content":" Sally: send list of some more people for React module team Ali: chat with Lily about more people for React module team Ali: coordinate with applicants so far for React module team Sally: follow up with ZA at some point about why they needed to conduct interviews Greg: set up a debrief with ZA (pending) - action! Greg: create a ticket for cypress testing in blockly - action! Ali?: take some time to review/give love to the group projects repo: https://github.com/CodeYourFuture/group-projects Ali: Recruit React Module Team (done-ish) and set up kickoff call "},{"title":"❗Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-10","content":" Sanyia: to speak to potential Deliveroo candidate for global syllabus team Sanyia: start onboarding for Tom Daly for React module team Sanyia: speak to Carmen from Deliveroo for React module team "},{"title":"React module team​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#react-module-team-1","content":"Sanyia has 1 definite joiner from Deliveroo, and 1 maybe joiner from DeliverooOnly 4 people have responded so far "},{"title":"Global syllabus team​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#global-syllabus-team","content":"Daniel leaving - looking for a syllabus team backfill (Sanyia may have someone in mind from Deliveroo) "},{"title":"Upcoming work​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#upcoming-work","content":"Sanyia - reactification of blocksDaniel - involved in creating an accelerator program to get students ready for high performing jobs (e.g. slack)Greg - cypress + contributing to blocklyAli - group projects "},{"title":"2022-05-26​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#2022-05-26","content":"Attendees: Daniel, Sanyia, Sally, Ali, Greg "},{"title":"Actions from last time​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-from-last-time-10","content":" Greg: set up a debrief with ZA (pending) - action! Greg: create a ticket for cypress testing in blockly - action! Check how solid the module teams are at the moment - Sanyia Ali?: take some time to review/give love to the group projects repo: https://github.com/CodeYourFuture/group-projects Ali: Recruit React Module Team (done-ish) and set up kickoff call Ali: Call with Elizabeth working on getting the PD changes merged into the fundamentals syllabus "},{"title":"❗Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-11","content":" Sally: send list of some more people for React module team Ali: chat with Lily about more people for React module team Ali: coordinate with applicants so far for React module team Sally: follow up with ZA at some point about why they needed to conduct interviews "},{"title":"React module team​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#react-module-team-2","content":"Only 4 people have responded so farPossibly not enough critical mass/skill so far?Maybe need clearer info about what applicants should tell us? "},{"title":"Windows machines​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#windows-machines","content":"What are the options for students starting on Windows?Windows is &quot;banned&quot;, WSL(2) is just not effective - the issue is the amount of support + create-react-app takes foreverCan't get anyone to build a boot drive for Linux (even after offering money)Enforce after the FundamentalsIf machine not powerful enough to dual boot Linux/Windows -&gt; get them a laptopMac is ok (ish). "},{"title":"Github teams​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#github-teams","content":"Why is Ali getting pinged about adding people to github? "},{"title":"Upcoming work​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#upcoming-work-1","content":"Sanyia - reactification of blocksDaniel - involved in creating an accelerator program to get students ready for high performing jobs (e.g. slack)Greg - cypress + contributing to blocklyAli - group projects "},{"title":"Many people in Fundamentals in NW​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#many-people-in-fundamentals-in-nw","content":"Multiple cohorts?Don't need fundamentals to be selectiveBut not good to try to run a cohort with not enough volunteers "},{"title":"2022-05-12​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#2022-05-12","content":"Attendees: Sanyia, Ali, Sally, ?? "},{"title":"Actions from last time​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-from-last-time-11","content":" Greg: set up a debrief with ZA (pending) - action! Greg: create a ticket for cypress testing in blockly - action! Ali: set up a Blockly Reactification call - action! Open issue for slack exercise in Week 1 - Sally Recruit people for React module team - Ali Check how solid the module teams are at the moment - Sanyia Talk about new Fundamentals with WM - Greg Arrange another call for markdown parser - Ali/Sanyia "},{"title":"Report from Hack your Future summit​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#report-from-hack-your-future-summit","content":"CYF was an early spinoff of HYF. Different in following ways Denmark, Netherlands, Belgium, DenmarkOperating on a franchise model (with own leadership and staff)Different outcomes because e.g. Netherlands has an apprenticeship model in the hiring companiesDon't graduate people until they are ready (part of how they've improved their outcomes)Not as much volunteer engagement/ownershipCompletely different curriculums in each franchise (w/ legal agreement that if outcomes are not met, franchise is revoked)In Denmark, companies pay to go into HYF to run a master class. HYF Belgium super interested in LearnLab. They would like to share/collaborate on curriculum Many projects we might like to fork and use + early JS modules. StudyLens tool might be interesting/useful https://github.com/CodeYourFuture/study-lenses Should potentially interact with HYF syllabus people in general. "},{"title":"React Module Team​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#react-module-team-3","content":"Advertise for itCome up with commitments required of team timeregular meeting (chair, minute taker)visibility (minutes)syllabus team member to come in for some amount of time to help bootstrapping)review PRs, including to courseworktalking to teachers/gathering feedback 3-5 members is the sweet spotNeed to ensure they take ownership: so far, no &quot;here's some ideas, here's where we'd like to take the module&quot;Need to discover what the contract that gives power, responsibility and ownership looks likeIf we wanted module teams to come to us with &quot;major changes&quot;, would have to define what &quot;major change&quot; means.How would the module team interact with syllabus team? Maybe 2-4 x per year retro will all? "},{"title":"Fundamentals​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#fundamentals","content":"ZA are going to do some interviews following fundamentals "},{"title":"Miro​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#miro","content":"Mitch: is there a CYF MIRO board account?Greg: maybe can manage with free account?Sally: we have Figma for ed "},{"title":"Unconfuse Greg​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#unconfuse-greg","content":"PD portion will be in the fundamentals syllabusSally's code review sessions are for Buddies: how much code review to do, good strategies for working with buddy groups, making sure that people know how to use github, etc. "},{"title":"CYF online?​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#cyf-online","content":"In order to happen would need to solve People are often isolated - doing CYF online does not help much with thatMeetup in person has much better outcomes for EnglishMeetup in person has better well being and employment outcomesCity based meetup means volunteers are embedded in the local tech scene, where the jobs are "},{"title":"Misc​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#misc","content":"Have had applications to 4-week-ify the syllabusClasswork is setup in google classrooms (ready to be cloned an can be set in advance) "},{"title":"❗Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-12","content":" All: take some time to review/give love to the group projects repo: https://github.com/CodeYourFuture/group-projects Ali: Recruit React Module Team and set up kickoff call Ali: Call with Elizabeth working on getting the PD changes merged into the fundamentals syllabus "},{"title":"2022-04-28​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#2022-04-28","content":"Attendees: Shaun, Sally, Denver, Greg, Mitch, "},{"title":"Actions from last time​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-from-last-time-12","content":" Sally: move meeting invite to Thurs Greg: set up a debrief with ZA (pending) - action! Sally: share intro to CYF slides with Greg Ali: set up a Blockly Reactification call - action! Greg: create a ticket for cypress tesing in blockly - action! Daniel: progress JS1 module project "},{"title":"WMCA deal​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#wmca-deal","content":"A lot of work to adapt the course to the requirements of the WMCANot signing the deal - too much work to contort the course "},{"title":"ZA Fundamentals (Denver)​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#za-fundamentals-denver","content":"Well received thus far after 2 weeksLiked/learned/loved retro - mostly liked :)CYF blocks was well receivedLack of JS syntax in this sectionStudents expressing desire for physical class Blocks​ Some display problems for some machinesA few other issues occurring for some traineesDenver and others to document all the issues that arose from this iteration of FundamentalsClarity needed about how objectives are related to the lessons at the momentTrainees usage of Zoom - use of &quot;Raise hands&quot;, Slack chaos at the moment - need a session on effective use of SlackNon-audible learners - discrepencacy between use of Slides and non-use of SlidesInsufficient number of mentors at the moment, half a cohort in a single breakout roomShaun and Denver solve Slack chaos - create a solved and issues thread to order some of the messagesAdd slack exercise on week 1 - we can add previous exercise from earlier Fundamentals versionSlackbot encouraging students to post on Slack ?4 high level goals of fundamentals- how are they doing ? I'm part of a cohort Super chatty, too chatty ?? 😛. Meeting up independently Start as we mean to go on Some students not completed homework but most handed inSplit trainees ( 4 per mentor ) for mangeable workloadNot deep marking, more &quot;Is this work complete?&quot; - deep marking not scalable Breaking down problems Enjoying the games used in Fundamentals so far Shipping it Everyone successfully shipped by week 2! "},{"title":"Training for TAs/teachers​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#training-for-tasteachers","content":"Arrange CFY teacher training "},{"title":"Reamining Blockly PRS​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#reamining-blockly-prs","content":"Greg to check and merge these PRsWait for other PRs to get merged before tackling &quot;Greater than 11&quot; "},{"title":"Teacher training thus far​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#teacher-training-thus-far","content":"5 people attended last SaturdayMaterial still in developmentLive streaming + recording coming soon "},{"title":"Module teams​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#module-teams","content":"Recruitment doc for React module peeps "},{"title":"Blockly toolbox parser​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#blockly-toolbox-parser","content":"Sanyia to go through the toolbox parser PR and the current approach "},{"title":"❗Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-13","content":" Open issue for slack exercise in Week 1 - ? Recruit people for React module team - Ali Check how solid the module teams are at the moment - Sanyia Talk about new Fundamentals with WM - Greg Arrange another call for markdown parser - Ali/Sanyia  "},{"title":"2022-04-13​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#2022-04-13","content":"Attendees: Sally, Greg, Daniel, Ali, Sanyia "},{"title":"Actions from last time​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-from-last-time-13","content":"Sally: Sanity check fundamentals - doneDaniel: Ticket for shop idea - still outstandingGreg: Ticket for project - still outstandingGreg: Coordinate with ZA on feedback - doneSally: Ticket about devtools - doneMitch: PRs for blockly - done "},{"title":"Agenda points​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#agenda-points","content":"New meeting time Thurs is the new day!7:30pm ZA doing Fundamentals module General positive feedbackAsked interesting questionsFound a bug, got fixedIssue - Teacher might miss the wider picture/general goal Suggestion: cheatsheet of goals for each exerciseAlso can we integrate this in such a way that involves trainees - so they don't get distracted with the wrong goalDid the mentor notes not get read? Greg would have to ask them JS1 module project https://github.com/CodeYourFuture/syllabus/issues/421...Sorry, missed a bit - had to get the door...Goals Get reviewer to think about how they express themselves - nudge towards answerGet trainees thinking about how there are different perspectives on code Why is just telling the answer a problem? The suggested exercise is structured so that the reviewer would know the correct code. I.e. there's no code problem solving for the reviewer. Instead the goal is to write a response without &quot;giving away the answer&quot; Sally showed the idea to her brother (who does lots of code review) His criticism was that restricting what can be written in the response is artificialHe suggested that we give &quot;canned messages&quot;/&quot;cards&quot; that trainees could pick from Some discussion of how these cards are structured Peer review has been a struggle in the past Trainees just give &quot;pointlessly&quot; positive feedback - no actionable feedback We could experiment with a small group of trainees to see how it goesNext steps Daniel to write up a PoC exercise and trying it out with some trainees OpenClass Course-making interface Ala Google Classroom Structured around mastery concept - have to demonstrate mastery of a concept before moving onCan have a free, whitelabel environmentCourses are remix-able, so could have a core course that could be tweakedNext steps: think about it Greg's presentation at Blockly summit Are there some intro to CYF slides? Sally to share with GregAnyone available to review? Sally should have some time. Ali potentially too Shout to Mitch for making easy-to-review PRs for Blockly! "},{"title":"Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-14","content":"Sally: move meeting invite to ThursGreg: set up a debrief with ZASally: share intro to CYF slides with GregAli: set up a Blockly Reactification callGreg: create a ticket for cypress tesing in blocklyDaniel: progress JS1 module project "},{"title":"30-03-2022​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#30-03-2022","content":""},{"title":"Present​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#present","content":"Sally, Greg, Daniel, Mitch Agenda Items "},{"title":"Sanity check Fundamentals​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#sanity-check-fundamentals","content":"What is the project? Week 1: ship personal home page (from intro to digital)Week 1: imaginary user stories for imaginary projectWeek 2: defining user stories for own websiteWeek 2: choose a user storyWeek 3: do some more of it We floated the idea of a &quot;shop&quot; page Step 1) make what we have make sense, let’s start with @Greg: Make a ticket for making a project@Daniel: we can make a shop -&gt; make a ticket for it@Sally: consolidate current version to make sense, based on improving the personal home page "},{"title":"Coordinate with ZA on what feedback we would like​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#coordinate-with-za-on-what-feedback-we-would-like","content":"— how long homework takes — do they want some padding out of homework @Greg will look into coordinating that w/ Lana "},{"title":"Blocks​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#blocks-1","content":"@Mitch will be raising some PRs for blockly @Sally will create a ticket to add a piece about mentioning devtools (bigger idea for console: good exception messages based on the available ideas) "},{"title":"Teacher training​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#teacher-training-1","content":"Mitch trying out things in Manchester Tried to build on &quot;imagine you were teaching fundamentals&quot;, what concepts would you teach? How would you teach them? (analogy, example, etc?) Attendance: grads + experienced teachers Sally has a contact with someone from &quot;Coders who teach&quot; "},{"title":"Code review​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#code-review","content":"Sally wants to do some sessions on code review Grading is cancelled, but code review is really valuable How do we make it low effort for mentors? (so there isn’t a spread between super detailed and not done) Buddies doing code review? it’s high effort for the first review (grok what the exercise is about)it then gets mostly ignored Students doing code review? sometimes poorly informed Ideas for getting code review to happen, how to make it valuable and useful students should have to modify based on reviewship it (confirmation that it’s good)review is the precursor for working together @Daniel and @Sally will work on Code Review module project for JS1 Bigger ideas can come later. "},{"title":"Entry and exit criteria​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#entry-and-exit-criteria","content":"Final projects already has an entry criteria (be ready to contribute to a final project) And it needs to have an exit criteria that is clear so that people are not surprised when they are told to they need to do their own final project e.g. https://docs.google.com/document/d/1jMxqI0L7IKFENCQ8Lw-D1lhnj3c3RZI_WK808wG4YJM/edit#heading=h.8bipiccmzk3c For other modules module projects -&gt; DECIDEDmaybe a small set of &quot;if you don’t have skill X, that’s definitely not ok&quot; What will we do with our entry/exit criteria? -&gt; something to think about "},{"title":"4 week restructure​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#4-week-restructure","content":"Still need to make progress on it @Sally pay someone to do it "},{"title":"TDD​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#tdd","content":"Greg learnt some stuff the rules of engagement of TDD need practice (what am I allowed to modify when?)Creating exercises that incrementally build a piece of functionality would be useful (then taking that scaffolding away)Solving an exercise with TDD takes a really long time at first (1h+ for 4-5 tests)Setup can be tricky (esp for react) - or more specifically, troubleshooting if something in the setup is wrong or you tried to do it by hand "},{"title":"Greg no longer available on Wednesdays​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#greg-no-longer-available-on-wednesdays","content":"@Daniel will do a doodle "},{"title":"03-02-2022​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#03-02-2022","content":"Attendees: Ali, Greg, Sally, Daniel, Mitch "},{"title":"Agenda​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#agenda","content":"Celebrating fundamentalsWelcoming SanyiaSprint planningPlan for 2022 "},{"title":"Celebrating fundamentals​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#celebrating-fundamentals","content":"Woop! 🎉 Go Fundamentals - now published!Fundamentals training starting on 12th Match for S African volunteersFundamentals starts in April with South Africa Class 2 "},{"title":"Plan 2022​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#plan-2022","content":"Improve student trackingFurther empowerment of module teamsCross module threads: code review, TDD, problem solvingProblem solvingIntegration with PDWorking on students with code reviewsModule contracts - Well defined prequisites and outcomes for any module on the courseIterate on module template for Code Your FutureSuccession planning: learning how to hand things over in a sustainable way 🤔 "},{"title":"Module teams & expectations​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#module-teams--expectations","content":"Work needed to ensure that module teams are meeting regularlyGetting alums to attend syllabus meetings - really valued input as they've just done the coursesMake teams more accountable on Slack - have bots that remind about meetings in public channels ?Someone could join JS2 to support them with getting through some tasksDo we need syllabus team folks to join the module teams to get them going ( time limited ) "},{"title":"Welcoming Sanyia​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#welcoming-sanyia","content":"We welcome Sanyia to the Syllabus TeamSoftware Engineer at Deliveroo Started at CYF 2 years agoSome node module changes proposals ( Barath / Sanyia ) - Use of wordle in Lesson 3 of the Node module Re the proposed Node module changes​ Build a CLI tool in Node - fun standalone activity written in Node ( independent of http and network requests ) ?Possibly add the activity to the 1st lesson in Node "},{"title":"Sprint planning​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#sprint-planning","content":"Syllabus project board to undergo a lot of trimming down and breaking out into module boardsCreate a wordle exercise for Node ( Sanyia )Blockly project board updated with new tasks "},{"title":"S Africa mentor training​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#s-africa-mentor-training","content":"Greg to lead with support from Mitch 12 MarchMention pedagogic techniques in remote environment: no slides, cold calling, screen sharing, live code demos etc ... "},{"title":"❗Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-15","content":"(Daniel) Create a private channel for more private discussions See #cyf-syllabus-tech-private(Daniel) Move 90% of tickets off the syllabus planning board(Ali) Create module contract document(Greg) Work out objectives for more TDD content in the future "},{"title":"2022-02-16​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#2022-02-16","content":"Attendees: Ali, Greg, Sally, Daniel Fundamentals What is left to do GuidanceCopy across pair programming exercise from original fundamentals LinkWhere to fit it? Week 2ACTION: Greg to figure out what needs to get done in blockly Blockly Now hosted hereNeeds a quick intro in the syllabusReact-ifying Ali made a start on a Blockly-React integrationBut the next bit of work is probably to work on tabs etc Looks like first fundamentals will be in April (probably) What are we doing in Edinburgh? Fill in missing gaps for fundamentalsHackathon on BlocklyPriorities for Syllabus "},{"title":"2022-02-02​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#2022-02-02","content":""},{"title":"Present​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#present-1","content":"Sally McGrath, Mitch Lloyd, Daniel Wagner-Hall, Greg Dyke, Ali Smith, Elizabeth Zeddie Lawal "},{"title":"Minutes​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#minutes","content":"Meeting Elizabeth New Head of PD &amp; WM LeadStarting in MarchVision 360 PDLocal PD framework that can be implemented on a global level 3 month plan outline PD Content creation/consolidation Develop bank of resourcesAim to mirror some of the writing style of Edu syllabusExperiment &amp; verify in WM Look at PD structure Content, Employability, Pastoral Looking at how to showcase employability skills How can we showcase our traineesWhat are employers looking for and how can we embed that into traineesCan we support employers to changing hiring practices (e.g. with DEI initiatives) Understanding trainees with data Wanting to be a fly on the wall - learn from syllabus teamDiscussed how we want to work together more It's hard to split topics across PD/Tech EduTech Edu don't know what the PD syllabus is! Scotland trip To coincide with GLA demo day: 26th - 27th FebDaniel is moving, but happy for us to go ahead without usMitch was a yes (I think)Sally is going anywayLet's set some goals in the week &amp; get GLA folks involved Fundamentals training for Cape Town Lana was worried - messaging Greg &amp; SallyWe could talk to them and walk them through it Give specific guidance &amp; support Sally thinks they're not starting for a couple of months Hope to start on 5th March Sally has proposed metrics for classes So we don't overstretch ourselvesSally has talked to some schools about reaching targets before starting new class But it's ultimately up to the volunteers Oridinarily Cape Town would start new fundamentals first Try to capture some notes - that we could use as a basis for committed volunteer notes Supporting schools with employment Cape Town have access to BarnySally gave advice to keep working on projects etcAli's direct experience: grads don't have lots of useful stuff on their Github Graduate module is supposed to help with this But who's responsibility is this?Idea for improvement: after working on a group project, make sure they fork it onto their account, so that it shows up in the list of repos Some grads need further work before they're employable WM update Have now accepted the contractAccepting ~100 trainees "},{"title":"2022-01-19​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#2022-01-19","content":""},{"title":"Present​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#present-2","content":"Greg Dyke, Sally McGrath, Ali Smith, Mitchell Lloyd, Daniel Wagner-Hall, Sanyia Saidova "},{"title":"Minutes​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#minutes-1","content":"Fundamentals syllabus outline is up - holes to fill Blockly is currently just TODOs - up to Greg what that should look like.Ship it - needs filling in The first one we should do in class (because they'll get stuck and need help), after that can be more flexible about shipping happening as coursework Prayers Main problem is prayers in the afternoonThe times can change - so we can't specify breaks globallyIt's important for someone running classes to distribute a schedule (to trainees &amp; volunteers) for the day beforehand so that any issues can be addressed Sally has told coordinators this [I think]Not sure who's going to be the first class to do new fundamentals - South Africa and West Midlands are contenders, but unsure exactly when either will start their next course. SA are doing their next course pure online.We should probably be on-hand to help out with the first run or two (particularly for the Blockly stuff). Would be good to at least show up to a planning session before someone runs it. Node syllabus: Sanyia has a PR open - tl;dr is to have trainees who haven't got the pre-work to use the Heroku Walkthrough from a video, we should merge this PR in the short term while we consider bigger long-term changes. Not sure if it's over-fitting to the West Midlands session. Do others see the same issues? Some trainees didn't have pre-work set up (e.g. glitch albums, heroku projects), and didn't have Heroku context/background. Scotland just didn't bother teaching Heroku because it's so fiddly and would be confusing.Not sure Glitch is a great fit for CYF - it's yet another surface, it avoids IDEs and CLIs and so on.Long-term, we want a unified frontend / backend platform for &quot;ship it&quot; theme - rationalise onto consistent platforms trainees build up experience with.Short-term: Sanyia has found a good video that introduces Heroku, which may help get people started. Maybe in groups have TA share video and students code along.Maybe this could be prep coursework, but that would take away ~60 minutes of content we'd need to replace in-class. Scotland found trainees didn't know what HTTP was (e.g. request types, paths, etc), so ended up filling a lot of content with that. Also had trainees write a React app and then write an API to back it - ended up doing a pretty big rewrite, but covered most of the syllabus minus Heroku. Filled the time pretty well.West Midlands class seemed to have a decent understanding of HTTP. Not sure where they got this knowledge - probably just someone teaching well, as it's not really good enough anywhere in the syllabus. Scotland did a fairly big rewrite on the fly - may be worth folding a lot of it in. A lot of time was spent teaching things like how to maintain a git repository - branches, etc.Alternative could be to set up a repo that they all use which we maintain - would keep everyone doing the same, but may take away some of the understanding of how things fit together and what the stages are. Is the Node module the right place to be following Heroku guides, or can we move this somewhere else?One of the really nice things about the current set-up is that it gives rise to a lots of opportunities for discussion. Thoughts on the City Guide / Paired Progamming piece (one person writes frontend, one writes backend, fit them together) Probably the wrong time for it - the person doing React will probably not take as much from it (and may not remember React very well - we should also put in some work to make sure they don't forget React at the end of the module). In the long term, we should probably have them working on frontend and backend in concert to keep them practiced at it (e.g. quote generator, to do list, etc).They'd also forgotten create-react-app, and also didn't know how to integrate a frontend and a backend in one repo. Greg has a starter repo we should look at and clean up. Separating who implements each side isn't a great iterative development experience - more likely to lead to significant integration issues.Maybe we should enforce &quot;swarm on both&quot;. We got past feedback from the SQL module leads that people weren't particularly comfortable with Express. This WM class don't seem to have have this same issue.Enough strong students in each breakout group meant people could work things out decently. Unclear whether the weaker students could do it by themselves. Learning Lab Brief: Create a module project for JS2, introduce concepts of working in an agile team. Introduce some of the key roles, some of the dialogues these roles may have.Could maybe extend to have slackbots playing some of these roles.Content is fairly simple, but questions around how we roll it out. [Live demo] Have set up a &quot;Start a project&quot; platform as a GitHub app.UI similar to GitHub Learning Lab, but GitHub's is a set of very step-by-step recipes - this is much more high-level &quot;do a task, you work it out how&quot;.Step 1: Install Malachi Bot. Automatically files an issue introducing Malachi as the Product Owner. When's this for? Slotting in around the content of JS2, probably mostly as an additional homework track. If we end up reordering JS1/JS2 content, how much of an issue will that cause? Let's treat this like a prototype and see how it goes.Split between two &quot;tracks&quot; - project managementy stuff, and &quot;the actual code in the project being managed&quot; stuff - the &quot;actual code&quot; part is customisable to changes, but the framework is really generic. London start JS2 on Saturday - have two days to get something production ready.Long-term, can hopefully introduce consistent concepts across the entire course (e.g. seem bots in same roles).A lot of this content feels very PD-ish (though definitely with an Edu leaning), how are we engaging them? The 4-week shift will hopefully make PD and Edu around each other more, and make it easier to pick up this kind of collaboration. JS2 maybe should be solo, but how will we be turning these kind of things into group projects in the future? We'll iterate to work it out. Tracking trainee progress Currently entirely stateless, but we should start tracking more analytics. Informally presenting at EdinburghJS tomorrow - Daniel will share link to talk. Blockly Have gathered feedback - most just needs actioning, some needs more discussion.ID vs CSS selectors: Let's just use IDs. Had been thinking CSS selectors because it's useful spaced repetition.Exercises and projects don't actually use CSS selectors in any interesting ways. Do we want to use them anyway?CSS is probably overkill. Let's just use IDs.Some people also push the idea that you should only use IDs for interacting with elements from JS.Also, people can build more on Blockly in the future if we need - don't need to try to solve all problems in the first iteration of one module. Generated code - how close should we keep to the styles we teach (e.g. arrow functions vs &quot;function&quot; functions)? Using the function keyword may be useful because it's self-documenting? Let's do it. Variables Originally tried minimising use of variables.Actually motivating variables well is kind of hard.When doing a to do list, can't do multiple DOM-context things manipulating values (e.g. an &quot;at start&quot; and &quot;on click&quot;) without variables.Daniel to follow up with Greg offline about the second variablesHow many of the projects actually need variables? If not many, maybe we can just strip them all the way back. Will check.A loop variable is something more than that - more the language storing something for you rather than you storing something. What are the final exercises actually going to be, and do they really need to be as complex (particularly with arrays) as they currently are? Greg willl look and consider. What about duplication between Code.org and blockly? Code.org does control flow stuff pretty well, but there's a small subset we actually need.Probably focus as much in Blockly rather than Code.org because Code.org is much nicer and we don't want them getting frustrated. Also want them to have as much TA support when starting off.Can we upstream this stuff to Code.org in the long-term? Would be great to get more people using it, more people maintaining it, and get the Code.org polish on it. Code.org seems very fixated on things like moving sprites around on screen, not sure why there isn't much like what we're currently doing. Maintenance plan? Move custom JS to a React appBlockly is also a bit niche. Tasks to do? Greg to triage into must/nice/wishlist, and what's best for Greg vs someone else to do. "},{"title":"Action items​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#action-items","content":"Sanyia: Make minor edits to Node week 3 PR and merge.Daniel Wagner-Hall: Follow up with Greg about variables Blockly question.Greg: Triage Blockly issues into must/nice/wishlist, and claim ones that Greg should probably be the person to do.Daniel Grant: Share EdinburghJS link in channel.Daniel Grant: Make sure learning lab stuff gets deployed (via Pedro).Sally: Organise a call for everyone to fill out Fundamentals GitHub repo over the next few weeks. "},{"title":"05/01/21​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#050121","content":""},{"title":"Present​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#present-3","content":"Ali, Mitch, Chris, Sally, Greg "},{"title":"Minutes​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#minutes-2","content":"Fundamentals Sally worked out the timings (incl PD things): https://docs.google.com/spreadsheets/d/1nKm9cwfYzyPGt2W_P9GQPPavmnD5zFEeTTQTdOgpRVg/edit#gid=0Red is immovable stuff, otherwise divided into planned workBlockly Greg's planned schedule Week 1 - Code.org, intro blockly, intro user storiesWeek 2 - ? [missed this, sorry]Week 3 - homework consolidation, delivery (reduced the amount of time to complete) Still need to review v4 https://laughing-goldberg-6b25f5.netlify.app/ Code is still on Greg's github - wants to transfer to CYF github Sally volunteered to make it look nice :) Greg has worked with Neill to develop the contentIdea from SA Have a blank block editor - can be done via intro page Project Sally brought up idea of a &quot;shopping cart&quot; - scaffolded out by us This might be constrained/unrealistic - would be dummy buttons Greg was thinking about the landing pages will all be done We need to nail down what this actually looks like - SA need to have time to build this out Brainstorm some ideas for user stories to update a personal homepage As a visitor to your home page, I want to leave a comment Estimation exercise idea Give user story, then make guess at number of blocks (or time?) needed to implement this, then actually implement itDiscuss the disparity between guess and realityLearning outcome: estimation is hardLearning outcome: how to &quot;cut your losses&quot; on a particular impl if it becomes complex Delivery Introduced early - drag/drop onto NetlifyNo need to make it more complicatedJust reduce the amount of time to complete this over the 3 weeks Greg's Blockly principles: let students write all their own code -&gt; they feel greater ownershipindexing into arrays (and tracking variables with indexes, and for loops) is a complexity to be avoided at this stage -&gt; everything is with push, pop and forEachreferring to &quot;arrays&quot; (rather than &quot;lists&quot; recommended by blockly), to avoid the confusion of lists vs html lists.Scaffolding that fades: pressing runwhich specific blocks to use and where to find themdetailed step by step (only for introducing new blocks/concepts) problem solving. Some exercises deliberately look into iterative coding, rather than coding everything at once Lists of linksArrays and html lists Static html vs creation with blocks - main reasoning is that adding event listeners is cleaner against elements in there from the start (otherwise you get very deep embedding)Generated code: it's readable and at some point it's worth taking a look at it (and definitely worth revisiting during JS1 or JS2) notesSome missing functionality is a bit arbitrary no string concatthe target element inside event listeners isn't directly availablerecords (could use arrays within arrays rather than multiple arrays) &quot;At the start&quot; does nothing except act as a container Next starting class would be South Africa Maybe: 29th Jan - Sally advised against this, so probably will be pushed back Changes to JS modules Moving to 4 week modules, but PD is spread out through the modules. Which means that the exercises need to move to a week 4 repoWe need to review the PRs before Sat, so Barath can teach in London Suggested alternative strategy of moving changes to a fork So that we can keep syllabus, exercises, solutions, etc in lockstepChris to follow up with Barath about doing this Let's try to focus on just moving the content across repos, we can follow up on updating/adding/removing exercises We don't really have a lot of capacity to review large changes If we're happy with the change then we need to make sure we've updated all the appropriate pages for exercises spreading out Sally can ask Dom about doing this Intro to Digital Sally read a bunch of trainee's codeOne thing that came out of this: &quot;what is frontend&quot; Discussion of composition of components - there's a piece of the React module which isn't really tied to React directly. Can we move this forward to e.g. HTML/CSS? But this is out-of-scope for this piece of work Sally put together: https://github.com/CodeYourFuture/CYF-Sass-In-React to discuss CSS theming/good practice Syllabus is on master as default branch This is the exception - most other CYF repos use mainLet's move to main "},{"title":"Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-16","content":"All to develop 4 user stories for a Blockly &quot;project&quot;All to review Blockly v4Tell Nirmeet about changes to JS2 - spreading out of exercisesChris to chase up Barath about changes to JS1Move syllabus repo to main default branch "},{"title":"08/12/21​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#081221","content":""},{"title":"Present​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#present-4","content":"Ali, Daniel, Sally, Greg "},{"title":"Minutes​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#minutes-3","content":"Update on Fundamentals Matrix spreadsheetGraduation criteria Was struggling without knowledge of specifics (e.g. exercises). Hopefully can now make more progress on this However Ali (and we think Chris) are very busy at the moment Need to get PD involved Can mandate &quot;testable&quot; criteria Blockly Greg might need some support - since Mitch might not be available Technical work is getting thereNeed to work on exercise progressionAli may have some time next weekSuggestion: Neill - Greg will ask him Next steps Needs some polishing in terms of the UI What is the done state? Can't be frustrating, but doesn't need to look &quot;professional&quot; No point in super polishing now, since we'll want to iterate on it after first round of trainees using it How much work is there left to get there? Greg wants to get updated exercises ready for next Wednesday Week after we'll be in a better position to come up with a list of tasks - can prioritise from there Requirements/Iteration/Delivery Sally hoping to have a draft ready by next week We think it's on track 🤞 Daniel Grant's JS2 project Feel free to reviewSteer towards to a structure replicable in other modules TDD workshop Sally has arranged a workshop for Scot5 &amp; NW4 Cover letters Ali has a job opening for CYF grads Will give honest feedback based on interviews Need a cover letter This is a blocker for many trainees, we think because cover letter templates online often don't line up with trainee's experiencesIdea: can we create our own templates - something for PD "},{"title":"24/11/21​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#241121","content":""},{"title":"Present​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#present-5","content":"Sally, Chris, Greg, Daniel "},{"title":"Minutes​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#minutes-4","content":"Previous action items Chris: Running through draft Fundamentals Learning Objectives Largely removed all the stuff that's unmeasurable, kept the stuff that seemed very important, and added new pieces based on our discussions.Left some stuff which definitely needs PD input.Need to think about how we are going to get input from the cities. Probably start sharing now-ish? Daniel: &quot;Requirements&quot; week content. Currently blocked on: What is the multi-week project going to be? Project thoughts: Maybe similar to a personal home page, but with some different content?Needs to be a website which does something.Maybe about a product? (Can be real or fake product)Some kind of online store where you can select a product and add it to a shopping cart (with the help of blockly)? Just: View product(s), add product to cart. Very light shopping cart (basically: two lists - available products, and added products) Mostly need to focus on Week 1 (Requirements) and Week 3 (Ship it) - Iteration is basically just &quot;keep going&quot;.Need to give some thought to coursework, too.End-points of each lesson is &quot;Make sure you've done this week's focus at least once, and keep going&quot; i.e. End of Ship It class they need to have shipped something to Netlify (because people will need hand-holding), and coursework is likely to be &quot;Do more and make sure it's shipped&quot;. What needs doing? Filling in a few TODOs in the first session.Put together an intro to the project session. People seem to be enjoying Scrimba - maybe we should set more. Scrimba is roughly: Kahn Academy, but you can pause the video, edit the code they're writing, and run it. Interface is magic, and the trainees really like it.We may have an in for a creator account - Chris will coordinate with Sally. Greg: Data sturcture abstractions for Blockly Beginners often struggle with classic for loops (need to manage a lot of concepts). while loops are easier to get started, and upgrading from while to for generally makes some sense.Put together a linked list implementation using while loops.Naming is hard: Calling it a list is tricky because conflicts with the concept of an HTML list.Calling it an array is tricky - doesn't do indexes and such, and keeps some state.forEach is maybe doable, and would be compatible with arrays, but most exercises involve previous/next.Considered a circular data structure (works well for carousels, doesn't work so well with e.g. lists of stories). Use-cases: Problems on https://laughing-goldberg-6b25f5.netlify.app/Probably just use a stack (or pair of stacks)? Push/pop make sense and carry forwards to arrays, isEmpty makes sense. Getting stuff done Sally will at some point just clear her calendar and get a bunch of it done (but can't do it all).Get a spreadsheet set up for how we're going to time-box each of the topics we've discussed into a syllabus. Split into what just needs writing and what needs brainstorming. Daniel Grant is writing a module project for JS2. Idea is very product-focused. Introduce the roles of a typical agile team (product owner, scrum master, tech lead, developer, etc) in a lightweight manner (seeding ideas they'll better understand via PD and in final projects).Via a simulation of a project, with different roles prompting at different times.First implementation: Notes in the syllabus. Future implementation: a conversational slack-bot. Suggestion: Write out ~50 markdown files and experiment with them, not a slack bot in an MVP. Dom Vineyard is thinking about a JS1 module project. May also involve a slack bot. (Also has a background idea to integrate code review into slack with auto-completable common suggestions). Greg is scheduling a Node chat with Kerim and Sonia - Greg will be the syllabus point of contact there.JS1 team recruiting: No progress from Daniel, should hand back to someone else.Dom put together a technical assessments proof of concept One repo which has the solution in, tag with with magic comments, and pass it through a build step which removes the solution code and replaces it with a TODO comment.Massive job, could be hassle for Code Your Future, but we could try to do it at some point. We have a bunch of different styles of problem - unclear whether &quot;just comment out some code&quot; is a sophisticated enough model for our exercises. "},{"title":"Action items​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#action-items-1","content":"Greg: Prepare post to share new Fundamentals Learning Objectives with the cities. Find and tag all the programme managers: @cyf-proms.Sally: Push forwards Requirements sessionsGreg + Daniel: Hold brainstorming session for things we need to do.Sally: Facilitate Greg + Chris to give feedback on Daniel Grant's work in progress. "},{"title":"07/10/21​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#071021","content":""},{"title":"Present​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#present-6","content":"Sally, Daniel, Ali, Chris "},{"title":"Minutes​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#minutes-5","content":"Greg to continue to work on BlocklySeveral grants have come through so we may have the ability to spend on the Syllabus team (early next year)Fundamentals Greg to continue to work on BlocklySyllabus Team Goals: https://docs.google.com/document/d/1fc-c9NZQPtBieftrvTXj3yiwU0HLBZ68bnagHja1NsE/editLondon 8 Results Both tests that were run were good successes - Blockers and Shipping a WebsiteThese have been merged into the current syllabusThe instructions were very helpful for Blockers Exit Criteria Could we provide a buffet of graduate criteria that volunteers can pick from?Could we use a self assessment for the students&gt;Actions Raised PD Content How much time do we need for PD?This should be interleaved as we're planning to do for HTML/CSS HTML/CSS (#LDN8 Plan) Lucy (#LDN8 Teacher ) to include netlifyAttempt for interleaved PD through this module Module extended to four weeks with 90 mins per day for PD Module Gardeners Ongoing search happening here "},{"title":"Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-17","content":"Chris: Ticket for KPIs for Fundamentals to be writtenChris + Ali: Over the next two weeks, work on the KPIs for FundamentalsDaniel: Work on skeleton for two 90 minute sessionsGreg: Continue to work on Blockly "},{"title":"13/10/2021​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#13102021","content":""},{"title":"Present​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#present-7","content":"Sally, Mitch, Daniel "},{"title":"Minutes​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#minutes-6","content":"Mitch is running the “intro to coding thinking” course at Cornerstone starting late October - 3 sessions, probably mostly offline. Sally’s going to be out of the country for ~November Sally hacked together a trainee tracker. Has also promised Candy she’ll hack together a PD tracker. Seeking our input: Put some milestones in the course (clearly communicated up-front) where we explicitly make clear to trainees where we think they are. Not intended to be blockers, just status check-ins.Except end of JS3 - if the work hasn’t been done, won’t progress to final projects. Most of the people Sally’s been working with are surprised by their status.One milestone check-in led to a good conversation about someone who'd done lots of work but hadn't shared it. Great outcome!NW folks are way ahead of the milestones being set.Need to make sure we have “here’s how we’re going to enable you to move forwards” paths for folks who are falling behind milestones.&quot;Next steps&quot; outcomes Sally has collected These conversations should start happening around JS3 to give people time to make change if they need/want. QA: Don’t want to push people too strongly towards it because it can be easy to get pigeonholed in and hard to get out of if that’s not what you want. Currently have no one wanting to go into QA anyway A few folks did some extra learning before moving on to final projects, and joined another class's final projects - this went really well (both for the folks who took extra time, and for the groups they joined). PD team update Approached Sally to ask about changing the whole syllabusWant each tech module to be 4 weeks - get rid of PD weeks.Want 90 minutes in every live session to do a PD session.PD volunteered would need to be present for some of every class, and work more closely with tech volunteers.Would want to theme PD work to support the tech focus of the week.Stretching 3x 4 hour sessions into 4x 3 hour sessions sounds fine.Questions around timings and consistency for volunteer engagement. Probably want the PD session to be start or end of the day to avoid both tech and PD volunteers getting a bunch of extra down-time in their weeks. Sally: Please review my pull requests! Teacher Training Mitch volunteered to do some teacher trainingAim is to diversify our teachersWas aiming for emphasis to be on React and Node, but interested seemed to be more generalDo we have any resources? Yes! Sally will share Chris’s slides and some other stuff.https://teachertraining.codeyourfuture.io/roles/lead-teacher/teaching-a-session-at-cyf Mitch will push forwards! Mitch has opened up a PR for the to do list tests - please take a look! Signing up to help form module gardening teams Organising docGoals: Get feedback (retros after classes)Act on feedback (file bugs, fix bugs - small changes)NO REWRITES. Come talk to syllabus team about things in general, and with big ideas. But NO REWRITES. "},{"title":"29/09/2021​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#29092021","content":""},{"title":"Present​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#present-8","content":"Sally, Chris, Greg, Ali "},{"title":"Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-18","content":"All: volunteer for a moduleChair for next time: Put off to next time "},{"title":"Minutes​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#minutes-7","content":"Discuss way of working (alternating discussion and planning) Put off to next time Module teams Each module team should be built up by one of usaction for all: volunteer for a moduleGreg: could js1-3 be thought of as one module (see discussion about themes in JS modules)All: discussed the value of thinking of them as 3 modules and agreed that for various reasons, it's positive to have 3 modules (and 3 module gardeners) Blockly What are some of the khan academy criticisms this solves? Something they can understand and carry forward, something they can ship as a productWhat do we &quot;lose&quot; from khan academy? Videos (we could write ours). Is is &quot;as fun&quot;. (Maybe yes, because &quot;small god feel&quot;) Module systems Yes, we should break out bits (filesystem to where we do terminal? npm to where we first introduce npm install?)Can we come to a comfortable solution for one module system vs an other? (probably within CYF syllabus, we can just say &quot;use this syntax here, use the other syntax there&quot;)where do we put it? import for react, require for node. Require for tests? but how do we write nicely testable code that also runs in the browser without a build system? Student tracker DEMO of how it worksPro: lots of our best volunteers are edu buddies who spend time getting data that could be automatedMilestones? What milestones are needed?Google classrooms API is not connected throughWould be nice to automate attendance (slackbot?)Rate limiting of github API -&gt; need to authenticate?Could also pipe this into some notifications to buddies?Not clear how we would &quot;devops&quot; this, beyond copy pasting into &quot;prod&quot; (could maybe write an application?) "},{"title":"01/09/2021​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#01092021","content":""},{"title":"Present​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#present-9","content":"Daniel, Chris, Sally, Mitchell, Greg "},{"title":"Minutes​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#minutes-8","content":"We all did our actions this week!Greg doesn't know who New Order are (shockingly) Sally and Mitch and everyone in Manchester to attend their upcoming gig Meet Up End of September sounds goodMost likely down in LondonAction: Make a doodle Big Changes Doc We've all looked over it and have generally good feelings about it (or atleast greg did!)Fundamentals - we've got months to make this changeCould we work on the badge schema sooner? This seems like a smaller job - so yes Action: Design a Schema for a badge (Sally)Action: Setup Miro for brainstorming Fundamentals ideas To be discussed next week at this meeting London Feedback on the non-traditional route to Final Projects This is working on a very small scale But probably scale beyond this will be very difficult This is a good signal Tech Projects Could we think about running a hackathon around some of these projects?They're fairly disfunctional right now so could be improved As in - students could get more out of it, we could get more out of it "},{"title":"Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-19","content":"Action: Make a doodle for when to meet upAction: Design a Schema for a badge (Sally)Action: Setup Miro for brainstorming Fundamentals ideas To be discussed next week at this meeting "},{"title":"18/08/2021​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#18082021","content":""},{"title":"Present​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#present-10","content":"Sally, Ali, Daniel, Richard Darby "},{"title":"Minutes​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#minutes-9","content":"Guest: Richard Darby in Glasgow - they just finished JS2. Action items from last time​ GitHub Actions They landed!Plan is for buddies to only pay attention to coursework if it's late or a trainee reaches out for help.Coursework Tracker team are sprinting at the moment - goal is to notify buddies if coursework is late. Chris to Write a brief for the &quot;Add to Google Classroom&quot; button from the Syllabus - rolling over to next week. What do we teach and why?​ Doc being discussed. Purpose of doc: Communicating a very top-level strategy for what we teach and why we teach those things, and why we don't teach other things. So that mentors/buddies/teachers/... get a general gist of what we're trying to do, and help us decide whether to include things. Tried to keep it very brief and concise. Tried to avoid making value judgements because don't want to spend time in fights. State​ Sally didn't end up mentioning anything about state. React has a bit about state but it's introducing both the concept of state and how React does it - can we pull the general concept of state earlier in the course to make this easier to handle? Also, we perhaps aren't setting up our trainees to be able to answer interview questions which require managing state. Next steps​ Daniel and Ali to make a few edits, then Sally to publish. Bon code​ Bon Code allow uploads of code and static analysis against coding standards. They seem eager for us to try them out. "},{"title":"Sally's Big Presentation​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#sallys-big-presentation","content":"Core problems: Some people who make it to the end of the course aren't equipped to become professional developers, which is what we promise them.Making the course shorter for WM.Making it easier to deliver the course in high volume in London and WM (but not assuming high volume for other schools). Objective: Need to be able to track people's aptitudes/progress, in a way that doesn't rely on a volunteer directly assessing them, so that we can communicate progress and options to trainees. Be able to positively reframe &quot;I enjoyed this but struggled with that&quot; as specialisation (e.g. &quot;become a UX designer&quot;). Chris: Could we just raise the level required to get on the course? (May affect whether we're targeting the right people) Hack Your Future rank their ITC graduates best to worst, interview the top 40, accept 30. Don't want our key demographic to be pushed out by sharp elbowed and technically eligible. We'd maybe be aiming at the middle of the ranking rather than the top - the top group can probably look after themselves. Ali: One of the original ideas was to run Fundamentals a lot more regularly, so we could more easily say &quot;Not now&quot; rather than &quot;No&quot;. Designed to enable volunteers to say no. We can talk about exits, but we need to have realistic options at those exits, otherwise we will always end up struggling to say no. Course diversification​ Want to create strands of achievements - people go through most of the course together, but at points split off and do different coursework to get practice with different roles in tech. Preparing people for different roles or focuses while they're still with us, rather than doing it ad-hoc after graduation. Currently we end up picking up trainees more based on personal connection than by open offerings, and craft course that help them (e.g. cloud - Pedro is teaching a bunch of folks cloud stuff and we ended up with 16 hired)... There are a lot of agency, WordPress, etc jobs, particularly in Birmingham, we can push people towards which maybe aren't as prestigious as other jobs, but are perfectly fine jobs and which wouldn't require too much extra teaching. Chris: Are we being too reactive? If we were to plan based on what jobs are available, what would we do? Go from an objective, put together a team of volunteers to put together a course and design something outcome-oriented. We've split at least two London classes, it's probably the best outcome we could have had with them - we should be open about it and plan for it. Revamping fundamentals​ Trying to encompas all of the use-cases all of the different schools have. London Class 8 starts September 25th and is going to be 66 people going through fundamentals. So unlikely to get revisions in by then. On current track, means 132 1:1 assessments! West Midlands 4 and 5 will attempt to be two classes running simultaneously. Manchester and Glasgow will probably be staying as-is. Everyone agrees that getting together in class and doing the live session is what's super important. Scotland's experience is that people go from Fundamentals into JS1 and are basically starting from scratch as if they hadn't done Fundamentals. Original goal of Fundamentals was to get the lowest-achieving trainees up to a place where they can complete the course, without making the course any longer, and treat it like a month-long interview. WM are going to have to get through Fundamentals in 3 weeks because of funding constraints. 200 hours of interviews (as happened in London for class 8) is unsustainable, particularly if they're too early to get good signal. Current course is a bit painfully slide-heavy - was originally designed without slides, but PD is hard to teach off the cuff, so slide were born. The experience is also very different in different places with different teachers. Also the style of Fundamentals is hard to do in person. Our new objectives in this new world​ Know what's missing from employabilityNotice missing or redundant modulesMake sure module exit criteria map to entry criteria Suggestion​ 3 live sessions of Fundamentals, 2 self-paced coursework tracks (which could be done over 3 weeks or a longer period). Technical (could drop), and Applied Digital Skills (PD). In the session, have one technical project: Take the home page they already made in ITD.Learn what a user story is, and implement oneDeploy to GitHub pages so it has a URL. At end of Fundamentals, get badges: Have created a CV.Have sent a professional email.Have created a website that you can show off. If you achieve all four badges (+ any other qualification criteria), you're on the course. Move interviews to after Fundamentals - can only do it after getting your four badges. Why do we lose people?​ At interviews: Not having time to commitReally lacking language skillsClearly not understanding their code After Fundamentals or in first few months of course: MedicalLife change, e.g. work shifts changePeople who should realistically have never gotten onto the course but no one had the heart to turn them down People who are successful in one area tend to be successful in all of them (e.g. turning up to class, doing homework, doing Code Wars, etc). People who miss any tend to miss most. Hard to evaluate without them actually trying out the course. Which was originally a key motivator to Fundamentals. Badges​ Each badge has 3 levels. Host the badges externally somewhere. Half a badge is creating the learning hours, guided learning hours, total qualification time. Badges are an established standard we can lean on - integrate with things like LinkedIn. Varying perspectives​ CYF had a similar big discussion two years ago around who we're taking and what our objectives are. Had a lot of push-back from people who have been through the program - for a lot of people, their objectives weren't primarily to get people into jobs. A number of people whose involvement is important have very different views on objectives. Sally: If we're telling people &quot;Come to Code Your Future so you can get a job in tech&quot;, we need to deliver on that, or change our messaging. For people with low self-confidence, will we end up not pushing them enough? e.g. Will we end up channelling all of the women into more ancillary roles? RainBird​ Company who have offered to potentially give us some computing capacity to help with our interviewing/recruiting process. Their person is going to let Liliana unload all of her thoughts about our interviewing process and see if/how they can help. "},{"title":"Action items​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#action-items-2","content":"Chris to Write a brief for the &quot;Add to Google Classroom&quot; button from the Syllabus - rolling over to next week.Ali: What do we teach and why?: Talk about why we don't teach classesDaniel: What do we teach and why?: Expand &quot;what we don't teach&quot; a bit - pull out of tableDaniel: File ticket about pulling state earlier into the course.Schedule a session next week so Greg + Mitch can join, and walk through the assorted artifacts.Sally: To put together a single doc in one place for folks to give feedback.Everyone: Put together feedback on Sally's many produced pieces for next steps for high-level course redesigns, and specifics around badges. "},{"title":"04/08/2021​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#04082021","content":""},{"title":"Present​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#present-11","content":"Sally, Ali, Daniel, Greg, Chris "},{"title":"Minutes​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#minutes-10","content":"Action Points from last meeting Greg, MongoDB Ticket Write Up Push back 1 month Chris, Ticket plan for JS3 Proj Done Chris, Coursework Update thingy Done Tender Has been submittedWe've aimed to have everything in there be good for CYFCompromise on the length of the course Max was 24 weeksNow the course &quot;officially&quot; starts after JS3 Fundamentals convertion to a self-paced course We'd lose Students get know each otherStudents getting to know mentors121 assessments Was originally the core of the idea Team building? Community?CYF getting to know the students e.g. attendence, punctualityThe chance to remove people from the course We'd gain Less of an odd gap between Fundamentals and JS1 We want to gain &quot;I am a tiny god&quot; Would this become an Intro To Coding 2? HTML/CSS/JS Combination &amp; Reword See Sally for Notes How does JS1 and Fundamentals overlap? Could we make better use of this time?nb: functions - we teach twice and some (lots) of students still don't get it Separate pathways (this money comes from the tender) Cyber - requires money and qulaificiations so may be lower priorityProduct - currently doing adhoc. Github Actions Seem to be working well!Just need more review on itWhat happens if we want Classroom API Could we integrate it to the syllabus to automate posting Live Code Blocks vs Codesandbox Which do we want?CSB is used in ReactLeaning towards Codesandbox "},{"title":"Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-20","content":"Daniel - To do more work on Github Actions workChris - Write a brief for the &quot;Add to Google Classroom&quot; button from the Syllabus "},{"title":"2021-07-21​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#2021-07-21","content":""},{"title":"Present​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#present-12","content":"Ali, Sally, Mitchell, Chris, Greg "},{"title":"Notes​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#notes","content":"Codility Agreed on a few assessments, based on a few that Ali foundWaiting on the city coordinators to tell people about it, reduce the surpriseSally got access to their tests repo, has downloaded a copy We can use this as a basis for writing our own tests, and potentially move platforms if wanted Integration with Google Classroom Sally have been in talks with them about a number of thingsFairly unlikely Crucial stages for giving feedback to trainees End of JS2-1 - end of JS syntaxEnd of JS3 - end of JS in the browserEnd of React - last point at which we can fork Optional coursework Marking optional coursework as &quot;stretch&quot; - Sally did thisIdentifying most important coursework - this is a job for module gardener Testing Discussed in a follow up meeting. Actions: Where are we? Most of js1 and js2 doneA few outstanding PRs JS3 How do we test the JS3 TV Show DOM ProjectFilter/Search could be a nice standalone componentCan we reduce the amount of duplicated code that student write? Students currently write one massive functionDRY? React Jest makes it quite easy to write tests for React JSDomReact Testing Library Actions Give the TV Show project more framework so that it can be easier to test (e.g. Separate some business and dom logic)Write Github Action for showing if the tests are passing on a students PRsWrite up issue about teaching require/import module dependencies TV show project needs more work, so it's easier to testShould we test React, Node? Need to figure out the testing frameworks etc for thisTrainees should probably be writing their own tests? Might need lesson time to teach react-testing-library, etcPossible this could be done in a coursework (written) lesson ITC testing Sally put together a test suite ITC projects: https://codepen.io/sallymcgrath/pen/PommVwgInitial concerns about wall of red, but have some trainees signed up to test. We'll see what happens Assertions could be a bit more descriptive - ideal would be &quot;tried to find X element in the DOM but could not find it&quot; Tech interview workshop Ali gave some feedback, positive There's opportunities to talk about take-home tests - but probably can be tweaked to cover this Funding source They have changed the terms of the tender Max course length of 24 weeksMinimum of 100 learners Possible to partner with others, but will only do this if we get something out of it Have to be employed within 90 days CYF won't change our core demographic to keep the moneyReasons to do this Diversify into cybersecurity &amp; cloud Lots of jobs in ops/IT admin roles - both in big &amp; small companiesUnderstanding of security is important to get these roles Challenges We don't have expertise in this Can buy in a course, but we don't have anyone to deliver it Would have to find more volunteers - can spend some of the money to do this Outreach - going to meetups etc Another cybersecurity bootcamp: https://www.capslock.ac/Potential starting point for cybersecurity knowledge: https://www.cybok.org/knowledgebase/A lot of cloud roles require paid for certs (e.g. AWS, Microsoft) Companies (e.g. Capgemini) may be willing to pay for the cert (after we've trained them up) Possibility of a data science course Challenges Trainees need to be strong in maths Github Sponsors Sally signed us up for thisGot approved for it today! You can sponsor the syllabus! Changes to template repo Chris says there's a way of pushing down changes to the parent template repo to all the &quot;child&quot; repos "},{"title":"Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-21","content":"Greg to write on the Mongo archive ticket all the things that need to be doneChris to ticket the plan for changes to TV show project (and potentially other &quot;free-form project&quot;)Chris to update the coursework template "},{"title":"2021-07-07​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#2021-07-07","content":""},{"title":"Present​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#present-13","content":"Sally, Chris, Greg, Ali, Daniel, Philip Fol "},{"title":"Actions:​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-22","content":"Everyone: Take a look at Codility, get a feel, form opinions.Chris: Create a Codility test for the end of JS2 Week 1.Think about what are our crucial stages for getting feedback on how trainees are doing.Sally: Work out how to convey (probably to buddies, maybe more broadly too) that we teach somewhat functional programming, and accordingly don't lean much into things like OOP.Sally: Try to re-brand optional coursework exercises. Maybe as &quot;stretch&quot;, or maybe just re-designate them as all mandatory. Sally: Also identify for buddles what the most important concept/exercise is the most important each week. Chris: Arrange a separate testing-focused meeting. Some agenda items: Module systems.Do we want tests for React + Node + DBs?GitHub Actions to run tests. Review Chris's PRTake a look at Daniel's draft tech interview workshopFollow up with Codility to see if they can integrate with Google Classroom or similar for sending out assessments to groups. "},{"title":"Catch-up from last time​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#catch-up-from-last-time","content":"Continue TDD - on-goingThink about exit criteria "},{"title":"Membership​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#membership","content":"Welcome Philip Fol! Matthew will be stepping back for a bit. "},{"title":"Codility​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#codility","content":"We're having a partnership with Codility - tech test platform (we're pretty sure they're giving it to us for free). Codility is a system for screening out people who can't code. Target is filtering away the people who can't code from thousands of candidates. That isn't exactly our aim. Had a sales call - Sally has a recording if anyone's interested, but it's just a tour of the interface. We got a bunch of trainees to do an &quot;HTML Exit&quot; test as an example. Tracks time spent, requirements completeness. Can replay their test-taking step by step - mostly not needed, but can dig in when things go wrong. They have an API for exporting details if we need. Copying and pasting is allowed and works fine. Positives​ They have an APIThey produce stats at scaleCan get a good at-a-glance view of how trainees are doingFlexible on the backend, e.g. we could allow re-attempts, give more time, etc. Downsides​ Making a test depends on their pre-canned tests (split up by role) and/or libraries to build them up.Most of the pre-canned stuff is probably better targeted at graduates than people during the course.Blunt tool. Need to work out how to make it work for us and how to not just be more work for us.Quality of pre-canned tests - Sally looked at 3 HTML tests - one 5-minute was set as a 40-minute test, one was fine, and one was just incorrect in its expectations.Vendor lock-in.The exercise taker can't write their own tests - can only run the pre-supplied ones.There's no versioning in the tests. How do you invite them to a challenge?​ Manually by email in the interface, or by API. Can also create public links but they're anonymous - struggle to track and get cohort information from it. We could maybe ask them to integrate better with e.g. Google Classroom, but unlikely to get much traction. What are our concerns RE false positives/negatives​ Much more likely people will fail when they should pass than pass when they should fail. Trainees could plausibly cheat pretty easily if they wanted to. What stages would we use this for?​ End of module assessments. Possibly entry criteria assessment for modules too. Have an intense desire from cities to be able to see at a glance who needs extra support which isn't a large complicated spreadsheet. Also a desire to not spend so much time doing rote marking and automate that as much as possible. Goal is to de-emphasise time spent marking coursework - push the trainees to own their coursework experience, and rely on more formal/structured assessments for progress tracking. Concerns​ Vendor lock-in (Sally also has an account with https://www.qualified.io/ now)Watch how much time we sink into the proof of concept.How to introduce tests - if we spring them on people it's surprising, if we warn them in advance it's daunting. How are tests written?​ Three styles - kata-style, multiple choice, long-form written answer, and whiteboard coding style. Do we want to tell the trainees their results?​ Lots of down-sides to doing so: For trainees lacking confidence getting a poor score even though they've done pretty well can knock confidence.For trainees struggling, if they score really highly but it's not representative, that's a very hard conversation. Next steps​ Syllabus: Take a look, get a feel, form opinions. Maybe do this with a 15-minute in-class experience to avoid a large lead-time.Work out our crucial stages for getting feedback on how trainees are doing. "},{"title":"Cohorts​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#cohorts","content":"Many people have been thinking in different ways about how we deal with the tension between having a cohort which forms a community, and being flexible around how long individuals take to learn things and advance. "},{"title":"On-boarding volunteers and buddies​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#on-boarding-volunteers-and-buddies","content":"Want to decentralise this a bit - make it less Sally's job and more each city's coordinator. "},{"title":"Differentiating factors between our trainees​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#differentiating-factors-between-our-trainees","content":"Very clear that the trainees who don't do the optional exercises don't do well. Part of that is probably because we don't communicate how to get support well enough. Why don't we set all of our exercises as mandatory? Maybe we should... We don't have a great story for how to catch people up when they're behind. We need to make the modules more modular, and make better off-ramps. We also need to work out how to bring the product people more into the fold of the syllabus - this is a big thorny problem! "},{"title":"9/6/21​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#9621","content":""},{"title":"Present​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#present-14","content":"Chris, Ben, Mitchell, Sally, Greg Welcome to Ben "},{"title":"Actions:​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-23","content":"check in notes from last time and followup on any actions@Chris to write up why students are struggling@all create issue to tell them &quot;do codewars&quot; in the syllabusRaise wider discussion of modularisation - how far do we want to take the concept.@Greg bring up teaching unit testing for Glasgow@Chris invite Kerim and Craig "},{"title":"Unit testing​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#unit-testing","content":"Mitchell getting PR ready for unit testing "},{"title":"Proposed renaming/refocusing of Javascript​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#proposed-renamingrefocusing-of-javascript","content":"Sally - maybe should focus more on modularisation so that we can teach (inside module and across module) in whatever orderMitchell - should we make explicit the dependencies/place other things earlier(side discussion on scope: would like to bring it in early, groundwork can be laid in css)Sally: could have teams that are module focused to &quot;garden&quot; the individual modules syllabus team should figure out how to support people in doing this Greg: As well as dependencies: document reasoning Sally: would also be good to have better communciation/collaboration between modules Ben: at school of code, similar issues - making things reorderableGreg: concern that &quot;Basics of Javascript&quot; makes it a dumping ground for everything that is conceptually &quot;basic&quot;, even if we could delay teaching it "},{"title":"Boxtribute work-study internship​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#boxtribute-work-study-internship","content":"Chris has already pushed back on the technology listOriginally they wanted to set up a code school and Chris encouraged them to pay interns insteadCould we get clarification on how they intend to support students in the self-studySome companies that offer similar programmes also pay a living wageCYF probably shouldn’t be encouraging students to take positions that are poorly remunerated "},{"title":"Codewars​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#codewars","content":"Sally has created a cyf collection https://www.codewars.com/users/CodeYourFuture/authored_collectionsGraduates who are struggling have not been doing the suggested workVery little mandatory code katas in the curriculumSally: by JS3, everyone should have level 6 (means completing 20 entry-level kata)Could we introduce the principle of the a daily standup to be done by a slackbotposting in the void might feel unfun (and seeing that other people don’t do it, so I don’t have to)Would be good to demo that as part of the weekly classTarget 300 so that you can make your own kata (careful to not have them reviewed as trivial katas get ripped to shreds)Kata: have some katas to deliberately revisit "},{"title":"Node re-ordering discussion thread​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#node-re-ordering-discussion-thread","content":"should have that conversation "},{"title":"3blue1brown​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#3blue1brown","content":"Mathematical animation enginewould be really cool to have something similar based on coding "},{"title":"Stratification in groups​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#stratification-in-groups","content":"should we find out the pros and cons? is it something to formalise?more driven by necessity in London "},{"title":"26/05/2021​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#26052021","content":"Attendance: Chris, Daniel, Greg, Mitch, Sally, Ali, Matt "},{"title":"Actions from Last Time​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-from-last-time-14","content":"Daniel to put JS1 convert tests - doneMitch write short npm introSally to teach HTML module - Currently doing, made contact with Lucy in London, had same points as SallyChris to fix bug - Daniel has fixed bugPromises, greg to explain more in JS3 - Chris has made a thread, no discussions made so far "},{"title":"Agenda Points​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#agenda-points-1","content":"Ali’s syllabus link - Chris has fixed this already, could probably close all the tickets on itChris, non-mathsy codewars exercises - think that the codewars katas are good, not sure about including them within the syllabus or not, can make collections of katas by modules, collections are tied to an account but we can create a CYF account on codewars for this, need to be careful about adding more marking. Chris to add them in as optional coursework.Hotel App - Could get more peer-review marking involved with optional challenges of react.HTML/CSS Sally - Spent a lot of time defining terms. Could potentially be useful to add a glossary in for terms they are to cover on specific modules. Potential issue that if we create a glossary there is an assumption there that because its written down it doesn’t need to be taught. Flatiron html coursework was good but UI of website horrendous and very confusing for the students. Potential option to teach grid first, made teaching box difficult. Sally has made a set of notes, will feedback after finishing teaching. Potential issues surrounding semantic html, lack of understanding of when to use div tags and when not. Live debugging using dev tools was really good. "},{"title":"Jest​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#jest","content":"Are we requiring test or accepting globallyAre we going to run the tests through github actions? - issue that students might then only practice tests when they submit to git rather than testing locallyJust having pure pass fail might be useful for markersMitch happy to add a guide for CI output interpretationWe shouldn’t hide the logs for the studentsNo intention at this point to get the students to write the tests, it’s more about interpretation at this stageFirst use case going to be NW4 in about two weeks "},{"title":"Github Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#github-actions","content":"Github actions to automatically close issuesList of github actions - https://github.com/sdras/awesome-actionsAction used - https://github.com/JulienKode/team-labeler-action "},{"title":"Sprint Planning​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#sprint-planning-1","content":"JS Core 1 Assessment - Matt to look at Chris’s commentsJS Core 1 Challenges - Added back into ready for developmentReact Week 2 - Ali still to work on thisAdd Pre-Work for HTML/CSS - Chris assigned himselfUse uuids instead of ids for albumsData - Chris assigned himselfGet jest merged this weekEverybody to review the PR’s "},{"title":"12/05/2021​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#12052021","content":"Attendance: Chris, Daniel, Greg, Mitch, Sally "},{"title":"Agenda​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#agenda-1","content":"Tech testTDD first stepsHTML/CSS content discussionTrailing slashPromisesReport from new Git lesson "},{"title":"Important Points raised​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#important-points-raised","content":"New person is joining team soon, hurrayChris is eating amazingly vile sounding KFC flavoured crisps We reviewed a tech test​ Action: Chris to raise an issue to write up a tech test for our trainees. TDD: Jest​ We met with people from tech projects last week and agreed to use Jest. Action: Daniel to put Jest in JS-1 and convert testsAction: Mitch to write Jest overviewAction: Mitch to write short npm intro for JS-1 and update pre-reqs before NW4 start JS-1 HTML/CSS module​ Sally links presentation on the DOM for HTML W1. Lots of work being done separately across cities. Can we combine our efforts? Action: Sally to teach through module and identify missing piecesAction: Sally to get marking guide/s from Lucy into the repo Trailing slash​ Trailing slash bug has been raised as top 10 things to fix. Please can a Javascript person take a look? Action: Chris to raise an issue Promises​ Greg asks can we find a place in [JS-3] to explain promises. Daniel asks should we teach anything other than async await. Action: Chris to raise a discussion point on this New git​ Mitch reports from teaching new git material. A success! "},{"title":"28/04/2021​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#28042021","content":"Missing notes 😢 "},{"title":"14/04/2021​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#14042021","content":"Sally opened a PR for JS1 marking guide Discovered an issue with student understanding of true/falsePredicates exercise Any code will pass the testOpened a ticket: https://github.com/CodeYourFuture/syllabus/issues/233Action: fix this test Daniel: last time he sat in on this, students didn't know what an expression was This should be addressed with Mitch's changes to JS1 Daniel also found another example of a bad test: https://github.com/CodeYourFuture/syllabus/issues/230 Action: fix this too Fundamentals Why Processing.js? Fast to get something tangible It's difficult with vanilla JS to make something &quot;fun&quot; (i.e. not printing text to a terminal). Processing makes it easy to code something interesting quicklyTrade-off: Processing is &quot;magical&quot;, and KA is particularly weird about it &quot;Flipped classroom&quot;: sessions at the weekend were to unstick students, not necessarily to introduce new concepts Hence need for a good online course There's a lack of documentation describing the above Action: Sally to do write this up Fundamentals was also originally designed to be a &quot;taster session&quot; for programming, as well as an intro to JS Wouldn't need lots of volunteer time on at the weekend, so online course is idealCould be run much more regularly during the year React assessment PR to assessment: https://github.com/CodeYourFuture/React-Assessment/pull/1Action: Ali will likely merge soon. but feel free to leave comments if you'd like TDD Came up in context of exercises with require('assert'): https://github.com/CodeYourFuture/syllabus/issues/169We remembered that Chris was going to update us about thisAction: Chris update us about this "},{"title":"31/04/2021​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#31042021","content":"Missing notes 😢 "},{"title":"17/03/2021​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#17032021","content":"Attendance: Ali, Chris, Daniel, Greg, Matthew, Sally "},{"title":"Agenda​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#agenda-2","content":"Location for solutions to in-class exercisesnew Choose Your Own Adventure exercise for JS3 W1should we add a section about paths in JS?MongoDB "},{"title":"Glasgow forking fundamentals​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#glasgow-forking-fundamentals","content":"Chris: Following up on our Scotland meeting - we are forking the repo and we would like them to raise issues and get their improvements feeding back in. Hopefully I'll invite them to come to these things again to have more of those kind of discussion. "},{"title":"Class exercises​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#class-exercises","content":"Daniel: Antigone put together solutions for class exercises. How and where should we maintain these solutions? Chris suggests tabs. Sally suggests passwords. Action items:​ now: put the solutions in tabsfuture: produce a react component to lock the solutions in future and provide the password after the appropriate lesson "},{"title":"CYA coursework​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#cya-coursework","content":"Ali: Everyone is happy. Ticket merged. Done! "},{"title":"Terminal lesson and Cowsay​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#terminal-lesson-and-cowsay","content":"https://github.com/CodeYourFuture/syllabus/pull/189https://github.com/CodeYourFuture/syllabus/pull/166#issuecomment-770410775Discussion: Should we learn paths earlier on? They are not a react concept. If we teach it too early they won't retain it. We won't do paths earlier, but we will do them more in JS3. Possibly put cowsay into JS3 and require a bunch of stuff? Ali: I wonder if we could actually take pretty much that entire coursework and turn it into a lesson in the end of js3. Chris: This one I think we definitely need an issue for it and it is gonna be a slightly longer running piece of work. Action items:​ Write a paths cheat sheet, SOMEONE? Ali?Dropped thread: cowsay lesson/expansion - Sally will chase this up "},{"title":"General discussion about iterating and increasing complexity in exercises.​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#general-discussion-about-iterating-and-increasing-complexity-in-exercises","content":"Would it be interesting or annoying to recap some of the exercises from js1? But with objects, eg the transport one, which is, how can you get with different means of Transport between two cities? Just give them exactly the same exercise, but put the data in objects? Action item:​ Repeat some exercises from week 1 but this time with objects instead of arrays. Sally to make issue. Action items:​ Redo TV show project in React (with call back to earlier project)Chris to contact Neil Bogie "},{"title":"MongoDB​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#mongodb","content":"https://github.com/CodeYourFuture/syllabus/discussions/192 Glasgow school got on well with PostgresHe proposes to write out a list of all the things he plans to do so it can be reviewedHopes to have this ready in 3 monthsDiscussion about mongoDB vs Postgres - Action item:​ Chris to speak to London teachers and see what they want to teach this year PostGres/Mongo "},{"title":"Assessments​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#assessments","content":"https://github.com/CodeYourFuture/JavaScript-Core-2-Assessment/blob/main/scrabble.md Snapshot assessment at JS2 proved very useful. Teachers want it for JS1 JS3, and React. The marking guide is the key part needed here. Action items: Daniel will work on JS3, Matthew will work on JS1. Two assessments of 15 mins each, with a rubric to guide marking.Ali wrote an assessment for React, an open book assesment. Find it, update it, and add it. "},{"title":"Homework marking guide​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#homework-marking-guide","content":"We want to write marking guides for buddies. Each coursework should have one. It should cover: the object of the coursework, key points to look for, common mistakes, and how to respond. Action items:​ Chris is working on this.Sally will review student submissions and find more patterns. "},{"title":"03/03/2021​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#03032021","content":"Attendance: Daniel, Chris, Anthony, Sally, Greg, Matthew, Mariana, Kevin, Irina, Alastair "},{"title":"Agenda​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#agenda-3","content":"Icebreaker (5 minutes)Actions from last meeting (10 minutes)Agenda Points (~30 minutes)Sprint Planning (~30 minutes)Fundamentals discussionAre Github discussions worth it ? "},{"title":"Work In Progress​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#work-in-progress","content":"Functions-expressions PR now mergedCowsay currently in progress courtesy of SallyHow to ask a good questionChain of commits diagramEncouraging live codingCoursework solutions "},{"title":"Fundamentals discussion​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#fundamentals-discussion","content":"Do we have established way for PD mentors to edit the syllabus ?Fundamentals on GitBook - people can edit directly on therePD changes should be run through CandySignificant changes to the course by Aprill, need an easy to way to make changes for ScotlandNeed to ensure not confusing for students which parts of the syllabus they needWhat are the fundamental differences for Scotland ? Much looser in ScotlandNot about assessmentMore about a period of adjustment for students in ScotlandUse some of the ideas but not everythingE.g. A lot of PD tasks like giving presentations in the first week so very demandingA lot of people not fully comfortable with their computer setup before starting the full course Currently framed as an assessment periodSofter exit if students are told they can't continue after the fundamentals section - better than asking students to stop continuing after JS-week-2More an assessment of intent ( truly gauge if they're prepared to work for 20 hours or so )Fundamentals course shouldn't be ability based - should be just a way of assessing attitudeMaybe update wording as students may find the wording scary &quot;If you don't do X then you may have to leave the course&quot;Harder to pick on people who are having difficulties with the course whilst working onlineConfused whether we take 100 for fundamentals and then go down to 30 for the Full StackChange to fundamentals may be beneficial across the different cities ( Daniel )Some people put on to the course as maybe ( in Manchester ) so assumed that some people are not going to make it on to the full stack bootcampCould take up to 2 months to know for sure if a student can make it through the course ( Irina )Normally about 3/4 people towards the end of the course that are struggling with the courseMay need a definition of the ideal student at Code Your Future i.e. do they have previous experience etc.Generally positive about Kahn Academy - but some confusion over whether this is how you build websitesMay need taught material for the Fundamentals section of the course "},{"title":"Actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#actions-24","content":"Re-structure PD elements and language used in the Fundamentals sectionRaising issues for the Fundamentals repository "},{"title":"17/02/2021​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#17022021","content":"Attendance: Daniel, Chris, Sally, Matthew, Ali, Greg "},{"title":"Welcome new members​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#welcome-new-members","content":"MatthewSally "},{"title":"Updating the intro to coding course (/application process) (Chris)​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#updating-the-intro-to-coding-course-application-process-chris","content":"No need to get involved, just being generally aware that this is happening. Feedback comes from recent graduates/joiners Tech side: easy for students to pass by just following steps (/googling freecodecamp tribute page) Soft skills side: intro to coding course should represent the soft skills, so that it's a good &quot;sample&quot; of what students can expect Improving the tech skills raise the upper level of how well students can do, by making a &quot;challenge&quot; approach. Questions Should actual coding be part of intro to coding?Are the cutoffs during the acceptance process in line with what they've learned and with what we're able to assess? (end of js1)Could having some sass add coding fundamentals/some other version of programmatic thinking?Long term intention of the fundamentals course was not really to do what we're doing. Action for Chris -&gt; discussion of what is taught in fundamentals course (e.g sass) "},{"title":"What kinds of tech interviews do our students end up doing and what skills should they be practiced in going in (Chris)​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#what-kinds-of-tech-interviews-do-our-students-end-up-doing-and-what-skills-should-they-be-practiced-in-going-in-chris","content":"Cap Gemini put a lot of soft skills to the front (even rejected some strong coders from Birmingham)Got feedback from Cap Gemini hiring manager: students did worst at selling their technical skillsvery good at talking about their own experiencesvery good at self directed learningenthusiastic about learning new thingsstudents tend to pigeon hole themselves (e.g. backend vs frontend)students don't have confidence that they could learn a new language/take their learning and re-produce it. Question: does the final project affect students confidence in a negative way that we might want to address? Would it be a good time to invite recent graduates?Yes, it's quite common for students to fill low in confidenceLack of having things on github Action for Chris -&gt; speak to German about who we're designing the syllabus for (who are the hirers, what skills are they asking for) Action for Chris -&gt; chase up city coordinators to fill in the outcomes spreadsheet "},{"title":"JS Core 2 exercises (Ali)​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#js-core-2-exercises-ali","content":"Choose your own adventure Goal: Getting students used to the existence of objectsConcern: it's a bit different from what we've done in the class?Comment: a bit like an internal DSL Action for Chris: Get a Gist from Ali and give it to some students. Suits of cards More standardCan we make it more difficult/complex (Ali: assertions become tricky) "},{"title":"Git branch (Daniel)​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#git-branch-daniel","content":"Seeking feedback Planning to record feedback? Git bracken? Git prettyfier? (could then use asciicinema) "},{"title":"Sprint planning (Chris)​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#sprint-planning-chris","content":"Git ticket almost readyintroducing funtions, ready for reviewjs excercises 2 New tickets Encouraging live coding?Cowsay? Sally could pick upGit diagrams? DanielHow to ask a good question -&gt; maybe good for Atanas Action for Chris, approach people about pairing up with Greg to get started on Mongo "},{"title":"03/02/2021​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#03022021","content":"Present: Chris, Ali, Daniel, Mitch, Greg "},{"title":"Interview Prep Workshop​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#interview-prep-workshop","content":"Ali &amp; Daniel got chatting on PR about interview prepWhat kind of companies are we targeting for trainees? &quot;Upper bound&quot; of companiesType of company There are several kinds of tech interviewDo we prepare trainees for all types of interview?Discussion of specific example of LazyFlatIterator Problem is very abstract, which we think would throw a lot of trainees Is it realistic to expect trainees to get jobs at FAANG/top companies? We think the majority of student's wouldn't pass the interviewSelf-fulfilling strategy - if we prepared trainees for this, would they get it? We could prepare for what kind of things a tech interview, but without looking at specific kinds of problems (e.g. computer science-y problems) E.g. explain thinking out loudThink about performance of solutions Potentially involve Anahita - London PD Tech recruiter for CapgeminiHas expressed interest in developing content in this domain Daniel opened a ticket to discuss a workshopAction points Chris to speak to CapgeminiChris to decide what types of companies we are aiming forSyllabus team to read ticket &amp; discuss "},{"title":"When do we release solutions to coursework?​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#when-do-we-release-solutions-to-coursework","content":"London were releasing the week after Concern is that they could put in minimal effort to solve, then get solution without putting work in Releasing answers helps buddies since the answers are available, but it also means enforcing putting in effortTrainee who is putting in effort, but sees answers then thinks that they understand it, but without actuallySuggestion Release by defaultBut if Edu Buddy notices that trainee is coasting, the it can be flagged to City CoordinatorCan then restrict that trainee from getting the answers (by not inviting them to the private answers repo) Action points Chris to write this up as policy for Edu buddies "},{"title":"Team changes​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#team-changes","content":"Tim taking some time off (too much going on)Few new people joining in the next few weeks "},{"title":"Git CLI/Terminal​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#git-cliterminal","content":"Terminal lesson went out to London students 12 students completed. No problems, but they are likely best students, so waiting to see how it goes for other students Git Daniel working on it, roughly ready to goPRs incomingDiagrams are still TODO "},{"title":"20/01/2021​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#20012021","content":"Present: Chris, Bukola, Mitch, Ali, Daniel, Greg, Lucy "},{"title":"HTML & CSS discussion - led by Lucy​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#html--css-discussion---led-by-lucy","content":"Atannas has raised several questions regarding the syllabusSyllabus doesn't currently start from scratch with HTML &amp; CSSAlways have disparate level of abilities and knowledge with any class Week 1​ Lucy's learning objectives: Week-1Starts with a summary of the learning objectivesHow to attach CSS to a HTML documentDiscuss CSS specificityWrite simple HTML and CSS pairingsDiscuss the box model in CSS Avoid git issues and sandboxesLots of interactive exercises throughout the lessonFor homework build a website using some Figma designsTrainees can find extension tasks at Frontend MentorCurrently still using the bikes for refugees project over the HTML and CSS sectionLucy is using smaller layout exercises for this sectionTry and get students to fork and clone the homework before the end of the class Week 2​ Week 2 deals with responsive design, media queriesHomework for week 2 is to add a media query to existing Karma Project for a mobile designMore sandbox activities for manipulating the UI with media queriesTrainees given a wireframe for a cake website with a mobile view and a desktop view Week 3​ Start with a lot of repetitive stuff in CSS Introduce the need for classes in order to reuse CSS rules Then introduce a CSS framework like Bootstrap - there to solve the problem of consistency Give students some understanding of columns Issues with Bootstrap: Comes with clutter like utility CSS etcAlso comes with a lot of JS componentsCan sometimes be a little chaoticSometimes distracted by Bootstrap features Lucy has made a separate CSS framework &quot;Simple Grid&quot; for Code Your Future - just for columns ( no JS components and grid etc ) Downside is that Bootstrap has loads of documentation and examples online so maybe more difficult for students to figure stuff out Homework for week 3 used Wix templates in the past - needs to change for copyright reaons May need an additional 4th class Syllabus is opinionated - but with flexibility built into it so people can choose to teach something in particular should they choose to do so Potentially focus on Bootstrap but if you want to use &quot;Simple Grid&quot; then you can if you want Syllabus there to define which concepts need to be understood and which skills need to be acquired but not to prescribe the particular resources used to achieve the skills / resources "},{"title":"Cloud development - led by Bukola​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#cloud-development---led-by-bukola","content":"Would like to introduce cloud development in the syllabus at some pointCould introduce deployment / automation especially when students encounter Netlify and there is a need for deploymentGithub CLI is a good starting point for thisMake use of Bukola's notes for this topicGood turn this into an optional workshopCloud infrastructure is the number one skill employers are afterWe could also have a postgraduate module for teaching students stuff after the course ( post graduation )Could introduce bonus material from early on so that the students are primed for the introduction of cloud stuff later onIs there scope for something like Lambda functions around the time of React to bridge with NodeJSNetlify uses a CLI tool for deployment of cloud functions "},{"title":"Further actions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#further-actions","content":"Setup a future discussion further down the line re cloud workshop / moduleEstablish learning objectives for a cloud workshop / moduleSetup a cyf-syllabus-cloud channel  "},{"title":"06/01/2021​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#06012021","content":"In Attendance: Daniel, Chris, Greg, Tim, Mitch, Ali "},{"title":"Personal Development Syllabus​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#personal-development-syllabus","content":"https://personal-development.codeyourfuture.io/Technical Interview might be missing Can this be rolled into the PD Syllabus? Could we add more time CV Workshops&quot;Asking Good Questions&quot; is a section that could be pulled out earlier and more in depth Has been included in Day 3 so can be pushed more around We should be aiming to interleave the content between the two Syllabus'&quot;Imposter Syndrome&quot; could be covered You're not meant to understand everything Action: All Attendees - To review the content in more details "},{"title":"UseContext Discussion​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#usecontext-discussion","content":"Greg recently learnt React to help TA a class He discovered UseContext that could be used in place of Redux Ali - We can use the &quot;Extra Lessons&quot; to contain thisAli - We've always not included it as part of the course as it isn't required for most of what the students are trying to doCould this be included into the Post Graduate section of the course? Action: Greg to investigate how they could be implemented and included "},{"title":"Instructional Design Class​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#instructional-design-class","content":"Greg used to work in this area and knows people who want &quot;clients&quot; to work withMight be able to help us craft a pedagogically good workshop or help with HTML/CSS Module Action: Greg to refer them to me "},{"title":"Round Table​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#round-table","content":"Chris to prepare a plan for a Round Table discussion with lots of different stack holders of the Action: Chris to write up plan and poll for the best time for the Round Table "},{"title":"Lucy and HTML/CSS​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#lucy-and-htmlcss","content":"Lucy Zidour is an experience CYF Teacher from London who has historically taught HTML/CSSShe has good tested material that could do with being folded into the SyllabusLucy will attend our next meeting to discuss "},{"title":"Git & Terminal​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#git--terminal","content":"As part of a roll-out of a better way to teach Git we need to start thinking about how to teach further Git Theory and the Terminal in preparation for ReactWe should start working on this soon Action: Chris to prepare meeting on this for next week "},{"title":"09/12/2020​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#09122020","content":"In Attendance: Chris Owen, Ali Smith, Mitchell Lloyd, Tim Hamrouge "},{"title":"Functions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#functions","content":"Minutes from the call on 7th Dec. Chris overall happy with it. Flagged that the coursework needing to be checked that trainees don't see content out-of-order. Also had discussion of timings of lesson 1. Concern about fitting in good naming content, but pointed out that this can be covered in variables section earlier. Assigned some rough timings for AM/PM content in week 1. Next steps: Suggested that start learning objectives firstThen write exercises that fulfill the LOsAnd then fill out content "},{"title":"Code style guide​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#code-style-guide","content":"Ali has started writing it up, but not lots of progress yet. "},{"title":"JS Core 2 Exercises​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#js-core-2-exercises","content":"Tim demoed some of the exercises so far. Progress looks good. "},{"title":"Typing tips/test for Intro to Coding​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#typing-tipstest-for-intro-to-coding","content":"Ali wrote up a quick guide, but wasn't sure what to do with it. Decided to write up a ticket for the board for Syllabus Team to discuss how to integrate into ItC. "},{"title":"25/11/2020​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#25112020","content":"In Attendance: Ali Smith, Chris Owen, Daniel Wagner-Hall, Greg Dyke, Tim Hamrouge "},{"title":"Style guide​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#style-guide","content":"Discussing https://github.com/CodeYourFuture/syllabus/issues/105#issuecomment-731769854 General consensus supporting Ali's comment. Important that learners understand the why (e.g. around indentation and naming), and in what Prettier does (particular that Prettier will reformat things to avoid surprising changes), less important to understand things like &quot;how many spaces are correct&quot;. We should make sure TAs (particularly when marking homework) know what to expect, and what things are worth highlighting in review. We should also consider what things we encourage all volunteers (particularly teachers &amp; TAs) to do, e.g. should we try to get people to always add semicolons after statements? We should make sure to proactively re-format homework before setting it, so that they don't submit huge whitespace diffs. For React and beyond: Rely on default ESLint that comes from create-react-app. We've had incidents in the Backend/Mongo course where client-side and server-side code were using different formatters with different spaces, which caused some issues. We should unify where they conflict. Best practices docs: We should have some. Should probably set reading these as homework, rather than in-course, and will also be useful to be able to link to from PRs. Try to avoid per-module advice in this doc - we should create per-module cheatsheets/similar where they're needed, but don't want to glom it all into one doc. These could also be useful to get teachers for later modules familiar with conventions that were taught in earlier modules (e.g. how much do we care about == vs === of if (blah) vs if (blah === undefined)). Can easily get ESLint installed into VS Code, but ESLint rules are harder because they're generally installed as npm packages. Could maybe bundle them in our own extension if we wanted. .eslint files in the CYF-Coursework-Template could fill this niche. Ali will move forwards. "},{"title":"How we teach functions​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#how-we-teach-functions","content":"No one seems to teach functions well. Coding Train does a good job because he makes a distinction between functions that do things, and functions that return data, but we can't use it directly because it uses p5.js which is very specific. Covering functions which both return things and have side-effects is maybe important too. Everyone treats &quot;and you can store the result in a variable&quot; as obvious. Haven't really seen how to teach &quot;some returned value are ignored&quot; much either. How/when do we teach expressions? Week 2 of JS1 (functions are Week 1 of JS) - students have typically struggled with this. Learners often struggle with map vs forEach. We struggled when we moved away from for loops, have moved a bit closer to for to help the learners understand the basics, but still need to cover map et al by the time we get to React. Our examples aren't places where functions aren't actually useful (e.g. a sum function) - hopefully we can reframe into something more realistic as a motivating example. Mitch is probably going to be away for a bit, so Chris will take it over and start gathering opinions this sprint. "},{"title":"This sprint​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#this-sprint","content":"SQL​ Pretty much everyone except London teaches MongoDB. Glasgow and Manchester have some SQL experts, and Birmingham fell through some cracks of undocumented prep work from having not run the course before. Why does ~everyone teach SQL except London? Partially because of domain knowledge in the particular cities. Partially lack of clarity around what's more valuable to focus on. Birmingham want to move from Postgres to MySQL. We should work out what to support... We should find out why Birmingham want to switch. It may be because they had a bad experience from the first class, but we should find out for sure. Maybe we could just have them connect to pre-running SQL servers, and not need to worry about which flavour of SQL they're using. For Mongo, we don't have them run anything locally, just use a hosted MongoDB. JS2-2 coursework​ When we introduce the DOM, there's not much homework. Could do with someone reading over it and evaluate whether the coursework meets the learning objectives. The jump after this week is to a big project. Tim will pick up. "},{"title":"AOB​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#aob","content":"Chris is taking most of December off (enjoy!). Will still check in to the meeting on December 9th, but won't be picking up work. We should do an idea generation session, with many attendees, to work out what else folks would like the syllabus team to prioritise, to fill in a backlog.  "},{"title":"28/10/2020​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#28102020","content":"In Attendance: Ali Smith, Chris Owen, Daniel Wagner-Hall, Tim Hamrouge, Carlos from Migracode "},{"title":"CARLOS FROM MIGRACODE​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#carlos-from-migracode","content":"Welcome to Carlos from Migracode who use our syllabus for their course in Spain. Carlos answered questions and gave some insight into Migracode. Migracode have been around for 1 year. They were using our syllabus from then to teach with until April when Carlos started updating their syllabus with our new content.Migracode began with one class, then another two in March and started three more in July. The classes consist of ~12 people.The feedback from Spain is that our syllabus is great because of how up to date it is - particularly the content on React hooks.They have split their classes out into smaller groups to enable them to give students more attention. They also have 1 Spanish class and 1 English class because a lot fo their students are from South America, but they do not translate the syllabus, the teacher does that while teaching.They offer free English lessons to students. They are able to do this by using trainee teachers who can use the teaching time as credit for their courses. "},{"title":"GIT LESSON​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#git-lesson","content":"Chris thanked all those who had worked on the content for the Git lesson. Chris introduced the lesson content to the Birmingham team and it was well received, the lesson will be run by them for the first time on 31/10/20. "},{"title":"AOB​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#aob-1","content":"Chris needs some eyes on some PRs. Tim said he would take a look.Ali asked for some resources on 'How to ask good questions' and 'How to give good answers'. Ali will write a ticket for this.  "},{"title":"14/10/2020​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#14102020","content":"In Attendance: Ali Smith, Chris Owen, Greg Dyke, Daniel Wagner-Hall, Tim Hamrouge, Neill Bogie, Mike Hayden, "},{"title":"GIT & COMMAND LINE V. GITHUB DESKTOP​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#git--command-line-v-github-desktop","content":"Discussion around wether to teach GIT &amp; COMMAND LINE (G&amp;CL) or GITHUB DESKTOP (GHD) No final decision was made in the meeting about which technology should be taught. It was agreed that in order to teach anything with Git comprehensively, more teachning time would be needed. Chris said that the 2 hours used to teach the topic could be spread out to 4.There much discussion about multiple lessons on Git, in order to reduce the cognitive load and increase familiarity for stuents. Chris said that while additional lessons cannot be added, additional reources (as homework etc.) can be included.Daniel and Ali agreed to work on the Git lesson plan for 31/10/2020. "},{"title":"STUDENT FEEDBACK FORM​","type":1,"pageTitle":"Global Syllabus Team Minutes","url":"/contributing/minutes#student-feedback-form","content":"Chris has created a Pull Request for a new feedback form to give to students at the end of lessons. There was consensus that the form was a good idea, and would be added to the syllabus. It is a substantial change because it will affect all lessons.Ali suggested an additional 'Anything Else?' field to capture intangible feedback, Chris Agreed.Neill pointed out it must be made clear to students who can see their answers and how they will be used, all agreed. ACTION: Chris to check form feedback in 1 month.  "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/db/week-2/homework","content":"","keywords":""},{"title":"1) PostgreSQL Exercises (3 hours)​","type":1,"pageTitle":"Coursework","url":"/db/week-2/homework#1-postgresql-exercises-3-hours","content":"Please try to complete the remaining Basic SQL Queries and the Joins and Subqueries exercises. If you are stumped, do use the hint to point you in the right direction. You could use The official Postgresql documentation for your research, but you may prefer this tutorial site instead. "},{"title":"2) SQL Exercises (5 Hours)​","type":1,"pageTitle":"Coursework","url":"/db/week-2/homework#2-sql-exercises-5-hours","content":"In this project you will find several tasks for you to complete. You should complete all of the instructions inside the &quot;Exercises&quot; folder. https://github.com/CodeYourFuture/SQL-Coursework-Week2 "},{"title":"3) SQL Projects (5 Hours) 🔑​","type":1,"pageTitle":"Coursework","url":"/db/week-2/homework#3-sql-projects-5-hours-","content":"In this project you will find several tasks for you to complete You should complete all of the instructions inside the &quot;Project&quot; folder. https://github.com/CodeYourFuture/SQL-Coursework-Week2 "},{"title":"4) Full Stack Project - Week 2 (5 hours) 🔑​","type":1,"pageTitle":"Coursework","url":"/db/week-2/homework#4-full-stack-project---week-2-5-hours-","content":"Continuing on your project from last week, this week you'll be building the Backend of your Full Stack website. You can find all of the details for this project here https://github.com/CodeYourFuture/Full-Stack-Project-Assessment For this week, you should complete Level 200 &amp; Level 250 If you finish all of Level 200 and 250, continue to Level 299 "},{"title":"5) CodeWars (1 hour)​","type":1,"pageTitle":"Coursework","url":"/db/week-2/homework#5-codewars-1-hour","content":"https://docs.codeyourfuture.io/course-processes/running-the-course/codewars#codeyourfuture-collections Every week you need to complete at least three kata. Spend at least 20 minutes, three times a week, on your kata workout. Find the collection on the CodeYourFuture account: https://www.codewars.com/users/CodeYourFuture/authored_collections "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/db/week-2/instructors","content":"","keywords":""},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/db/week-2/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-db For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"What worked well​","type":1,"pageTitle":"Instructor Notes","url":"/db/week-2/instructors#what-worked-well","content":""},{"title":"Things to improve​","type":1,"pageTitle":"Instructor Notes","url":"/db/week-2/instructors#things-to-improve","content":""},{"title":"Other thoughts​","type":1,"pageTitle":"Instructor Notes","url":"/db/week-2/instructors#other-thoughts","content":""},{"title":"Coursework","type":0,"sectionRef":"#","url":"/db/week-3/homework","content":"","keywords":""},{"title":"1) PostgreSQL Exercises (3 hours)​","type":1,"pageTitle":"Coursework","url":"/db/week-3/homework#1-postgresql-exercises-3-hours","content":"Please try to complete these modifying data exercises. By all means have a look at the rest of the exercises if you have time after completing the rest of your homework. :-) "},{"title":"2) SQL Project (5 Hours)​","type":1,"pageTitle":"Coursework","url":"/db/week-3/homework#2-sql-project-5-hours","content":"In this project you will find several tasks for you to complete You should complete all of the instructions inside the &quot;Project&quot; folder. https://github.com/CodeYourFuture/SQL-Coursework-Week3 "},{"title":"3) Full Stack Project - Week 3 (5 hours) 🔑​","type":1,"pageTitle":"Coursework","url":"/db/week-3/homework#3-full-stack-project---week-3-5-hours-","content":"Continuing on your project from the past two weeks, this week you'll be adding a database and connecting it to your Back End. You can find all of the details for this project here https://github.com/CodeYourFuture/Full-Stack-Project-Assessment For this week, you should complete Level 300. If you finish all of Level 300, continue to Level 399 "},{"title":"4) Prepare for Final Projects with Codewars (3 hours)​","type":1,"pageTitle":"Coursework","url":"/db/week-3/homework#4-prepare-for-final-projects-with-codewars-3-hours","content":"https://www.codewars.com/collections/cyf-final-projects Before you go to Final Projects you need to be a Level 5 kyu in Codewars.Before you are accepted on to a Final Project you need to complete the Final Projects collection. You must not pair on these kata. "},{"title":"Database 2- More SQL and integration with NodeJS","type":0,"sectionRef":"#","url":"/db/week-2/lesson","content":"","keywords":""},{"title":"What will we learn today?​","type":1,"pageTitle":"Database 2- More SQL and integration with NodeJS","url":"/db/week-2/lesson#what-will-we-learn-today","content":"Revision from last weekMore SQL Changing the definition of a tableDropping a tableUpdating a rowDeleting a rowJoin tablesOther useful operations Integration with NodeJS Introduction to node-postgresLoading data from a database with a GET endpoint Coursework  "},{"title":"Learning Objectives​","type":1,"pageTitle":"Database 2- More SQL and integration with NodeJS","url":"/db/week-2/lesson#learning-objectives","content":"Add and remove columns in a pre-existing table using PostgreSQL using ALTERRename tables and columns in a pre-existing table using PostgreSQL using DELETEUpdate rows in a pre-existing table using PostgreSQL using UPDATECombine tables together using PostgreSQL using INNER JOINConnect a PostgreSQL database to a NodeJS applicationRetrieve data from a PostgreSQL database in a NodeJS application  "},{"title":"More SQL​","type":1,"pageTitle":"Database 2- More SQL and integration with NodeJS","url":"/db/week-2/lesson#more-sql","content":"For the following, use the file cyf_hotels_exercise5.sql from the previous class to reinitialise your database with psql -d cyf_hotels -f cyf_hotels_exercise5.sql. "},{"title":"Changing the definition of a table​","type":1,"pageTitle":"Database 2- More SQL and integration with NodeJS","url":"/db/week-2/lesson#changing-the-definition-of-a-table","content":"Sometimes, you may need to change the definition of a table you created before without deleting it. Such changes include renaming a table, adding/removing a column, changing the name of a column, changing the type of a column etc... The general syntax to perform these operations is: ALTER TABLE table_name action;  For example, to add a new column to the existing customers table: ALTER TABLE customers ADD COLUMN date_of_birth DATE;  To delete an existing column from the customers table: ALTER TABLE customers DROP COLUMN date_of_birth;  To rename the table customers into clients: ALTER TABLE customers RENAME TO clients;  For more examples, you can consult the following tutorial: Postgres alter table. Exercise 1​ Exercise Add a column date_of_birth of type DATE in the customers table.Rename the column date_of_birth to birthdate in the customers table.Delete the column birthdate from the customers table "},{"title":"Dropping a table​","type":1,"pageTitle":"Database 2- More SQL and integration with NodeJS","url":"/db/week-2/lesson#dropping-a-table","content":"To delete the table customers: DROP TABLE customers;  Exercise 2​ Exercise Create a new table testDrop the table test "},{"title":"Updating a row​","type":1,"pageTitle":"Database 2- More SQL and integration with NodeJS","url":"/db/week-2/lesson#updating-a-row","content":"The general construction to update a row is: UPDATE table SET column1 = value1, column2 = value2 WHERE condition;  For example, to update the name and country of the customers with ID 3: UPDATE customers SET name='Bob Marley', country='Jamaica' WHERE id=3;  Exercise 3​ Exercise Update the postcode of the hotel named Elder Lake Hotel to L10XYZUpdate the number of rooms of Cozy Hotel to 25For the customer named Nadia Sethuraman, update her address to 2 Blue Street, her city to Glasgow and her postcode to G11ABC in one queryUpdate all the bookings of customer with ID 1 for the hotel with ID 1 to 5 nights in one query "},{"title":"Deleting a row​","type":1,"pageTitle":"Database 2- More SQL and integration with NodeJS","url":"/db/week-2/lesson#deleting-a-row","content":"The syntax to delete a row is: DELETE FROM table WHERE condition;  For example, to delete the booking with ID 4: DELETE FROM bookings WHERE id=4;  NOTE: If you don't supply a WHERE clause with DELETE or UPDATE the command will be applied to all the rows in the table which is rarely what you want. Exercise 4​ Exercise Delete the booking of customer ID 8 for the date 2020-01-03Delete all the bookings of customer ID 6Delete the customer with ID 6 "},{"title":"Joining tables​","type":1,"pageTitle":"Database 2- More SQL and integration with NodeJS","url":"/db/week-2/lesson#joining-tables","content":"Sometimes, you will need to retrieve data which are spread in different tables in a single response. For this purpose, you will need to join tables together. The general syntax is: SELECT A.column1, B.column2 FROM A INNER JOIN B ON A.b_id=B.id;  For example, to load all the bookings along with customer data: SELECT * FROM customers INNER JOIN bookings ON customers.id=bookings.customer_id;  To load all the bookings along with customer data and hotel data: SELECT * FROM bookings INNER JOIN customers ON customers.id=bookings.customer_id INNER JOIN hotels ON hotels.id=bookings.hotel_id;  To load the booking checkin dates for customer ID 1 along with the customer name and the hotel name: SELECT bookings.checkin_date,customers.name,hotels.name FROM bookings INNER JOIN customers ON customers.id=bookings.customer_id INNER JOIN hotels ON hotels.id=bookings.hotel_id WHERE customers.id=1;  Exercise 5​ Exercise Try and understand each of the queries above in your psql promptRetrieve all the bookings along with customer data for bookings starting in 2020Retrieve the customer names, booking start dates and number of nights for all customers who booked the hotel name Jade Peaks HotelRetrieve all the booking start dates with customer names and hotel names for all bookings for more than 5 nights "},{"title":"Other useful operations​","type":1,"pageTitle":"Database 2- More SQL and integration with NodeJS","url":"/db/week-2/lesson#other-useful-operations","content":"Ordering the result: SELECT * FROM table ORDER BY column;  This will sort the returned rows in the ascending order for &quot;column&quot;. To sort them in descending order, use: SELECT * FROM table ORDER BY column DESC;  Limiting the number of results returned: SELECT * FROM table LIMIT 10;  Returning all customers whose ID is 1, 2, 3 or 4: SELECT * FROM customers WHERE id IN (1,2,3,4);  Query by pattern matching, for example retrieve all customers whose name starts with Bob: SELECT * FROM customers WHERE name LIKE 'Bob%';  You can combine different operations together, for example, if you want to retrieve all the booking start dates with the customer names and hotel names for customer names starting with the letter M ordered by hotel name with a limit of 3 results: SELECT bookings.checkin_date,customers.name,hotels.name FROM bookings INNER JOIN customers ON customers.id=bookings.customer_id INNER JOIN hotels ON hotels.id=bookings.hotel_id WHERE customers.name LIKE 'M%' ORDER BY hotels.name LIMIT 3;  Exercise 6​ Exercise Retrieve all customers whose name starts with the letter SRetrieve all hotels which have the word Hotel in their nameRetrieve the booking start date, customer name, hotel name for the top 5 bookings ordered by number of nights in descending order "},{"title":"Integration with NodeJS​","type":1,"pageTitle":"Database 2- More SQL and integration with NodeJS","url":"/db/week-2/lesson#integration-with-nodejs","content":""},{"title":"Introduction to node-postgres​","type":1,"pageTitle":"Database 2- More SQL and integration with NodeJS","url":"/db/week-2/lesson#introduction-to-node-postgres","content":"&quot;node-postgres is a collection of node.js modules for interfacing with your PostgreSQL database.&quot; - https://node-postgres.com/ In the following, we will use node-postgres to... Connect to a databaseSend SQL query to the database and get results "},{"title":"Loading data from a database with a GET endpoint​","type":1,"pageTitle":"Database 2- More SQL and integration with NodeJS","url":"/db/week-2/lesson#loading-data-from-a-database-with-a-get-endpoint","content":"Let's build a brand new NodeJS application with a single GET endpoint to load the list of hotels that you already have in the hotels table of the cyf_hotels database. First, create a new NodeJS application that we will call cyf-hotels-api (enter server.js when asking about the entry point): mkdir cyf-hotels-api &amp;&amp; cd cyf-hotels-api &amp;&amp; npm init  As before, we will use the Express library to build our API, and the node-postgres library to connect with our database: npm install --save express npm install --save pg  Create a server.js file, import express, initialise the server and start listening for requests: const express = require(&quot;express&quot;); const app = express(); app.listen(3000, function() { console.log(&quot;Server is listening on port 3000. Ready to accept requests!&quot;); });  Import pg library and create a new GET endpoint to load the list of hotels: const { Pool } = require('pg'); const pool = new Pool({ user: 'postgres', host: 'localhost', database: 'cyf_hotels', password: '', port: 5432 }); app.get(&quot;/hotels&quot;, function(req, res) { pool.query('SELECT * FROM hotels') .then((result) =&gt; res.json(result.rows)) .catch((error) =&gt; { console.error(error); res.status(500).json(error); }); });  In the code above: We first import the Pool class from the pg library, which is used to connect to a databaseWe create a new pool where we specify the credentials to connect to the cyf_hotels databaseWe then create a new /hotels endpoint where we use the method query() to send a SQL query to load all the hotels from the table hotels and return the results with result.rows. You can write any valid SQL query that you learned in the query() method!The query() method returns a promise. It is very similar to how the fetch API works in the browser. Start your server with node server.js and try to reach the /hotels endpoint to see the list of hotels currently available in your hotels table of your cyf_hotels database. You can try to create/update/delete hotels to verify that your API always returns what is stored in your database. "},{"title":"Coursework​","type":1,"pageTitle":"Database 2- More SQL and integration with NodeJS","url":"/db/week-2/lesson#coursework","content":"All of the coursework for this week can be found here. "},{"title":"Feedback​","type":1,"pageTitle":"Database 2- More SQL and integration with NodeJS","url":"/db/week-2/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/db/week-3/instructors","content":"","keywords":""},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/db/week-3/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-db For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"What worked well​","type":1,"pageTitle":"Instructor Notes","url":"/db/week-3/instructors#what-worked-well","content":""},{"title":"Things to improve​","type":1,"pageTitle":"Instructor Notes","url":"/db/week-3/instructors#things-to-improve","content":""},{"title":"Other thoughts​","type":1,"pageTitle":"Instructor Notes","url":"/db/week-3/instructors#other-thoughts","content":""},{"title":"Practice Day","type":0,"sectionRef":"#","url":"/finalproject/demoday/practice-day","content":"Practice Day","keywords":""},{"title":"Preparation","type":0,"sectionRef":"#","url":"/finalproject/demoday/preparation","content":"","keywords":""},{"title":"Learning Outcomes​","type":1,"pageTitle":"Preparation","url":"/finalproject/demoday/preparation#learning-outcomes","content":"By the end of this session you will be able to Describe what Demo Day is and what will happen on the dayList the aims of the Demo Day presentationsBuild a presentation that will impress employersWrite a description about yourself that is succinct and memorableHighlight what makes a presentation good or badUse software to create videos of your projects to ensure your presentation goes smoothly "},{"title":"Slideshow​","type":1,"pageTitle":"Preparation","url":"/finalproject/demoday/preparation#slideshow","content":" "},{"title":"What is Demo Day?​","type":1,"pageTitle":"Preparation","url":"/finalproject/demoday/preparation#what-is-demo-day","content":"Demo Day is when we invite employers to see the Final Projects that you have been working on over the past four weeks. It's a chance for us all to come together to see what you've achieved! You'll be expected to present your product using a combination of presentations, live demonstrations and videos. "},{"title":"Let's Prepare!​","type":1,"pageTitle":"Preparation","url":"/finalproject/demoday/preparation#lets-prepare","content":"It’s time to start preparing for Demo Day! Part of the Demo Day event will be a demonstration and presentation from each team to show what they’ve achieved, so you need to prepare for that. As well as the actual outputs of your project you should be thinking about: What have you learned, personally and as a team? This can be related to technology, product, process, ...Which parts did you find most enjoyable and/or interesting? Has that impacted what you’re thinking about in terms of careers or next steps? How?How did you find collaborating as a team? What was made easier or harder by working with others, compared to working largely on your own?How happy are you with where you got to? What did the users think? What part of the product would you build next, if you had more time? Try to show the journey, not just the destination - if you have pictures of early sketches or screenshots from previous builds of app, for example, you can use those to tell a story about how you approached the project and the progress you’ve made behind the scenes. This isn’t always obvious to less technical members of the audience, so it’s important to be able to illustrate the work you’ve put in. "},{"title":"Presentation Tips​","type":1,"pageTitle":"Preparation","url":"/finalproject/demoday/preparation#presentation-tips","content":"Introduction​ Don't spend time talking about the volunteers that helped with your project - the demo day is about you! Employers don't care about volunteers! (It's fine, the volunteers already know that you appreciate it!)It's a good idea to say what type of job that you're interested in - so if you'd like to be a backend dev, say so! Presentation​ When you talk about challenges, make sure you say how you solved it. If you didn't manage to solve it, then talk about what you tried to solve itTalk about how you communicated and collaborated with each other (Github, Slack, calls, etc). Remember that this is a big part of a developer's day so it's a good idea to show that you have experience of this Demo​ Have a script for the demo and practice it! You should be able to talk without thinking too much about itPractice switching between demo and slides so that you don't waste too much time on itUse tabs to pre-fill forms - we don't need to see you type out stuff, especially if you don't explain itUse Incognito mode to prevent logging into/out. With incognito mode, you can be logged into multiple accounts at onceConsider recording a (silent) video of the demo - what if there's no internet? Or the app goes down? But remember that this is your best chance to make a personal impression; Never stand there silently while a video talks!Get someone to hold the mic if you're typing/demoing - then you have two hands!Make the font size bigger so people can see it at the back of the room. (Ctrl-+ on Windows/Linux or Cmd-+ on Mac) "},{"title":"Common questions after the demo​","type":1,"pageTitle":"Preparation","url":"/finalproject/demoday/preparation#common-questions-after-the-demo","content":"It's a good idea to prepare answers for these questions: What was your biggest challenge?If you were starting from scratch would you change anything?How did you test your app?How does your app work on mobile devices?Did you think about accessibility? "},{"title":"Prep your codebase​","type":1,"pageTitle":"Preparation","url":"/finalproject/demoday/preparation#prep-your-codebase","content":"Finally, make sure your README is filled out and presents your project clearly.Make sure your repo is linked on your deployed site and your deployed site is linked on your repo.Fork your group project to your personal Github and pin it to your profile.Generally imagine that employers are now looking at your work: you are launching into the world! There is more guidance on the Graduate Module "},{"title":"External Projects","type":0,"sectionRef":"#","url":"/finalproject/external-projects","content":"","keywords":""},{"title":"Past Projects​","type":1,"pageTitle":"External Projects","url":"/finalproject/external-projects#past-projects","content":"Here are examples of web apps we built as a Final Project: Over The Line with The Compass CollectiveChatterbox TalentsThe Breteau FoundationAkwaaba You can find example project briefs on the Project Brief page. "},{"title":"Goals​","type":1,"pageTitle":"External Projects","url":"/finalproject/external-projects#goals","content":"With the final projects, we’re looking to give our trainees: Experience of collaborating in a team to deliver softwareAn opportunity to solve real world business problemsThe chance to bring together the different things they’ve learnedA real example to talk about in job interviews and guide their interests and to give our partners: A useful piece of software that they can use as-is or build on after the project More details can be found on the Intro and Preparation pages. "},{"title":"We will need a Product Owner from your organisation on the team​","type":1,"pageTitle":"External Projects","url":"/finalproject/external-projects#we-will-need-a-product-owner-from-your-organisation-on-the-team","content":"Having an active Product Owner leads to faster delivery with better solutions. Historically, one of the most common blockers to a successful project has been slow communication between stakeholders and our trainees. Trainees may likely become blocked, spin wheels, or go off on a tangent if they have a burning question and can't get it answered. In an ideal world, you are able to answer trainee questions within one working day. If this might not be possible, let us know and we will select an Internal Product Manager who will be empowered to make decisions on your behalf. The Product Owner role and commitment is described in detail on our docs. "},{"title":"What is a Good Project?​","type":1,"pageTitle":"External Projects","url":"/finalproject/external-projects#what-is-a-good-project","content":"It's important that the projects that we work on fulfill some base requirements to make sure they go smoothly. All Final Projects aim to be a Minimum Viable Product. This means they may be rough around the edges but have all of the core functionality working. "},{"title":"Functionality​","type":1,"pageTitle":"External Projects","url":"/finalproject/external-projects#functionality","content":"A Good Final Project should have the following qualities Be an interactive website This means a website that a user can interact with to create, read, upload, delete data.For example, a photo hosting service, Q+A Service or Custom Events Platform would fulfil this criteriaA static website like the CodeYourFuture website would not Be completable in four weeks of work This means the website should not be too large that they can't finish it or too small that they complete it too quicklyFor example, a newsletter sign-up form would be too smallFor example, a full content management system would be too large Be well-defined This means that from day one our trainees understand what they are buildingFor example, a well defined project should be able to answer using User Stories all of the functionality of the projectWe can work with Charities to define projects if they contact us early enough "},{"title":"Technical Functionality​","type":1,"pageTitle":"External Projects","url":"/finalproject/external-projects#technical-functionality","content":"Don't know what anything here means? That's fine! The above section covers this in less technical details We use the following technologies at CodeYourFuture JavaScriptReactNode with ExpressMongoDB or PostgreSQL An external Final Project should use all of these technologies into a single Full Stack package. This is important as we want our trainees to use all of the skills that they have learnt in our course. If your tech stack is far outside of the above core frameworks, send your project anyway and we will assess it case-by-case. "},{"title":"Limitations​","type":1,"pageTitle":"External Projects","url":"/finalproject/external-projects#limitations","content":"As Junior Developers, our trainees do have some limits on what they can produce Visual Design Complexity An overly complex design will take a lot longer for our trainees to develop. Try to keep your designs simple and functional. Instant Answers You shouldn't expect our trainees to be able to give instant answers to any technical questions you might have. They will get there with time however! "},{"title":"Next Steps​","type":1,"pageTitle":"External Projects","url":"/finalproject/external-projects#next-steps","content":""},{"title":"1) Details Form​","type":1,"pageTitle":"External Projects","url":"/finalproject/external-projects#1-details-form","content":"A good next step to getting started with defining your project is to complete this form. CodeYourFuture - Projects Specification Form It is important that you answer all of these questions in as much details as possible. Even irrelevant details will help us understand what you are trying to achieve. "},{"title":"2) Design Mock-Ups​","type":1,"pageTitle":"External Projects","url":"/finalproject/external-projects#2-design-mock-ups","content":"Finally, you should work with us to create some simple designs of your product. This will give us insight into exactly what you want. These will not be the final designs of what we will be building; they're just a tool to help us work out what you want built. You needn't use any specialised tools to design this. Paint or Pen &amp; Paper will do for this step. If you want to use a digital tool we recommend Excalidraw. Try to think about how each individual page will look. Will the user need to create an account? Think of the form they will need to fill in. Does the user view content on a page? What content should be included? Get in contact with your local Programme Manager to arrange this. "},{"title":"Database 3 - More integration with NodeJS","type":0,"sectionRef":"#","url":"/db/week-3/lesson","content":"","keywords":""},{"title":"What will we learn today?​","type":1,"pageTitle":"Database 3 - More integration with NodeJS","url":"/db/week-3/lesson#what-will-we-learn-today","content":"Revision from last weekRecap integration of cyf_hotels DB with NodeJSCRUD operations with NodeJS and PostgreSQL Creating dataReading dataUpdating dataDeleting data Coursework  "},{"title":"Learning Objectives​","type":1,"pageTitle":"Database 3 - More integration with NodeJS","url":"/db/week-3/lesson#learning-objectives","content":"By the end of this lesson trainees should be able to Create an API endpoint that can add data to a databaseWrite code that effectively validates data before adding it to a databaseBe aware of the dangers of SQL injection attacks, and how to avoid themCreate an API endpoint that can retrieve data from a database with multiple parametersCreate an API endpoint that can update data in a databaseCreate an API endpoint that can delete data in a database  "},{"title":"Recap integration of cyf_hotels DB with NodeJS​","type":1,"pageTitle":"Database 3 - More integration with NodeJS","url":"/db/week-3/lesson#recap-integration-of-cyf_hotels-db-with-nodejs","content":"For this class, we will use the tables and data from cyf_hotels_exercise5.sql. To start from a clean state for your cyf_hotels database, run psql -d cyf_hotels -f cyf_hotels_exercise5.sql. During the last class, we created a new NodeJS project called cyf-hotels-api with a single API endpoint /hotels to get the list of all hotels. In this class, we will add other endpoints with more functionalities to interact with the cyf_hotels database. const express = require(&quot;express&quot;); const app = express(); const { Pool } = require(&quot;pg&quot;); const pool = new Pool({ user: &quot;postgres&quot;, host: &quot;localhost&quot;, database: &quot;cyf_hotels&quot;, password: &quot;&quot;, port: 5432, }); app.get(&quot;/hotels&quot;, function (req, res) { pool .query(&quot;SELECT * FROM hotels&quot;) .then((result) =&gt; res.json(result.rows)) .catch((error) =&gt; { console.error(error); res.status(500).json(error); }); }); app.listen(3000, function () { console.log(&quot;Server is listening on port 3000. Ready to accept requests!&quot;); });  "},{"title":"CRUD operations with NodeJS and PostgreSQL​","type":1,"pageTitle":"Database 3 - More integration with NodeJS","url":"/db/week-3/lesson#crud-operations-with-nodejs-and-postgresql","content":"&quot;The acronym CRUD refers to all of the major functions that are implemented in relational database applications. Each letter in the acronym can map to a standard Structured Query Language (SQL) statement and Hypertext Transfer Protocol (HTTP) method [...].&quot; - Wikipedia  "},{"title":"Creating data​","type":1,"pageTitle":"Database 3 - More integration with NodeJS","url":"/db/week-3/lesson#creating-data","content":"In the following, we will add a new API endpoint to create a new hotel in the table hotels of the cyf_hotels database. As a reminder, here is an example of a SQL insert statement to add a new hotel: INSERT INTO hotels (name, rooms, postcode) VALUES ('New Hotel', 5, 'ABC001');  As we create a new record in the database, we will add a new POST endpoint in the cyf-hotels-api project from last class. Moreover, we need to be able to pass some parameters to this API endpoint such as the hotel name, the number of rooms and the postcode, so we can use this API to create a different hotel. These parameters can be sent in the body of the request. To access the parameters in the body of the request with Express.JS, we need add the following line in the server.js file of the cyf-hotels-api project: app.use(express.json());  This means the body will be automatically parsed from a string into a JSON object. We can finally add our new endpoint to create a new hotel: app.post(&quot;/hotels&quot;, function (req, res) { const newHotelName = req.body.name; const newHotelRooms = req.body.rooms; const newHotelPostcode = req.body.postcode; const query = &quot;INSERT INTO hotels (name, rooms, postcode) VALUES ($1, $2, $3)&quot;; pool .query(query, [newHotelName, newHotelRooms, newHotelPostcode]) .then(() =&gt; res.send(&quot;Hotel created!&quot;)) .catch((error) =&gt; { console.error(error); res.status(500).json(error); }); });  What could go wrong with the code above? There is no validation of any user inputs which could result in errors, duplications or inconsistent data in the database! Here are few examples of things we can verify before creating the hotel in the database: Check that the number of rooms is a positive numberCheck that no hotel with the same name already exists in the database... Let's start by validating that the number of rooms is a positive number and if it doesn't, return an error. if (!Number.isInteger(newHotelRooms) || newHotelRooms &lt;= 0) { return res .status(400) .send(&quot;The number of rooms should be a positive integer.&quot;); }  Then we can validate the new hotel doesn't already exist in the database, thus preventing duplicate data. app.post(&quot;/hotels&quot;, function (req, res) { const newHotelName = req.body.name; const newHotelRooms = req.body.rooms; const newHotelPostcode = req.body.postcode; if (!Number.isInteger(newHotelRooms) || newHotelRooms &lt;= 0) { return res .status(400) .send(&quot;The number of rooms should be a positive integer.&quot;); } pool .query(&quot;SELECT * FROM hotels WHERE name=$1&quot;, [newHotelName]) .then((result) =&gt; { if (result.rows.length &gt; 0) { return res .status(400) .send(&quot;An hotel with the same name already exists!&quot;); } else { const query = &quot;INSERT INTO hotels (name, rooms, postcode) VALUES ($1, $2, $3)&quot;; pool .query(query, [newHotelName, newHotelRooms, newHotelPostcode]) .then(() =&gt; res.send(&quot;Hotel created!&quot;)) .catch((error) =&gt; { console.error(error); res.status(500).json(error); }); } }); });  Exercise 1​ Exercise Follow the above steps to create a new POST endpoint /hotels to create a new hotel. Make sure to add validation for the number of rooms and the hotel name. Test your new API endpoint with Postman and check that the new hotel has been correctly created in your database.Add a new POST API endpoint to create a new customer in the customers table.Add validation to check that there is no other customer with the same name in the customers table before creating a new customer. "},{"title":"Reading data​","type":1,"pageTitle":"Database 3 - More integration with NodeJS","url":"/db/week-3/lesson#reading-data","content":"We already have one GET endpoint to load all the hotels in the database. However, we can improve this endpoint and add a couple of extra functionalities. First, we may want to order the list of hotels by name: app.get(&quot;/hotels&quot;, function (req, res) { pool .query(&quot;SELECT * FROM hotels ORDER BY name&quot;) .then((result) =&gt; res.json(result.rows)) .catch((error) =&gt; { console.error(error); res.status(500).json(error); }); });  Another functionality which could be useful is to filter the hotel with a keyword to be able to search for a specific hotel name: app.get(&quot;/hotels&quot;, function (req, res) { const hotelNameQuery = req.query.name; let query = `SELECT * FROM hotels ORDER BY name`; let params = []; if (hotelNameQuery) { query = `SELECT * FROM hotels WHERE name LIKE $1 ORDER BY name`; params.push(`%${hotelNameQuery}%`); } pool .query(query, params) .then((result) =&gt; res.json(result.rows)) .catch((error) =&gt; { console.error(error); res.status(500).json(error); }); });  In some case, you would want to load only a specific hotel by id. Let's define a new GET endpoint to load one specific hotel: app.get(&quot;/hotels/:hotelId&quot;, function (req, res) { const hotelId = req.params.hotelId; pool .query(&quot;SELECT * FROM hotels WHERE id=$1&quot;, [hotelId]) .then((result) =&gt; res.json(result.rows)) .catch((error) =&gt; { console.error(error); res.status(500).json(error); }); });  Exercise 2​ Exercise Add the GET endpoints /hotels and /hotels/:hotelId mentioned above and try to use these endpoints with Postman.Add a new GET endpoint /customers to load all customers ordered by name.Add a new GET endpoint /customers/:customerId to load one customer by ID.Add a new GET endpoint /customers/:customerId/bookings to load all the bookings of a specific customer. Returns the following information: check in date, number of nights, hotel name, hotel postcode. "},{"title":"Updating data​","type":1,"pageTitle":"Database 3 - More integration with NodeJS","url":"/db/week-3/lesson#updating-data","content":"We can now implement an endpoint to update a customer record in the database. For this, we will use a PUT endpoint. app.put(&quot;/customers/:customerId&quot;, function (req, res) { const customerId = req.params.customerId; const newEmail = req.body.email; pool .query(&quot;UPDATE customers SET email=$1 WHERE id=$2&quot;, [newEmail, customerId]) .then(() =&gt; res.send(`Customer ${customerId} updated!`)) .catch((error) =&gt; { console.error(error); res.status(500).json(error); }); });  What can go wrong in the code above? Again, there is no validation! We could set an empty email or even a string which is not following the format of an email. Remember, validating data is very important to make sure you don't end up with inconsistent data in your database! Exercise 3​ Exercise Add the PUT endpoint /customers/:customerId and verify you can update a customer email using Postman.Add validation for the email before updating the customer record in the database. If the email is empty, return an error message.Add the possibility to also update the address, the city, the postcode and the country of a customer. Be aware that if you want to update the city only for example, the other fields should not be changed! "},{"title":"Deleting data​","type":1,"pageTitle":"Database 3 - More integration with NodeJS","url":"/db/week-3/lesson#deleting-data","content":"To delete a record from the database, we will use a DELETE endpoint: app.delete(&quot;/customers/:customerId&quot;, function (req, res) { const customerId = req.params.customerId; pool .query(&quot;DELETE FROM customers WHERE id=$1&quot;, [customerId]) .then(() =&gt; res.send(`Customer ${customerId} deleted!`)) .catch((error) =&gt; { console.error(error); res.status(500).json(error); }); });  However, if you try to delete a customer which already has some bookings, the previous endpoint will fail. Do you know why? You cannot delete a customer whose ID is used as a foreign key in another table (in this case, in the bookings table). Let's delete all the customer bookings first: app.delete(&quot;/customers/:customerId&quot;, function (req, res) { const customerId = req.params.customerId; pool .query(&quot;DELETE FROM bookings WHERE customer_id=$1&quot;, [customerId]) .then(() =&gt; pool.query(&quot;DELETE FROM customers WHERE id=$1&quot;, [customerId])) .then(() =&gt; res.send(`Customer ${customerId} deleted!`)) .catch((error) =&gt; { console.error(error); res.status(500).json(error); }); });  Exercise 4​ Exercise Add the DELETE endpoint /customers/:customerId above and verify you can delete a customer along their bookings with Postman.Add a new DELETE endpoint /hotels/:hotelId to delete a specific hotel. Note: A hotel can only be deleted if it doesn't appear in any of the customers' bookings! Make sure you add the corresponding validation before you try to delete a hotel. "},{"title":"Coursework​","type":1,"pageTitle":"Database 3 - More integration with NodeJS","url":"/db/week-3/lesson#coursework","content":"All of the coursework for this week can be found here. "},{"title":"Feedback​","type":1,"pageTitle":"Database 3 - More integration with NodeJS","url":"/db/week-3/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Final Project Preparation","type":0,"sectionRef":"#","url":"/finalproject/prep","content":"","keywords":""},{"title":"Checklist to organise Final Projects​","type":1,"pageTitle":"Final Project Preparation","url":"/finalproject/prep#checklist-to-organise-final-projects","content":"Getting the Final Projects ready is not a task that can be done a week before the module. A lot of decisions have to be made beforehand, so this high-level list of the steps Volunteers and PROM (Programme Managers) should do in order to get everything ready for Final Projects. It also has the main links of important documents. When you are on the React Module  Must review the trainee’s performance and make readiness for Final Projects decision If you haven't yet, make sure you identify trainees that will be filling in roles such as UI/UX Designer, Tester or Product Delivery Ask internally and externally for possible ideas of charities that could be part of Final Projects. The form used should be the Final Project Proposals form. Start recruiting Tech Lead, Product Managers and UI/UX Designer for Final Projects. See the role descriptions.  When you are on the NodeJS Module  Review the project ideas with Tech Leads and Product Managers defining technical feasibility and scope size. You might have to have volunteers clarify some information with the charities Identify which of the ideas will be used as a final project. Send feedback to all charities if they have been chosen or not. For the charities/organisations that will work with us, use this template to introduce the volunteers and ensure they understand what will be happening, as well as their Product Owner responsibility Onboard the volunteers with the standard process Create a volunteer channel, so it's easier to contact them and they can support you with tasks, such as reviewing briefings Use this template to identify the projects that will be used and who will be on which team Let volunteers choose which project they would like to be on When you are on SQL Module  Trainees must have completed up to Level 300 of the Full Stack Assessment by week 3 of the module before Final Projects. Must review the trainees' performance and identify the ones going to Final Projects Identify trainees that are close in performance and allocate them to the same project. We encourage trainees to work with different people, so try to mix the teams up. Don’t forget to update the spreadsheet. Have a meeting with all volunteers and trainees to go through the details of the final project (presentation to be created with expectation, escalation process, type of support, overview of the trainees per team, etc). Don't forget to record it and share the recording with all the participants, with their consent. Introduce all teams and people in it and create all Slack groups A day before the first Saturday of Final Projects, send the project briefing to the team "},{"title":"Project Submissions​","type":1,"pageTitle":"Final Project Preparation","url":"/finalproject/prep#project-submissions","content":"As mentioned above, before the Final Project starts ideas should be gathered and fully specified before the start of the first week. The form used to receive these ideas is this. A good project should Show all of the skills the trainee has learnt at CodeYourFuture so farBe large enough that four people can work on it for 4-6 weeks and still have work to doBe something that the trainee is passionate aboutBe interesting to employersSolve a real world problem that you have faced in the past or at CodeYourFuture All code should be done in public on the trainees' Githubs, unless there is a strong security concern with an external project. It should never belong to a mentor. This work is an important portfolio piece. Commits must belong to the trainee and the work should be clearly displayed to potential future employers. "},{"title":"Teams​","type":1,"pageTitle":"Final Project Preparation","url":"/finalproject/prep#teams","content":"Before class starts volunteer and trainee teams should have been assigned. Please make a copy of this template spreadsheet to organise the teams and track the progress of the projects.Repos must be logged on this spreadsheet so everyone can see what is happening during the module.All trainees should make sure that they are comfortable with their roles and what they will be required to do. More information about roles. "},{"title":"Starter Projects​","type":1,"pageTitle":"Final Project Preparation","url":"/finalproject/prep#starter-projects","content":"Here is a starter project for Postgres/Express/React/Node. Documentation can be found here. If you need help for any of these projects, you can find help in this Slack channel: #cyf-full-stack-starter-kit "},{"title":"Briefing Presentation​","type":1,"pageTitle":"Final Project Preparation","url":"/finalproject/prep#briefing-presentation","content":"This Briefing presentation gives an overview of the day to day running, the roles and the aims of the Final Project "},{"title":"Final Projects","type":0,"sectionRef":"#","url":"/finalproject/intro","content":"","keywords":""},{"title":"Learning Goals​","type":1,"pageTitle":"Final Projects","url":"/finalproject/intro#learning-goals","content":"During the Project you will work on your technical and communication skills. At the end of this module you'll learn the following: Technical skills: How to build a complete full-stack applicationUnderstanding how each part of an application relates to each otherWhat it means to work on a featureHow to work with Git in a team settingHow to write readable code Communication skills: How to communicate effectively with team membersKeeping track of your project's progressKnowing if you understand what's asked of youHow to communicate with non-developers about what you're doingLearning how to be solutions-orientedHow to work in a Agile setting "},{"title":"Objectives​","type":1,"pageTitle":"Final Projects","url":"/finalproject/intro#objectives","content":"The final projects form the final module of the course, comprising four weeks following the completion of the last teaching-based module (currently the database module). The objectives of this module are to: Bring together everything the trainees have learned so far (most projects involve a Node/Express backend with a database and a React frontend);Give an opportunity to demonstrate teamwork and a mix of interpersonal and technical skills that the trainees can talk about when applying for jobs; and Deliver something valuable for CYF or a partner organisation.Also: nice portfolio piece; practice agile stuff; practical experience of junior dev role. Project team Ideally, the project team would consist of the following: Three or four CYF trainees;Two volunteer mentors (Tech Lead and Product Manager, forming a balanced team; andA product owner. The mentor group would include an engineer (responsible for unblocking technical/architectural issues, not an extra developer), designer (responsible for user research and UI/UX) and product manager (responsible for prioritisation and alignment with the product owner’s goals). This gives an opportunity to bring in volunteers from the broader tech community, and exposes the trainees to the roles they could be collaborating with in employment. More information on volunteer roles The product owner would either be a representative from the partner organisation or someone at CYF, depending on the project. It’s important that they are able to engage at least twice a week with the team, and have the authority to make decisions that let the team keep moving. "},{"title":"Weekly plan​","type":1,"pageTitle":"Final Projects","url":"/finalproject/intro#weekly-plan","content":"We’re going to run the final projects in weekly “sprints”, planning out what we’re going to do as teams and as individuals. Each week will therefore look something like: Daily standup: post a daily message in the team Slack channel to let the rest of the team know what you’re working on, what progress you’ve made (even, and perhaps especially, if it’s none so far) and share anything that’s blocking you. Set a time for this and stick to it. Don't forget to also read your team members updates and try to help them when they are blocked. Afterwards, post a team summary in the main class channel. Mid-week check-in: you should have at least one Slack call with the whole team and a mentor during the week to sync on progress, escalate any blockers and make sure that you’re still heading in the right direction. Classes: we’ll continue to meet on class days where we will be spending time on: Demo: integrate all of your work together and share your progress so far with the mentors.Retrospective: what’s gone well this week? What’s gone badly? What are you going to do differently next week to make things better?User research: show what you’ve built and what you’re planning to build next to potential users (other trainees, mentors, etc.) and use any feedback they have to improve your plans.Sprint planning: decide what you’re each going to be doing during the following week and where you want to be by the next class.Technical support: mentors will be on hand to help you get unstuck from any blocking technical issues. "},{"title":"Contributions Check In​","type":1,"pageTitle":"Final Projects","url":"/finalproject/intro#contributions-check-in","content":"It's important to evaluate our contributions to the group. Here's what we expect: Roughly equal pull requests (PRs). That is, we do not expect everyone to open the exact same number of PRs or commit the same number of lines of code, but we do expect features to be fairly evenly shared. As a quick guide: in a group of four, no one commits more than 33% of the features and no one commits less than 20%. These contributions will be measured with a tracker similar to this templateSometimes PRs are not merged, as the project develops and your understanding of the problem domain develops with it. That is absolutely fine and normal. It is still important that you show your work.A full stack developer must deliver features that touch each part of the stack. This means at minimum you must build a component of UI that interacts with the database and you must configure and manage that entire process. At best this means multiple features across different parts of the stack. "},{"title":"Project Briefings","type":0,"sectionRef":"#","url":"/finalproject/projects","content":"Project Briefings Here are some examples of previous final projects. Project briefings: A SetDeskeandoWe are hereSTARLogistical LunchDevelopment PlannerEnergise!Goal!Study BuddiesJobs From The BoardsHub Planner Here are some ideas for projects from previous years: GlossaryClass Behaviour RegisterFeedback TrackerQuiz AppSlack DashboardClass PlannerQ &amp; AGraduate DirectoryKnowledge ChecklistLanguage Exchange Website Additional ideas for projects can be found here Group Projects","keywords":""},{"title":"Final Project Roles","type":0,"sectionRef":"#","url":"/finalproject/roles","content":"","keywords":""},{"title":"Volunteer Roles​","type":1,"pageTitle":"Final Project Roles","url":"/finalproject/roles#volunteer-roles","content":""},{"title":"Product Manager / Scrum Master​","type":1,"pageTitle":"Final Project Roles","url":"/finalproject/roles#product-manager--scrum-master","content":"Full role description of roles Your main role is to coordinate the team and make sure everyone knows what they are working on. They can provide support in: Scheduling meetingsWorking with the team to create and update tasks on Github ProjectsIntroducing and enforcing Agile practices (e.g. sprint planning, retros) "},{"title":"Technical Lead​","type":1,"pageTitle":"Final Project Roles","url":"/finalproject/roles#technical-lead","content":"Full role description for Tech Lead (TL) The TL provides technical support to the trainees as they are developing their projects. They can provide support in: Architecture of the applicationHelping to solve specific implementation problemsHelping to solve specific bugs or errorsProviding overview of the entire project "},{"title":"User Interface/ User Experience (UI/UX) Designer​","type":1,"pageTitle":"Final Project Roles","url":"/finalproject/roles#user-interface-user-experience-uiux-designer","content":"UI/UX Designers are spread across multiple teamsFull role description for UI/UX designer. UI/UXers will provide their expertise in supporting the UI/UX trainees in each team. For example: Developing simple UI for the applicationsProviding support on answering UX issuesGiving advice on how to better design an application to our teams "},{"title":"Trainee Roles​","type":1,"pageTitle":"Final Project Roles","url":"/finalproject/roles#trainee-roles","content":"Trainees join Final Projects in their graduation role and stay with one team. These are updated in Graduation Roles but usually include: Full Stack DeveloperFront End DeveloperCloud / DevOps Engineer Quality EngineerProduct ManagerUX/UI Designer "},{"title":"Final Project - Week 1","type":0,"sectionRef":"#","url":"/finalproject/week-1/lesson","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Final Project - Week 1","url":"/finalproject/week-1/lesson#overview","content":"WelcomeGetting SetupAgile Development What is Agile Development?What is a Product Manager?Daily Stand-upsSprintsMid-week Check-ins What are we going to build?Sprint PlanningExit criteria and tracking the trainees work "},{"title":"Welcome​","type":1,"pageTitle":"Final Project - Week 1","url":"/finalproject/week-1/lesson#welcome","content":""},{"title":"1. Getting Setup (15 minutes)​","type":1,"pageTitle":"Final Project - Week 1","url":"/finalproject/week-1/lesson#1-getting-setup-15-minutes","content":"Once you have your team and your assignment, start by sorting out the basic administrative requirements. "},{"title":"1.1. Introductions​","type":1,"pageTitle":"Final Project - Week 1","url":"/finalproject/week-1/lesson#11-introductions","content":"Before we introduce ourselves let's introduce one of the tools we'll be using to collaborate during the project, Miro. Whiteboards are a simple yet powerful tool software teams use to share ideas and solve problems - Miro is just a virtual version. It should be intuitive but if you want help there's lots of content online. Once you're familiar with the tool one person should make a copy of this Miro board for your team to work on. OK, now we're set up let's get to know each other a little using Exercise 1: Icebreaker on your team's copy of the Miro board. "},{"title":"1.2. Give your team a name!​","type":1,"pageTitle":"Final Project - Week 1","url":"/finalproject/week-1/lesson#12-give-your-team-a-name","content":"Follow Exercise 2: Finding a name in Miro This will be your identity - use it in all communications/presentations. "},{"title":"1.3. Create a public Slack channel​","type":1,"pageTitle":"Final Project - Week 1","url":"/finalproject/week-1/lesson#13-create-a-public-slack-channel","content":"The name should start with your class name (e.g. #ldn6, #nw3, #wm1...) Invite all of your team members to it "},{"title":"1.4. Create a GitHub repository​","type":1,"pageTitle":"Final Project - Week 1","url":"/finalproject/week-1/lesson#14-create-a-github-repository","content":"Pick one member to own the repoEveryone else should be invited as a collaborator)You can fork this starter kit for a basic project Make sure you choose the correct one for the stack that you learnt "},{"title":"2. Agile Development (60 minutes)​","type":1,"pageTitle":"Final Project - Week 1","url":"/finalproject/week-1/lesson#2-agile-development-60-minutes","content":""},{"title":"2.1. What is Agile Development? (30-45 minutes)​","type":1,"pageTitle":"Final Project - Week 1","url":"/finalproject/week-1/lesson#21-what-is-agile-development-30-45-minutes","content":"Facilitated by Tech Assistants Before we determine what we're going to build we should discuss how we're going to build it. The Tech Assistants will lead us through a discussion on Agile best practices using this deck - What is Agile Development? "},{"title":"2.2. What is a Product Manager? (25-30 minutes)​","type":1,"pageTitle":"Final Project - Week 1","url":"/finalproject/week-1/lesson#22-what-is-a-product-manager-25-30-minutes","content":"Facilitated by Product Managers To work in an Agile way it's best to be part of a cross-functional team, so we've asked some Product Managers (PM) to join us for the final project. To introduce who they are and what their role is your PM will run through this What is a Product Manager? presentation. A note for PMs - don't forget to create your own copy of the presentation and update the 'Who am I?' section. "},{"title":"2.3. Project Management Boards (5 minutes)​","type":1,"pageTitle":"Final Project - Week 1","url":"/finalproject/week-1/lesson#23-project-management-boards-5-minutes","content":"Led by trainees Project Management boards are a tool that you can use to help you organise how you work. There are many tools in the market, but we use Github Projects. Create a copy of this Project Board to manage your work - Project Board After you've copied it have a quick look through and ask questions about anything that's unfamiliar - your PMs and TAs will be able to explain concepts like Backlogs and User Stories. You will create your User Stories as Issues on Github and add them to your project board on Github. Link your repo to your project board so you can do this easily. Your contributions will be evaluated during Final Projects, so it's important you show your work. "},{"title":"2.4. Daily Stand-ups (5 minutes)​","type":1,"pageTitle":"Final Project - Week 1","url":"/finalproject/week-1/lesson#24-daily-stand-ups-5-minutes","content":"Facilitated by Tech Assistants Every day you should post a message in the team's Slack channel to let the rest of the team know what you’re working on, what progress you’ve made (even, and perhaps especially, if it’s none so far) and share anything that’s blocking you. Don't forget to also read your teammates updates. This way you can understand what is happening in the team and support each other. Set a time for this and stick to it. Put it in your calendar. Afterwards, post a team summary in the main class channel. In your teams, you should decide the time you want to share your stand-up message and who is responsible for sharing them with the wider team.  "},{"title":"BREAK (10-15 minutes)​","type":1,"pageTitle":"Final Project - Week 1","url":"/finalproject/week-1/lesson#break-10-15-minutes","content":"Go stretch your legs or grab a snack! "},{"title":"3. What are we going to build? (90 minutes)​","type":1,"pageTitle":"Final Project - Week 1","url":"/finalproject/week-1/lesson#3-what-are-we-going-to-build-90-minutes","content":"You should be able to fill in the answers to this using Exercise 3: Defining our product in our Miro board "},{"title":"3.1. Framing the problem (20 minutes)​","type":1,"pageTitle":"Final Project - Week 1","url":"/finalproject/week-1/lesson#31-framing-the-problem-20-minutes","content":"Facilitated by Product Managers To figure out the right thing to build we should use our project brief to answer a few key questions, such as: What is the problem we're trying to solve?Who is our customer?What is the business value of solving this problem?What metrics could we use to measure if we've been successful? "},{"title":"3.2. Defining our solution (40 minutes)​","type":1,"pageTitle":"Final Project - Week 1","url":"/finalproject/week-1/lesson#32-defining-our-solution-40-minutes","content":"Facilitated by Product Managers Now we've got the problem framed we can spend some time thinking about specific solutions: What's our Lean Hypothesis?What is our ideal User Journey?What is our MVP (Minimum Viable Product)?What does the rest of our Roadmap look like? "},{"title":"3.3. Planning our work (30 minutes)​","type":1,"pageTitle":"Final Project - Week 1","url":"/finalproject/week-1/lesson#33-planning-our-work-30-minutes","content":"Facilitated by Tech Assistants When our solution is clear we can dig into some implementation details: What information will they need to have and/or provide to do that? This will allow you to figure what pages you could have and which endpoints you'll need to use. What entities/resources/data are we going to have in the system?What information do we need to store to achieve the goals? This will allow you to figure out what collections you’ll likely have in the database. What are we going to need to expose to the React app? Where is that the same as the above (i.e. you’re just going to have an endpoint for a resource) and where might it be different (i.e. there will be some kind of calculation or aggregation between the database and the frontend)? This will allow you to figure out what the REST API is going to look like. What might these pages look like? Sketch them out (either draw on paper and upload a photo or use lines and boxes on Miro) We don’t want to spend too much time doing very detailed layout How could we decompose them into separate components to work on? This will give you an idea of what work needs to get done during the week, which you can then assign to members of your team. Make sure you identify the &quot;edges&quot; between different tasks (e.g. you have to agree on an API so that the backend and frontend match up, or on the props passed between a parent component and a child component) so that you know who has to collaborate with whom to make sure it all fits together, and will be able to identify the impacts of one part getting blocked. At the end of this exercise you should add all the answers to the Miro and share with the rest of the class. If you haven't finished, make sure that you finish these by the end of the week.  "},{"title":"BREAK (10-15 minutes)​","type":1,"pageTitle":"Final Project - Week 1","url":"/finalproject/week-1/lesson#break-10-15-minutes-1","content":"Go stretch your legs or grab a snack! "},{"title":"4. Sprint Planning (60 minutes)​","type":1,"pageTitle":"Final Project - Week 1","url":"/finalproject/week-1/lesson#4-sprint-planning-60-minutes","content":"Facilitated by Product Managers In this project we will be working in Sprints. You can plan your first sprint using the your copy of the Project Board A Sprint is a unit of time (normally a week or two weeks) where teams believe they can deliver by the end of the time given to them. For Final Projects you will be mostly working in one week Sprints. tip Work with your product manager to begin to split the work into tasks that each person in the team can work on. These tasks should be as small as possible. After you've completed the task you should decide what you’re each going to be doing during the following week and what you want to have completed. Make sure that you assigned everybody tasks on your Project Management board. 5. Exit criteria and tracking the trainees work It is important for the trainees and volunteers to have clarity about the exit criteria for Final Projects. One important metric highlighted on our Intro page is about the trainee tracker. A file for your cohort will be created, so ask the Programma Manager to share this with you. Make sure this has been updated correctly (read notes on the titles that will guide you to fill it in correctly). We also ask trainees to send this form weekly so we can track what has been done. Every week a different trainee should submit this form with the correct information. "},{"title":"6. Prepare for next week​","type":1,"pageTitle":"Final Project - Week 1","url":"/finalproject/week-1/lesson#6-prepare-for-next-week","content":"Next week you will be presenting what you've done this week to the whole class. This means you need to prepare a presentation - it is the responsibility of the team to get this done but your product manager may be able to help co-ordinate. "},{"title":"Feedback​","type":1,"pageTitle":"Final Project - Week 1","url":"/finalproject/week-1/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Final Project - Week 2","type":0,"sectionRef":"#","url":"/finalproject/week-2/lesson","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Final Project - Week 2","url":"/finalproject/week-2/lesson#overview","content":"DemoRetrospectiveUser researchSprint PlanningTechnical SupportCooling periods "},{"title":"Demo (60 minutes)​","type":1,"pageTitle":"Final Project - Week 2","url":"/finalproject/week-2/lesson#demo-60-minutes","content":"Led by Trainees, presented back to the class Integrate all of your work together and share your progress so far with the mentors. Your presentation should last no more than five minutes and could include: Slides detailing what you've done this weekUI/UX designs of your projectA video of your projectA live example of your project If you want to prepare a quick presentation you can use this template The most important aspect of this presentation is that you are clear and concise. We want to see that you can present yourselves well and communicate information effectively. At the end of your presentation you will have to answers questions on your project from the rest of the class. This will last for a maximum of five minutes. "},{"title":"Retrospective (30 minutes)​","type":1,"pageTitle":"Final Project - Week 2","url":"/finalproject/week-2/lesson#retrospective-30-minutes","content":"Facilitated by TAs Retros can help a team focus on what is important and what they can improve for the next week. We like to use Postfacto - if your team doesn't have a board setup already please contact Jon for help (@jonrsharpe on Slack or jonathan@codeyourfuture.io). 5 mins - Individually everybody notes down. You should include: All the things that went wellAll the things that didn't go wellAnything you should 10 minutes - In your groups discuss the ideas raised and group them together Don't talk about solutions yet!Identify key problems 15 mins - talk about solutions and identify actions to tackle problems "},{"title":"User research (30 minutes)​","type":1,"pageTitle":"Final Project - Week 2","url":"/finalproject/week-2/lesson#user-research-30-minutes","content":"Facilitated by Product Managers If you're building an internal product - show what you’ve built and what you’re planning to build next to potential users (other trainees, mentors, etc.) and use any feedback they have to improve your plans. If you're working with on external product this might be tricky to do immediately but you spend time discussing how you could find users to demo to and the best way to contact them. "},{"title":"Sprint planning (60 minutes)​","type":1,"pageTitle":"Final Project - Week 2","url":"/finalproject/week-2/lesson#sprint-planning-60-minutes","content":"Facilitated by Product Managers Decide what you’re each going to be doing during the following week and where you want to be by the next class. "},{"title":"Technical support (60 minutes)​","type":1,"pageTitle":"Final Project - Week 2","url":"/finalproject/week-2/lesson#technical-support-60-minutes","content":"Facilitated by TAs Mentors will be on hand to help you get unstuck from any blocking technical issues. "},{"title":"Cooling periods during final projects (30 min)​","type":1,"pageTitle":"Final Project - Week 2","url":"/finalproject/week-2/lesson#cooling-periods-during-final-projects-30-min","content":"Cooling periods are for teams that are struggling to collaborate, communicate or work together in an agile way. This is an indication that the team may not be on track to graduate due to concerns about their professional skills. If a team needs a cooling period they will need to: Stop working and take a 5 minute breakReflect on what's working well and what is not working and their preferred ways to communicate. Re-establish how they work together as a team.Create a 5 step action plan about how they will resolve further challenges.  The team must give feedback to the volunteers and discuss their strengths and weaknesses, reflections, how they will work together as a team and their action plan to resolve further challenges. Once they have communicated with their volunteer team, they will be allowed to proceed on their technical assignments. The cooling period should last no longer than 30 minutes. "},{"title":"Feedback​","type":1,"pageTitle":"Final Project - Week 2","url":"/finalproject/week-2/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Final Project - Week 3","type":0,"sectionRef":"#","url":"/finalproject/week-3/lesson","content":"","keywords":""},{"title":"Check In: how are the contributions of all team members so far?​","type":1,"pageTitle":"Final Project - Week 3","url":"/finalproject/week-3/lesson#check-in-how-are-the-contributions-of-all-team-members-so-far","content":"Here's what we expect: It's important to evaluate our contributions to the group. A full stack developer must deliver features that touch each part of the stack. This means at minimum you must build a component of UI that interacts with the database and you must configure and manage that entire interaction pathway. At best this means multiple features across different parts of the stack. For graduation, we evaluate each role against the Skills for the Information Age skills descriptions, which you should check for more details. "},{"title":"Reminder about the tracker and exit criteria​","type":1,"pageTitle":"Final Project - Week 3","url":"/finalproject/week-3/lesson#reminder-about-the-tracker-and-exit-criteria","content":"Review the Entry and Exit Criteria with your team, if you or them have any queries. Also make sure the trainee tracker is being updated correctly, so you evaluate if the team is working evenly in building the product. "},{"title":"Overview","type":0,"sectionRef":"#","url":"/fundamentals/","content":"","keywords":""},{"title":"Goals​","type":1,"pageTitle":"Overview","url":"/fundamentals/#goals","content":""},{"title":"I am part of a cohort 👫🏽​","type":1,"pageTitle":"Overview","url":"/fundamentals/#i-am-part-of-a-cohort-","content":"The key outcome of Fundamentals is that trainees and mentors start getting to know each other and build the sense of togetherness and mutual support that will carry us through the programme. "},{"title":"Start as we mean to go on 🧰​","type":1,"pageTitle":"Overview","url":"/fundamentals/#start-as-we-mean-to-go-on-","content":"Fundamentals sets the tone for the rest of CYF. That means we set our expectations of CYF sessions clearly: no slides, no lectures, no missing coursework, 100% attendance. This applies to everybody and we should all hold each other to these standards. This is our opportunity to coach ourselves into the &quot;right&quot; behaviours from the start. &quot;Practice doesn't make perfect, practice makes permanent&quot; "},{"title":"Break down problems 🧩​","type":1,"pageTitle":"Overview","url":"/fundamentals/#break-down-problems-","content":"&quot;Prolific programmers do not write a lot of code, instead they solve a lot of problems&quot; We frame the fundamental skill and day-to-day activity of software developers, which is problem solving. It is not following step by step instructions, but creating those instructions. Fundamentals is the right place to begin (start as we mean to go on). "},{"title":"Ship it! ⛵​","type":1,"pageTitle":"Overview","url":"/fundamentals/#ship-it-","content":"The major satisfaction of software development is to bring an idea to reality. We should experience that satisfaction and develop that habit. By shipping early, we can share with our peers and can iterate and improve. CYF is not a great fit for everyone, and not everyone who graduates Fundamentals will join our Software Development Course. But everyone who participates in Fundamentals should come out with a tangible product: a real website deployed online. "},{"title":"How Goals Help​","type":1,"pageTitle":"Overview","url":"/fundamentals/#how-goals-help","content":"Each week has suggested schedules, team exercises, and challenges, but understanding these goals liberates mentors and trainees to experiment and innovate with their cohort. 👫🏽 🧰: 🧩 ⛵ talk to each other and have proven to be useful mantras for understanding what this course should be: Should we upload the result of our week 1 homework to Netlify? Yes, we should ship it. Yes, we should start as we mean to go on. Should we ask trainees to figure out how to improve on each other's week 1 homework as part of a three week project? Yes, because I am part of a cohort. Yes because we should practice breaking down problems. Yes because we should start as we mean to go on. "},{"title":"Structure​","type":1,"pageTitle":"Overview","url":"/fundamentals/#structure","content":"3 week repetition of a common pattern, each week with its special focus: Week 1: Requirements, Iteration, DeliveryWeek 2: Requirements, Iteration, DeliveryWeek 3: Requirements, Iteration, Delivery "},{"title":"Requirements​","type":1,"pageTitle":"Overview","url":"/fundamentals/#requirements","content":"Requirements covers requirements gathering, discussing assumptions, breaking down problems into solvable pieces. In practice, we will play some games involving communication and problem solving, discuss how software teams gather requirements, identify and resolve conflicting requirements, write user stories, etc. and come up with some first requirements for our first project (that will span the three weeks). "},{"title":"Iteration​","type":1,"pageTitle":"Overview","url":"/fundamentals/#iteration","content":"Iteration covers coming up with solutions, and then iterating on those solutions (as opposed to solving everything in a single step), along with some introduction into computational thinking - what a software solution looks like. In practice, we will play some more games, provide feedback and iterate on the state of our project so far in order to come up with new requirements, prioritising so as to pick the most important new features first. We will also do some CSS and block-based programming to allow us to provide software solutions to some of the feedback we have received. "},{"title":"Delivery​","type":1,"pageTitle":"Overview","url":"/fundamentals/#delivery","content":"Delivery covers implementing a concrete solution and putting it somewhere visible where it can be examined and iterated upon. In practice we will deliver multiple iterations to Netlify and will finish week 3 having coded some DOM modifying code using a block-based editor (e.g. displaying a list of products with an &quot;add to cart&quot; button and display the resulting shopping cart), and copy-paste the resulting code into our project. "},{"title":"Course Project​","type":1,"pageTitle":"Overview","url":"/fundamentals/#course-project","content":"In terms of the delivered goals for the three week project: Week 1 will have trainees delivering an HTML page (like the page written during the application process) to NetlifyWeek 2 will have trainees iterating on that page in response to feedback/requirements gathering (modifying the HTML/CSS)Week 3 will have trainees iterating on that page a second time and adding a feature implemented through block-based coding Weeks\tContent\tLearning ObjectivesWeek 1\tRequirements\tLearning objectives Week 2\tIteration\tLearning objectives Week 3\tDelivery\tLearning objectives "},{"title":"Final Project - Week 4","type":0,"sectionRef":"#","url":"/finalproject/week-4/lesson","content":"Final Project - Week 4 See Week 2 for instructions for this week. Make sure to check in again on the contributions per team members, as detailed on Week 3 Each team must fill out their handover document once they have finished the final project development. This document is important to ensure the Product Owner and technical team that would continue working on this product has all necessary information about what has been done.","keywords":""},{"title":"Application","type":0,"sectionRef":"#","url":"/fundamentals/graduation/application","content":"","keywords":""},{"title":"1. Consider​","type":1,"pageTitle":"Application","url":"/fundamentals/graduation/application#1-consider","content":"Do you want a good job in tech? Are you willing to spend up to a year working hard to get one? Think about this carefully. The CYF community is here to support you, but you have to do the hard work. It's a big challenge, but it is achievable. "},{"title":"2. CV​","type":1,"pageTitle":"Application","url":"/fundamentals/graduation/application#2-cv","content":"Generate a CV from Linked In Resume Builder .Upload your CV to your Google Drive.Send us the link. "},{"title":"3. Apply​","type":1,"pageTitle":"Application","url":"/fundamentals/graduation/application#3-apply","content":"You will be sent a link to an application form. Fill it in. The form asks you to show how you have met the graduation criteria, with evidence. "},{"title":"4. Decision​","type":1,"pageTitle":"Application","url":"/fundamentals/graduation/application#4-decision","content":"Volunteers will look at every application and use the same Graduation Criteria to decide who will graduate. be invited to the Software Development Course. You will get the decision by email within two weeks. "},{"title":"Module Coordinator","type":0,"sectionRef":"#","url":"/fundamentals/coordinator","content":"","keywords":""},{"title":"Preparation​","type":1,"pageTitle":"Module Coordinator","url":"/fundamentals/coordinator#preparation","content":"To participate in Fundamentals, trainees must have completed Intro To Digital. There are no exceptions. "},{"title":"Cohort size​","type":1,"pageTitle":"Module Coordinator","url":"/fundamentals/coordinator#cohort-size","content":"A Fundamentals cohort should be no more than 40 people. If you have more than this, you need to split into more cohorts. Consider staggering your cohorts. "},{"title":"Setting up​","type":1,"pageTitle":"Module Coordinator","url":"/fundamentals/coordinator#setting-up","content":"Trainees must complete the preparation outlined in the Prep and come to class prepared. People will probably have some questions and hit some roadbumps, so it can be useful to be present in a class ITD Slack channel to unblock people, but don't do it for them. "},{"title":"Schedule​","type":1,"pageTitle":"Module Coordinator","url":"/fundamentals/coordinator#schedule","content":"The Coordinator owns the schedule of the Fundamentals Course and leads a mid week planning call before each session. Each mentor notes page has an example schedule for the week, which you can adapt to suit your cohort.You should also schedule at least one short break in the afternoon for prayers, breastfeeding, and other obligations.Parcel out the sessions between volunteers in the planning call. At CYF we teach in teams and no one person dominates the day.Once you've planned, make sure you share the schedule with all trainees and volunteers at least 24 hours beforehand, so they can make any necessary travel, childcare, religious, and other logistical arrangements. "},{"title":"Coursework​","type":1,"pageTitle":"Module Coordinator","url":"/fundamentals/coordinator#coursework","content":"A mentor needs to run the Google Classroom and make sure coursework is posted according to the schedule. This can be the Coordinator or another volunteer. Each week of the course has a coursework page and suggested courseowrk is listed there. There is a Boilerplate Classroom you should clone in our shared Google Workspace with a draft version of each piece of work. Clone the boilerplate and then schedule your coursework with publish and due dates. You can set all the coursework up before the coursework starts, but do check you have the latest versions. "},{"title":"Graduation​","type":1,"pageTitle":"Module Coordinator","url":"/fundamentals/coordinator#graduation","content":"Graduation will happen the week after, as trainees have work to complete after the last session in order to graduate. Everyone who meets the graduation criteria may be invited to the Software Development Course. You are not obliged to invite everyone. "},{"title":"Next Steps","type":0,"sectionRef":"#","url":"/fundamentals/graduation/next-steps","content":"Next Steps What happens after Fundamentals in brief: Everyone will be invited to the Fundamentals Graduation, which happens mid-week. Please join us and celebrate the work we have all done together.You will make a decision on whether you want to join the Software Development Course (SDC).Volunteers will make a decision on whether you will be invited to the SDC.If you are invited, you will begin your journey towards a good job in tech with Induction Day. Please read ahead in the Syllabus to find out what happens next.We will continue to meet every Saturday to work together and share skills. There will be coursework during the week and you will be expected to complete it.","keywords":""},{"title":"Criteria","type":0,"sectionRef":"#","url":"/fundamentals/graduation/criteria","content":"Criteria This is the graduation criteria for Fundamentals. You have attended every session.You have sent your CV to CYF.You have deployed your website and shared the link with CYF.You have added a new feature to your website using CYF Blocks.You have shared your screen during a session.You have completed all coursework assignments.You want a good job in tech.You are actively working to improve your technical English reading, writing, speaking and listening skills, and you have shown this by completing the coursework.You have completed the English skills audit.You have met all your commitments including the Trainee Agreement.","keywords":""},{"title":"Accounts and Tools","type":0,"sectionRef":"#","url":"/fundamentals/preparation/accounts-and-tools","content":"","keywords":""},{"title":"Professional Accounts (2 hours)​","type":1,"pageTitle":"Accounts and Tools","url":"/fundamentals/preparation/accounts-and-tools#professional-accounts-2-hours","content":"Download and install the following software or register for the apps. Click on the links to go to the registration pages. Keep your login details for all sites/apps consistent and always use your real name. info CYF recognises you may need to keep your birth name private. When we say real name, we mean the name you go by. It does not have to match your birth certificate or any other legal document. It has to be consistent and professional. tip CYF understands you may need to keep your picture off the internet. In this case, generate a robohash picture from your name, and use that for all these accounts. Use your robohash consistently and it will help us recognise each other. "},{"title":"Gmail, Google Account​","type":1,"pageTitle":"Accounts and Tools","url":"/fundamentals/preparation/accounts-and-tools#gmail-google-account","content":"Make a new Google account. Use your real name. Don’t use any numbers or words that are not your name. Never put the year of your birth in your professional email address. Your email address should look something like this: GBencci@example.com This is your public professional email address. Use it to sign up for all your professional accounts unless you can use your Github. Put it in your Slack profile.  I have made a professional Google account and Gmail address. I have put this in my Slack Profile "},{"title":"Google Chrome​","type":1,"pageTitle":"Accounts and Tools","url":"/fundamentals/preparation/accounts-and-tools#google-chrome","content":"Google Chrome is the first browser we will all use together. I have downloaded and installed Google Chrome.I have created my professional profile on Chrome. Use your professional Chrome profile for all your CYF work. You will often have to share your screen during class, so keep your personal internet use private and away from your professional profile. "},{"title":"Slack​","type":1,"pageTitle":"Accounts and Tools","url":"/fundamentals/preparation/accounts-and-tools#slack","content":"Slack is our community space and how we communicate with each other. Download and install it now.  I have downloaded the Slack app on my computer and phone I have logged in to the Code Your Future Intro to Coding Workspace I have found and joined my class channels I have updated my profile with my picture and class "},{"title":"Zoom​","type":1,"pageTitle":"Accounts and Tools","url":"/fundamentals/preparation/accounts-and-tools#zoom","content":"We use Zoom for remote weekend classes. Install it now.  I have downloaded and installed Zoom onto my computer. "},{"title":"Google Classroom​","type":1,"pageTitle":"Accounts and Tools","url":"/fundamentals/preparation/accounts-and-tools#google-classroom","content":"Google Classroom is where you will find all of your coursework assignments. You will need a Gmail account in order to access Google classroom. Your class code will be posted on Slack.  I have logged using the Class Code I was given on Slack. I have looked around to get to know the interface. "},{"title":"Miro​","type":1,"pageTitle":"Accounts and Tools","url":"/fundamentals/preparation/accounts-and-tools#miro","content":"Miro is an online whiteboard we sometimes use to share ideas. Register an account now.  I have signed up for Miro. "},{"title":"Figma​","type":1,"pageTitle":"Accounts and Tools","url":"/fundamentals/preparation/accounts-and-tools#figma","content":"Figma also has an online jamboard we use to share ideas. Register an account now.  I have signed up for Figma. "},{"title":"Code.org​","type":1,"pageTitle":"Accounts and Tools","url":"/fundamentals/preparation/accounts-and-tools#codeorg","content":"Code.org is a website aimed at helping people learn computer science. You will be doing one of their courses. Register an account now.  I have signed up for code.org. "},{"title":"Github​","type":1,"pageTitle":"Accounts and Tools","url":"/fundamentals/preparation/accounts-and-tools#github","content":"Github is for developers. It's how you will work on code with other developers and where you will build a portfolio of work to show employers. Register an account now.  I have made a Github account. I have used my real name. I have not put my birth year in my user name. Your Github account name should look something like this: https://github.com/SallyMcGrath When prospective employers are looking at your Github portfolio, you need them to know who you are: not your online identity, but the name you put on your job application. Don’t use cute handles on your Github, even though some mentors do. They are not applying for entry level developer roles. "},{"title":"LinkedIn​","type":1,"pageTitle":"Accounts and Tools","url":"/fundamentals/preparation/accounts-and-tools#linkedin","content":"Sign up for Linked In. LinkedIn is the largest professional social network. You will use it to help you get a job and to advance your career. Make a LinkedIn account. Use your real name. Sign in with Google. Connect with your cohort. Your cohort is your first network, and this is one of the most valuable things you can develop at Code Your Future. A strong, tightly linked, professional network is a powerful asset, so begin building it today.  I have made a LinkedIn account using my professional email address I have used my real name. I have connected with my cohort "},{"title":"Preparation","type":0,"sectionRef":"#","url":"/fundamentals/preparation/","content":"","keywords":""},{"title":"Prep 1 : Grasshopper​","type":1,"pageTitle":"Preparation","url":"/fundamentals/preparation/#prep-1--grasshopper","content":"You may have done Fundamentals 1 on Grasshopper, but what other courses can you unlock? The Using a Code Editor course could be handy for Prep 2. Work through Grasshopper for about fifteen minutes, three times a week. This will make it easier to grasp the fundamentals. "},{"title":"Prep 2 : Developer Tools​","type":1,"pageTitle":"Preparation","url":"/fundamentals/preparation/#prep-2--developer-tools","content":"Download VSCode and practice using a real developer environment. You don't need to write any code in your new IDE. Just find out where the buttons are and what some of them do. This tutorial from Codeacademy will help you. Exercise Stretch goal: can you write and save a markdown document in VSCode?  "},{"title":"Prep 3 : Developer Thinking​","type":1,"pageTitle":"Preparation","url":"/fundamentals/preparation/#prep-3--developer-thinking","content":"People in tech work with logic, so how do people improve their logical reasoning? Happily, with games! Practice your developer thinking by playing our brain games. Brain Games "},{"title":"Prep 4: HTML/CSS crash course​","type":1,"pageTitle":"Preparation","url":"/fundamentals/preparation/#prep-4-htmlcss-crash-course","content":"During Fundamentals, we will be building a website with a block-based programming tool called CYF Blocks. The underlying code uses HTML, CSS, and JavaScript. Prepare yourself now with this free crash course, to refresh and consolidate your learning from Intro to Digital. → HTML CSS Crash Course tip You must prepare for class by creating all the accounts on the accounts and tools page. Come to class prepared. "},{"title":"Agreements","type":0,"sectionRef":"#","url":"/fundamentals/preparation/agreements","content":"Agreements You must read and agree to these rules before attending Code Your Future. Trainee AgreementCode of ConductHouse Rules If you have concerns or questions, please contact your Programme Manager. They will be happy to talk to you about our rules and what they mean for you. Please sign the trainee agreement before coming to class.","keywords":""},{"title":"Brain Games","type":0,"sectionRef":"#","url":"/fundamentals/preparation/brain-games","content":"","keywords":""},{"title":"Logic and reasoning games for programmers​","type":1,"pageTitle":"Brain Games","url":"/fundamentals/preparation/brain-games#logic-and-reasoning-games-for-programmers","content":""},{"title":"Strategy and logic​","type":1,"pageTitle":"Brain Games","url":"/fundamentals/preparation/brain-games#strategy-and-logic","content":"→Ohh1 Boolean Logic →Play Mastermind Online Six colours, four pegs - what is the best strategy? →Set Patterns and sets →Azul Here's a version you can play with friends or against the computer. (Azul means blue, Rojo means red.)  You can get Azul as a board game to play with friends and this is the best way to understand how it works. It's always easier to play games than to watch a video where someone else explains the rules! "},{"title":"Logic, patterns and strategy​","type":1,"pageTitle":"Brain Games","url":"/fundamentals/preparation/brain-games#logic-patterns-and-strategy","content":"→Rush Hour Planning, planning, planning! →Dominion Deckbuilding, probability, strategy "},{"title":"Interpreting Requirements​","type":1,"pageTitle":"Brain Games","url":"/fundamentals/preparation/brain-games#interpreting-requirements","content":"→The Stroop Effect Experience the attention level you need to interpret requirements Longer team games for study groups to play together: practice interpreting requirements and communicating in code. →Codenames Decode your team This is a (safely) stressful game that requires the Spymaster to take responsibility for the team’s success or failure. To succeed the Spymaster must put themselves in the shoes of their team of Operatives, and the Operatives team must work together to do the same with the Spymaster. →Telephone Interpret your colleagues This empathy-building game requires you to interpret and express someone else’s words and then see how your own words and pictures are interpreted. To be played in a group of 5, maximum, which takes 8-10 minutes. A Telephone game in Normal Mode with 5 people takes approximately 10 minutes with the drawing/answering part. Don't have groups of more than 5. ​ "},{"title":"Tips for Success","type":0,"sectionRef":"#","url":"/fundamentals/preparation/tips","content":"","keywords":""},{"title":"The method is not the goal​","type":1,"pageTitle":"Tips for Success","url":"/fundamentals/preparation/tips#the-method-is-not-the-goal","content":"The goal is NOT to complete the exercises. The goal is to learn. Completion of all exercises is not success... if you do not truly understand.If you learn so that you can complete any future exercises without help (e.g. in a job interview), that is success. "},{"title":"Stay in control of your learning​","type":1,"pageTitle":"Tips for Success","url":"/fundamentals/preparation/tips#stay-in-control-of-your-learning","content":"When getting help, stay in control (of the computer and the process)Each exercise is an opportunity to learn - don't let anyone steal that from you by solving your problem. Completing the exercise without understanding is a waste of your time and ours. In group-work, seek to understand everything If you've done something in group-work that you don't fully understand: Slow things downGet it explainedGo back to the work by yourself afterwards, and challenge yourself to understand it "},{"title":"Don't let it go​","type":1,"pageTitle":"Tips for Success","url":"/fundamentals/preparation/tips#dont-let-it-go","content":"Don't let it go because the next time you don't understand something, it will be harder to get things explained. So if you solve 10 exercises together in a group-work exercise, it is a great idea to go back over and try to solve them on your own the next day. "},{"title":"Take notes​","type":1,"pageTitle":"Tips for Success","url":"/fundamentals/preparation/tips#take-notes","content":"Take notes about what you don't understand Think of it as making a map of your work for the week. At a minimum, take note of the exercise numbers that you have problems with, even if you solve them eventually. Then you should revisit them some time afterwards and complete them again from scratch until you're positive you understand. "},{"title":"Use technical learning strategies​","type":1,"pageTitle":"Tips for Success","url":"/fundamentals/preparation/tips#use-technical-learning-strategies","content":"Try prediction, to get all the juice out of each exercise. With simple programming challenges, it is easy to just repeatedly modify and re-run your program until it works, but you won't learn much unless you are thinking (and this playful approach doesn't work with more complicated problems), so instead... Always try to predict what your code will do before you run it. Write your prediction down, or tell your colleague - you can make it a game. After you run the program, if your guess was wrong, discuss why, then FIND OUT why. "},{"title":"Recognise learning strategies​","type":1,"pageTitle":"Tips for Success","url":"/fundamentals/preparation/tips#recognise-learning-strategies","content":"Don't be frustrated when a volunteer does not solve your problem for youThe instructors have told them not to! Can you say why? If a volunteer is telling you the solutions, stop them politely and ask to make a prediction instead. Don't let anyone steal the opportunity of learning from you. Remember your goal The goal is not to complete the exercise. The goal is to learn. "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/fundamentals/week-1/coursework","content":"","keywords":""},{"title":"Tips for Success (PD - 1 hr)​","type":1,"pageTitle":"Coursework","url":"/fundamentals/week-1/coursework#tips-for-success-pd---1-hr","content":"Read the Tips for Success and join a thread in your class Slack channel to discuss how you will apply them. Create the thread if nobody else has already done so. "},{"title":"HTML-CSS refresh (4 hours)​","type":1,"pageTitle":"Coursework","url":"/fundamentals/week-1/coursework#html-css-refresh-4-hours","content":"During Fundamentals, we will be building a website with a block-based programming tool called CYF Blocks. The underlying code uses HTML, CSS, and JavaScript. If you have not done so already, prepare yourself now with this free crash course, to refresh and consolidate your learning from Intro to Digital. → HTML CSS Crash Course "},{"title":"Code.org (4 hours)​","type":1,"pageTitle":"Coursework","url":"/fundamentals/week-1/coursework#codeorg-4-hours","content":"Code.org is a website which teaches beginners how to code and gives them lots of practice. It uses block-based coding. Don't be put off by the simplicity: Harvard University teaches block-based coding. As we will be doing most of our coding in CYF blocks, you only need to do up to Lesson 12, Farmer: While Loops. It's important to spend some time with these ideas to prepare yourself for CYF Blocks. To get set up: Use the account you made during your class preparation.Start by clicking on item 1 from lesson &quot;2. Maze&quot;. (Yes, you should skip lesson 1)If you get stuck, come and talk in the class channel in Slack. Hitting blockers is normal in coding and talking through the problem is a good strategy. Read the instructions carefully and complete all stages of these lessons: Lesson 2 - MazeLesson 3 - ArtistLesson 5 - Artist: FunctionsLesson 6 - Bee: FunctionsLesson 7 - Bee: ConditionalsLesson 8 - Maze: ConditionalsLesson 11 - Artist: Nested LoopsLesson 12 - Farmer: While Loops Skip all of the lessons starting with &quot;Unplugged Activity&quot;. Once you're finished, press submit in Google Classroom, and please add a comment mentioning your Code.org username. "},{"title":"CYF Blocks (6 hours)​","type":1,"pageTitle":"Coursework","url":"/fundamentals/week-1/coursework#cyf-blocks-6-hours","content":"In this course, you will use block-based programming (CYF Blocks) to create JavaScript that changes the HTML on a web page. Work through the exercises in order, up to and including Buttons, inputs and clicks: a todo list. You must at least attempt all those exercises before we meet. If you get stuck, don't worry. Come to the session with your questions and we will all discuss them together. Once you're finished, share your solution to List of links in Google Classroom. If you have extra time, complete one of the exercises in Buttons and Clicks: consolidation (or create something entirely new) and share it with your cohort in the Slack channel. Write down some questions to bring up next week. "},{"title":"What is an algorithm?​","type":1,"pageTitle":"Coursework","url":"/fundamentals/week-1/coursework#what-is-an-algorithm","content":"Programming is all about algorithms. But what is an algorithm? Read Introduction to Algorithms in the book the JS WayWatch The Exact Instructions Challenge😄 These show &quot;algorithm recipes&quot;, and the video shows that you have to think carefully when building them. How does CYF Blocks help you build algorithms? Discuss this together in a Slack thread. "},{"title":"Reading in preparation​","type":1,"pageTitle":"Coursework","url":"/fundamentals/week-1/coursework#reading-in-preparation","content":"Next week in class we will talk about Iteration and Blockers. Look over the syllabus and prepare by reading: Overcoming Blockers "},{"title":"Week 1 Goals","type":0,"sectionRef":"#","url":"/fundamentals/week-1/learning-objectives","content":"","keywords":""},{"title":"Code.org​","type":1,"pageTitle":"Week 1 Goals","url":"/fundamentals/week-1/learning-objectives#codeorg","content":" Navigate the Code.org interface Sequence logical solutions with blocks Control flow with if statements Control flow with while statements A full set of learning objectives are available on the Lesson Plan on the teacher view for this course on Code.org. "},{"title":"CYF Blocks​","type":1,"pageTitle":"Week 1 Goals","url":"/fundamentals/week-1/learning-objectives#cyf-blocks","content":" Navigate the Blocks interface Sequence logical solutions with blocks Modify existing html (DOM) dynamically Insert new html (DOM) dynamically Respond to user actions (text input and clicks) "},{"title":"Requirements​","type":1,"pageTitle":"Week 1 Goals","url":"/fundamentals/week-1/learning-objectives#requirements","content":" Identify described requirements Identify extra requirements from your own experience Resolve trade-offs in conflicting requirements Translate requirements into high-level design outlines "},{"title":"Iteration​","type":1,"pageTitle":"Week 1 Goals","url":"/fundamentals/week-1/learning-objectives#iteration","content":" Participate in first retrospective "},{"title":"Delivery/ Ship It​","type":1,"pageTitle":"Week 1 Goals","url":"/fundamentals/week-1/learning-objectives#delivery-ship-it","content":" Export your Codepen to zip Upload your folder to Github Deploy your folder to Netlify "},{"title":"Mentor Notes","type":0,"sectionRef":"#","url":"/fundamentals/week-1/mentors","content":"","keywords":""},{"title":"Schedule​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-1/mentors#schedule","content":"Here's a rough schedule, which you can adapt to suit your cohort. You should also schedule at least one short break in the afternoon for prayers. Parcel out the sessions between volunteers in a planning call beforehand. Once you've planned it, make sure you share the schedule with all trainees and volunteers at least 24 hours beforehand, so they can make any necessary travel, childcare, religious, and other logistical arrangements. "},{"title":"Morning​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-1/mentors#morning","content":"10:00 AM\t10:30 AM\t11:00 AM\t11:30 AM\t1200:00 AM\t12:30 AMWelcome / Agreements\tPersonal Development\tPersonal Development\tCode.org\tLunch\tLunch "},{"title":"Afternoon​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-1/mentors#afternoon","content":"13:00\t13:30\t14:00\t14:30\t15:00\t15:30\t16:00\t16:30Telephone\tUser Stories\tUser Stories\tCYF Blocks\tCYF Blocks\tShip It\tShip It\tRetro "},{"title":"Code.org​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-1/mentors#codeorg","content":"Code.org uses the same Block.ly visual editor as CYF Blocks, and has some good resources, so instead of reproducing those in our application, we ask trainees to work through the basics of sequencing, control flow and loops on the Code.org site. The coursework page lists the exact lessons we expect them to complete. Preview Code.org Take a look at Code.org before class and complete one or two levels. The most useful thing you can do together in class is to share your screen and get everyone up and going with the interface. This will help unblock people who get stuck on some minor setup issue at first. Moreover, getting everyone coding together, sharing screens, and trying things, is really worth spending time on to set the tone for the course. "},{"title":"CYF Blocks​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-1/mentors#cyf-blocks","content":"We will use CYF Blocks to build our projects for Fundamentals. CYF Blocks builds on the knowledge learned in Code.org and concretises those lessons as real code that builds real web pages. From Code.org we build on these learning objectives: programme sequentiallycontrol flow On top of that, in CYF Blocks we learn to interact with the DOMchange the content on a web pageclick buttons and make them change things Trainees will work on CYF Blocks themselves through the week, so to start just get everyone introduced to the interface. There is no signup required. Take some time to familiarise yourself with CYF Blocks by doing at least the first 3 exercises. Be prepared to point out to the students the following areas/features of the screen: static html (this will usually be automatically filled and students will almost never be asked to modify anything here)the blocks area and the elements in the toolbox (hopefully self explanatory)the instructions, which should probably be read through once before doing anythingthe run button, used to execute the code generated from the blocksthe test checkboxes that appear when run is pressed: they should turn green when the exercise is done Warning CYF Blocks currently (12/02/22) only uses local storage. Make sure trainees know this, and explain that if they open it in a new browser or on a new computer, their work will not be there. They should use the share button to save out states. Readiness for the full Software Development Course​ To ship their code, trainees need a Github account. Some people will not have signed up to the accounts or installed the things they were asked to, though it's made clear that they are expected to do so before coming to class. You can use this to help evaluate trainee readiness for the full course. Dealing with unprepared trainees in class Don't hold up the rest of the class -- place the unprepared in a breakout room with a volunteer to get them sorted, and record their names. Do this each time there's a paperwork/admin/prep issue like this. Re-iterate that preparing for class is crucial for success on the course. Of course everyone misses some things, but we know from experience that people who persistently fail to follow instructions or prepare for class really struggle on the Software Development Course and often wash out. "},{"title":"Telephone​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-1/mentors#telephone","content":"Play the default game! You don’t need to explain what to do, people will figure it out. You might try playing it between the mentors in your planning calls - it’s a fun icebreaker. Limit the groups to 5 or else the game takes too long. It takes 10 minutes to play with 5 people. Now come back into the main room and lead a reflection. Example reflection: Was it surprising (and hilarious) to see what other people drew from your words? What about how they described your picture? Did anybody get a series of similar pictures or words? "},{"title":"User Stories​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-1/mentors#user-stories","content":""},{"title":"Sample reflection for mentor​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-1/mentors#sample-reflection-for-mentor","content":"Example reflection: What’s NOT in the user story? (It’s the how.) One reason to write user stories is to establish clearly what we are doing and why. A common mistake in coding is jumping straight into “how” before we understand and agree these things. This wastes a lot of time. If you find yourself jumping straight to “how” or “jumping to conclusions”, check yourself! Remember the telephone game and how absurdly wrong things can go. "},{"title":"Ship It​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-1/mentors#ship-it","content":"A version of this session has been run many times at CYF so please ask others for help if you're stuck. There's a full workshop called Deploying Your Code you can run through beforehand if that's helpful. We will ask trainees to ship frequently at CYF. We only evaluate what people have shipped. Shipped software is the only completed form of software. And that's what counts.A shipped piece of software is a tangible product. Real, deployed sites are valuable to trainees beyond this course. They can use them to build their portfolio.Finishing things is so hard. You must learn how to do it and practice it constantly to be successful. "},{"title":"Retro​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-1/mentors#retro","content":"One or two volunteers will facilitate a retro at the end of the day. You may wish to split the retrospectives into trainee and mentor, or do it all together. It's up to you. "},{"title":"Coursework In Perspective​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-1/mentors#coursework-in-perspective","content":"Quick presentation to discuss how block-based programming is relevant in the &quot;real world&quot;, as it can appear a little &quot;childish&quot; to adults. Sequence, repetition with loops, conditional execution with if/else, and breaking bigger problems into smaller problems, with functions. Possibly showing representations in JS, by clicking the &quot;Show code&quot; button on Code.org. "},{"title":"Assigning Coursework​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-1/mentors#assigning-coursework","content":"At the end of Class, assign the homework for this week through Google Classroom. "},{"title":"Requirements","type":0,"sectionRef":"#","url":"/fundamentals/week-1/session","content":"","keywords":""},{"title":"Welcome​","type":1,"pageTitle":"Requirements","url":"/fundamentals/week-1/session#welcome","content":""},{"title":"Trainee Agreement, Code of Conduct & House Rules​","type":1,"pageTitle":"Requirements","url":"/fundamentals/week-1/session#trainee-agreement-code-of-conduct--house-rules","content":"While you're at Code Your Future, we expect you to follow some rules. This is so that everyone has a fun, productive and enjoyable experience. You have read through the Trainee Agreement, Code of Conduct and House Rules before coming to class.  → Learning objectives​ "},{"title":"Slack (15mn)​","type":1,"pageTitle":"Requirements","url":"/fundamentals/week-1/session#slack-15mn","content":"You should have installed Slack on your computer and phone during your class preparation. Post 5 interesting things about yourself in a thread.  "},{"title":"PD (introspection)​","type":1,"pageTitle":"Requirements","url":"/fundamentals/week-1/session#pd-introspection","content":"Session objective: Professional Development starts here. Today is the very beginning of your career journey, and it starts by thinking about your personal and professional development. Exercise (30 minutes) Exercise objective: To identify goals and motivations. In small groups, introduce yourself. Identify a speaker for your group. Answer the following questions in turns: Why did you apply to CYF?What is one goal you have achieved in your life?What is your career goal? The speaker presents the group's ideas to the class. Exercise (30 minutes) Exercise objective: To discuss specific actions and commitments. In small groups, identify a speaker for your group. Discuss why you want a job in tech; Name three actions you will take to commit to your journey into your new career. Consider following questions: Will you keep up-to-date with job opportunities by researching rolesWill you build side projects to make yourself stand out?Will you commit to CYF? The speaker presents the group's three specific actions to the class. "},{"title":"Code.org​","type":1,"pageTitle":"Requirements","url":"/fundamentals/week-1/session#codeorg","content":"Code.org is a block based programming tool. We will use something similar to build our course project. Let's look at Code.org together now and work through the first two exercises. A mentor will share their screen. Exercise (20 minutes) Go to Course Three, Lesson 2: The Maze Look at the interface togetherEverybody open the interface on their own computer as wellComplete the first exerciseComplete the second exercise "},{"title":"Iteration: CYF Blocks​","type":1,"pageTitle":"Requirements","url":"/fundamentals/week-1/session#iteration-cyf-blocks","content":"For the majority of this course, we will use a custom CYF application called CYF Blocks. It uses the same visual programming editor, Block.ly, as Code.org, but you will use it to create JavaScript for real websites you can show others. Let's all look through the interface together now, and do one exercise as a group. Exercise (20 minutes) Look at the interface togetherEverybody open the interface on their own computer as wellComplete all steps of the first exercise  Requirements "},{"title":"Telephone​","type":1,"pageTitle":"Requirements","url":"/fundamentals/week-1/session#telephone","content":"Exercise (15 minutes) In groups of no more than 5, we’re going to play a game of telephone. → Telephone Communication is hard. Today, let’s explore some ways we communicate with each other in software development. It’s not enough to draw a picture of a website and assume the other person will build what you imagine. It’s never a good idea to assume shared context or shared interpretations. So how do we understand what to do? By understanding requirements. "},{"title":"Formalising Requirements​","type":1,"pageTitle":"Requirements","url":"/fundamentals/week-1/session#formalising-requirements","content":"Today we're going to think about requirements. We're going to ask these questions: why we're working on a projectwho we're making it forwhat they're going to use it for. Before starting to solve a problem (how), step back and ask yourself those why, who, and what questions. We're going to think about a few projects and discover some requirements. This is really important in order to do technical work, but you don't need to have any coding experience, or be thinking about coding, when doing this. Remember To make great software, we need to think about people, not just code. "},{"title":"User Stories​","type":1,"pageTitle":"Requirements","url":"/fundamentals/week-1/session#user-stories","content":"We can discover requirements with something called 'User Stories'. The simplest user story looks like this: As a [type of user], I can [achieve some goal]. 🔑 Key term A user story is a short sentence stating some goal a user can expect to achieve when using the product we are implementing. Imagine a coursework tracker​ As trainees, you have coursework to do. Imagine a website which tracks how coursework is going for you all. Thinking about that website, some user stories could be: As a trainee, I can ask for help with a topic or task.As a mentor, I can see who needs extra support.As a trainee, I can see what coursework I need to complete and when.As a mentor, I can see what coursework has not been turned in. These each take the form &quot;As [who], I can [what]&quot;. They don't say why yet. Exercise (10 minutes) In groups of about 5. Talk about why the &quot;who&quot; is useful. What would we be missing if we didn't think about the &quot;Who&quot;?Now think about the &quot;why&quot; for each of the listed user stories. Why are they important? "},{"title":"Discover requirements​","type":1,"pageTitle":"Requirements","url":"/fundamentals/week-1/session#discover-requirements","content":"As a [who], I can [what] so that [why] Exercise (10 minutes) Write some user stories for our coursework tracker on a Jamboard. Think about the &quot;who&quot;, &quot;what&quot;, and &quot;why&quot; for each. You can think of new &quot;who&quot;s (e.g. the people who write the coursework questions), and as many &quot;what&quot;s as you want - but make sure you remember the &quot;why&quot;. "},{"title":"Reflecting​","type":1,"pageTitle":"Requirements","url":"/fundamentals/week-1/session#reflecting","content":"Exercise: Reflection (10 mins) Why do you think thinking about user stories may be useful? What's useful about thinking about the &quot;who&quot; and the &quot;why&quot;? What could go wrong if you don't think about them? "},{"title":"Ship It​","type":1,"pageTitle":"Requirements","url":"/fundamentals/week-1/session#ship-it","content":"The last thing we will do today is ship some code, because we expect you to ship very often at CYF. You're going to be working on and developing your own projects over the Fundamentals course, so let's begin with your personal home page. In Intro to Digital (ITD) you built a Personal Home Page to complete the course. Now we’ll ship it to become a “real” website. When developers talk about shipping or deployment they mean turning the version that they’re developing into something that users can access. tip It's important that software works and that we can use it! You will need:​ Your personal home page on CodepenAn account with Github and to be logged inAn account with Netlify, so sign up now using the “Sign up with Github” option Exercise You’ll export your page to a folder on your computer, upload it to Github, and deploy it to Netlify. "},{"title":"Step by step​","type":1,"pageTitle":"Requirements","url":"/fundamentals/week-1/session#step-by-step","content":"Step One : Codepen​ Find your landing page on Codepen and click Export &gt; Export as zip Step Two : Github​ Create a new repo by going to repo.new or by clicking the + icon in the top navigationLeave the Repository Template as “No template”Type in a name for your project. It can be anything, but “landing-page” or “tribute-page” are probably good choicesLeave the rest of the options as the defaultsClick “Create repository”. Once it’s created it will take you to your new repoNow click the link to upload an existing file, which takes you to https://github.com/YOUR_GITHUB_NAME/YOUR_PROJECT_NAME/uploadFind your downloaded zip file on your computer, unzip it and drag the folder on to your Github web interface. Step Three: Netlify​ Log in to Netlify and follow this workshop to deploy your site. 🎉 Congratulations! You shipped it! Stretch goal? Follow the instructions in the workshop to change the site name to YOUR_GITHUB_NAME-home-page "},{"title":"Retro​","type":1,"pageTitle":"Requirements","url":"/fundamentals/week-1/session#retro","content":"A mentor will briefly explain what a retro is and then we will do a short retro together using Figma. Set a timer for 15 minutes. "},{"title":"Coursework​","type":1,"pageTitle":"Requirements","url":"/fundamentals/week-1/session#coursework","content":"Find the coursework for this week on the coursework page. "},{"title":"Feedback​","type":1,"pageTitle":"Requirements","url":"/fundamentals/week-1/session#feedback","content":"Spend two minutes reviewing this session to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/fundamentals/week-2/coursework","content":"","keywords":""},{"title":"Using an IDE​","type":1,"pageTitle":"Coursework","url":"/fundamentals/week-2/coursework#using-an-ide","content":"We will use an IDE to write our code during Fundamentals, just like professional programmers. We use VSCode, and you should already have installed it during your course preparation. Here's a reminder of the tutorial you were given: → Visual Studio Code "},{"title":"Refresh your understanding of paths​","type":1,"pageTitle":"Coursework","url":"/fundamentals/week-2/coursework#refresh-your-understanding-of-paths","content":"Read this lesson on file paths and folders: Using paths &amp; folders and save the cheatsheet to help you. "},{"title":"CYF Blocks (8h)​","type":1,"pageTitle":"Coursework","url":"/fundamentals/week-2/coursework#cyf-blocks-8h","content":"Complete the CYF Blocks Syllabus, including at least 6 &quot;projects&quot;. Write down any questions you have to ask when we next meet. Share at least two of your completed projects in google classrooms. Share your favourite project (or something completely new) in the Slack channel for your cohort. "},{"title":"Organise a study session (PD - 2 hr)​","type":1,"pageTitle":"Coursework","url":"/fundamentals/week-2/coursework#organise-a-study-session-pd---2-hr","content":"Working together is the best way for you to learn. Teaching someone else helps to strengthen your knowledge. And getting help from your fellow students saves you time and keeps you from becoming a passive learner. You will be randomly assigned a group using random list team generator In small groups of 3, organise a study session to work on one piece of coursework. As a group you must decide on: The topic of the callThe time of call (give people a few hours to get ready. Remember Slack is asynchronous communication!)Who will create the link to Google Meet where you will have the call.Who will open (start) the call in Google Meet. Once you have decided the above: Make an announcement in Slack with your topic, time and link to call (anyone in can join even if they are not in your group. Just keep to just one topic and max 5 -6 people in a call)Ask people to react with an emoji if they want to attendIf there are too many people - what should you do? Decide on a plan of action "},{"title":"Week 2 Goals","type":0,"sectionRef":"#","url":"/fundamentals/week-2/learning-objectives","content":"","keywords":""},{"title":"CYF Blocks​","type":1,"pageTitle":"Week 2 Goals","url":"/fundamentals/week-2/learning-objectives#cyf-blocks","content":" Break down solving problems into testable steps Use variables to track state Initialise and iterate over arrays Remove/add elements at the beginning/end of an array Solve problems using variables and arrays "},{"title":"Agile Software Development​","type":1,"pageTitle":"Week 2 Goals","url":"/fundamentals/week-2/learning-objectives#agile-software-development","content":" Share your screen Identify the blocker Use driver and navigator pattern Break down a problem into steps Negotiate a strategy with your team Follow directions Prioritise a list of user stories Iterate on requirements Pair programme Contribute to retrospective "},{"title":"Mentor Notes","type":0,"sectionRef":"#","url":"/fundamentals/week-2/mentors","content":"","keywords":""},{"title":"Schedule​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-2/mentors#schedule","content":"Here's a rough schedule, which you can adapt to suit your cohort. You should also schedule at least one short break in the afternoon for prayers. Parcel out the sessions between volunteers in a planning call beforehand. Once you've planned it, make sure you share the schedule with all trainees and volunteers at least 24 hours beforehand, so they can make any necessary travel, childcare, religious, and other logistical arrangements. "},{"title":"Morning​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-2/mentors#morning","content":"10:00 AM\t10:30 AM\t11:00 AM\t11:30 AM\t1200:00 AM\t12:30 AMBlockers!\tBlockers!\tMVP\tMVP\tLunch\tLunch "},{"title":"Afternoon​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-2/mentors#afternoon","content":"13:00\t13:30\t14:00\t14:30\t15:00\t15:30\t16:00\t16:30Capgemini / Personal Development\tCapgemini / Personal Developement\tIterating\tCYF Blocks\tIterating\tShip It\tShip It\tRetro "},{"title":"Blockers!​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-2/mentors#blockers","content":""},{"title":"Solving Problems Workshop​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-2/mentors#solving-problems-workshop","content":"You can do this workshop in person, online, or a mix of both. You can run even run this workshop completely offline using this kit: Rush Hour. Start on Level 6 or above and get people to load the page before you go into breakout rooms TAs can only be passengers. No driving or navigating. TAs may ask questions but not answer them. TAs will make sure the driver and navigators are following their roles correctly. TA: Check in questions​ Model ways of thinking about the game strategically instead of just trying stuff randomly: Which car is the blocker? Everyone guess!What shall we do first?What do you notice about the cars? Are they different sizes?What do you notice about the board? What does this mean for our choices?Is it frustrating being the driver?Are we there yet? Shall we play another round?What one thing shall we say we noticed about this game, back in the main room? TA: Evolve the game​ Evolve the game each time you play to guide the players to insights: Round 2: You must discuss for 1 minute before you make any movesRound 3: A single navigator can make no more than three moves in one goRound 4: Try to solve the puzzle in as few moves as you can "},{"title":"Leader example reflection:​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-2/mentors#leader-example-reflection","content":"Example reflection This game interests me because to be successful you have to identify the blockers, which is something we all need to get better at. In this game, the blocker is often not the immediately obvious car ‘in the way’. To find it you might have to trace backwards around the board, thinking: to move this one I need to move that one, to move that one, I need to move this next one… And then you need to explain that to your team! It’s a good reflection on blockers and planning. "},{"title":"More resources​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-2/mentors#more-resources","content":"Backup alternative online game: https://www.crazygames.com/game/rush-hour-onlinePhysical version of this game: https://www.thinkfun.com/products/rush-hour/  "},{"title":"Iteratively solving coding problems​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-2/mentors#iteratively-solving-coding-problems","content":"The CYF Blocks syllabus gradually introduces the idea of solving problems &quot;in reverse&quot;, or &quot;inside out&quot;, making sure to start with something simple that can be visually verified and gradually adding complexity, continuing to verify at each step. The following exercises are good for demoing this (bear in mind which concepts students have/have not yet seen when picking one of these): Inputs and clicksTodo listCounting clicksCounting sheep "},{"title":"Pairing​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-2/mentors#pairing","content":"Two volunteers will spend 10 minutes demonstrating pair programming, so please agree a CYF Blocks exercise (one of the exercises in https://blocks.codeyourfuture.io/#exercise_button_consolidation would be a good start) to demo with and both have the page ready. Say not much more than: &quot;We are going to pair programme. I will drive, which means I will type the code (modify the blocks), and NAME will navigate, which means they will tell me what to do.&quot; Nominate a trainee to set a timer for five minutes. Driver, share your screen. Navigator, talk clearly and simply through one improvement. Go much more slowly than feels reasonable. Only make one change. Then switch and make one more change. Discover out loud When live coding with CYF Blocks, make sure to notice &quot;out loud&quot; extra features of the interface: oh look, I can copy and paste blocksHmm, what happens when I click &quot;share&quot; When you ask trainees to pair later on, remember that this is very likely to be the first time they have ever paired on a programming problem. Here are some tips on running a good pairing session: Assign a volunteer to call out to switch navigator and driver roles every 10 minutes looselyMake sure the students actually switch!Monitor closely to check that one side isn't dominatingDon't run the session too long - it is stressful for someSwitch partners at least once "},{"title":"Ship It​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-2/mentors#ship-it","content":"Share your screen and do a live run through this workflow (5 minutes) as a group beforehand. Don't take questions after your demo: get the trainees to try first. Float around answering questions and help unblock people as they ship their work. If the Codepen files are a blocker for trainees, there's a clean boilerplate Ship It available, but keep the focus on iteration and refactoring. Scope Make sure the feature they build, or change they make, is very small. "},{"title":"Coursework review​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-2/mentors#coursework-review","content":"Vocabulary Many of the words we use will either be completely new to trainees or used in a new way. Make space in each day to define terms, and model ways to find out terms (look stuff up together) "},{"title":"Blockers/Coursework Review​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-2/mentors#blockerscoursework-review","content":"We make space in every session at CYF for a coursework review, where trainees identify their blockers and ask for help getting unstuck. It's important for trainees to think about questions that they had during the week. To avoid getting distracted with answering a question for too long, run a short session where you write down all the questions on a whiteboard. You can do this on a Jam board or on a white board. Make sure trainees just write one short thing on each sticky note. You can then prioritise answering the questions on your own time, or split into groups to answer several questions at once. It is also useful to get a volunteer write up the questions in a more permanent place (e.g. as a Gist) and share on Slack. "},{"title":"Start coursework in class​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-2/mentors#start-coursework-in-class","content":"It is a good idea to spend some time in the class working through the interfaces and the first few challenges. "},{"title":"Assigning Coursework​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-2/mentors#assigning-coursework","content":"At the end of the day, check in with trainees on their goals for the week. Make sure you have published the coursework for this week through Google Classroom. You can schedule this to happen automatically. For this week, you also need to assign Study Group teams. Use the random list team generator and post the list in Google Classroom. "},{"title":"Iteration","type":0,"sectionRef":"#","url":"/fundamentals/week-2/session","content":"","keywords":""},{"title":"Blockers! (60 minutes)​","type":1,"pageTitle":"Iteration","url":"/fundamentals/week-2/session#blockers-60-minutes","content":"Online Version of this game Objectives​ Share your screenIdentify the blockerUse driver and navigator patternBreak down a problem into stepsNegotiate a strategy with your teamFollow directions "},{"title":"Gameplay​","type":1,"pageTitle":"Iteration","url":"/fundamentals/week-2/session#gameplay","content":"Exercise (30 minutes) In groups or breakout rooms of 4 trainees maximum. One person will share their screen and be the driver. The driver can only move the pieces where you are told by the navigators. The driver cannot make any decisions! The others will be the navigators. Together, the navigators must figure out a strategy to unblock the car, and tell the driver how to do it! Each person must drive, so set a timer for 5 minutes per round and then swap. tip Mentors can only be passengers: no driving or navigating. Mentors may ask questions but not answer them. Mentors will make sure the driver and navigators are following their roles correctly. "},{"title":"Reflection​","type":1,"pageTitle":"Iteration","url":"/fundamentals/week-2/session#reflection","content":"Back in the main room. Exercise (20 minutes) What did people think about this game? Let’s go around and each group share one thing they noticed about it. "},{"title":"Sharing Our Blockers (45 minutes)​","type":1,"pageTitle":"Iteration","url":"/fundamentals/week-2/session#sharing-our-blockers-45-minutes","content":"We call problems that stop our progress &quot;blockers&quot;. We talk through our blockers regularly and help each other get &quot;unblocked&quot; or &quot;unstuck&quot;. Exercise: 5 mins Join the Jam board and add your blockers. Make sure to add only one blocker per note. "},{"title":"MVP​","type":1,"pageTitle":"Iteration","url":"/fundamentals/week-2/session#mvp","content":""},{"title":"Recap - user stories​","type":1,"pageTitle":"Iteration","url":"/fundamentals/week-2/session#recap---user-stories","content":"Last time we discussed user stories. Can you remember the structure of a typical user story? User Story As a [who], I can [what] so that [why] Exercise: Favourite App (10 minutes) Split into groups and think about one of your favourite phone apps. Agree on one you all know. Come up with as many user stories as you can for it. You must come up with at least 10, but try for more. Set a timer for 10 minutes and write them on a new Jamboard "},{"title":"Defining the Minimum Viable Product​","type":1,"pageTitle":"Iteration","url":"/fundamentals/week-2/session#defining-the-minimum-viable-product","content":"Come back into the main room, now we have a long list of user stories, how do we decide what to do first? Where do we start? As always with software development, we start with the simplest thing possible. Let’s define the MVP. What's the minimum set of user stories we could implement for this product to be useful? Another way to say this is: &quot;What is the minimum viable product? Exercise: Prioritise! (10m) Swap your Jamboard with another group.Now go back into breakout rooms, with another group’s Jamboard of user storiesSet a timer for 10 minutesChoose the stories that make up the MVP for that appAre there any missing? Note them down Now come back into the main room. "},{"title":"Partners​","type":1,"pageTitle":"Iteration","url":"/fundamentals/week-2/session#partners","content":"Meet Capgemini (60m) In regions with a partnership, our partners will drop in and spend an hour with you.  "},{"title":"Iterating​","type":1,"pageTitle":"Iteration","url":"/fundamentals/week-2/session#iterating","content":""},{"title":"Pairing​","type":1,"pageTitle":"Iteration","url":"/fundamentals/week-2/session#pairing","content":"It's good to code with a friend. You learn SO much. Programmers call this pair programming and many professional teams program in pairs for a part of each day. Mentors will demonstrate pairing now. Exercise: Pairing In pairs, iteratively develop a solution to the CYF Blocks problem you are given. Switch between driver and navigator roles every 10 minutesThe &quot;driver&quot; is the person typing on the keyboard, just thinking about what needs to be writtenThe &quot;navigator&quot; reviews what the driver is doing and is thinking about to write nextDon't dominate - this is teamwork "},{"title":"CYF Blocks​","type":1,"pageTitle":"Iteration","url":"/fundamentals/week-2/session#cyf-blocks","content":"Now we have started to think about the idea of MVP, how can we use this to help us build working software? tip It's important that software works and that we can use it! In software development, we start with the smallest, simplest thing we can build that works. Then we incrementally improve it. This is iteration. You all built a personal home page in Intro to Digital, and last week you shipped it. Now let's iterate on your websites. Exercise: Point (10m) In pairs, define some user stories for your own websites, to improve it. These should be: a small changethat is achievable with the CYF Blocks seen in the course so farbut a complete featuretry for at least one feature that updates or changes the page when an action is taken Read ahead Read ahead to Ship It to see where to paste your code. Exercise: Click! (25m) In the same pairs, try to implement one user story. While implementing, try to break down into steps where you can visually check that your code runs as expected.  "},{"title":"PD (feedback)​","type":1,"pageTitle":"Iteration","url":"/fundamentals/week-2/session#pd-feedback","content":"::: Giving and receiving feedback Session objective: Transparency is the key to success. An important part of being a successful developer is the ability to give and receive feedback. In order to start that process, you must be able to showcase your work in progress. Now that you have had a chance to try some coding, it’s time to be transparent and talk about it. note Exercise (20 minutes per person) Exercise objective: To talk about challenges, ask and give feedback. Find a partner. In pairs take turns to discuss the questions below. Talk through your fears, get feedback, and work together to find solutions to some of the challenges you face. Each person has to give one piece of advice to support their fellow team member: When it comes to showing your work in progress, what are your three biggest fears?How will you overcome these fears?When it comes to showing your work in progress, what’s the absolute worst thing that can happen?What is the best thing that can happen?When it comes to the working world, what do you need from your teammates?How will you support your teammates?What’s a better outcome, making a mistake and learning something new or never making mistakes and never learning at all? After 20 min, it’s time to swap. ::: note Exercise (10 minutes) Exercise objective: To practice public speaking skills Volunteer to share your challenges to the class and ask for feedback. ::: "},{"title":"Ship It​","type":1,"pageTitle":"Iteration","url":"/fundamentals/week-2/session#ship-it","content":"It's important to ship your work, so let's ship the new version of our websites. In ITD, you wrote code in Codepen, an online Integrated Development Environment (IDE). Now you will use Visual Studio Code (VSCode), a professional IDE you will use at work. You’ll export your page to a folder on your computer, edit it in your IDE, upload the folder to Github, and deploy it to Netlify. "},{"title":"You will need​","type":1,"pageTitle":"Iteration","url":"/fundamentals/week-2/session#you-will-need","content":"Your landing page on CodepenThe VSCode IDEAn account with Github and to be logged inAn account with Netlify, and to be logged in Exercise Export your page to a folder on your computer, edit it in your IDE, upload the folder to Github, and deploy it to Netlify. There is a step by step to help you if you need it. "},{"title":"Step by step​","type":1,"pageTitle":"Iteration","url":"/fundamentals/week-2/session#step-by-step","content":"Find your landing page on Codepen and click Export &gt; Export as zipFind your zip on your hard drive and unzip itOpen VSCodeIn VSCode, choose File &gt; Open Folder and choose your unzipped folderNow your IDE shows your code just like Codepen did. Your work is in the /src folder. Take a look. You can also view the rendered view right in your browser. Take a look!Copy and paste the static html from CYF Blocks to your existing project in VSCode. Paste the html into the index.html file.Copy and paste the generated JavaScript from CYF Blocks to the script.js file in your VSCode project.Test the results in your browser. Try adding Live Server to speed up your workflowShip it to Netlify. See last week's Ship It for how to do this. "},{"title":"Retro​","type":1,"pageTitle":"Iteration","url":"/fundamentals/week-2/session#retro","content":"We will do a 15 minute retro together. "},{"title":"Coursework​","type":1,"pageTitle":"Iteration","url":"/fundamentals/week-2/session#coursework","content":"Find the coursework for this week on the coursework page. "},{"title":"Feedback​","type":1,"pageTitle":"Iteration","url":"/fundamentals/week-2/session#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/fundamentals/week-3/coursework","content":"","keywords":""},{"title":"CYF Blocks (8h)​","type":1,"pageTitle":"Coursework","url":"/fundamentals/week-3/coursework#cyf-blocks-8h","content":"Pick one or more of the following projects, define its requirements by writing the user stories, iteratively develop it in CYF Blocks, and ship it! Commenting: Make it possible for a user to add a comment on your website (the comment won't get saved anywhere, so it will disappear when the page is refreshed - we'll work on saving later on)Shopping Cart Light: Make it possible to add products to a &quot;shopping cart&quot; (again, we won't be able to check out/pay with what we know so far)Image carousel: Allow the user to cycle through a set of imagesHamburger menu: Display a dropdown menu like https://dev.to/devggaurav/let-s-build-a-responsive-navbar-and-hamburger-menu-using-html-css-and-javascript-4gci Share one of your projects in Google Classroom, not forgetting to include: Your user storiesYour CYF Blocks implementation (using the share button)Your deployed website Share your deployed website in your cohort's Slack channel. "},{"title":"Linkedin profile (PD - 1 hr)​","type":1,"pageTitle":"Coursework","url":"/fundamentals/week-3/coursework#linkedin-profile-pd---1-hr","content":"Professional communication is critical when it comes to landing a role. Employers are looking for passionate candidates and use platforms like Linkedin to source future employees. Set up your LinkedIn profile. Let employers know that you have built your first product and started your journey into the tech industry. "},{"title":"Soft skills research (PD - 1 hr)​","type":1,"pageTitle":"Coursework","url":"/fundamentals/week-3/coursework#soft-skills-research-pd---1-hr","content":"It’s time to do your research. It’s time to get familiar with the industry that you want to work in. Search for roles on Google: look at the person specifications that companies are hiring for. Fill out the form below with the three soft skills employers are currently looking for. You will find roles on CW Jobs, Linkedin, Indeed, and any jobs board. Employers are looking for Full Stack developers that can: Build rapport with a diverse range of people Employers are looking for Front End developers that can: Effectively present information and respond to questions from management, business, and users. Employers are looking for UX designers that can:  Employers are looking for QA testers that can:  Employers are looking for product managers that can:  "},{"title":"Week 3 Goals","type":0,"sectionRef":"#","url":"/fundamentals/week-3/learning-objectives","content":"","keywords":""},{"title":"CYF Blocks​","type":1,"pageTitle":"Week 3 Goals","url":"/fundamentals/week-3/learning-objectives#cyf-blocks","content":" Translate requirements into an implementable solution Break down the implementation of the solution into testable steps Implement a whole feature and ship it to a deployed website Iterate on an existing feature in response to changing requirements "},{"title":"Agile Software Development​","type":1,"pageTitle":"Week 3 Goals","url":"/fundamentals/week-3/learning-objectives#agile-software-development","content":" Identify blockers Define a user story Implement a feature from a user story Iterate on feature Ship working code Facilitate a retrospective with other trainees "},{"title":"Mentor Notes","type":0,"sectionRef":"#","url":"/fundamentals/week-3/mentors","content":"","keywords":""},{"title":"Delivery","type":0,"sectionRef":"#","url":"/fundamentals/week-3/session","content":"","keywords":""},{"title":"Telephone​","type":1,"pageTitle":"Delivery","url":"/fundamentals/week-3/session#telephone","content":"Exercise (15 minutes) In groups of no more than 5, we’re going to play a game of telephone again. → Telephone "},{"title":"Blockers (45 minutes)​","type":1,"pageTitle":"Delivery","url":"/fundamentals/week-3/session#blockers-45-minutes","content":"Exercise: 5 mins Join the Jam board and add your blockers. Make sure to add only one blocker per note. Now let's talk through our blockers and live code together. "},{"title":"Shipping it​","type":1,"pageTitle":"Delivery","url":"/fundamentals/week-3/session#shipping-it","content":"tip It's important that software works and that other people can use it Today we will spend most of our time working together on our projects in timed bursts of 25 minutes. This is called the Pomodoro Technique, and it will help you manage your self study. On the 5 minute break, get up from your computer and move your body: stretch! This is hard work. We will develop and then ship our code repeatedly throughout the day. Each time we ship, we will ship something that works. Pick one of the CYF Blocks projects and ship it to your websiteChoose a way to improve upon the project to make it better suited to your website. Modify your CYF Blocks implementation then ship it!Get feedback from one of your peers: what new requirement would they like to add? Can you implement this in CYF Blocks? Ship it again!  How will you work together? Using the collaborative tools you have learned during this course: "},{"title":"You are part of a cohort​","type":1,"pageTitle":"Delivery","url":"/fundamentals/week-3/session#you-are-part-of-a-cohort","content":"together: identify your blockersin small groups: define your goals as user storiesin pairs: iteratively improve your products "},{"title":"PD (presentation)​","type":1,"pageTitle":"Delivery","url":"/fundamentals/week-3/session#pd-presentation","content":"Session objective: You have now developed several products. It’s time to deliver like a professional. As a developer, you will develop an MVPtest your productbe transparent about the challenges you have faceddiscuss the next iteration of your product Developers are always iterating their products, which is why you might experience software updates on your devices at home. Each iteration is shared in public. It’s time to showcase your work. note Exercise (20 min) Exercise objective: To prepare presentations Once you have shipped your website you will deliver a 3-min presentation. You do not need to make slides, but you must show your product. Your presentation you must cover the following The CYF Blocks project you developedWhy you chose itWhat your goals wereWhat your challenges wereWhat you learnedWhat you would do differently if you had another opportunity ::: note Exercise (30 min) Exercise objective: To practice public speaking skills In small groups. Each trainee has up to 5 min to present a summary of their product their group. ::: "},{"title":"Wrap up​","type":1,"pageTitle":"Delivery","url":"/fundamentals/week-3/session#wrap-up","content":""},{"title":"Reflection on Fundamentals​","type":1,"pageTitle":"Delivery","url":"/fundamentals/week-3/session#reflection-on-fundamentals","content":"We have worked together over these weeks exploring some of what it means to be a software developer. If you have met the criteria you will now be invited to join the Software Development Course. Let's think together about what software developers really do. Exercise: 5 mins Join the Jam board and add your ideas. Make sure to add only one idea per note. Mentors will now lead a reflection and then we will do our last retro! "},{"title":"Retro​","type":1,"pageTitle":"Delivery","url":"/fundamentals/week-3/session#retro","content":"Retro 15m This retro will be led by the trainees "},{"title":"Coursework​","type":1,"pageTitle":"Delivery","url":"/fundamentals/week-3/session#coursework","content":"Find the coursework for this week on the coursework page. "},{"title":"Feedback​","type":1,"pageTitle":"Delivery","url":"/fundamentals/week-3/session#feedback","content":"Spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Schedule​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-3/mentors#schedule","content":"Here's a rough schedule, which you can adapt to suit your cohort. You should also schedule at least one short break in the afternoon for prayers. Parcel out the sessions between volunteers in a planning call beforehand. Once you've planned it, make sure you share the schedule with all trainees and volunteers at least 24 hours beforehand, so they can make any necessary travel, childcare, religious, and other logistical arrangements. "},{"title":"Morning​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-3/mentors#morning","content":"10:00 AM\t10:30 AM\t11:00 AM\t11:30 AM\t1200:00 AM\t12:30 AMTelephone\tCYF Blocks\tCYF Blocks\tShip It\tLunch\tLunch "},{"title":"Afternoon​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-3/mentors#afternoon","content":"13:00\t13:30\t14:00\t14:30\t15:00\t15:30\t16:00\t16:30Delivery\tShip It\tCYF Blocks\tShip It\tPersonal Development\tPersonal Development\tWrap Up\tWrap Up "},{"title":"Telephone​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-3/mentors#telephone","content":"See week 1 for notes. "},{"title":"Coursework review/ Blockers​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-3/mentors#coursework-review-blockers","content":"At the beginning of the lesson, get the students thinking about questions that they had during the week. To avoid getting distracted with answering a question for too long, run a short session where you write down all the questions on a whiteboard. You can then prioritise answering the questions on your own time, or split into groups to answer several questions at once. It is also useful to get a volunteer write up the questions in a more permanent place (e.g. as a Gist) and share on Slack. We always begin our day with live coding and group debugging using trainees' work as material. This session is an opportunity to work through common problems with coursework and also to demonstrate productive code review and debugging strategies. Use Devtools where possible and live code. "},{"title":"Shipping it​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-3/mentors#shipping-it","content":"Today is all about developing and shipping code and practising working together with others to get this done. Trainees don't need to make loads of progress, necessarily, but they need to ship and they need to witness and practise strategies for making progress. Prioritise asking questions, pairing, breaking down problems, and organising solutions. Some ideas: Set timers and do some physical stretches in between focused working burstsMentors, work on your own Blocks (bring something!) projects and pair with trainees through the dayShare resources like MDN, CSS Tricks, W3C, and Devtools frequently "},{"title":"Wrap up​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-3/mentors#wrap-up","content":"We ask trainees to think together about what software developers really do. Share a Jamboard or FigJam and ask them to fill it with their ideas. Put a couple of starter notes on the board yourself. tip It's really common for trainees to write millions of different things on one sticky note. Keep picking them up on this and ask them to put just ONE thing on each note. Here are some important ideas you should bring up if the trainees do not: Software developers... work together in pairs, teams, and organisationsSoftware developers... break down problemsSoftware developers... do not just carry out tasks, they discover and define those tasksSoftware developers... don't know all the answers, they ask lots of questionsSoftware developers... are not told what to do, they tell computers what to doSoftware developers... ship it "},{"title":"Sample reflection for mentor​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-3/mentors#sample-reflection-for-mentor","content":"Example reflection Becoming a software developer is not about learning syntax, though you do have to learn syntax. It is not about following instructions, though you do have to carefully read and interpret requirements. Software development is fundamentally about solving problems by breaking them down into simpler, easier problems, solving them, and then organising those solutions into a logical sequence. This is called computational thinking. "},{"title":"Assigning Coursework​","type":1,"pageTitle":"Mentor Notes","url":"/fundamentals/week-3/mentors#assigning-coursework","content":"At the end of Class, assign the homework for this week through Google Classroom. "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/git/branches/homework","content":"","keywords":""},{"title":"1) Read the Lesson Page Content (2 Hours)​","type":1,"pageTitle":"Coursework","url":"/git/branches/homework#1-read-the-lesson-page-content-2-hours","content":"Before starting this coursework, read through the lesson and complete the exercies. "},{"title":"2) Make and review pull requests with a partner (15 minutes)​","type":1,"pageTitle":"Coursework","url":"/git/branches/homework#2-make-and-review-pull-requests-with-a-partner-15-minutes","content":"Find a partner to work with from your class. In the lesson exercises, you made two branches (one with a story, one with an extra ingredient). Make pull requests for both of your branches, and ask them to review your two pull requests. You should also review their pull requests. When you're reviewing: Give some feedback on the pull requests you've been asked to review - try to suggest a change (maybe a better wording, fix some spelling, or suggest an extra idea they could add). When the author has implemented your change, and you're happy with it, approve the pull request. Authors: If your reviewer suggested changes, make the changes and push them to the remote branch. When each pull request has been approved, merge it. Delete your branches when you're done. If you get stuck, ask for help on Slack! "},{"title":"3) Complete Git It (2 hours)​","type":1,"pageTitle":"Coursework","url":"/git/branches/homework#3-complete-git-it-2-hours","content":"You should complete the following sections on Git It Branches aren't just for Birds You are also welcome to continue to work through the rest of Git It to continue learning about Git. "},{"title":"4) Git Visualizer (30 minutes)​","type":1,"pageTitle":"Coursework","url":"/git/branches/homework#4-git-visualizer-30-minutes","content":"The animated gifs in today's lesson where created using this website https://git-school.github.io/visualizing-git/ Spend some time experimenting with branches and how you they work to clarify your understanding. Note that this website doesn't understand git switch, so you'll need to run git checkout to switch branches (e.g. git checkout mybranch to switch to mybranch), and git checkout -b to make branches (e.g. git checkout -b add-story to make a new branch named add-story) - sorry about that! "},{"title":"Branches","type":0,"sectionRef":"#","url":"/git/branches/","content":"","keywords":""},{"title":"Learning objectives​","type":1,"pageTitle":"Branches","url":"/git/branches/#learning-objectives","content":"By the end of this class, you should be able to: Explain why branches can be useful when using Git.Create a branch, and add commits to it.Switch between branches.Create a pull request from a branch to the main branch.Work with another trainee on non-conflicting changes to a single branch.  So far, we've seen that we can use Git to share our work, get code review, and view history. This week, we're going to learn more about how we can use Git to work together in groups, and to work on more than one thing at the same time. For this class, we're going to use the Git CLI, but everything we're doing can also be done in GitHub Desktop. Remember you can always check the cheatsheet! In this class, we're going to work with a GitHub repository of recipes. CodeYourFuture has made a template repository on GitHub. Go to https://github.com/CodeYourFuture/GitExampleRecipes and click on &quot;Use this template&quot; to make a repository owned by your user account which contains the right files. Then clone your newly created repository onto your computer. You're going to do all of your exercises in your copy of this repository. "},{"title":"1) What is a branch?​","type":1,"pageTitle":"Branches","url":"/git/branches/#1-what-is-a-branch","content":"We saw in the first Git lesson that Git stores the history of your changes as a list of commits, one after the other:  Since then, you've been pressing a button in GitHub Desktop called &quot;Commit to main&quot;, or running git commit, to make a new commit. But what does that &quot;to main&quot; mean? main is called a branch, which is a list of commits. It turns out, you can have more than one branch, and they can share some commits if they want:  "},{"title":"Why would we want to do this?​","type":1,"pageTitle":"Branches","url":"/git/branches/#why-would-we-want-to-do-this","content":"There are a few reasons. The main one is: So you can work on more than one thing at the same time. Let's look at our repo of recipes. Right now, it contains one recipe, for a brownie in a mug. There are a couple of changes we want to make: We want to add an optional topping to put on top of the brownie (maybe ice cream, maybe you have a better idea). We'll need to add it both as an extra ingredient, and an extra step at the end.A lot of recipes start with a story of how the author found them, or some time they've really enjoyed the recipe. We want to add a story, before the &quot;What you need&quot; section. Let's imagine we start writing the story, but we want to quickly add the optional ice cream step. And let's imagine that we want someone else to review both changes before we merge them to main. We could make both changes to main, and ask someone to review them both, but then they both need to be right before we can merge either one - we can't merge just the ice cream step until the story is finished. Or we could only make the ice cream change, then send it for review, then when that merges, write the story and send it for review. But that slows us down, and also means that the reviewer can't review both changes at the same time. It would be better if we could send out one pull request for the ice cream change, and another for the story. We can do this - with branches:  We can then add new commits on top of each branch, separately, and later on merge both branches to main. "},{"title":"How do we create a new branch?​","type":1,"pageTitle":"Branches","url":"/git/branches/#how-do-we-create-a-new-branch","content":"$ git switch --create story Switched to a new branch 'story'  Let's run through the bits of that command: git - we're running a git command. switch - we're switching to a different branch than the one we're on right now. --create - we want git to create the branch we're switching to. story - the branch we want to switch to (and create) is called story. Running this command doesn't change any of the files in our repository - they stay the same, but if we commit changes, they will only get committed on this branch. If we switched back to the main branch, the changes would be un-done. But if we switch back to story, they'll come back! (Note that some of the graphics in this class show slightly different commands than the ones we're teaching you. What we're teaching you is the newer way to do things - there's a note at the bottom of the lesson about the old way if you're curious. But we recommend you use git switch :)) "},{"title":"How do I know what branch I'm on?​","type":1,"pageTitle":"Branches","url":"/git/branches/#how-do-i-know-what-branch-im-on","content":"You've already run one command which tells you this, you just may not have noticed! $ git status On branch story nothing to commit, working tree clean  That's right, git status tells you what branch you're on (and about any changes you haven't committed). You can also find out more about branches by running: $ git branch main * story  git branch tells you what branches exist in your repository, and puts a star next to the one you're currently switched to. "},{"title":"Exercise 1 (15 minutes)​","type":1,"pageTitle":"Branches","url":"/git/branches/#exercise-1-15-minutes","content":"Exercise Let's make a new branch, and make a new commit on it. Create a branch named story, and edit mug-brownie.md. Before the &quot;What you need&quot; heading, make up a story about how the author discovered the recipe, or a time they enjoyed it. When you've written a bit, make a commit (make sure to give it a good commit message!) Explore the history with git log - make sure you understand the commits in your history and why they're there. If you're confused, or don't understand what you're seeing, ask on Slack now! "},{"title":"2) Switching back to main​","type":1,"pageTitle":"Branches","url":"/git/branches/#2-switching-back-to-main","content":"Can you guess how to switch back to the main branch? What do you think will happen to the contents of the files when you do? What will the history look like? "},{"title":"Exercise 2 (5 minutes)​","type":1,"pageTitle":"Branches","url":"/git/branches/#exercise-2-5-minutes","content":"Exercise Switch back to the main branch (hint: The command to run is like the one you used to create a new branch, but you're not creating a new one). Look at the contents of mug-brownie.md - what's changed? Explore the history with git log - make sure you understand the commits in your history and why they're there. If you're confused, or don't understand what you're seeing, ask on Slack now! "},{"title":"3) Managing multiple branches​","type":1,"pageTitle":"Branches","url":"/git/branches/#3-managing-multiple-branches","content":"When we created our story branch, it shared its history with the main branch. This is because whenever we create a branch, it will start off being the same as the branch we were on before. In general, you always want to make new branches based on main, so always make sure to git switch main before creating a new branch. If you find that the history of a new branch isn't what you expect, you probably didn't switch back to main before creating the new branch. We'll learn how to delete branches soon. You can have multiple branches at the same time, and you can work on them separately. When you make a pull request, it will be tied to one branch. You can make more than one pull request, as long as each is created from a different branch. This can be useful, so that you can propose multiple changes to code separately. For example, if you have two changes to make, and one is really simple (like fixing a typo) and the other may need some discussion (like changing the colour scheme of a page), if you make separate pull requests (from separate branches), the easy one can get merged while the other one is being discussed. Having small, separate pull requests also helps to keep your changes small, and allows your reviewer to focus on one thing, which makes their job easier. Naming​ Just like with variables and files, you want to name your branches in ways that will help you remember/understand what they're for. We normally name Git branches with 1-5 words, with no spaces. Some good examples: add-storymake-button-reddelete-out-of-date-news And some bad examples: branch1 or branch2newfeatureaddalltheingredientsbutalsoremovevanilla "},{"title":"Exercise 3 (10 minutes)​","type":1,"pageTitle":"Branches","url":"/git/branches/#exercise-3-10-minutes","content":"Exercise Make another branch based on main called extra-topping (remember to make sure you're on the main branch before creating the new one!). Add a new topping to the recipe. Make sure to include it both in the ingredients list, and the steps. Commit your changes. "},{"title":"4) Managing branches for pull requests​","type":1,"pageTitle":"Branches","url":"/git/branches/#4-managing-branches-for-pull-requests","content":"We've seen before that to make a pull request from the Git CLI the steps are to git push (to make the remote's version of main be the same as your local version), and then make a pull request from the GitHub UI. Most developers avoid doing work on their main branch, and always work on some other branch. This is because if you commit things to main, all new branches you create will have those changes on, and you generally want to make pull requests with only a specific set of changes compared to upstream's main. From now on, your steps to start working on code for a pull request should be: git switch main (switch back to the main branch)git pull (pull in any changes from upstream)git switch --create my-new-branch-name (make a new branch)(make your changes)git commitgit push (send your changes to the remote)Create a pull request through the GitHub UI If you need to make changes (e.g. because your reviewer gave you feedback), you should switch to your branch, make the changes, commit them, and push them to the remote again. The pull request will automatically get updated with the changes you committed. "},{"title":"5) Deleting branches​","type":1,"pageTitle":"Branches","url":"/git/branches/#5-deleting-branches","content":"After you merge your pull request, you should delete your branch. GitHub can't change things on your computer automatically, so you need to do it yourself. You can't delete a branch you're switched to, so first, switch to main: git switch main. Then pull in any changes from upstream (this helps Git to work out whether you've already merged your PR): git pull. And finally, delete the branch: git branch --delete your-branch-name. "},{"title":"6) Comparing local and remote​","type":1,"pageTitle":"Branches","url":"/git/branches/#6-comparing-local-and-remote","content":"Before, we saw that git status can tell you what branch you're on, and any changes you haven't commited. But it can also tell you more than that! If you have made commits locally, but haven't pushed them, git status may say something like: $ git status Your branch is ahead of 'origin/story' by 2 commits.  Or if you have run a git fetch but not a git pull, and the remote has changes that you haven't pulled yet, it may say: $ git status Your branch is behind 'origin/main' by 3 commits, and can be fast-forwarded.  git status can remind you that you have or haven't pushed or pulled yet. After you've merged a pull request, you can delete your branch, because you don't need it any more - your code is on the main branch! "},{"title":"7) On \"git checkout\"​","type":1,"pageTitle":"Branches","url":"/git/branches/#7-on-git-checkout","content":"On the internet, you may see people referring to git checkout and git checkout -b as ways to switch, or create, branches. These are old versions of the commands git switch and git switch --create. They work the same, but because their names are less good (and sometimes they can also do extra things, which may be surprising), they have been replaced with git switch. You should use git switch, but don't be scared if you see someone talking about git checkout - it's the same thing! "},{"title":"Coursework​","type":1,"pageTitle":"Branches","url":"/git/branches/#coursework","content":"You can find this weeks coursework here. "},{"title":"Feedback​","type":1,"pageTitle":"Branches","url":"/git/branches/#feedback","content":"It's really helpful if you give us feedback for this lesson. This helps us improve it for future trainees! Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/git/cli/homework","content":"","keywords":""},{"title":"1) Read the Lesson Page Content (60 minutes)​","type":1,"pageTitle":"Coursework","url":"/git/cli/homework#1-read-the-lesson-page-content-60-minutes","content":"Before starting this coursework, read through the lesson and read the cheatsheet. https://syllabus.codeyourfuture.io/git/cli/lesson "},{"title":"2) Git and Github for Poets (3 Hours)​","type":1,"pageTitle":"Coursework","url":"/git/cli/homework#2-git-and-github-for-poets-3-hours","content":"This video series gives you a good introduction to lots of different Git concepts on the command line. You might recognise the presenter from the Terminal week! https://www.youtube.com/watch?v=BCQHnlnPusY&amp;list=PLRqwX-V7Uu6ZF9C0YMKuns9sLDzK6zoiV Watch videos 1-8 in this series, taking notes when you don't understand something. Make sure you clarify your understanding before moving onto the next step. "},{"title":"3) Install Git It (10 minutes)​","type":1,"pageTitle":"Coursework","url":"/git/cli/homework#3-install-git-it-10-minutes","content":"&quot;Git It&quot; is a tool that teaches you how to use Git on the Terminal - a key skill as you learn more about Git. You can read about what it will be teaching you here https://github.com/jlord/git-it-electron You should download the install files from here by clicking on one of the .zip file for your operating system. https://github.com/jlord/git-it-electron/releases  When you've downloaded Git It you can install it by following the instructions here https://github.com/jlord/git-it-electron#git-it "},{"title":"4) Complete Git It (4 hours)​","type":1,"pageTitle":"Coursework","url":"/git/cli/homework#4-complete-git-it-4-hours","content":"You should complete the following sections on Git It Get GitRepositoryCommit To ItGitHubbinRemote ControlForks and Clones You'll be continuing this next week "},{"title":"5) Git CLI Quiz (1 hour)​","type":1,"pageTitle":"Coursework","url":"/git/cli/homework#5-git-cli-quiz-1-hour","content":"For this task, you must complete the quiz in the repository and submit it on Github using ONLY Git CLI. This means you must not open Github Desktop at all during this task. You can find the quiz here https://github.com/CodeYourFuture/Git-CLI-Coursework Make sure you clone the repository to your own Github Profile before you start working on this task. As always, when you submit your work you should mark somebody elses. "},{"title":"5) (Optional) Git Ready​","type":1,"pageTitle":"Coursework","url":"/git/cli/homework#5-optional-git-ready","content":"We've only taught you the parts of Git that you need to know right now - if you're feeling ambitious take a look at everything else that Git can do http://gitready.com/ Important: You don't need to know all of this now! Git is a tool you use to solve your problems - you only need to learn as much you need for now. "},{"title":"Module Coordinator","type":0,"sectionRef":"#","url":"/git/coordinator","content":"","keywords":""},{"title":"1) Module Delivery​","type":1,"pageTitle":"Module Coordinator","url":"/git/coordinator#1-module-delivery","content":"This module is unusual as it follows an irregular delivery pattern The content has been written to be delivered in this specific way to make the best use of Trainee's time through the course. See the Overview page for when the lessons are given. "},{"title":"2) Preparation​","type":1,"pageTitle":"Module Coordinator","url":"/git/coordinator#2-preparation","content":"This module has some preparation work that should be set as coursework before the module starts You can find the preparation work here "},{"title":"Lesson","type":0,"sectionRef":"#","url":"/git/cli/lesson","content":"","keywords":""},{"title":"Learning Objectives​","type":1,"pageTitle":"Lesson","url":"/git/cli/lesson#learning-objectives","content":"By the end of this class, you should be able to: To clone a repository using Git CLITo commit to a repositoryTo push changes using Git CLITo view Git's history log using Git CLITo view what uncommitted changes you have with git status  "},{"title":"Before you start​","type":1,"pageTitle":"Lesson","url":"/git/cli/lesson#before-you-start","content":"Make sure that you've got Terminal / Git Bash / Windows WSL working correctly. Open a terminal window and type git  If you get a response that starts with usage: git [--version] [--help] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]....  then everything is working! If you see something different, make sure that git is installed correctly. You can find instructions for this here "},{"title":"1) Why use Git on the Command Line​","type":1,"pageTitle":"Lesson","url":"/git/cli/lesson#1-why-use-git-on-the-command-line","content":"This section is taken from this excellent blog Up until now you've been using Git using Github Desktop quite happily - why are we confusing you with a different way to use Git? Well, there a few really good reasons... "},{"title":"You feel comfortable everywhere​","type":1,"pageTitle":"Lesson","url":"/git/cli/lesson#you-feel-comfortable-everywhere","content":"A big advantage for using Git CLI is that you work comfortably everywhere, the experience of working on your local computer, a colleague computer or even a remote machine with a different OS feels more or less the same (minus your personal configurations perhaps). "},{"title":"Fully utilizing Git​","type":1,"pageTitle":"Lesson","url":"/git/cli/lesson#fully-utilizing-git","content":"The big downside of using GUI for Git is that it exposes you to a relatively small interface (whatever part the GUI creator deemed important), this basically means you are not fully interacting with Git and are therefore not familiar with (at least) some of its capabilities. "},{"title":"Git CLI gives you the power of the command line​","type":1,"pageTitle":"Lesson","url":"/git/cli/lesson#git-cli-gives-you-the-power-of-the-command-line","content":"We often try to reuse &amp; build on top of existing tools and this is no different since you’re already using the command line, you are able to compose your Git flow with many useful command-line tools. From looping over each commit and running tests on it, through to working out who has committed the most code to your repository — the only limit here is your creativity. "},{"title":"Git CLI enables easier automation & deployment​","type":1,"pageTitle":"Lesson","url":"/git/cli/lesson#git-cli-enables-easier-automation--deployment","content":"After using the Git CLI, it’s natural to start automating and scripting your workflow. You can use Git hooks to fail a commit if your tests didn’t pass and even add your name to the beginning of the commit. This added power allows you to write better deployment scripts. "},{"title":"2) Comparing Github Desktop and Git CLI​","type":1,"pageTitle":"Lesson","url":"/git/cli/lesson#2-comparing-github-desktop-and-git-cli","content":"Github Desktop and Git CLI might look very different but they actually have more in common than it looks! Behind the scenes, Github Desktop is doing exactly the same work that Github CLI is doing. Lots of the common tasks that you can complete with Github Desktop are quite simple to complete using the CLI. We've made comparisons in the Desktop to CLI Cheatsheet "},{"title":"3) Start the Coursework​","type":1,"pageTitle":"Lesson","url":"/git/cli/lesson#3-start-the-coursework","content":"Git CLI is best learnt by using it - in the coursework you'll find videos and interactive exercises for you to complete. "},{"title":"Coursework​","type":1,"pageTitle":"Lesson","url":"/git/cli/lesson#coursework","content":"You can find this weeks coursework here. "},{"title":"Feedback​","type":1,"pageTitle":"Lesson","url":"/git/cli/lesson#feedback","content":"It's really helpful if you give us feedback for this lesson. This helps us improve it for future trainees! Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Github Desktop Cheatsheet","type":0,"sectionRef":"#","url":"/git/desktop/cheatsheet","content":"","keywords":""},{"title":"I want to get code from a repo onto my computer (Cloning)​","type":1,"pageTitle":"Github Desktop Cheatsheet","url":"/git/desktop/cheatsheet#i-want-to-get-code-from-a-repo-onto-my-computer-cloning","content":"Follow these steps if you need to get code from a Github repository onto your computer (for example to complete your coursework). info Github Desktop might look a bit different if are cloning the first repository on your computer. "},{"title":"Video​","type":1,"pageTitle":"Github Desktop Cheatsheet","url":"/git/desktop/cheatsheet#video","content":" "},{"title":"Instructions​","type":1,"pageTitle":"Github Desktop Cheatsheet","url":"/git/desktop/cheatsheet#instructions","content":"Open the repository on Github in your browser For most of your coursework this will likely be https://github.com/CodeYourFuture/COURSEWORK_REPO_NAME Click the &quot;Code&quot; button, which opens a menu:  Copy the URL (Pro Tip: you can click the clipboard icon on the right to copy automatically!)Open Github Desktop, and click on the File menu and then click Clone Repository:  In the Clone Repository modal, make sure you are on the URL tab. Then paste the URL that you copied before into the &quot;URL or username/repository&quot; input:  The &quot;Local Path&quot; input controls where the files will end up on your computer. You can probably leave it as the defaultClick the Clone button, and wait until it has finished cloning Congrats! You have successfully cloned a repository from Github! 🎉 "},{"title":"I want to open Visual Studio Code with code from my repository​","type":1,"pageTitle":"Github Desktop Cheatsheet","url":"/git/desktop/cheatsheet#i-want-to-open-visual-studio-code-with-code-from-my-repository","content":"Follow these steps if you already have the repository on your computer and you want to edit the files. In the menubar, click the Repository optionThen click the Open in Visual Studio Code option:  Visual Studio Code will now open with the code from the repository. "},{"title":"I want to save my code to the repository (Committing)​","type":1,"pageTitle":"Github Desktop Cheatsheet","url":"/git/desktop/cheatsheet#i-want-to-save-my-code-to-the-repository-committing","content":"Follow these steps if you have edited some code, and want to update the repository with your changes. "},{"title":"Video​","type":1,"pageTitle":"Github Desktop Cheatsheet","url":"/git/desktop/cheatsheet#video-1","content":" "},{"title":"Instructions​","type":1,"pageTitle":"Github Desktop Cheatsheet","url":"/git/desktop/cheatsheet#instructions-1","content":"Open Github Desktop and ensure you are in the correct Current RepositoryA diff showing the changes that you made is shown (lines with a green background were added, and lines with a red background were removed):  Click on the files in the sidebar to see different files. Make sure that you're only changing files that you meant to changeOnce you're happy with your change, fill out the input boxes in the bottom left to add a commit message:  Click the &quot;Commit to main&quot; button You just committed your code to the repository! 🎉 You should now see &quot;No local changes&quot;. You can now make more changes to the repository (and more commits), or you can push your existing commits. "},{"title":"I want to send my code to volunteers (Pushing)​","type":1,"pageTitle":"Github Desktop Cheatsheet","url":"/git/desktop/cheatsheet#i-want-to-send-my-code-to-volunteers-pushing","content":"Follow these steps if you have committed some code, and want to send it to the volunteers. "},{"title":"Video​","type":1,"pageTitle":"Github Desktop Cheatsheet","url":"/git/desktop/cheatsheet#video-2","content":" "},{"title":"Instructions​","type":1,"pageTitle":"Github Desktop Cheatsheet","url":"/git/desktop/cheatsheet#instructions-2","content":"Open Github Desktop and ensure you are in the correct Current RepositoryClick the &quot;Push origin&quot; button at the top:  The next steps are different depending on whether this is the first time you have pushed this repository to Github. If this is the first time you have pushed this repository, follow steps 3, 4 and 5 below. If not, you can skip those steps. If this is the first time you have pushed this repository, a message pops up asking if you want to fork this repository. Click the Fork this Repository button:  A new message then pops up asking how you are planning to use the fork. Click the &quot;To contribute to the parent project&quot; option, then click Continue:  Click the &quot;Push origin&quot; button again In the menubar, click the Branch &gt; Show Pull Request option:  This will open a tab in your browser. Click the &quot;Create pull request&quot; button on the right:  Fill out the Pull Request title (it is helpful to include your city, name and which week the coursework is for):  Click the &quot;Create pull request&quot; button Congrats! You just created a Pull Request on Github! 🎉 The volunteers will now be able to review your code and give feedback! "},{"title":"TODO​","type":1,"pageTitle":"Github Desktop Cheatsheet","url":"/git/desktop/cheatsheet#todo","content":"GlossaryTips on writing a good commit message?Tips on understanding a diff? "},{"title":"From Github Desktop To CLI","type":0,"sectionRef":"#","url":"/git/desktop/cheatsheet-cli","content":"","keywords":""},{"title":"Viewing Changed Files​","type":1,"pageTitle":"From Github Desktop To CLI","url":"/git/desktop/cheatsheet-cli#viewing-changed-files","content":"To view the files that you have changed you can use git status  This will show a list of files that have changed since the last time that you committed. Github Desktop\tGit CLI\t "},{"title":"Including Files to Commit​","type":1,"pageTitle":"From Github Desktop To CLI","url":"/git/desktop/cheatsheet-cli#including-files-to-commit","content":"One key difference between Github Desktop and Git CLI is that you need to set which files will be committed to your repository. You can add files to be committed by using git add .  This command will add every file you have changed to be ready to commit Github Desktop\tGit CLI\t "},{"title":"Committing Changes​","type":1,"pageTitle":"From Github Desktop To CLI","url":"/git/desktop/cheatsheet-cli#committing-changes","content":"Committing changes to your repository can be done by using this command git commit -m &quot;YOUR MESSAGE HERE&quot;  The -m means that after you are going to write your commit message. Make sure to put your commit message in quotes! You can press enter to add new lines in your message, too. Some characters are treated specially in the terminal, and we can tell the terminal not to treat them specially by escaping them with a backslash. For example, if you want to use a quote character inside your message, you need to escape it, otherwise the terminal will think your quote is the end of the message: git commit -m &quot;Use \\&quot;s instead of 's&quot;  Here's how committing on Github Desktop and Git CLI is different Github Desktop\tGit CLI\t "},{"title":"Pushing Changes to Github​","type":1,"pageTitle":"From Github Desktop To CLI","url":"/git/desktop/cheatsheet-cli#pushing-changes-to-github","content":"Finally, pushing your changes to Github can be completed by using git push  Github Desktop\tGit CLI\t "},{"title":"Fetching from Github​","type":1,"pageTitle":"From Github Desktop To CLI","url":"/git/desktop/cheatsheet-cli#fetching-from-github","content":"To check if there have been any changes on Github you can use git fetch  Github Desktop\tGit CLI\t "},{"title":"Pulling from Github​","type":1,"pageTitle":"From Github Desktop To CLI","url":"/git/desktop/cheatsheet-cli#pulling-from-github","content":"To pull any changes from Github you can use git pull  Github Desktop\tGit CLI\t "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/git/desktop/homework","content":"","keywords":""},{"title":"1) Tell us about you - using Github! (1 hour)​","type":1,"pageTitle":"Coursework","url":"/git/desktop/homework#1-tell-us-about-you---using-github-1-hour","content":"Follow the instructions in this repository to submit a description about yourself. This is how you'll be submitting a lot of your homework in this course so please let us know if you have any challenges with doing it. https://github.com/CodeYourFuture/GitHomeworkTest "},{"title":"2) Upload your Website to Github (2 Hours)​","type":1,"pageTitle":"Coursework","url":"/git/desktop/homework#2-upload-your-website-to-github-2-hours","content":"To apply for this course you had to complete a website using what you've learnt so far. Let's save it to Github so we can look at it in a few months and see how much you've learnt! "},{"title":"1. Export from CodePen​","type":1,"pageTitle":"Coursework","url":"/git/desktop/homework#1-export-from-codepen","content":"Find your website that you made on CodePen and follow the instructions here https://blog.codepen.io/documentation/exporting-pens/ When you've completed this step you should have a zip file downloaded somewhere on your computer. "},{"title":"2. Unzip File​","type":1,"pageTitle":"Coursework","url":"/git/desktop/homework#2-unzip-file","content":"When you've downloaded the .zip file you should unzip it to see all your files. Make sure you put the folder in a place that you can remember. Not sure how to do this? You can find instructions here: https://www.wikihow.com/Unzip-a-File "},{"title":"3) Fork and Clone our Repository​","type":1,"pageTitle":"Coursework","url":"/git/desktop/homework#3-fork-and-clone-our-repository","content":"Make a fork of the repository to your Github Profile and clone it to your computer. https://github.com/CodeYourFuture/My-CodePen-Website You'll be using this forked version to host your website. "},{"title":"4) Add your files​","type":1,"pageTitle":"Coursework","url":"/git/desktop/homework#4-add-your-files","content":"Copy your the files that you've unzipped to the repository folder for your website. You can find this folder by clicking Show in Explorer in Github Desktop. "},{"title":"5) Upload to Github​","type":1,"pageTitle":"Coursework","url":"/git/desktop/homework#5-upload-to-github","content":"Next, you should use Github and Github Desktop to upload your website to your Github Profile. If you get stuck, make sure to check this weeks lesson to see what we covered. "},{"title":"6) Done!​","type":1,"pageTitle":"Coursework","url":"/git/desktop/homework#6-done","content":"When you've complete this correctly your repository should look something like this https://github.com/CodeYourFuture/My-CodePen-Website-Example-Solution Get Stuck? Any Questions? Ask on Slack. "},{"title":"3) Help me with my kid's homework! (1 hour)​","type":1,"pageTitle":"Coursework","url":"/git/desktop/homework#3-help-me-with-my-kids-homework-1-hour","content":"In this repository you will find instructions of how to help my child with his homework https://github.com/CodeYourFuture/GitHomeworkFixErrors Follow the instructions to complete this homework! "},{"title":"4) Mark other peoples coursework! (1 hour)​","type":1,"pageTitle":"Coursework","url":"/git/desktop/homework#4-mark-other-peoples-coursework-1-hour","content":"Now that you've helped him with his homework we want you to mark other peoples homework from your class. Giving feedback is an important way to help you grow! Again, go to this repository and go to the &quot;Pull Requests&quot; tab. https://github.com/CodeYourFuture/GitHomeworkFixErrors Here you will find all of your Classmates answers to the homework. Choose two pull requests with no, or few, comments.Leave comments on any of the questions you think they have got wrong. Not sure if their answer is right? Ask them to check it and confirm.Leave a comment saying you have finished your review. You should do this for at least two pull requests. Not sure on the answers? See here: https://github.com/CodeYourFuture/GitHomeworkFixErrors/pull/1 "},{"title":"5) Communication course (PD - 1 hr)​","type":1,"pageTitle":"Coursework","url":"/git/desktop/homework#5-communication-course-pd---1-hr","content":"Join our Applied Digital Skills class communication course. Go to g.co/AppliedDigitalSkillsClick &quot;Sign in&quot; in the top rightSign in with your Google account, or create a new oneClick &quot;I am a student&quot;Click &quot;Join a class&quot; and enter class code: qchyygStart the Communicate Effectively at Work courseDo lessons &quot;1 - Communicate Effectively at Work Introduction&quot; and &quot;2. Facilitate a Team Meeting&quot; Share the links of the exercises of both lessons Use this applied digital skills course to help you with your communication skills. "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/git/desktop/instructors","content":"","keywords":""},{"title":"IMPORTANT - Setup Needed For Trainees​","type":1,"pageTitle":"Instructor Notes","url":"/git/desktop/instructors#important---setup-needed-for-trainees","content":"If you are teaching this class in the coming weeks you must instruct your trainees to complete the instructions below. Git Preparation If you trainees do not arrive with these steps completed then you will lose a lot of time on your first lesson. You should consider running short mid-week sessions the week before to help trainees get set up. "},{"title":"IMPORTANT - Setup needed For Teacher​","type":1,"pageTitle":"Instructor Notes","url":"/git/desktop/instructors#important---setup-needed-for-teacher","content":"One of the teacher-led demos in this class relies on the user not having permission to push to CodeYourFuture's GitHub repositories. As a teacher, you probably have access to push these repositories, and so your demo will not show all of the steps it's meant to show. We recommend using a different GitHub account for this class - if you don't have a second account, and don't want to set one up, come chat in #cyf-module-git - we can set up a shared one you can use. "},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/git/desktop/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-git For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Resources​","type":1,"pageTitle":"Instructor Notes","url":"/git/desktop/instructors#resources","content":""},{"title":"Slides​","type":1,"pageTitle":"Instructor Notes","url":"/git/desktop/instructors#slides","content":"Example slides for this lesson. Source is here.  "},{"title":"Lesson Notes​","type":1,"pageTitle":"Instructor Notes","url":"/git/desktop/instructors#lesson-notes","content":""},{"title":"Aims​","type":1,"pageTitle":"Instructor Notes","url":"/git/desktop/instructors#aims","content":"Git and GitHub are vast topics, and learners have historically struggled a lot with them. We have very intentionally reduced the scope of what we're teaching here to just things which are immediately useful. This is both to reduce cognitive load, and to try to ensure the things we do teach actually stick (because struggling with how to submit your homework is really demoralising, whether you've excelled at the homework, or struggled with it). The aims are: To get the learners able to submit homework.To set the learners up so that in the coming weeks they can practice basic Git workflows via their ordinary homework.To see that Git maybe has some use to them for now (via &quot;checkpoint&quot; commits), and encourage frequent commits. We've purposefully left out anything which may require resolving merge conflicts (merging, pulling after an initial clone, reverting), as well as branches in general. These will be introduced later in the course, when they're actively useful for the learners. For now, they don't need them, so we won't overload them. We also intentionally opted to avoid the command line. This was much debated, but the consensus was that git is not the most friendly command line tool for your first experience, and Git is complicated and scary enough without loading in more learning alongside it. Again, git will come later, after the learners have used the command line for something else. "},{"title":"Background & Discussion​","type":1,"pageTitle":"Instructor Notes","url":"/git/desktop/instructors#background--discussion","content":"This lesson was discussed at length and has been archived here: https://github.com/CodeYourFuture/syllabus/issues/77 Further discussion can take place in: #cyf-module-git "},{"title":"Structure​","type":1,"pageTitle":"Instructor Notes","url":"/git/desktop/instructors#structure","content":"This class was designed to be taught through lots of worked examples (both teacher-led, and as individual and group exercises). A full four hours is allocated to it, but the actual taught content is relatively light. There should be plenty of time for questions, and it's recommended to take them as they come up. The class is very linear, so any confusion early on is likely to compound. However, the teacher-led demos lend themselves to being completed without much interruption - just seeing the whole flow end-to-end will answer many of the questions that come up, and stopping to take questions will make this less clear, so after starting a demo, perhaps try to finish it before taking questions. First, we try to give the learners experience of the problems Git solves before introducing Git as a solution, through real-world non-coding examples. We then introduce Git in a concrete use-case similar to the examples shown. Before the learners use Git, we point them at the cheatsheet. They will forget things and get stuck in the coming weeks, so we try to keep reminding them where to look if this happens. Show them each step of the teacher-led demo. There aren't many steps, but there are a lot of little ideas to teach at each stage. Then they do the same thing themselves. Commit messages, commit hygiene, when to commit, etc are all skills that are hard to teach, particularly when the learner has never written code before - the learners will hopefully work them out over time. Don't worry too much about them fully grasping the intricacies here, but try to seed some things to think about, which they will hopefully understand more over time. "},{"title":"Teacher Led Demos​","type":1,"pageTitle":"Instructor Notes","url":"/git/desktop/instructors#teacher-led-demos","content":""},{"title":"Lets do some homework​","type":1,"pageTitle":"Instructor Notes","url":"/git/desktop/instructors#lets-do-some-homework","content":"Important: This section end with an error message - this is expected and used as a learning experience! Continue to the next section when you get a permissions error. "},{"title":"Exercises Overview​","type":1,"pageTitle":"Instructor Notes","url":"/git/desktop/instructors#exercises-overview","content":""},{"title":"Exercise 1​","type":1,"pageTitle":"Instructor Notes","url":"/git/desktop/instructors#exercise-1","content":"Aim: To show the trainee a concrete example of the problem they are trying to solve with using Git. Let this exercise open a discussion about why this is hard and how this could become completely unmanageable in a larger system. Open questions: It's manageable for three versions, what about 100 versions?Have you ever seen this problem before?What would happen if 100 people need the final version? "},{"title":"Exercise 2​","type":1,"pageTitle":"Instructor Notes","url":"/git/desktop/instructors#exercise-2","content":"Aim: Hands on experience of cloning a repository. You should expect a host of small issues and problems with the trainees doing this. Work closely with them in small groups to resolve these issues. This exercise may draw out for a long time with all manner of login issues, UI issues, and general confusion. Let it take as long as it takes. Make sure every learner has succeeded before moving on. "},{"title":"Exercise 3 & 4​","type":1,"pageTitle":"Instructor Notes","url":"/git/desktop/instructors#exercise-3--4","content":"Aim: Hands on experience creating a Pull Request. Again, you should expect a host of small issues and problems with the trainees doing this. Work closely with them in small groups to resolve these issues. "},{"title":"Exercise 5​","type":1,"pageTitle":"Instructor Notes","url":"/git/desktop/instructors#exercise-5","content":"Aim: A follow on exercise that demonstrates how a file can can be added to a Pull Request. This small exercise demonstrates a key misunderstanding that trainees have around how they can add files to a Pull Request. You should prompt and call attention to how we should always write good commit messages. Don't write &quot;Changes&quot;. Do write &quot;Added an answer to the other-file.txt file&quot;. "},{"title":"Exercise 6​","type":1,"pageTitle":"Instructor Notes","url":"/git/desktop/instructors#exercise-6","content":"Aim: A follow on exercise that demonstrates how a file can can be added to a Pull Request. "},{"title":"Exercise 7​","type":1,"pageTitle":"Instructor Notes","url":"/git/desktop/instructors#exercise-7","content":"Aim: A rounding off exercises that shows the solution to the first problem that we discussed. Open questions: Do you think this is easier to tell what has changed in the files? "},{"title":"Overview","type":0,"sectionRef":"#","url":"/git/overview","content":"","keywords":""},{"title":"How is this module delivered?​","type":1,"pageTitle":"Overview","url":"/git/overview#how-is-this-module-delivered","content":"This module is different to others at CodeYourFuture because some it taught in class and some is assigned as coursework. These lessons will be assigned at the following times: Lesson 1 - Delivered on the first week of the Software Development courseLesson 2 - Assigned as Coursework after JavaScript Core 1 Week 3Lesson 3 - Assigned as Coursework after JavaScript Core 2 Week 1Lesson 4 - Assigned as Coursework after JavaScript Core 2 Week 3 If you want, you can complete the lessons before they are given as coursework - but there is no requirement to. "},{"title":"Lesson Overview​","type":1,"pageTitle":"Overview","url":"/git/overview#lesson-overview","content":"Lesson\tContent\tCoursework\tWhen is this delivered?Lesson 1\tGithub &amp; Github Desktop\tGit Coursework\tOn Week 1 of the Software Development Course Lesson 2\tThe Terminal\tTerminal Coursework\tAs Coursework (see Coordinator page) Lesson 3\tGit on the Command Line\tGit CLI Coursework\tAs Coursework (see Coordinator page) Lesson 4\tBranches\tGit Branches Coursework\tAs Coursework (see Coordinator page) "},{"title":"Preparation","type":0,"sectionRef":"#","url":"/git/preparation","content":"","keywords":""},{"title":"1) Sign Up To GitHub (30 Minutes)​","type":1,"pageTitle":"Preparation","url":"/git/preparation#1-sign-up-to-github-30-minutes","content":"If you did not do so during Fundmentals, sign up now. We'll use GitHub to share code with each other. Sign up on https://github.comLet us know your GitHub username as we'll need it for future assignments "},{"title":"2) Download and Install Github Desktop (30 minutes) 🔑​","type":1,"pageTitle":"Preparation","url":"/git/preparation#2-download-and-install-github-desktop-30-minutes-","content":"We'll be using this tool in next weeks class so it's very important that you set it up before class. You must come to class prepared. "},{"title":"Mac​","type":1,"pageTitle":"Preparation","url":"/git/preparation#mac","content":"To install, go to the website and click Download for Mac https://desktop.github.com/ "},{"title":"Linux​","type":1,"pageTitle":"Preparation","url":"/git/preparation#linux","content":"Installing on Linux is a little more tricky. Follow the instructions here to install Github Desktop https://github.com/shiftkey/desktop#debianubuntu-distributions If you do not understand the instructions written then please ask on Slack for help. We haven't covered how to install software like this yet and you are not expected to understand how to do it. Install Instructions​ Find and Open Terminal on your LaptopCopy and paste this line into the terminal then press enter wget -qO - https://packagecloud.io/shiftkey/desktop/gpgkey | sudo apt-key add - Copy and paste this line into the terminal then press enter sudo sh -c 'echo &quot;deb [arch=amd64] https://packagecloud.io/shiftkey/desktop/any/ any main&quot; &gt; /etc/apt/sources.list.d/packagecloud-shiftky-desktop.list' Copy and paste this line into the terminal then press enter sudo apt-get update Copy and paste this line into the terminal then press enter sudo apt install github-desktop Github Desktop should now be installed. If any step of this didn't work, please ask for help on Slack. "},{"title":"3) Open Github Desktop and Login (10 minutes)​","type":1,"pageTitle":"Preparation","url":"/git/preparation#3-open-github-desktop-and-login-10-minutes","content":"Sign in to Github Desktop with your Github account. Run Github DesktopClick &quot;Sign in to GitHub.com&quot;Go through the steps to sign in. "},{"title":"4) Git & Github for Poets (1 hour)​","type":1,"pageTitle":"Preparation","url":"/git/preparation#4-git--github-for-poets-1-hour","content":"This playlist will give you an introduction to Git &amp; Github which are two tools we'll be using next week. These videos cover concepts that you'll be learn slowly over this course as you need them. Be sure to use these videos in the future when you need them. For now, you only need to watch the first video: https://www.youtube.com/watch?v=BCQHnlnPusY When you're watching this videos you should: Take Notes - this will help you to stay engaged with the videos and learn moreWrite Down Questions - if you still have these questions after our next lesson you can ask them on Slack After watching the video, try to follow along with it and setup your own &quot;Repository for Poems&quot;. Doing this will help you solidify what you've learnt. If you manage to do this, submit a link to your work. However, if you have problems that's fine - this is only work to help you get started and we'll go over everything in more detail in class. "},{"title":"5) Intro to Github Desktop (10 minutes)​","type":1,"pageTitle":"Preparation","url":"/git/preparation#5-intro-to-github-desktop-10-minutes","content":"When you're watching this video you should: Take Notes - this will help you to stay engaged with the videos and learn moreWrite Down Questions - if you still have these questions after our next lesson you can ask them on Slack https://www.youtube.com/watch?v=iv8rSLsi1xo "},{"title":"6) Share a question you have on Slack (5 Minutes)​","type":1,"pageTitle":"Preparation","url":"/git/preparation#6-share-a-question-you-have-on-slack-5-minutes","content":"It's really helpful for us to see the question you have right now. First, search to see if anyone else has asked a question about Slack already. If they have, open a thread and post a question below theirs. If you cannot find a post already, post a question with the title &quot;Github Questions&quot;. Then other people will ask questions below yours. "},{"title":"7) Install VS Code (30-40 Minutes)​","type":1,"pageTitle":"Preparation","url":"/git/preparation#7-install-vs-code-30-40-minutes","content":"We use this software to write our code. You'll be using it a lot over the next few months. If you have not done so already during Fundamentals, install this now. https://fundamentals.codeyourfuture.io/about-this-course/before-the-course-begins#prep-2-developer-toolshttps://docs.codeyourfuture.io/course-processes/before-the-course/getting-setup#visual-studio-code If this is your first time using Visual Studio code, watch this video here https://www.youtube.com/watch?v=S320N3sxinE "},{"title":"8) Create a CYF folder on your hard drive (5 mins)​","type":1,"pageTitle":"Preparation","url":"/git/preparation#8-create-a-cyf-folder-on-your-hard-drive-5-mins","content":"If you have not done so already, create a CYF folder on your hard drive in your home directory or top level directory. Clone all your repos and always do all your work in this folder. Create subfolders inside the CYF directory for your modules. Don't have files all over your computer in a giant mess. Be professional from day one, and you will run into fewer problems as the course continues. "},{"title":"Lesson","type":0,"sectionRef":"#","url":"/git/desktop/lesson","content":"","keywords":""},{"title":"Learning Objectives​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#learning-objectives","content":"By the end of this class, you should be able to: Explain why Git is a useful tool.Get a copy of your homework questions onto your computer. (To clone a repository). Save your answers, and send them to our volunteers. (To commit, fork a repository, and push changes). See and respond to feedback on your homework. (To use GitHub's pull request workflows, and push further changes). Explore how a file has changed over time. (To use Git's history log).  "},{"title":"Before you start​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#before-you-start","content":"Before you arrive at class you must have completed the following setup work. Git Preparation If you are a mentor reading this, please check the Instructor Notes "},{"title":"What problem does Git solve?​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#what-problem-does-git-solve","content":"Git is a version control tool, used to keep the history of changes, and make collaboration easier. It's used to solve many problems, but today we're going to focus on how it: Helps us to share information.Enables people to make their own changes to that information, and share it back.Allows us to make checkpoints so that we can save our work as we go along.Allows us to track how information has changed between each checkpoint, and go back to older versions of our work if we want to see what we tried before, or to undo changes.Enables us to try more things, because if they didn't work out, we can always go back to what we had working before, by going back to a checkpoint. "},{"title":"Versioning​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#versioning","content":"We use Git to track different versions of files. Perhaps you've had this experience before...  You've probably in the past saved a document in a file with &quot;draft&quot; in its name, and then another with &quot;version 1&quot; in its name, and eventually one called &quot;final&quot;, and then &quot;really final&quot;, and then &quot;final after feedback&quot;. It can be hard to know what the latest one is, and to track what order the files came in. But we keep these files around, because they were useful, and we may want to check something from them. Git helps us to avoid this problem. Before we see how Git helps, let's try an exercise: "},{"title":"Exercise 1 (10 minutes)​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#exercise-1-10-minutes","content":"Open these three links - they are different stages of a draft blog post about CodeYourFuture: finalrevisedv1 Try to find all of the differences between these three documents. Can you work out which one is the finished one which was meant to go on the website? You probably found it hard to see all of the differences (some were really small, like adding or removing a comma!), and non-obvious which is the most complete version! "},{"title":"How does Git help?​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#how-does-git-help","content":"Imagine your mentor wanted everyone in the class to answer three questions and to send back the answers. What capabilities would we need in order to be able to do that? First, the mentor needs to be able to write the questions, and store them somewhere. When we're using Git, we write things down in files in a folder (these could be text files, Word documents, images, or really any kind of file). When we save these files, we say we're committing them, and we call the folder where we're saving them a repository (or repo for short).  Next, the mentor needs to put the repository somewhere where the learners can get it. We call this pushing the repository. The mentor won't send a copy to each learner, but will put one copy somewhere on the Internet, and tell the learners where it is. The place the mentors on this course will be pushing to is a website called GitHub, but there are other websites they could push to if they wanted to. This is the difference between Git and GitHub - Git is a way of storing and sharing files, and GitHub is one website where you can use Git.  Then, now that the mentor has pushed the questions, each learner needs to be able to get the questions onto their computer. When we're using Git, we call this cloning the mentor's repository (because we're making our own copy). After we've cloned the repository, we will have the same folder on our computer as the mentor created, committed, and pushed.  "},{"title":"The Git Cheatsheet​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#the-git-cheatsheet","content":"We tend to do the same four or five things in Git over and over again, but it can be easy to forget them. There's a handy reference at Git Cheatsheet to help you remember. Let's walk through one of the sections together: &quot;I want to get code from a repo onto my computer (Cloning)&quot;. It has a video, to show us what we should be doing, and explains each step in the text. We'll use it in our next exercise: "},{"title":"Exercise 2 (15 minutes)​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#exercise-2-15-minutes","content":"Volunteers from Code Your Future have already pushed an example repository, so you're going to try to clone it from GitHub onto your computer. Try following the instructions labelled &quot;I want to get code from a repo onto my computer (Cloning)&quot; from the Git Cheatsheet. The repository we want to clone is https://github.com/CodeYourFuture/cyf-demo-repo. When you've finished the exercise, you should have file.txt open in VS Code. "},{"title":"What did we just do?​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#what-did-we-just-do","content":" Each of you just cloned a repository which CodeYourFuture created onto your computer, and opened up your copy of one of the files. This is the process you're going to follow to get your homework every week. "},{"title":"Let's do some homework (mentor-led demo)​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#lets-do-some-homework-mentor-led-demo","content":"The file you opened, file.txt, has a question in it. We're going to answer the question, and submit it as if it was our homework. Let's clone our repository to our computer: https://github.com/CodeYourFuture/cyf-demo-repo  We can edit the file in VS Code to answer the question, and save it like normal. After we've saved the file, if we open up GitHub Desktop, something interesting has changed. On the left, it now says &quot;1 changed file&quot;, and on the right, it shows us what the change was. Things we've removed get a red background, and things we've added get a green background. (If you've changed a line, the old version will appear with a red background, and the new version with a green background).  This is a really useful way for us to check over our homework before submitting it. If we've accidentally deleted things, or changed things we didn't mean to, we can notice now, and un-do them by editing the file again. When we're happy with our change, we can press the &quot;Commit to main&quot; button. That tells Git &quot;This change is an interesting change, I want to keep it&quot;. You don't need to wait until you've got your answers perfect before committing, in fact it's better to make lots of commits as you work - we'll come back to this in a bit! This doesn't copy our change to any other computer - it won't go on GitHub - commiting is something we just do on our computer. "},{"title":"Exercise 3 (10 minutes)​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#exercise-3-10-minutes","content":"Spot the diff Try doing what your mentor just did: Answer the question in file.txt in VS Code and save your changes.Look at the diff in GitHub desktop - does it look as you expect?Make a commit in your local repository. "},{"title":"Teacher-led demo continues...​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#teacher-led-demo-continues","content":"Now, because we committed a change, our copy of the repository is different from CodeYourFuture's copy. GitHub Desktop now gives us a new button: &quot;Push origin&quot; (&quot;origin&quot; is what Git calls &quot;where I cloned this repository from&quot;). If we press it, it will try to send our change to the CodeYourFuture version. We didn't have this button before, because even though we had changed the files, we hadn't committed any changes. There's an important distinction here: When we save files in VS Code, we store them in the file on our computer, but Git doesn't automatically commit them. It notices the changes (it showed them to us!), and asks us if we want to commit them. Only after we've committed them does it let us push them. We'll talk about when you want to commit later on today. So, we're happy with our homework, we've committed it, let's try pushing it! "},{"title":"Forking​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#forking","content":"GitHub Desktop just gave us a really useful warning, but it uses some words we haven't seen yet! We just tried to push our changes to CodeYourFuture's copy of this repository. But we're not allowed to do that! Imagine if anyone could just push anything they wanted to our repository! Someone could accidentally delete all of the questions, or add the answers to all of the questions, or turn the HTML homework into a bunch of questions about vegetables! To avoid this, we use something called a fork and something called a pull request. Remember when we cloned the repo, we pasted https://github.com/CodeYourFuture/cyf-demo-repo in as the place to clone from? Let's look at that:  This is saying &quot;On GitHub, the user CodeYourFuture has a repository called cyf-demo-repo, I want that&quot;. GitHub lets you host your own copy of the repository on GitHub too! If your username is EagerLearner, can you guess what URL your repository would be at? That's right, https://github.com/EagerLearner/cyf-demo-repo!  This is called a fork. It's a copy of the repository, where you're allowed to make changes. So when GitHub Desktop just asked us &quot;Do you want to fork this repository?&quot;, what it's really saying is &quot;You're not allowed to make changes to CodeYourFuture's repository, would you like to make your own copy on GitHub where you are allowed to make changes, and put your changes there?&quot; That sounds like exactly what we want to do, so we'll click the &quot;Fork This Repository&quot; button. Then GitHub asks us whether we want to fork &quot;To contribute to the parent project&quot; (i.e. because we want to work with CodeYourFuture) or &quot;For my own purposes&quot; (i.e. because we want to do our own thing apart from CodeYourFuture). We want to work with CodeYourFuture, so we'll select &quot;To contribute to the parent project&quot; and press Continue. Now if we press &quot;Push origin&quot;, it will copy our changes to our fork on GitHub.  If you forget this, it's in the cheatsheet! Check out the &quot;I want to send my code to volunteers (Pushing)&quot; section. "},{"title":"Making a Pull Request​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#making-a-pull-request","content":"Now that we've pushed our homework to our fork, we need to tell CodeYourFuture about it, so that the volunteers know to look at it! We do this with something called a pull request. This is a slightly weird name, in the context of homework. Normally, when people push changes to a fork on GitHub, they're doing so because they want the person who owns the repository to look at the changes, and pull the changes into their repository. For example, this webpage we're reading the syllabus on right now is hosted on GitHub, and if someone spots a typo, they can fix it, push it to their fork, and request for CodeYourFuture to pull their change into CodeYourFuture's version (hence the name a pull request - &quot;requesting to pull in changes&quot;). We call pulling someone's change into a repository &quot;merging&quot; the change, because we're merging what we're pulling into our repo with what we had before. For submitting homework, every week you're going to create a pull request, and a volunteer will look at it and give you feedback, but we won't be pulling your homework into CodeYourFuture's copy (then the next trainee would have the answers when they tried to read the questions!). You'll be creating pull requests, but we won't actually merge your changes into the repository. In GitHub Desktop, if you open the Branch menu, and click &quot;Create Pull Request&quot;, it will open your web browser at GitHub, and show you the changes you're about to make a pull request for. This is another great time to check that you're happy with your homework (if you're not, go back to VS Code, make your changes, commit them, push them to origin again, and refresh this page). If you're happy, press the &quot;Create pull request&quot; button. Fill in the details in the form, so that the volunteers know what they're meant to be reviewing, and press &quot;Create pull request&quot;. Now there's a pull request that volunteers can look at! They can see who made the pull request, and see all the changes you've made. "},{"title":"Exercise 4 (15 minutes)​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#exercise-4-15-minutes","content":"Push and pull Make yourself a pull request with your change! Try to push your changes, make a fork, and then actually push your changes.Make your first pull request! If you get stuck, check out the cheatsheet :) "},{"title":"Exercise 5 (5 minutes)​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#exercise-5-5-minutes","content":"Permission There's another file in the repository you've cloned, other-file.txt. Open itAnswer the question in the fileCommitand Push Notice a couple of things are different this time! It didn't ask you to fork the repository - that's because you already have a fork you're allowed to push to. You may also notice that if you click the &quot;Create Pull Request&quot; menu item, it brings you to a different page. It doesn't have a &quot;Create Pull Request&quot; button, it has a &quot;View Pull Request&quot; button. This is because if you already have a pull request open, when you push more changes, it will update your existing pull request. This is useful for responding to feedback you get on your homework. There are ways to open more than one pull request at a time (using something called branches), which we'll learn about in the future, but for now, one should do! "},{"title":"Getting feedback​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#getting-feedback","content":"When you've made your pull request, our volunteers will be notified. They will look at your changes. When they are done, you will get an email. Here are some of the things they may do: Make comments with suggestions, either about a particular bit of code, or about the whole pull request.Add labels to the pull request (e.g. marking it as complete, or unfinished). If they give you suggestions, you should try to implement the suggestions, and push a new commit. If you're confused, struggling, or find them unclear, you can respond to the comment with a comment of your own, or ask on Slack. "},{"title":"History​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#history","content":"One useful features of Git is how it stores your commits. Each time you commit, Git adds your new commit to a chain of commits, one after the other. You can imagine that each commit points at the commit before, and then adds its own changes on top. Maybe this is what we cloned from GitHub:  Then when we commit locally, we add new commits to the end of the chain:  Until we push, GitHub and our computer will have different chains of history - the local history will be the same as the remote history, but with extra commits at the end:  And then after we push, the extra commits are added to GitHub's history, and the chains will look the same:  "},{"title":"Exploring history​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#exploring-history","content":"In GitHub Desktop, if you open the History tab, you can see a list of each commit that's been made in the repository, with the oldest at the bottom and the newest at the top. If you click on one of the commits, you'll see the changes that happened in it. This can be really useful to understand how the repository evolved to how it looks today. It can also help us to find out when bugs were introduced! You can always see an old version of a file by looking in the Git history, and if you want to get it back, you can just copy and paste it from the history view into your text editor. "},{"title":"When to commit, push, and make a pull request​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#when-to-commit-push-and-make-a-pull-request","content":"You should commit often. Every time you think you've done something you may want to look at again, you should make a commit. Let's say you've made a website, and it generally looks about right, but you were thinking of adding some colour, or an animation. Before you do that, make a commit, because then if you break some of the CSS by trying to add an animation, you can always undo it. Or if you want to try out a few different colours, make a commit for each colour, and then you can easily see what colours you tried out, and compare them. Teacher-led demo: Changing the colours​ A volunteer made a small website, which we can find in https://github.com/CodeYourFuture/SampleGitWebsite They had a few different colour combinations they were trying to choose between. Because they made commits for each choice, we can look at their choices, and try them each out. If they hadn't made all of those commits, they probably would've forgotten at least one of the colours, and we wouldn't be able to see them now. Maybe they would've lost the perfect colour! Thankfully, we can look in the git history and see each step along the way. Similarly, you don't need to have finished everything before you push - in fact, it can be better to push lots! If your computer crashes, or you accidentally delete your files, or you want to work on homework on someone else's computer, you can always get back anything that you've pushed to GitHub. So commit often, and push often! You also don't need to have finished all of your homework in order to make a pull request! If you've been struggling with one question, you can make a pull request and ask for help (you can even link to it on Slack! It will help the volunteers to help you, because they will be able to see exactly the code you're struggling with). Or if you've done most of the homework, but are struggling with a few questions, a volunteer can look at what you've done and help you out - but only if they can see your code! tip Commit often, push often, and make pull requests early. You may notice that your commits all have messages like &quot;Update file.txt&quot;, whereas the ones before you started editing have different messages. Commit messages can be really useful to understand what a change did without having to read the whole thing. Let's try out an exercise to help us understand this: "},{"title":"Exercise 6 (10 minutes)​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#exercise-6-10-minutes","content":"Troubleshooting Clone https://github.com/CodeYourFuture/git-log-example (if you forgot how, check the cheatsheetHave a read of the file called README.md. See if you can find a problem in the file.Look through the history in GitHub Desktop. See if you can work out when and why the problem was introduced.Make a pull request fixing the problem. "},{"title":"Exercise 7 (5 minutes)​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#exercise-7-5-minutes","content":"Spot the difference Remember earlier we looked at three blog posts? They're actually in a repository on GitHub! https://github.com/CodeYourFuture/git-draft-blog-post-example Clone the repository and take a look. Can you find all of the differences between them now? Can you tell which was the finished version? How much easier/harder is this than it was without Git? "},{"title":"Commit messages​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#commit-messages","content":"If you looked through the history of the Git repository, you may have been able to see where the problem came in just from the commit message, without having to look at the changes that were actually made. If the commit messages were all just &quot;Update file.txt&quot;, that would've been much harder! When we make commits in Git, we try to give clear, helpful messages, describing what changed, and why. (The why is really important! You can always work out what changed by reading the change itself, but it's much harder to work out why if no one wrote it down!) There is a convention when using Git to use the following format for commit messages: One sentence summary Longer explanation of how, the reasons, exceptions, or anything that may be surprising. This may be many sentences, and keep going for a long time.  Try to use this format when making your own commits. GitHub Desktop tries to encourage this by having two boxes above the &quot;Commit to main&quot; button - one which is just one line, and one where you can put lots of lines.  Explaining why we're making the change can help people in the future to understand why things look the way they do, and what's important not to change. "},{"title":"Using technical language as a developer​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#using-technical-language-as-a-developer","content":"In this section we'll explore how a professional uses technical language to communicate and deliver a tutorial based on what you have learned so far to three different audiences. Exercise (20 minutes) It's time to train the trainer and practice your communication skills, your task is to pick an audience and deliver a short tutorial on: Why Git is a useful tool?How to commit, fork a repository, and push changes? In small groups you must pick an audience from this list: A group of 10 year oldsYour bossa peer group at a similar level to you Exercise (40 minutes) You have a maximum of three minutes to present back to the wider group. "},{"title":"Coursework going forwards​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#coursework-going-forwards","content":"For the next four modules, most weeks your homework is going to be to fork a CYF repo to your own Github, clone that fork from GitHub to your local machine, write some code, and make a pull request with the changes. Recap Fork from CYF to your own Github accountClone from your Github to your local machineMake and commit your changes, pushing each small commitOpen a pull request back to CYF with all your commits "},{"title":"Glossary​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#glossary","content":"We introduced a few new things in this class, and it can be a bit confusing to know which is which: Git is a system for storing changes to files in commits, and sharing them between different computers. There are also other systems which do this, but Git is the most popular one.GitHub is a website which will store a copy of your Git repository, and allow you to clone it, and push changes to it. There are also other websites which can do this, but GitHub is the most popular one.GitHub Desktop is a program made by GitHub to allow you to use Git easily from your computer. Later in the course, we will use other programs to use Git, too. "},{"title":"PD (Welcome and Induction)​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#pd-welcome-and-induction","content":"The Induction module introduces the expectations from Code Your Future trainees, the technical and soft skills to be developed and the support available during the course. Celebration!!! Make an effort to mark the achievements up to this point. You completed ITD and Fundamentals. Some of you never wrote a line of code before that! Session 1: Goals and Expectations Session objective: The presentation below aims: to identify your goal(s) for being on the CYF software development courseto highlight the expectations CodeYourFuture has for its traineesto explain the progress from Intro to Digital to Fundamentals course, and then to the Software Development course. Goals and Expectations Session 2: What do developers do? Session objective: In this section we'll explore how a professional developer behaves and thus how you should behave. Exercise (20 min) Exercise objective: To brainstorm and think about future responsibilities. In small groups, imagine all the day-to-day activities and behaviours of a professional software developer. Use a whiteboard, sticky notes, or an online board (Miro, Google Jamboard, etc.). Think about whether you do all those things already. Discuss how to change things so you begin to do more and more of those things. Highlight that practice is the way to develop. Session 3: SDOT analysis Session objective: In this session, each participant will do a SDOT (Strengths, Developments, Opportunities, and Threats) analysis. Exercise (20 min) Exercise objective: To conduct a personal SDOT analysis Think about the key areas that you want to improve on by some introspective work and writing your own personal SDOT analysis: Strengths: What are you great at? What makes you personally stand out from other people? What positive comments do people say about your strengths? What are your greatest achievements?Developments: What skills do I need to work on? Where do you need to improve? What holds you back? What key habits do you want to overcome? What do others say about your development areas?Opportunities: If I invest my time in my technical skills, I will land a good job. Who can help me achieve my goals? What can I do differently to other people that makes me more employable? How can I go the extra mile? How can I make opportunities happen for myself?Threats: What could stop me from achieving my career goals? What do I need to stop doing now? What's out of my control that I can’t change? "},{"title":"Coursework​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#coursework","content":"You can find this weeks homework here "},{"title":"Feedback​","type":1,"pageTitle":"Lesson","url":"/git/desktop/lesson#feedback","content":"It's really helpful if you give us feedback for this lesson. This helps us improve it for future trainees! Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/git/terminal/homework","content":"","keywords":""},{"title":"1) Read the Lesson Page Content (60 minutes)​","type":1,"pageTitle":"Coursework","url":"/git/terminal/homework#1-read-the-lesson-page-content-60-minutes","content":"Before starting this coursework, read through the lesson and complete the exercises. https://syllabus.codeyourfuture.io/git/terminal/lesson "},{"title":"2) Watch this video (15 minutes)​","type":1,"pageTitle":"Coursework","url":"/git/terminal/homework#2-watch-this-video-15-minutes","content":"This video gives a good, accessible introduction to the command line https://www.youtube.com/watch?v=oK8EvVeVltE "},{"title":"3) OpenClassroom - Learn the Command Line in Terminal (4 Hours)​","type":1,"pageTitle":"Coursework","url":"/git/terminal/homework#3-openclassroom---learn-the-command-line-in-terminal-4-hours","content":"This OpenClassroom course will take you through the basics of the learning the Terminal. Note: You do not need to use any additional software to complete this course. You should use either: Mac, use TerminalLinux, use TerminalWindows, use WSL or Git Bash https://openclassrooms.com/en/courses/4614926-learn-the-command-line-in-terminal?status=published "},{"title":"4) Check Your Understanding - Coursework (30 minutes)​","type":1,"pageTitle":"Coursework","url":"/git/terminal/homework#4-check-your-understanding---coursework-30-minutes","content":"Here is a coursework repository with a selection of challenges and a quiz to complete https://github.com/CodeYourFuture/Terminal-Coursework-Week1 The really important point here is to make sure you understand everything we've done so far. "},{"title":"5) Mark other peoples coursework (15 minutes)​","type":1,"pageTitle":"Coursework","url":"/git/terminal/homework#5-mark-other-peoples-coursework-15-minutes","content":"Giving feedback is an important way to help you grow! Again, go to this repository and go to the &quot;Pull Requests&quot; tab. https://github.com/CodeYourFuture/Terminal-Coursework-Week1 Here you will find all of your Classmates answers to the coursework. Choose two pull requests with no, or few, comments.Leave comments on any of the questions you think they have got wrong. Not sure if their answer is right? Ask them to check it and confirm.Leave a comment saying you have finished your review. You should do this for at least two pull requests. Not sure on the answers? See here: https://github.com/CodeYourFuture/Terminal-Coursework-Week1-Solution "},{"title":"6) Play the CLI Treasure Hunt​","type":1,"pageTitle":"Coursework","url":"/git/terminal/homework#6-play-the-cli-treasure-hunt","content":"https://github.com/CodeYourFuture/CLI-Treasure-Hunt Clone this repo and follow the instructions. If your system doesn't have touch, use echo. Don't give away the answer. Show it in class next week. "},{"title":"7) (Stretch) Play An Interactive Game​","type":1,"pageTitle":"Coursework","url":"/git/terminal/homework#7-stretch-play-an-interactive-game","content":"This is just a bit of fun! Using your new Command Line skills, take a look at this adventure game that uses the command line https://web.mit.edu/mprat/Public/web/Terminus/Web/main.html What will you discover? "},{"title":"Lesson","type":0,"sectionRef":"#","url":"/git/terminal/lesson","content":"","keywords":""},{"title":"Learning Objectives​","type":1,"pageTitle":"Lesson","url":"/git/terminal/lesson#learning-objectives","content":"By the end of this class, you should be able to: Define the differences between a Terminal and a GUI and describe the benefits of bothOpen a terminal windowUsing the terminal navigate to a specified folder (using cd)Move up a level in a folder directory (using cd ..)Cancel a running task in the terminal (using ctrl+c)View all the files of the current directory they are in (using ls)Use arguments to augment the commands learnt in the lesson (e.g. ls -all)Clear the terminal window (using clear)Use autocomplete when in the terminal to complete commands (using the Tab key)Find which directory you're currently in (using pwd)  "},{"title":"Before you start​","type":1,"pageTitle":"Lesson","url":"/git/terminal/lesson#before-you-start","content":"If you're on Windows, make sure that you've followed the instructions here to get setup with WSL. Alternatively, these exercises can be completed using Git Bash "},{"title":"1) Opening the Terminal​","type":1,"pageTitle":"Lesson","url":"/git/terminal/lesson#1-opening-the-terminal","content":"There are a few different ways that you can open the terminal. "},{"title":"(Recommended) In Visual Studio Code​","type":1,"pageTitle":"Lesson","url":"/git/terminal/lesson#recommended-in-visual-studio-code","content":"Open VSCode and Click on View &gt; Terminal.  This will then open a new Terminal windows  This is a fully featured Terminal where you can complete this week's coursework. "},{"title":"Through Your Operating System​","type":1,"pageTitle":"Lesson","url":"/git/terminal/lesson#through-your-operating-system","content":"On Windows​ Open the Start Menu and search for WSL. Click on the WSL button to open the WSL window. This will open Windows Subsystem for Linux, it may take a moment to finish loading. On Mac​ Perhaps the easiest and quickest way to open Terminal is through Spotlight Search. To launch Spotlight, click the small magnifying glass icon in your menu bar (or press Command+Space). When the Spotlight Search bar pops up on your screen, type terminal.app and hit Return. Or you can click the Terminal.app icon that appears. Terminal will launch, and you’ll be ready to go. Ubuntu​ You’ll find the Terminal application included with your other installed applications. To find them, click the Show Applications button at the bottom-left corner of your screen, on the dash bar. Type Terminal and press Enter to find and launch the Terminal shortcut. You can also locate the Terminal icon in the list of all applications that appears here and click it. "},{"title":"Exercise (5 minutes)​","type":1,"pageTitle":"Lesson","url":"/git/terminal/lesson#exercise-5-minutes","content":"Exercise Using the above instructions, open the terminal now. Having issues? Can't open the terminal? Ask for help on your Slack channel now!. "},{"title":"2) What is a GUI?​","type":1,"pageTitle":"Lesson","url":"/git/terminal/lesson#2-what-is-a-gui","content":"GUI stands for Graphical User Interface. A GUI is a useful way to make computers easier to use for general users of software. An example of a GUI is the Windows Desktop.  In a GUI, there a visual elements (buttons, text, windows etc) that a user can interact with to complete tasks. "},{"title":"Self-Study Exercise (15 minutes)​","type":1,"pageTitle":"Lesson","url":"/git/terminal/lesson#self-study-exercise-15-minutes","content":"Exercise Research the following questions What is a GUI useful for?What are three examples of a GUI?When were GUIs invented?What came before GUIs? Anything you don't understand? Ask your questions in your Slack channel. "},{"title":"3) What is a CLI (or Terminal)?​","type":1,"pageTitle":"Lesson","url":"/git/terminal/lesson#3-what-is-a-cli-or-terminal","content":"CLI stands for Command Line Interface. An example of a CLI is Git Bash.  The terminal exists to take commands that you write and turn them into something that the computer can do. Many of the tasks that you complete using a GUI can also be done using the command line. For example, Creating a fileCreating a folderLooking at the contents of a fileConnecting to the internetOpening programs You can write commands to your computer by writing text after the $ sign in your terminal window and pressing enter. (Some terminals use the % or # symbol instead of $ - they work exactly the same).  However, you can't just type anything! Your computer only understands commands in a specific format  If you type something that the computer doesn't understand, you'll see the above error. "},{"title":"Self-Study Exercise (5 minutes)​","type":1,"pageTitle":"Lesson","url":"/git/terminal/lesson#self-study-exercise-5-minutes","content":"ExerciseAnswer Exercise Make the command line do something! It's quite hard to break something in the terminal by mistake. Let's try with this list of words. Some of them will work, others won't. I'd like you to find out which are valid commands. hello, computertake_over_worldgitemailbashrunkeyboard "},{"title":"4) Why does the CLI exist?​","type":1,"pageTitle":"Lesson","url":"/git/terminal/lesson#4-why-does-the-cli-exist","content":""},{"title":"Tasks done in a CLI are easily repeatable​","type":1,"pageTitle":"Lesson","url":"/git/terminal/lesson#tasks-done-in-a-cli-are-easily-repeatable","content":"Imagine needing to configure 5 computers for some purpose. For this small number, it's probably not worthwhile to create an automated solution to configure them all. You'll just tweak the settings of each. On a CLI, it's simple to copy and paste the commands. On a GUI, you might get familiar with where the configurations are stored, but may still be left with a fair deal of clicking. Mistakes are more likely. This also is relevant to documentation and technical help. Providing four lines to copy and paste into a terminal console might replace a couple paragraphs of explanation of how to click into various admin tools (especially since the GUI directions might only be perfect for one of several interfaces, see “GUI interfaces are countless” below). "},{"title":"Tracking/auditing is easier​","type":1,"pageTitle":"Lesson","url":"/git/terminal/lesson#trackingauditing-is-easier","content":"A command-line interface (CLI) retains a record of what you've done, which you can easily extract and keep. When something goes wrong your boss asks, &quot;Are you sure you did it exactly right?&quot; you can have evidence to prove you did. Even if you did make a mistake, you can more easily see it and learn from it. "},{"title":"Scripting/automating is nearly as easy as entering commands​","type":1,"pageTitle":"Lesson","url":"/git/terminal/lesson#scriptingautomating-is-nearly-as-easy-as-entering-commands","content":"Everyone knows how to use a mouse to open a file in a GUI. Far fewer people know how to make that happen automatically. With a CLI, automating the task can be almost as easy as typing it in by hand. "},{"title":"Technological Constraints can still make CLI's compelling​","type":1,"pageTitle":"Lesson","url":"/git/terminal/lesson#technological-constraints-can-still-make-clis-compelling","content":"Logging into a GUI box remotely requires a fairly fast internet connection without which can make the experience frustrating. A CLI remote login has a much lower bandwidth requirement, since it is just transmitting a little text back and forth. And latency is much easier to deal with when you are typing, than when you are trying to hover a mouse over an icon. "},{"title":"There are just a few standard Terminals; GUI interfaces are countless​","type":1,"pageTitle":"Lesson","url":"/git/terminal/lesson#there-are-just-a-few-standard-terminals-gui-interfaces-are-countless","content":"If you log into the GUI admin interface of a few different web hosting services, you’ll probably see that they are all different. It’s not hard to poke around and figure out where everything is, but it takes time. Next year, the host may have upgraded their solution, and now everything is in a slightly different place — one more thing to learn. That hosting service probably still uses the same CLI. The new version is backward compatible with the old. Users familiar with Bash, PowerShell, or whatever CLI is on the system can eliminate the ramp-up time spent familiarizing (or re-familiarizing) themselves with that particular GUI. "},{"title":"Self-Study Exercise (15 minutes)​","type":1,"pageTitle":"Lesson","url":"/git/terminal/lesson#self-study-exercise-15-minutes-1","content":"Exercise Research the following questions When was the Command Line Interface invented?What problems was it trying to solve? Anything you don't understand? Ask your questions in your Slack channel. "},{"title":"5) Getting Started with the Terminal​","type":1,"pageTitle":"Lesson","url":"/git/terminal/lesson#5-getting-started-with-the-terminal","content":"The best way to get started with the Terminal is to start using it - move to the coursework page to begin working. "},{"title":"Coursework​","type":1,"pageTitle":"Lesson","url":"/git/terminal/lesson#coursework","content":"You can find this weeks coursework here. "},{"title":"Feedback​","type":1,"pageTitle":"Lesson","url":"/git/terminal/lesson#feedback","content":"It's really helpful if you give us feedback for this lesson. This helps us improve it for future trainees! Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Asking Questions","type":0,"sectionRef":"#","url":"/guides/asking-questions","content":"","keywords":""},{"title":"Use this template:​","type":1,"pageTitle":"Asking Questions","url":"/guides/asking-questions#use-this-template","content":"Request for help Coursework: Problem: Expected: Code: For example​ Request for help Coursework: HTML-CSS Module Project (Karma Clone) Problem: The headings on my website don't look right. Expected: The heading should be much bigger than the other text on the page. I've tried to use a H1 tag but it doesn't seem to do anything. Code: https://github.com/CodeYourFuture/HTML-CSS-Module-Project/pull/1234 "},{"title":"Question Check List​","type":1,"pageTitle":"Asking Questions","url":"/guides/asking-questions#question-check-list","content":"Before asking a questions make sure that you've completed all of these steps Have you done some research before asking the question?Have you explained what you’ve already tried to solve your problem?Have you specified which language and platform you’re using, including version number where relevant?If your question includes code, have you written it as a short but complete program?If your question includes code, have you checked that it’s correctly formatted?If your question doesn’t include code, are you sure it shouldn’t?If you get an error message, have you included the exact error message?If your program throws an exception, have you included the exception, with both the message and the stack trace?If your program produces different results to what you expected, have you stated what you expected, why you expected it, and the actual results?Have you checked that your question is formatted so it is readable and clear?Have you checked the spelling and grammar to the best of your ability?Have you read the whole question to yourself carefully, to make sure it makes sense and contains enough information for someone coming to it without any of the context that you already know? After you've asked your question you should check Are you monitoring your questions and replying to people giving their time to help you?Have you been asked for a Minimum Reproducible Example?Have you posted an easy to understand answer to your questions that includes everything you learnt By completing all of these steps you make it really easy for other students to learn from your question and for you to get help quickly. Together, you and your colleagues will build up a shared knowledge base you can search and share. You also make yourself a better developer. Describing problems clearly and systematically is an important skill for a developer. "},{"title":"Coding 101","type":0,"sectionRef":"#","url":"/guides/coding-101","content":"","keywords":""},{"title":"What is a computer program​","type":1,"pageTitle":"Coding 101","url":"/guides/coding-101#what-is-a-computer-program","content":"Intro to programming logic – Making a sandwich (Source:http://static.zerorobotics.mit.edu/docs/team-activities/ProgrammingPeanutButterAndJelly.pdf) Ask the trainees what they think a program is at its most basic level Guide, if necessary, towards the idea that its instructions or an action etc. Focus on the idea of instructions: Explain that like with a physical activity - tools and steps are required to carry out instructionsIntroduce the group activity of programming the activity of making a sandwich Ask the trainees what items we will need to make a sandwich: As they shout them out list them on the screen for the whole class to seeIntroduce the concept of objects and classes. Tie into the idea of how in a program these would be the 'tools' required for an activity and how for our sandwich making task the items we have listed previously are our classes Now that we have all of the tools we need to make a sandwich ask the trainees to shout out what they think the first step or instruction is: Write the instruction out on the screen and ask the trainees which object would be needed to carry out that instructionCopy the instruction and place it under the object that the trainees have decided is responsible for it and introduce the idea of methodsContinue asking the trainees for instructions and listing them under the objects that would be responsible for them (in the case where two objects are required to carry out an instruction try and break it down further with the trainees until only one object is responsible for any one instruction – could be a good way to introduce the idea of how specific you need to be in programming and the concepts that are detailed in the source example of this exercise) Once the trainees are satisfied with the instructions take the best formed class and ask the trainees to come up with a one word summary for each instruction that is has. Explain the benefits of well named methods in programming and (maybe?) touch on naming conventions. "},{"title":"Getting started with JavaScript​","type":1,"pageTitle":"Coding 101","url":"/guides/coding-101#getting-started-with-javascript","content":"We will spend most of this lesson in Codepen. To get started, go tohttps://codepen.io/pen to create a new Pen. On the bottom left, click the &quot;Console&quot; button to open the console. You can place your cursor right behind the &gt; sign. Type a simple expression, such as 2 + 2 and hit enter. You will see expression, as well as its result, in the window above. You will be able to follow most of this session along just entering expressions in the console like this. "},{"title":"Variables and assignments​","type":1,"pageTitle":"Coding 101","url":"/guides/coding-101#variables-and-assignments","content":"For an expression or a value to be of any use to us, we need to store it in a variable. Variables have a name (identifier) that we can use to refer to a value. You can assign a value to a variable with the following statement: var x = 3; ^ ^ ^ ^ | | | value | | assignment operator | identifier declaration statement  Let's break this statement down: var: With the var statement we tell the JavaScript engine that x is now a variablex: The variable name/identifier. It can be short or long, but must not contain spaces and must not start with a number.=: The equal sign is the assigmnent operator3: The value that we assign to the variable. This can be any number, string or boolean, or any more complex data type that we will introduce later. You can also use an existing variable here.;: THe semicolon is not strictly needed, but is generally used to terminate a statement. Now you can use the identifier instead of the actual value in an expression: x + x, x * x, console.log(x) "},{"title":"Simple data types & Expressions​","type":1,"pageTitle":"Coding 101","url":"/guides/coding-101#simple-data-types--expressions","content":""},{"title":"Numbers​","type":1,"pageTitle":"Coding 101","url":"/guides/coding-101#numbers","content":"Let's start with something seemingly simple - numbers. Here are some: 1; 15; 3195803798; 1.4; 0.0000005; 0 - 23;  You will see that there are whole numbers (no decimal point) and real numbers (decimal point), which in JavaScript are so-called “floating point” numbers. Numbers can be positive or negative and they support all the basic math operators that you would expect: 2 + 2; // 4 2 - 5; // -3 2 * 3; // 6 10 / 2; // 5 3 * -2; // -6  Operators have the same precedence as in algebra: * and / have higher precedence than + and -. TODO: Do math exerciseTODO: What about Infinity, Math.PI, IEEE floating points, NaN "},{"title":"Strings​","type":1,"pageTitle":"Coding 101","url":"/guides/coding-101#strings","content":"Strings represent any sort of text. They are delimited by single quotes (') or double quotes (”) and can be of any length. &quot;&quot;; // empty string &quot;&quot;; // empty string &quot;Hello&quot;; &quot;I am learning JavaScript&quot;; 'It\\'s been a great journey so far!'; &quot;Double quotes work as well&quot;;  If you need single or double quotes inside the string, you need to “escape” them by putting a backslash in front of them. If you don't do this, the JavaScript engine will think the string ends here, because it encounters a quote. The most common operation on strings is to append one string to another. This is called string concatenation. It's achieved by the plus (+) operator: &quot;Hello&quot; + &quot;World&quot;; // &quot;HelloWorld&quot;  TODO: Introduce string concatenationTODO: What about basic string functions, like substr, replace etc? "},{"title":"Booleans​","type":1,"pageTitle":"Coding 101","url":"/guides/coding-101#booleans","content":"Booleans are a data type that can only have two values: true and false. Like numbers, they can be combined using operators, but there are different operators for booleans (analoguous toBoolean algebra). The most important ones are: ! (NOT), which negates a value: !true; // false !false; // true  &amp;&amp; (AND), which is only true if both operands are true: false &amp;&amp; false; // false true &amp;&amp; false; // false false &amp;&amp; true; // false true &amp;&amp; true; // true  || (OR), which is true if at least one of the operands is true: false &amp;&amp; false; // false true &amp;&amp; false; // true false &amp;&amp; true; // true true &amp;&amp; true; // true  TODO: When to introduce truthiness and falsiness? Probably in comparisons?  Exercise: Put simple mathematical expressions into the console: 2 * 2,2 + 2, 5 * 7 - 13 &gt; Exercise: Calculate the area of a circle (r * r * pi). Do a quick Google search on how to use PI in JavaScript. See what happens when you &quot;add&quot; two strings together Research the JS Math library. sqrt, floor, ceil, round Write an expression that outputs the percentage of trainees who are female. Make it so it outputs it as 58%, and make sure you use the actual numbers of women and the total number of trainees. Solution: console.log(Math.round(7 / 17 * 100) + &quot;%&quot;); "},{"title":"From REPL to console.log​","type":1,"pageTitle":"Coding 101","url":"/guides/coding-101#from-repl-to-consolelog","content":"Single expressions are not very useful, you want to write applicationsMore than one statement? Move it to the JS box in CodepenNow you don't get any immediate feedbackUse console.log to print to the console: console.log(3 + 3);Write statements below each other THOUGHT: Codepen does not have a &quot;run&quot; button, so it's quite intransparent when it actually re-runs a program. Maybe a different tool is better? A simple jsbin configuration, maybe? "},{"title":"Creating a React App","type":0,"sectionRef":"#","url":"/guides/creating-a-react-app","content":"","keywords":""},{"title":"Starting the app​","type":1,"pageTitle":"Creating a React App","url":"/guides/creating-a-react-app#starting-the-app","content":"To start running your application follow the steps below: Open your terminal and cd to the pokedex folder we created previouslyIn your terminal, run: npm start  This does two things: Run a program on your computer that watches your files and updates your application when you make changes. It also runs some checks for common bugs or problems in your code. An error message will be shown in your browser if it detects that there is a problem. When it has started it looks like this:  Opens a web browser with a link to your React app so that you can develop and test the changes you made. You should see a big rotating React logo:  Don't try to use &quot;Open with Live Server&quot; (in VSCode) as you have done previously. Your app will automatically reload the browser just like Live Server does. "},{"title":"Stopping the app​","type":1,"pageTitle":"Creating a React App","url":"/guides/creating-a-react-app#stopping-the-app","content":"You might notice that once you have run npm start your terminal will look different. This is because it is running the watcher program. If you have a slower computer we recommend that you stop the program when you are not using your React app. To stop the program, open your terminal and press Ctrl-C (it's the same on Windows, Mac &amp; Linux). Unfortunately, closing your terminal will not stop the program from running. Once you have stopped running the program, your React app will stop working. To start it again, see the instructions above for starting your app. "},{"title":"Bonus​","type":1,"pageTitle":"Creating a React App","url":"/guides/creating-a-react-app#bonus","content":"You're done! You don't have to read more - you can now develop React apps on your computer. How do we get them onto the web so we can share them with others? "},{"title":"Deployment with Netlify​","type":1,"pageTitle":"Creating a React App","url":"/guides/creating-a-react-app#deployment-with-netlify","content":"If you have already learned to deploy your apps from github using Netlify, you can use the same process to deploy any React apps you created initially with create-react-app. You may notice that Netlify automatically sets the following two config settings: Build command: npm run buildPublish directory: build/ These are correct and necessary - don't change them. (You should expect deployment of your React apps to be slower than your old &quot;vanilla JS&quot; apps, due to the build process that takes place.) "},{"title":"Code Style Guide","type":0,"sectionRef":"#","url":"/guides/code-style-guide","content":"","keywords":""},{"title":"Why should I read this?​","type":1,"pageTitle":"Code Style Guide","url":"/guides/code-style-guide#why-should-i-read-this","content":"There are many different ways of writing code that achieve the same goal. However, programmers generally agree that there are some ways of writing code that are more understandable and readable than other ways. To help write more understandable code, programmers follow a style guide. It provides guidelines for how to write code, how to structure it, common problems to avoid, etc. "},{"title":"Before you start​","type":1,"pageTitle":"Code Style Guide","url":"/guides/code-style-guide#before-you-start","content":""},{"title":"Using Prettier to format code automatically​","type":1,"pageTitle":"Code Style Guide","url":"/guides/code-style-guide#using-prettier-to-format-code-automatically","content":"Some of the guidelines are so common that there are automatic tools to do it for you! One of these tools is called Prettier. You should have installed this tool when you set up your VS Code extensions. Prettier is a tool that rearranges your code (called formatting). It follows a set of rules that programmers have agreed make your code easier to read and understand. You might have a common problem when running Prettier. If you see something like this:  Then you have written some code that is invalid and Prettier can't format it. A common issue is a missing bracket, so try looking for that first. "},{"title":"Essential​","type":1,"pageTitle":"Code Style Guide","url":"/guides/code-style-guide#essential","content":"From when you begin programming it is essential that you follow the guidelines below - a good habit is much easier to get in to when you start! "},{"title":"Indent your code​","type":1,"pageTitle":"Code Style Guide","url":"/guides/code-style-guide#indent-your-code","content":"You may have noticed that programmers tend to indent their code by starting a line of code with some space. Here's an example in HTML: &lt;div&gt; &lt;p&gt;Hello world!&lt;/p&gt; &lt;/div&gt;  And JavaScript: if (isVegetarian) { return &quot;Macaroni and Cheese&quot;; } else { return &quot;Steak and Chips&quot;; }  Indentation helps us to read our code by visually marking how the code is going to run. Programmers rely on this extra information to quickly read and understand code. There are some guidelines about where to add indentation. For example, lines of code are indented when they are inside a function, an if statement or a for loop. Additionally, if any of those structures are inside another structure, then they are indented further. The guidelines about where to add indentation can be complex, but the good news is that Prettier adds indentation automatically for us! However it is good to pay attention to where indentation is added, as you may find yourself writing code in an environment where Prettier is not installed. "},{"title":"Don't leave lots of commented out code​","type":1,"pageTitle":"Code Style Guide","url":"/guides/code-style-guide#dont-leave-lots-of-commented-out-code","content":"When you are debugging a problem, you might comment out some sections of your code. // 🛑 Don't do this! function addToShoppingList(item) { // console.log(&quot;Shopping list before&quot;, shoppingList); // console.log(&quot;Adding item&quot;, item); shoppingList.add(item); // console.log(&quot;Shopping list after&quot;, shoppingList); }  In this example, there is some extra debugging information that is commented out. Once you have solved the problem, you should remove large sections of commented out code. When you (or someone else) are reading your code, you want to know only the important pieces. Removing commented out code helps find the relevant code faster and easier. "},{"title":"Saving old versions with Git​","type":1,"pageTitle":"Code Style Guide","url":"/guides/code-style-guide#saving-old-versions-with-git","content":"You might be worried about &quot;losing&quot; some experimental code that you want to &quot;save&quot; by commenting it out. However, this can cause confusion about which bits of code still work. If you want to save some code, remember that you can commit it using Git. It will then be saved it forever. If you decide to remove the code later you can delete it and make another commit. And if you want it back again, you can always look at the deleted code in the git history. "},{"title":"Don't leave unused variables​","type":1,"pageTitle":"Code Style Guide","url":"/guides/code-style-guide#dont-leave-unused-variables","content":"As you write code, you may make changes to the variables that you are using. You may rename some variables, make some new variables or change how the variables are used. This may leave some variables that are unused. function orderTaxi(pickUpTime) { let driverName = getDriverName(); let customerName = getCustomerName(); // 🛑 Don't do this! return `${driverName} will pick you up at ${pickUpTime}`; }  In this example, the customerName variable isn't used anywhere. You should remove any variables that are unused. This is because if you (or someone else) is reading your code, it can be confusing if you see a variable and then find out later that it isn't used. It could make you think that there's a bug, because the variable must have been put there for a reason! "},{"title":"Think of good names for your variables​","type":1,"pageTitle":"Code Style Guide","url":"/guides/code-style-guide#think-of-good-names-for-your-variables","content":"Making our code understandable by others is critical to being a programmer. One of the main tools in our toolbox is good naming for our variables and function names. There are no strict rules to follow when thinking of variable names, but there are some general guidelines. tip When thinking about whether a variable name is good, try to imagine that you are reading the code again in the future and you have forgotten exactly how it works. Do the variable names help explain what the code is supposed to do? "},{"title":"Use camelCase​","type":1,"pageTitle":"Code Style Guide","url":"/guides/code-style-guide#use-camelcase","content":"When writing JavaScript, programmers tend to use a convention called camelCase. This means starting your variable name with a lower case letter, and then every &quot;word&quot; after that starts with an upper case letter. startingLocationtimeToDestinationtrafficOnRoute By doing this it makes it easier to read variable name that have multiple &quot;words&quot;. "},{"title":"Avoid short names​","type":1,"pageTitle":"Code Style Guide","url":"/guides/code-style-guide#avoid-short-names","content":"Very short variable names can be difficult to understand since the purpose of the variable can be unclear. They are also difficult remember, especially if there are many similarly named variables. Try to avoid short names or abbreviations. Here are some examples of bad names that you should avoid: Single letters like x or yAbbreviations like evt instead of eventGeneric names like array or string "},{"title":"Describe what the variable is/does​","type":1,"pageTitle":"Code Style Guide","url":"/guides/code-style-guide#describe-what-the-variable-isdoes","content":"A good variable name quickly explains what it represents to anyone reading the code. Try to describe what the variable is or what it does within in code. // 🛑 Try to avoid this let song = true; // ✅ This is better let isPlaying = true;  In this example, the variable name song doesn't tell us what it is used for. The isPlaying variable name is better since it tells us whether a song is playing or not. // 🛑 Try to avoid this function percentage() { // ... } // ✅ This is better function getPercentage() { // ... }  In this example, the function calculates a percentage and returns it. Therefore it is good to name it using the &quot;get&quot; verb to show that it returns something. // 🛑 Try to avoid this function isOldEnough(number) { // ... } // ✅ This is better function isOldEnough(yearOfBirth) { // ... }  Finally, parameters of functions should also have names that properly represent what is going to be received into the function. "},{"title":"Using let, const and var​","type":1,"pageTitle":"Code Style Guide","url":"/guides/code-style-guide#using-let-const-and-var","content":"In JavaScript there are three ways to define a variable - let, const and var. The rules on using them at CodeYourFuture are as follows var myAge = 21; // 🛑 Do not use let yourAge = 21; // ✅ Use for values that change const secondsInMinute = 60; // ✅ Use for values that never change  Using var​ You should never use var. This is an outdated way of writing JavaScript code and it is always better to use let or const. The reason it still exists is because lots of code already uses it and so it can't be removed from JavaScript safely. Using let​ You should use let for a variable that will change, for example: let buttonClickedCount = 0; buttonClickedCount = buttonClickedCount + 1;  Using const​ For other variables that will never change you should use const, for example const centimetersInMeter = 100;  "},{"title":"Avoid Long Functions​","type":1,"pageTitle":"Code Style Guide","url":"/guides/code-style-guide#avoid-long-functions","content":"Sometimes writing long functions are unavoidable, however most of the time is better to split a long function into a few shorter ones. This will Make your code easier to readMake your code easier to maintainMake your code easier to review by out volunteers When you writing code you should also try to keep in mind that you will only ever write the code once, but you will read the code many times. Always aim to write code that is readable. For more details you can read these useful articles (The Art of Writing Small and Plain Functions)[https://dmitripavlutin.com/the-art-of-writing-small-and-plain-functions/] "},{"title":"Advanced​","type":1,"pageTitle":"Code Style Guide","url":"/guides/code-style-guide#advanced","content":"These additional rules may be harder for you to understand at the start of your programming journey however they are important concepts as your develop. "},{"title":"Remember your audience​","type":1,"pageTitle":"Code Style Guide","url":"/guides/code-style-guide#remember-your-audience","content":"Remember that you are communicating with another programmer! Don't forget that the person reading your code probably has some understanding of the context. If your function is named getCustomer, it's probably fine to name variables name, age, etc instead of customerName, customerAge. You don't need to explain everything. Naming variables is more of an art than a science. Often you need some experience reading other people's code before you get really good at it. tip When reading other people's code, think about the variable names. If the names are not clear, make sure you understand the code first, then think about what names you would use instead. "},{"title":"Good scoping of your variables​","type":1,"pageTitle":"Code Style Guide","url":"/guides/code-style-guide#good-scoping-of-your-variables","content":"Define your variables with the narrowest scope they can have. This is easiest to explain with an example... function findLongestFirstName(fullNames) { let longest; let firstName; for (let i = 0; i &lt; fullNames.length; i++) { firstName = fullNames[i].split(&quot; &quot;)[0]; if (!longest || firstName.length &gt; longest.length) { longest = firstName; } } return longest; }  It is considered better code to combine the two highlighted lines into one like this... function findLongestFirstName(fullNames) { let longest; for (let i = 0; i &lt; fullNames.length; i++) { let firstName = fullNames[i].split(&quot; &quot;)[0]; if (!longest || firstName.length &gt; longest.length) { longest = firstName; } } return longest; }  This is important as when a function (or your code more generally) becomes more complex it will be harder to keep track of what variable is used where. "},{"title":"Deploying to Netlify","type":0,"sectionRef":"#","url":"/guides/deployment-netlify/","content":"Deploying to Netlify In this guide, we'll learn how to set up automatic website deployment. Deploying is the process of making your site available to everyone on the internet. This is important so you can share your site with the world! Using GitHub and Netlify we can set up automatic deployment, so that every time you update your site it is deployed! Guide\tContentDeploying Your First Site\tHow to set up automatic deployment for your first site. Deploying Another Site\tHow to deploy another site. Renaming Your Site\tHow to rename your site.","keywords":""},{"title":"Deploying Another Site","type":0,"sectionRef":"#","url":"/guides/deployment-netlify/another-site","content":"Deploying Another Site Log into Netlify (remember that you sign in using GitHub)On your Netlify dashboard, click &quot;Sites&quot; in the top navigation Click on the &quot;Add new site&quot; button, then &quot;Import an existing project&quot; This might be familiar now! Click &quot;GitHub&quot; as your Git provider A pop up will show briefly, but then you'll see a list of your GitHub repos. Click on the relevant one Under &quot;Branch to deploy&quot; choose the &quot;main&quot; branch of your repo, which is usually called main. You do not need to change anything under &quot;Basic build settings&quot;, Netlify will do this for you Click the &quot;Deploy site&quot; buttonIt make take a few minutes before the deploy is complete. Try refreshing your browser, when a .netlify.app URL appears then the site is live","keywords":""},{"title":"Common Problems","type":0,"sectionRef":"#","url":"/guides/deployment-netlify/common-problems","content":"","keywords":""},{"title":"My site is not updating when I push a change to GitHub​","type":1,"pageTitle":"Common Problems","url":"/guides/deployment-netlify/common-problems#my-site-is-not-updating-when-i-push-a-change-to-github","content":"Are you sure that you are pushing to the same branch that Netlify is &quot;watching&quot;?Be aware that changes can take a few minutes to show upCheck the logs under the Deploy tab. If there is an error, Netlify won't be able to deploy your site "},{"title":"My repo doesn't show up in the Netlify menu​","type":1,"pageTitle":"Common Problems","url":"/guides/deployment-netlify/common-problems#my-repo-doesnt-show-up-in-the-netlify-menu","content":"Follow the prompt to configure your Netlify-GitHub integration and give it access to the repo you need (or all repos). "},{"title":"The site is using the wrong repo or wrong GitHub account​","type":1,"pageTitle":"Common Problems","url":"/guides/deployment-netlify/common-problems#the-site-is-using-the-wrong-repo-or-wrong-github-account","content":"Delete &amp; recreate your site. "},{"title":"Deploying Your First Site","type":0,"sectionRef":"#","url":"/guides/deployment-netlify/first-site","content":"Deploying Your First Site Visit https://www.netlify.com/ and click the &quot;Sign up&quot; button in the top navigation Choose &quot;GitHub&quot; on the sign up page If you are logged out of GitHub, then log inRead the permissions and click the &quot;Authorize netlify&quot; button If prompted to &quot;Tell us about yourself&quot;, fill out the information. Note: only the &quot;I'm using Netlify for&quot; question is required, so you can skip everything else if you wantClick the &quot;Import from Git&quot; button When asked to connect a Git provider, click the &quot;GitHub&quot; button A pop-up window will ask for some more GitHub permissions. Click the &quot;Authorize Netlify&quot; button You will be asked to &quot;Install Netlify&quot;. If you are prompted &quot;Where do you want to install Netlify&quot;, choose your personal GitHub username. Do NOT choose Code Your Future's account, as this won't work! Select the GitHub repo which you would like to create a site from Under &quot;Branch to deploy&quot; choose the &quot;main&quot; branch of your repo, which is usually called main. You do not need to change anything under &quot;Customize build settings&quot;, Netlify will do this for you Click the &quot;Deploy site&quot; buttonIt make take a few minutes before the deploy is complete. Try refreshing your browser, when a .netlify.app URL appears then the site is live","keywords":""},{"title":"Renaming Your Site","type":0,"sectionRef":"#","url":"/guides/deployment-netlify/renaming-site","content":"Renaming Your Site Once you have a site deployed, you may notice that Netlify has created a randomised .netlify.app URL to access it. You may want to change this to a &quot;friendlier&quot; URL so that it is easier to remember and share. We also ask you to change the URL of sites you create for coursework, so that it is easier to for volunteers to find your site and give feedback. See website naming conventions for rules to name your site. tip If you already have the site open in Netlify, you can skip the first few steps! Log into Netlify (remember that you sign in using GitHub)On your Netlify dashboard, click &quot;Sites&quot; in the top navigation Click on the site that you want to rename in the list of all of your sites On the site overview page, click on &quot;Site settings&quot; Scroll down to the &quot;Site information&quot; section and click &quot;Change site name&quot; Enter your new site name and click &quot;Save&quot; Your site should now be renamed! If you scroll to the top, the URL should be NEW_NAME.netlify.app. Try clicking to make sure that the URL still works","keywords":""},{"title":"Site Naming Conventions","type":0,"sectionRef":"#","url":"/guides/deployment-netlify/site-naming-conventions","content":"Site Naming Conventions To make it easier for teachers and volunteers to find and review your homework, All CYF coursework projects should be hosted with the following naming scheme: cyf-USERNAME-PROJECT_NAME ...where: USERNAME is your GitHub usernamePROJECT_NAME is the name of the coursework project. If you are not sure, then ask! Examples for the project called cakes cyf-nbogie-cakes.netlify.comcyf-40thieves-cakes.netlify.comcyf-kkarimi-cakes.netlify.com Examples for the project called photo-gallery cyf-lucymac-photo-gallery.netlify.comcyf-textbook-photo-gallery.netlify.com","keywords":""},{"title":"How to connect your GitHub to Render","type":0,"sectionRef":"#","url":"/guides/deployment-render/connecting-github","content":"How to connect your GitHub to Render Click SIGN IN button Choose Github as your sign in method Click Authorise Render button Click COMPLETE SIGN UP button Head on over to your mailbox Check your inbox for Activation request Click the link to verify your email address Taadaaaa! You’re in!","keywords":""},{"title":"Deploying to Render","type":0,"sectionRef":"#","url":"/guides/deployment-render/","content":"Deploying to Render In this guide, we'll learn how to set up automatic website deployment to Render. tip This guide is intended for trainees completing the Node, Databases or Final Projects. If you have not reached this part of the course yet, please use the Netlify Deployment guide instead. Guide\tContentHow to connect your GitHub account to Render\tHow to connect your GitHub account to Render How to deploy a server on Render\tHow to deploy a server on Render How to create a PostgreSQL Database on Render\tHow to create a PostgreSQL Database on Render Connecting a client to a database on Render\tConnecting a client to a database on Render","keywords":""},{"title":"Connecting a client to a database on Render","type":0,"sectionRef":"#","url":"/guides/deployment-render/connecting-to-a-client","content":"","keywords":""},{"title":"Warning/Failure messages​","type":1,"pageTitle":"Connecting a client to a database on Render","url":"/guides/deployment-render/connecting-to-a-client#warningfailure-messages","content":"You may see warning/failure messages like the one below (I did!)Not to worry, calmly step through the entire process slowly.After a few tries, if you don’t succeed, ask for help in the relevant communication channels  "},{"title":"How to create a PostgreSQL Database on Render","type":0,"sectionRef":"#","url":"/guides/deployment-render/creating-a-postgres-db","content":"How to create a PostgreSQL Database on Render Click on the New + button, then click on PostgreSQL Fill out the Name field, which will be used to label the database within Render. Fill out the Database and User fields, which should be the same as your development setup - ask a volunteer if you are unsure. Leave the remaining 3 input fields as is with the default values At the bottom of the form, the Free plan should be selected by default. Click Create Database button Render will take a few minutes to create your database After a few minutes your Database should be active Scroll down to Connections tab, where you will find Environment Variables for connecting to your database. The Internal &amp; External Database URLs will likely be the most useful for you The Connect button could be useful for quick Environment Variable reference","keywords":""},{"title":"How to deploy a server on Render","type":0,"sectionRef":"#","url":"/guides/deployment-render/deploying-server","content":"How to deploy a server on Render Make sure you have connected your GitHub account to Render (see How to connect your GitHub to Render)Log into the Render dashboard Click on the New + button Click on Web Service from the dropdown list Select your repo to connect to Render by clicking on the Connect button Fill out the Name field, which will be used to label the server within Render Provide a Start Command field. This should be in the format node YOUR_FILENAME.js, it is likely node server.js Create your new server by clicking on the Create Web Service button You should have been taken to the Build page for your new serverWait for the build to complete (it may take a couple of minutes). It should display &quot;Build successful&quot; as well as &quot;Live&quot; You can view your newly deployed server by clicking the URL at the top of Web Service page","keywords":""},{"title":"How to get help","type":0,"sectionRef":"#","url":"/guides/escalation-policy","content":"","keywords":""},{"title":"1) Search Online​","type":1,"pageTitle":"How to get help","url":"/guides/escalation-policy#1-search-online","content":"First, when you get stuck you should search online for the answer to your problem. This is a key skill that is really great for you to develop. Good websites to find solutions are StackOverflow Be careful that you only use Answers to questions that are quite recent. Programming moves quickly! W3Schools These are beginners guides to many web technologies YouTube Finding a good explainer video can be a good way to gain an overview of the area you are having problems with If you have an error message, copy and paste it into Google. Read carefully each each result to find exactly what you want "},{"title":"2) If you are stuck for longer than 20 minutes​","type":1,"pageTitle":"How to get help","url":"/guides/escalation-policy#2-if-you-are-stuck-for-longer-than-20-minutes","content":"Write a question to your fellow trainees in your class channel on slack. It is really important you use the public class channel and not a private direct message. Your colleagues will have similar problems to you and so you are helping them by sharing your problems. We're all learning together! Take a while to think carefully about the question you want to ask. Make sure you include in your thread: What you are trying to achieveWhat you have tried so farAny error messagesYour code that people can look at to debug You must include as much information as you can in your post to get help. If you just post &quot;I need help&quot; then we will not be able to help you. A more extensive guide on how to ask a good question can be found here https://docs.codeyourfuture.io/trainees/guides/asking-questions "},{"title":"3. If you cannot get an answer from your other Trainees​","type":1,"pageTitle":"How to get help","url":"/guides/escalation-policy#3-if-you-cannot-get-an-answer-from-your-other-trainees","content":"Post your question in your class public channel and @ volunteers from the class that covered the topic and we will reply as soon as we can. You are also welcome to @ other trainees or volunteers you think might be able to help you. Please understand that it may take some time to get your answer. Nearly all of our volunteers work full time jobs and only volunteer in the evenings. Not getting an answer doesn't mean you don't want to help - we're just busy 😊 "},{"title":"Introduction to tests","type":0,"sectionRef":"#","url":"/guides/intro-to-tests","content":"","keywords":""},{"title":"What does this cover​","type":1,"pageTitle":"Introduction to tests","url":"/guides/intro-to-tests#what-does-this-cover","content":"This introduction is designed to give you a high-level overview on the basics of testing, which you'll need when you're tackling the problems in your coursework at Code Your Future. In this introduction to testing we'll cover the following things: Why test ?Code specificationWhat is a test ?Anatomy of a test ( using Jest )Running testsUnderstanding test feedback ( using Jest ) "},{"title":"Why test ?​","type":1,"pageTitle":"Introduction to tests","url":"/guides/intro-to-tests#why-test-","content":"Throughout the JS Core modules, we'll use tests in your coursework so it's important you understand what a test is and how they work. The tests will: Check whether you've solved the problemGuide you towards the correct solution Tests are also commonly used by professional software developers, so it's useful to start learning early how to read and interpret them. "},{"title":"Code specification​","type":1,"pageTitle":"Introduction to tests","url":"/guides/intro-to-tests#code-specification","content":"countWords 🧮 Let's consider a function called countWords that needs to work as follows: it takes one argument - a string of words separated by spaces, e.g. &quot;hello world&quot;returns an number that counts each word in the string The points above form a specification of how the function countWords should behave - in other words, the specification is a description of how the function should work. Once we have a specification for how the function should work we can create a number of cases showing how we expect the function countWords to behave when it is called with certain inputs. "},{"title":"Case 1 💼​","type":1,"pageTitle":"Introduction to tests","url":"/guides/intro-to-tests#case-1-","content":"const input = &quot;hello&quot;; const result = countWords(input);  In example 1, input stores a string &quot;hello&quot; which we pass as an argument to countWords. We then store the return value of countWords in a variable called result. In this case, we would expect the result to be 1. "},{"title":"Case 2 💼​","type":1,"pageTitle":"Introduction to tests","url":"/guides/intro-to-tests#case-2-","content":"const input = &quot;I think therefore I am&quot;; const result = countWords(input);  In example 2, input stores a string &quot;I think therefore I am&quot;, which we pass as an argument to countWords. We then store the return value of countWords in a variable called result. In this case, we would expect the result to be 5. "},{"title":"Exercise 🖊️​","type":1,"pageTitle":"Introduction to tests","url":"/guides/intro-to-tests#exercise-️","content":"Write another example with a different input variable. What do you expect the result to be in this case ? We could keep trying out different versions of input and check the result but real software will often have thousands (or even millions!) of these cases. We can't keep checking all of these ourselves. This is where automated testing comes in: we could write some more code that checks whether the cases are working as we expect. Let's look at what an automated test looks like. "},{"title":"🧪 What is a test ?​","type":1,"pageTitle":"Introduction to tests","url":"/guides/intro-to-tests#-what-is-a-test-","content":"We're now ready to define what a test is when we're writing software. 🔑 A test is any piece of code that checks a certain unit of code ( typically a function ) behaves in a particular way. For example, we could write a test to check that countWords behaves in a particular way when passed a string containing a single word. For this example, we're using a popular JavaScript testing framework called Jest to write the test code. We'll examine the example below written using Jest, and then break down the different parts of the test code to understand how it all works. test(&quot;one word string gives a count of 1&quot;, function () { expect(countWords(&quot;hello&quot;)).toBe(1); });  Let's break down the different parts of this test code. "},{"title":"Anatomy of a test​","type":1,"pageTitle":"Introduction to tests","url":"/guides/intro-to-tests#anatomy-of-a-test","content":"1. Test description​ test(&quot;one word string gives a count of 1&quot;, function () {});  We use a function in Jest called test to write a test description - &quot;will count the number of words for a single word string&quot; which describes the behaviour we expect in this particular test. There is also a function function () {} in which we will write our test code. When we run our tests Jest will make the test function available in our file without us declaring it. 2. Assertion​ expect(countWords(&quot;hello&quot;)).toBe(1);  The assertion is the part of the test code that actually checks to see if something is true or not. In this example, we are claiming that the following is true: &quot;We expect countWords(&quot;hello&quot;) to be 1&quot; Notice that the statement above is very similar to the syntax used in the test code. The function toBe ( which is part of the Jest framework ) is used to check that the return value of countWords(&quot;hello&quot;) and 1 are equal to each other. There are many other functions like toEqual which we can use to make different assertions. "},{"title":"Pass ✅ or Fail ❌​","type":1,"pageTitle":"Introduction to tests","url":"/guides/intro-to-tests#pass--or-fail-","content":"Finally, our test can either pass or fail. If countWords(&quot;hello&quot;) is equal to 1 then the test has passed ✅.If countWords(&quot;hello&quot;) is not equal to 1 then the test has failed ❌. note Don't panic if the tests fail! Remember: tests are here to help you solve the problem! If you carefully read the test feedback it will tell you what the problem is so you can fix it. "},{"title":"Exercise 🖊️​","type":1,"pageTitle":"Introduction to tests","url":"/guides/intro-to-tests#exercise-️-1","content":"Try creating another test with a different test description to check how countWords behaves in another case. "},{"title":"Edge cases​","type":1,"pageTitle":"Introduction to tests","url":"/guides/intro-to-tests#edge-cases","content":"When thinking about a specification, and what tests you'll need, you should be thinking both about how people would normally use the function, and about unusual examples that may be confusing or surprising (often called &quot;edge cases&quot;). For example, with our countWords example, what should happen when an empty string is used as an argument? What should happen for hyphenated words (e.g. &quot;North-West&quot;)? Do numbers count as words ? What should countWords(&quot;There were 17 trainees in the North-West class&quot;) return ? You should make sure you think about these edge-cases when you're approaching a problem, to make sure you solve it completely. "},{"title":"Exercise 🖊️​","type":1,"pageTitle":"Introduction to tests","url":"/guides/intro-to-tests#exercise-️-2","content":"Write a test similar to the one above that checks the following behaviour: &quot;numbers aren't counted as separate words in a string&quot; "},{"title":"Additional setup​","type":1,"pageTitle":"Introduction to tests","url":"/guides/intro-to-tests#additional-setup","content":"We can write tests in lots of different ways. Sometimes developers may write additional variabes in order to label some of the values in the test code more clearly. We could re-write the test above in the following way: test(&quot;one word string gives a count of 1&quot;, function () { const input = &quot;hello&quot;; const actualResult = countWords(input); const expectedResult = 1; expect(actualResult).toEqual(expectedResult); });  In this example, we're declaring some variables that will store values that we compare later on in the test. We declare an input variable that stores a value that we will pass to the function we are testing - countWords.We declare an actualResult variable that stores the return value of our function countWords.We declare an expectedResult which stores what we expect the actualResult to be when our function is behaving according to the test description. note It's important to note that the test here and the one above it are checking the exact same thing. The variables are just being used to make the test easier to understand for ourselves and other developers. "},{"title":"Running tests​","type":1,"pageTitle":"Introduction to tests","url":"/guides/intro-to-tests#running-tests","content":"Let's suppose we have a project with the following project structure: project ├── package.json └── tests └── countWords.test.js  We have a project with a directory called tests containing a file countWords.test.js which contains our tests and another file called package.json in the root of the project. We need to find out how we can actually use Jest to run the tests so we can see if they're passing or failing. "},{"title":"Dependencies​","type":1,"pageTitle":"Introduction to tests","url":"/guides/intro-to-tests#dependencies","content":"We often need to use packages of code written by other developers in our project - otherwise coding would be a very time consuming endeavour indeed! We can download and install these libraries in our project so we can use them when we're building software. We call these libraries of code dependencies - libraries of code that we depend on when we're writing our code. For example, if we're using Jest to write our tests, then we'd say that Jest is one of our dependencies. "},{"title":"Installing dependencies​","type":1,"pageTitle":"Introduction to tests","url":"/guides/intro-to-tests#installing-dependencies","content":"npm is a tool that is used to download and install dependecies in a project. We can use npm to install Jest with the following command: npm install --save-dev jest  Ensure you're at the root of the project (where the package.json is ) before running this command. info You'll learn more about npm and how it works later on in the course. "},{"title":"node_modules​","type":1,"pageTitle":"Introduction to tests","url":"/guides/intro-to-tests#node_modules","content":"Our project structure will now look as follows: project ├── package.json ├── tests | └── countWords.test.js └── node_modules  Once the installation has completed successfully we should now have a directory called node_modules in our project. The node_modules directory contains all the code from the dependencies like Jest that we've just installed in our project. You won't really need to look inside the node_modules directory - you just need to know it contains the code for Jest and any other libraries we install in our project. "},{"title":"package.json​","type":1,"pageTitle":"Introduction to tests","url":"/guides/intro-to-tests#packagejson","content":"A package.json is a file that contains important details about the project your're working on. It could contain information about the author of the project and other important details too. In order to test our code, we'll need to update the package.json so we can run our tests with Jest. "},{"title":"Running the tests​","type":1,"pageTitle":"Introduction to tests","url":"/guides/intro-to-tests#running-the-tests","content":"Finally we'll need to run our tests. We can check the package.json for a section called &quot;scripts&quot;, see below: &quot;scripts&quot;: { &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;, },  This section is where we'll store some commands that we can use in our project. We'll need to update the package.json so that it reads as follows: &quot;scripts&quot;: { &quot;test&quot;: &quot;jest&quot;, },  Now we can run the following command in our terminal ( whilst at the root of our project ): npm test  This should run our tests and then provide us with feedback about how our code is working. "},{"title":"Understanding test feedback​","type":1,"pageTitle":"Introduction to tests","url":"/guides/intro-to-tests#understanding-test-feedback","content":"Consider an extract from the test file countWords.test.js  After the test has run, we will get some feedback from Jest depending on whether the test passed or failed. If the test fails then we should expect to see something like this:  If the test passes, then we should get some feedback that looks like this:  Jest aims to give feedback that makes it simple to see why test has failed. It shows us several things: the line number for the failing test (line 7)shows us expected - which corresponds to our expectedResultshows us received - which corresponds to our actualResult We can see the test feedback is telling us that received is undefined. In other words, actualResult ( countWords's return value) is undefined. "},{"title":"Exercise 🖊️​","type":1,"pageTitle":"Introduction to tests","url":"/guides/intro-to-tests#exercise-️-3","content":"How could you update the function countWords to ensure it passes the test shown at the top of this section. Hint: Think about the function's return value. "},{"title":"Further reading​","type":1,"pageTitle":"Introduction to tests","url":"/guides/intro-to-tests#further-reading","content":"Find out more about Jest by visiting the documentation hereYou can also check out Coding Train for more explanations of how tests work "},{"title":"What are we actually teaching?","type":0,"sectionRef":"#","url":"/guides/paradigm","content":"","keywords":""},{"title":"What don’t we teach?​","type":1,"pageTitle":"What are we actually teaching?","url":"/guides/paradigm#what-dont-we-teach","content":"There’s so much we don’t cover in our syllabus. It’s not always obvious what we skip because it’s out of paradigm, and what we skip because we’re out of time. So let’s notice some things that are missing and say why: "},{"title":"For time reasons​","type":1,"pageTitle":"What are we actually teaching?","url":"/guides/paradigm#for-time-reasons","content":"We don’t teach the following topics, though useful and important, simply because we don’t have time to cover them: RecursionRegex (though we typically mention them in JS1-W3, we don’t teach them or expect trainees to be able to write them)Handling null We have some Codewars collections around these topics. "},{"title":"For simplicity and clarity​","type":1,"pageTitle":"What are we actually teaching?","url":"/guides/paradigm#for-simplicity-and-clarity","content":"The following topics are largely unnecessary for writing code in the style we teach. We omit them for clarity and focus. OOP generallyJS classes and constructors The this keyword is famously unintuitive. React changed its API to avoid using this. Since JS classes tend not to be useful without the this keyword, we avoid them altogether. Mutability/immutabilityPassing by value vs reference In general: while we cover basic language features like for loops, we quickly move on to higher order functions and encourage these over imperative strategies. We downplay strategies that mutate arrays, like push, and pop. "},{"title":"What do we teach?​","type":1,"pageTitle":"What are we actually teaching?","url":"/guides/paradigm#what-do-we-teach","content":"We teach a subset, so what do we focus on? We broadly focus on Declarative and Functional programming paradigms. "},{"title":"Declarative​","type":1,"pageTitle":"What are we actually teaching?","url":"/guides/paradigm#declarative","content":"We teach three purely declarative languages: HTML, CSS, &amp; SQL and one multiparadigmatic language, JavaScript, focusing on React, a declarative framework. "},{"title":"Functional​","type":1,"pageTitle":"What are we actually teaching?","url":"/guides/paradigm#functional","content":"When we mentor trainees we guide them with these principles: Prefer pure functions Pure functions are predictable. The same input will always produce the same output. Prefer composable functions Break up your functions. Minimise side effects A function without side effects is pure. Avoid mutation In practical terms this means preferring methods that return new objects, arrays, or values over methods that mutate data. Yes to map, no to forEach. And so therefore: prefer arrow functions Arrow functions do not have their own bindings to this or super, or an arguments object. "},{"title":"Code as documentation​","type":1,"pageTitle":"What are we actually teaching?","url":"/guides/paradigm#code-as-documentation","content":"Expressing ideas clearly in code. Code should be simple, clearly named, and easy to follow. Name data clearly Prefer verbose and specific naming conventions over algebraic ones so trainees can trace the function. Yes to numberOfDevelopers.map(developer =&gt; ..., no to xs.map(x =&gt; ... Comments are why not what Encourage skeleton code in comments as part of development. Then delete those comments as part of refactoring. Use comments to explain choices. Documentation Documentation is expected, simple and routine. Our trainees must practice writing. "},{"title":"Test driven development​","type":1,"pageTitle":"What are we actually teaching?","url":"/guides/paradigm#test-driven-development","content":"Red, green, refactor Ideally: Requirements are expressed as tests. Production code is only written to pass a test. Implementation details are not tested. "},{"title":"Reviewing","type":0,"sectionRef":"#","url":"/guides/marking-guide","content":"","keywords":""},{"title":"How To Evaluate Coursework​","type":1,"pageTitle":"Reviewing","url":"/guides/marking-guide#how-to-evaluate-coursework","content":"Details on how we give feedback in code review are on the docs site: Coursework Feedback Docs "},{"title":"Overview​","type":1,"pageTitle":"Reviewing","url":"/guides/marking-guide#overview","content":""},{"title":"Completeness​","type":1,"pageTitle":"Reviewing","url":"/guides/marking-guide#completeness","content":"The code achieves all of the tasks in the coursework [read more about completeness]The code achieves the task in an intended way and solves the &quot;general&quot; problem [read more about intention]The code covers all edge cases [read more about edge cases]The code does not contain any obvious bugsThe code handles error responses as well as success responses [read more about errors] "},{"title":"Code Style​","type":1,"pageTitle":"Reviewing","url":"/guides/marking-guide#code-style","content":"The code follows a consistent styleThe code follows CodeYourFuture's coding standards: [read more about coding standards]The code is well indented: [read more about indentation]The code uses good variable names: [read more about naming variables]The code uses good function names: [read more about naming functions]The code uses code which is easy to read and understand: [read more about readability]The code should not use hard coded values: [read more about hard coded values] "},{"title":"Clarity​","type":1,"pageTitle":"Reviewing","url":"/guides/marking-guide#clarity","content":"The code is broken up into small reusable functions: [read more about small functions]Code is not repeated in several locations of the coursework: [read more about DRY]The coursework does not have commented out code: [read more about commented out code]There is no dead code in the coursework: [read more about unreachable code]There is no extra or debug logging: [read more about debug logging] "},{"title":"Explanations​","type":1,"pageTitle":"Reviewing","url":"/guides/marking-guide#explanations","content":""},{"title":"Complete All Tasks​","type":1,"pageTitle":"Reviewing","url":"/guides/marking-guide#complete-all-tasks","content":"Completion of all of the tasks is essential. "},{"title":"Pass the tests​","type":1,"pageTitle":"Reviewing","url":"/guides/marking-guide#pass-the-tests","content":"Do not rewrite the tests to 'pass' your code. Rewrite your code to pass the tests. Pay attention to the real goal here. Tests are your friend and your guide. Let tests help you. When you work for an employer, will they find it a good solution if you &quot;fix&quot; their payments system by making any input a valid credit card number? If not, why not? "},{"title":"Achieves task in intended way​","type":1,"pageTitle":"Reviewing","url":"/guides/marking-guide#achieves-task-in-intended-way","content":"You should also always try to solve the problem in the &quot;general&quot; rather than in the &quot;specific&quot;. For example, we could set the challenge Print every element of an array to the console Test 1: let array = [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;]Test 2: let array = [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;]Test 3: let array = [&quot;Up&quot;, &quot;Down&quot;] To make this test pass you could write console.log(array[0]); console.log(array[1]); console.log(array[2]); console.log(array[3]);  However, that would not work for every case that exists - only the ones that we're writing. Your aim isn't to just pass the tests, it's to write good code that solves the problem. A better solution would be array.forEach((item) =&gt; { console.log(item); });  "},{"title":"Edge Cases​","type":1,"pageTitle":"Reviewing","url":"/guides/marking-guide#edge-cases","content":"Edge cases are when code does something you're not expecting and you didn't account for in your code. Some edge cases are valid data, and some are not. Some names contain punctuation; some people may only have a single name; your code must handle these edge cases. If someone doesn't enter a name at all, your code should reject this edge case and throw an error. If your code doesn't notice unexpected inputs, you might rely on data that doesn't exist or are malformed. As your code gets more complicated, these problems get more difficult to resolve. See Falsehoods Programmers Believe About Names for some interesting examples. Good code should handle all of these cases so that they can't happen - and if they do - they don't make your program crash or stop working. Validations are used wherever necessary. The code never breaks under any circumstances. User input is never trusted. Regardless of it being a negative, over-sized, invalid format, etc., every input passed should be processed, sanitized before taking it further. Every object is checked for its existence before accessing its properties. More Reading​ Don't forget edge cases "},{"title":"Small Functions​","type":1,"pageTitle":"Reviewing","url":"/guides/marking-guide#small-functions","content":"Writing small functions makes your code easier to understand and easier to work with. Ideally you should be able to describe what a function does in one sentence, without the word &quot;and&quot;. Good examples: &quot;This function returns the user's favourite author&quot;, &quot;This other function Tweets the title of an author's most popular book&quot;. Bad example: &quot;This function finds the user's favourite author and sends a Tweet with the name of that author's most popular book&quot;. More Reading​ How big should a function be? "},{"title":"Debug Logging​","type":1,"pageTitle":"Reviewing","url":"/guides/marking-guide#debug-logging","content":"The code should not contain debug logging that was used during development. For example, any logs like console.log(&quot;Does this work&quot;); console.log(&quot;1&quot;); console.log(array[1].object.name);  should be removed. "},{"title":"Error Responses​","type":1,"pageTitle":"Reviewing","url":"/guides/marking-guide#error-responses","content":"Not just the error messages, every response that is returned by the server must be properly handled. It should have necessary headers, response messages, error codes and any other necessary details attached with it in required format. All possible scenarios are tested to avoid timeouts, unresponsive UI, etc. More Reading​ Handling Error HTTP Responses in Javascript fetch "},{"title":"Non-duplicated Code​","type":1,"pageTitle":"Reviewing","url":"/guides/marking-guide#non-duplicated-code","content":"Duplicated code should be moved into functions so they can be referenced from multiple places. Having lots of duplicated code in your coursework means that it is harder to change or update your code. More Reading​ Duplication Code "},{"title":"Commented Out Code​","type":1,"pageTitle":"Reviewing","url":"/guides/marking-guide#commented-out-code","content":"Commenting out code is a great way to debug your code but when you use it to keep code for later it can become a problem. Instead of commenting out code you want to keep but not use, consider moving it to separate file. This will make it easier to keep track of the code you're currently working on. Having lots of commented out code make your code harder to read and make it easier for you to get overwhelmed and lost in your code. Since we use Git to record all of the changes to our code you can always use the Git History to see everything that has changed. More Reading​ Please don't comment out codePutting comments in code: the good, the bad, and the ugly.Git History "},{"title":"Dead Code​","type":1,"pageTitle":"Reviewing","url":"/guides/marking-guide#dead-code","content":"Dead Code is code that is in your coursework but can't be reached or run by your program. For example, a function that is never called is considered dead code. Dead code should be removed from your coursework or re-written so it is used. Having lots of dead code in your coursework can make your work hard to read and understand. More Reading​ Dead Code "},{"title":"Coding Standards​","type":1,"pageTitle":"Reviewing","url":"/guides/marking-guide#coding-standards","content":"All code written by Trainees at CodeYourFuture should follow our Coding Standard guidelines. These guidelines are based on ones used in industry. Guidelines are important in big organisations so that everyone writes code in the same way across a large application. It's important that trainees get used to writing in a consistent style early on. More Reading​ CodeYourFuture Coding Standards "},{"title":"Well Indented Code​","type":1,"pageTitle":"Reviewing","url":"/guides/marking-guide#well-indented-code","content":"Indentation is a fundamental aspect of code styling, and plays a large role in influencing readability. First of all, indented code is easier to read through than unindented code. With unindented code, the overall structure of the code might be somewhat difficult to see. However, with indented code, the overall structure of the code jumps out at you. Tabs tell you that a line of code is inside a function, loop, if statement, or else statement. Knowing which parts of the code is inside what will become especially important when your code becomes more complex. More Reading​ Importance of Code Indentation "},{"title":"Good Function Names​","type":1,"pageTitle":"Reviewing","url":"/guides/marking-guide#good-function-names","content":"Good function names are important so that code is easy to read and understand what it is doing. A bad function name might be function doWork() {}  A good function name might be function removeCapitalLetters(){)  Sometimes if you can't come up with a good function name it's an indication that the function doesn't have a nice, crisp focus and needs to be refactored. But it's well worth the trouble finding the best possible names, since it makes your code so much more understandable and usable. More Reading​ Coding like Shakespeare: Practical Function Naming ConventionsTrouble coming up with good names for functions "},{"title":"Good Variable Names​","type":1,"pageTitle":"Reviewing","url":"/guides/marking-guide#good-variable-names","content":"Each variable is named so it is clear which variable is being used at any time. It is important to use meaningful names for variables: For example, let pocketMoney = 20;  means that the variable pocketMoney is being used to store how much pocket money you have. Right now you have £20. The name given to each variable is up to the programmer, but ideally a variable name should have meaning you can understand without needing to read any other code, i.e. it should reflect the value that it is holding. More Reading​ Good Variable NamesProgramming Basics - Naming Variables "},{"title":"More Readable Code​","type":1,"pageTitle":"Reviewing","url":"/guides/marking-guide#more-readable-code","content":"The most important thing when writing code is to make it easy to read and understand, and as simple as possible. An example of write more readable code might be using a filter instead of a complicated for loop. This is better, because it is immediately obvious what you're trying to do - filter an array - and you're less likely to make a mistake using it. For example, const trees = [&quot;Oak&quot;, &quot;Birch&quot;, &quot;Beech&quot;, &quot;Elm&quot;, &quot;Hazel&quot;]; let treesBeginningWithB = []; for (var i = 0; i &lt; trees.length; i++) { if (trees[i].chatAt(0) === &quot;B&quot;) { treesBeginningWithB.push(trees[i]); } } console.log(treesBeginningWithB); // [&quot;Birch&quot;, &quot;Beech&quot;]  Could be written like this be easier to understand and read. const trees = [&quot;Oak&quot;, &quot;Birch&quot;, &quot;Beech&quot;, &quot;Elm&quot;, &quot;Hazel&quot;]; let treesBeginningWithB = trees.filter((tree) =&gt; tree.chatAt(0) === &quot;B&quot;); console.log(treesBeginningWithB); // [&quot;Birch&quot;, &quot;Beech&quot;]  As you can see, we've reduced six lines of code into one and it is immediately obvious that it is trying to filter the trees beginning with B. Writing readable code is a big topic and one that you'll get better at as you go on. We encourage you to read more about it. More Reading​ Readable Code "},{"title":"Hard Coded Values​","type":1,"pageTitle":"Reviewing","url":"/guides/marking-guide#hard-coded-values","content":"Hard coded values with no explanation make code hard to understand and read in the long term. For example getData(&quot;https://www.api.com/retrieve&quot;); calculateScreenSize(1800);  Will be hard to understand when you codebase grows. Instead use constants to store your hard coded values - this means the value has a name, which can be usefully descriptive. For example let WEATHER_ENDPOINT = &quot;https://www.api.com/retrieve&quot;; let MAX_SCREEN_WIDTH = 1800; getData(WEATHER_ENDPOINT); calculateScreenSize(MAX_SCREEN_WIDTH);  More Reading​ Is it ever a good idea to hardcode values into our applications? "},{"title":"React Cheatsheet","type":0,"sectionRef":"#","url":"/guides/react-cheatsheet","content":"","keywords":""},{"title":"Recipes​","type":1,"pageTitle":"React Cheatsheet","url":"/guides/react-cheatsheet#recipes","content":"Recipe\tLinksIncluding an image in your React app\thttps://codesandbox.io/s/showing-images-in-create-react-app-tyyd9?file=/src/App.js Including an image in your React app (alternative method)\thttps://codesandbox.io/s/showing-images-in-create-react-app-0n77h?file=/src/App.js Importing a CSS file into your React component\thttps://codesandbox.io/s/using-css-in-create-react-app-2cu6y?file=/src/App.js Including a custom font in your React app\thttps://codesandbox.io/s/using-custom-fonts-into-create-react-app-tjw28?file=/src/App.js Mapping over an array with JSX\thttps://codesandbox.io/s/mapping-over-an-array-with-jsx-qsqzh?file=/src/App.js Conditional rendering with JSX\thttps://codesandbox.io/s/conditional-rendering-with-jsx-b2ryk?file=/src/App.js Quick React setup\thttps://codesandbox.io/s/affectionate-dream-fmg69?file=/src/App.js "},{"title":"Using a 3rd-party library in your React app (example: \"lodash\")​","type":1,"pageTitle":"React Cheatsheet","url":"/guides/react-cheatsheet#using-a-3rd-party-library-in-your-react-app-example-lodash","content":"In your terminal, run the following command:  npm install lodash  Go to the file where you want to use the package and import it with require('package-name'):  const lodash = require('lodash')  You should now be able to use the package in that file:  let num = lodash.random(0, 10);  If there is an error, try to restart your development server Demo: https://codesandbox.io/s/installing-and-using-an-npm-module-5ukh8 "},{"title":"Links​","type":1,"pageTitle":"React Cheatsheet","url":"/guides/react-cheatsheet#links","content":"Subject\tLinkReact code snippets for hooks\thttps://devhints.io/react#hooks-new JSX syntax\thttps://reactjs.org/docs/introducing-jsx.html Array Destructuring explained (useful for useState)\thttps://github.com/wesbos/es6-articles/blob/master/19%20-%20Destructing%20Arrays.md create-react-app docs\thttps://create-react-app.dev/docs/getting-started List special event-handler props (onClick, etc)\thttps://reactjs.org/docs/events.html#reference Glossary of React Terms\thttps://reactjs.org/docs/glossary.html "},{"title":"Netlify deployment​","type":1,"pageTitle":"React Cheatsheet","url":"/guides/react-cheatsheet#netlify-deployment","content":"As before! You can set up automatic Netlify deployment from GitHub in the same way as your earlier HTML + JS websites. Netlify should automatically set the following important build settings: Important Netlify build settings\tValue&quot;publish directory&quot;\tbuild/ &quot;build command&quot;\tnpm run build Note that your deployment doesn't happen instantly. Netlify needs some time to &quot;build&quot; your React project. The build process turns your beautiful human-readable React Components into optimised machine-readable code that can run in a web browser. The full Netlify cheat sheet can be found here "},{"title":"Error scenarios​","type":1,"pageTitle":"React Cheatsheet","url":"/guides/react-cheatsheet#error-scenarios","content":""},{"title":"Error when launching app with npm start​","type":1,"pageTitle":"React Cheatsheet","url":"/guides/react-cheatsheet#error-when-launching-app-with-npm-start","content":"Are you in the right directory? Run ls, you should see a &quot;package.json&quot; listedIf you see the error message &quot;module not found&quot;, run npm install module_name to install the missing package.If this fails, delete your node_modules folder and package-lock.json and re-run npm install "},{"title":"Stop Create React App development server​","type":1,"pageTitle":"React Cheatsheet","url":"/guides/react-cheatsheet#stop-create-react-app-development-server","content":"In your terminal, you can press Ctrl+C on your keyboard to stop create-react-app (DON'T just close the terminal! It will not stop the server) "},{"title":"Definitions​","type":1,"pageTitle":"React Cheatsheet","url":"/guides/react-cheatsheet#definitions","content":"(see also https://reactjs.org/docs/glossary.html) Term\tDefinitionReact\tA library that is used to build UI components React DOM\tA library used to bridge React into the DOM JSX\tA helper to write HTML-like syntax in Javascript create-react-app\tA tool to create a simple React app without having to setting up the scaffoldings manually Netlify\tA platform to deploy our web apps to the internet "},{"title":"Useful Links","type":0,"sectionRef":"#","url":"/guides/useful-links","content":"","keywords":""},{"title":"Front-end development​","type":1,"pageTitle":"Useful Links","url":"/guides/useful-links#front-end-development","content":"The Front-end Developer Handbookis an amazing resource containing everything related to front-end development. There's a lot here so only focus on the sections you want to learn.DevDocs is great for quickly finding documentationHTML Tag Periodic Table is an interesting way to visual all of the HTML tags in use on browsers. "},{"title":"Software craftsmanship​","type":1,"pageTitle":"Useful Links","url":"/guides/useful-links#software-craftsmanship","content":"You should code with theseprogramming principlesin mind. Focus on what's in the Generic section.decent-codeis a thorough guide on good programming practices to create quality codecommit-messages-guideis a guide on good practices for writing commit messages "},{"title":"Professionalism​","type":1,"pageTitle":"Useful Links","url":"/guides/useful-links#professionalism","content":"Don't Call Yourself A Programmer is a really excellent article which gives you advice on how to be professional and confident "},{"title":"Algorithms and data structures​","type":1,"pageTitle":"Useful Links","url":"/guides/useful-links#algorithms-and-data-structures","content":"bigocheatsheet.com — Big-O cheat sheetvisualgo.net — visualises data structures and algorithms through animation "},{"title":"Free developer resources​","type":1,"pageTitle":"Useful Links","url":"/guides/useful-links#free-developer-resources","content":"free-for.dev — contains a list of software that have free tiers for developerspublic-apis — contains a list of free APIs "},{"title":"Developer tools​","type":1,"pageTitle":"Useful Links","url":"/guides/useful-links#developer-tools","content":"Remote Tools — contains a list of tools useful in the life of a developerAwesome Design Tools — contains a big list of design tools "},{"title":"Surveys​","type":1,"pageTitle":"Useful Links","url":"/guides/useful-links#surveys","content":"Stack Overflow Developer Survey Results 2019State of JS 2019State of CSS 2019Screen Reader User Survey #7 Results "},{"title":"Games and quizzes​","type":1,"pageTitle":"Useful Links","url":"/guides/useful-links#games-and-quizzes","content":"CSS Diner — practice CSS selectorsFlexbox Froggy — practice CSS flexboxFlexbox Defence — practice CSS flexboxGrid Garden — practice CSS gridSQL Zoo — practice SQLSQL Bolt — practice SQLLearn Git branching — practice Git branchingFront End Web Development QuizJavaScript Web Quiz (advanced) "},{"title":"Overview","type":0,"sectionRef":"#","url":"/html-css/","content":"","keywords":""},{"title":"Coordination​","type":1,"pageTitle":"Overview","url":"/html-css/#coordination","content":"Coordination details for this module can be found on the Module Coordinator's page. "},{"title":"Module Coordinator","type":0,"sectionRef":"#","url":"/html-css/coordinator","content":"Module Coordinator note This page is currently being written. You are welcome to add any notes you have relevant for module coordinators.","keywords":""},{"title":"Building SCSS with VS Code","type":0,"sectionRef":"#","url":"/html-css/compile-scss-instructions","content":"Building SCSS with VS Code Create a file with a .scss extension. For example, skin.scss. Open the VS Code Extension manager, on the left. Search for the Easy SASS extension and install it. Click the &quot;Reload&quot; button. Edit your .scss file and save it. After saving your file, Easy Sass will create another file next to it, with a .min.css extension. This is the compiled code, ready to include in index.html. In your html, include the compiled code using a link tag. In the case of css-skin, replace skin.css with skin.min.css and remove the skin.css file, in order to avoid confusion.","keywords":""},{"title":"Coursework","type":0,"sectionRef":"#","url":"/html-css/week-1/homework","content":"","keywords":""},{"title":"Coursework Source of Truth...​","type":1,"pageTitle":"Coursework","url":"/html-css/week-1/homework#coursework-source-of-truth","content":"Is your Google Classroom, not here! Teachers and trainees, make sure you check your Google Classroom for latest updates. "},{"title":"Mandatory coursework​","type":1,"pageTitle":"Coursework","url":"/html-css/week-1/homework#mandatory-coursework","content":""},{"title":"1) 🔑 Create your own webpage (4 hours)​","type":1,"pageTitle":"Coursework","url":"/html-css/week-1/homework#1--create-your-own-webpage-4-hours","content":"Fork then clone the HTML/CSS week 1 coursework, and follow the instructions in the README.md file. "},{"title":"2) Begin the module project (6 hours)​","type":1,"pageTitle":"Coursework","url":"/html-css/week-1/homework#2-begin-the-module-project-6-hours","content":"The module project spans the whole module. Your task is to re-create a design from scratch, using your HTML and CSS skills, and improve it over this module. You have four weeks to develop this project, so plan your time wisely. You'll find all instructions in this repository:https://github.com/CodeYourFuture/HTML-CSS-Module-Project Before you start, make sure you fork the repository to your Github account. Open a pull request to submit your coursework. "},{"title":"3) CSS Grid (3 hours)​","type":1,"pageTitle":"Coursework","url":"/html-css/week-1/homework#3-css-grid-3-hours","content":"Complete this Scrimba course on CSS GridDon't just watch the videos! You won't really learn anything that way. Interact with the code and type it out.Take a screenshot of your progress on your dashboard https://scrimba.com/dashboard?tab=enrolled and submit this "},{"title":"4) Prepare for the next class (1 hour)​","type":1,"pageTitle":"Coursework","url":"/html-css/week-1/homework#4-prepare-for-the-next-class-1-hour","content":"You need to prepare for every class. The syllabus is a sample/guide lesson, so you might do something different in class, but the broad learning objectives will be similar. Read the learning objectives. What other reading can you do to prepare for class? Is there any code to checkout from github? CYF trainees must always come to class with questions. "},{"title":"5) Create a study schedule (PD - 1.5 hr)​","type":1,"pageTitle":"Coursework","url":"/html-css/week-1/homework#5-create-a-study-schedule-pd---15-hr","content":"Over the next months you will have lots of coursework to complete! How will you manage it all? Create a study schedule. This activity will give you practice using Google sheets to create and maintain a schedule. Go to the link below and do the course. Completed the quiz at the end of the course. We will be able to see your responses.Create a goal setting worksheet here Extensions (optional):Choose one or more of the extensions to further enhance your study schedule. "},{"title":"6) Learn how to use Google Doc and Slides (PD - 1 hr)​","type":1,"pageTitle":"Coursework","url":"/html-css/week-1/homework#6-learn-how-to-use-google-doc-and-slides-pd---1-hr","content":"The goal is for you to be comfortable using Google Doc and Google Slides, which you will use a lot in your professional life. Go to g.co/AppliedDigitalSkillsClick &quot;Sign in&quot; in the top rightSign in with your Google account, or create a new oneClick &quot;I am a student&quot;Click &quot;Join a class&quot; and enter class code: qchyygStart the Communicate Effectively at Work courseDo lessons &quot;4 - Communicate Ideas in a Proposal&quot; and &quot;5. Present Information About Your Job&quot;Share the links to the exercises of both lessons Use this applied digital skills course to help you with your communication skills. "},{"title":"Stretch coursework​","type":1,"pageTitle":"Coursework","url":"/html-css/week-1/homework#stretch-coursework","content":""},{"title":"1) Complete Flexbox Froggy game​","type":1,"pageTitle":"Coursework","url":"/html-css/week-1/homework#1-complete-flexbox-froggy-game","content":"Complete the Flexbox Froggy game to practise using flexbox. "},{"title":"2) CSS Diner game​","type":1,"pageTitle":"Coursework","url":"/html-css/week-1/homework#2-css-diner-game","content":"Complete the CSS Diner game to practise using advanced CSS selectors. "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/html-css/week-1/instructors","content":"","keywords":""},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-1/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. The Module Gardeners, who lead this module globally, keep an eye on this channel. cyf-module-html-css For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Trainees Prior Knowledge​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-1/instructors#trainees-prior-knowledge","content":"Trainees come to this class having already built several small web pages with HTML and CSS in the Intro to Digital course and having completed at least some of FreeCodeCamp Responsive Web Design Certification. All trainees should have prepared for class with a recap course: HTML CSS Crash Course This means that this lesson is a level setting and expectation setting session. If it is obvious that your trainees already understand the concepts that you are covering, you are encouraged to move quickly through the content and spend your time on the main instructor-led theme of the lesson: structuring data with semantic HTML. "},{"title":"Overview​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-1/instructors#overview","content":"This outline provides tips to help mentors guide trainees to the best answers or outcomes for the lesson topics and exercises. "},{"title":"The HTML section​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-1/instructors#the-html-section","content":"This is an opportunity for any trainees who are struggling to get another pass at the basics. Even if it seems like some trainees get it quickly, try not to rush through this section. "},{"title":"HTML Structure exercise​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-1/instructors#html-structure-exercise","content":"When conducting the parent/child tags exercise, don't forget to point out that the first &lt;p&gt; tag is both a parent and a child. "},{"title":"Example HTML/CSS Project exercise​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-1/instructors#example-htmlcss-project-exercise","content":"Why don't we put everything in one file? Discuss: Keeping data separate from displayKeeping code organised into manageable partsWorking in large teams with narrow skill-sets "},{"title":"Semantic HTML exercise​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-1/instructors#semantic-html-exercise","content":"HTML elements with the following classes should receive the following semantic tags: .site-header -&gt; &lt;header&gt;.navbar -&gt; &lt;nav&gt;.primary-content -&gt; &lt;main&gt;.article -&gt; &lt;article&gt; (check in primary column and sidebar).sidebar-content -&gt; &lt;aside&gt;.site-footer -&gt; &lt;footer&gt; Who benefits when we write &quot;semantic&quot; HTML? Search engines, anyone with a visual impairment who uses a screen reader. Reinforce the distinction between data and display. Data should be meaningful regardless of display. "},{"title":"CSS Selectors​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-1/instructors#css-selectors","content":"Trainees may need more or less review depending on how much they remember from their application process. If trainees are struggling with the basics, have them go through this CSS Introduction course, starting with the CSS Syntax lesson. Mentors should help guide them through and identify where they're struggling. Trainees should set the button background color using the .btn-primary selector, and adjust the white button using the .btn-secondary selector. If they use the .btn selector, they'll affect both buttons. When they do that, use it as a lesson in how classes in CSS work and how to choose the right selector. "},{"title":"Box Model​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-1/instructors#box-model","content":"For the second exercise, the answer will look something like this: .nav-link { border: 1px solid transparent; } .nav-link:hover, .nav-link:focus { border-color: #ce5f31; }  "},{"title":"Content Layout: Flexbox​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-1/instructors#content-layout-flexbox","content":"This lesson is really just intended to get them a bit familiar with flexbox, media queries and thinking about different viewports when doing their layouts. Make sure that trainees are not relying on Bootstrap's grid when completing these exercises. Make sure they're only using flexbox in min-width media queries, and that they're applying sensible class naming patterns and wrapping elements where necessary. When they add a background and border to the &quot;Learn More&quot; articles, make sure they're adding padding so the text doesn't go right up to the edge. If they are using px units, nudge them towards em and explain that em is often preferred because it scales well when you need to change font size for different viewports. "},{"title":"Coursework​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-1/instructors#coursework","content":"When checking their use of flexbox in their webpage, make sure they're using gutters where appropriate and that they're using the kinds of design patterns you would expect to see on a website (ie - items line up, text is proportionate, etc). "},{"title":"Learning Objectives","type":0,"sectionRef":"#","url":"/html-css/week-1/learning-objectives","content":"","keywords":""},{"title":"HTML​","type":1,"pageTitle":"Learning Objectives","url":"/html-css/week-1/learning-objectives#html","content":" Can answer: Why is it important to build accessible websites? Can: Identify the kinds of users who browse the web, including blind and disabled users. Can: Identify the kinds assistive technologies some users use to browse the web, including screen readers. "},{"title":"HTML Anatomy​","type":1,"pageTitle":"Learning Objectives","url":"/html-css/week-1/learning-objectives#html-anatomy","content":" Can answer: What is an HTML tag? Can answer: What is an HTML attribute? Can answer: What is an HTML element? Can: identify opening and closing tags. Can: identify attribute names and attribute values. "},{"title":"HTML Structure​","type":1,"pageTitle":"Learning Objectives","url":"/html-css/week-1/learning-objectives#html-structure","content":" Can answer: What are parent and child elements? Can: identify parent and children elements. Can: identify first child of an element. Can: write a simple HTML fragment, correctly observing syntax when nesting one tag within another. e.g. &quot;Create an article which contains a h2 header and two p (paragraph) elements.&quot; [detail the text that the tags should include] Can: recognise when elements are incorrectly nested, in a short HTML extract. "},{"title":"Semantic HTML​","type":1,"pageTitle":"Learning Objectives","url":"/html-css/week-1/learning-objectives#semantic-html","content":" Can answer: What is semantic HTML? Can answer: What are some semantic HTML tags we can use for the main sections of a typical web page? Can answer: What are some semantic HTML tags we can use for text content? Can answer: What attribute must we use with every &lt;img&gt; tag? "},{"title":"CSS​","type":1,"pageTitle":"Learning Objectives","url":"/html-css/week-1/learning-objectives#css","content":""},{"title":"CSS Anatomy​","type":1,"pageTitle":"Learning Objectives","url":"/html-css/week-1/learning-objectives#css-anatomy","content":" Can answer: What is a CSS selector? Can answer: What is a CSS property? Can answer: What is a CSS value? Can answer: What is a CSS declaration? Can: identify a CSS selector Can: identify a CSS property Can: identify a CSS value Can: identify a CSS declaration "},{"title":"CSS Units​","type":1,"pageTitle":"Learning Objectives","url":"/html-css/week-1/learning-objectives#css-units","content":" Can answer: What are some common CSS units? Can answer: What is the difference between absolute and relative CSS units? Can answer: Should we prefer absolute or relative CSS units, and why? "},{"title":"CSS Selectors​","type":1,"pageTitle":"Learning Objectives","url":"/html-css/week-1/learning-objectives#css-selectors","content":" Can answer: What is the difference between a type, class, and ID selector? "},{"title":"CSS Box Model​","type":1,"pageTitle":"Learning Objectives","url":"/html-css/week-1/learning-objectives#css-box-model","content":" Can answer: What is the CSS box model? Can answer: What CSS properties modify the box model? Can answer: What is the difference between block and inline boxes? Can answer: What are some HTML block elements and HTML inline elements? Can answer: What CSS property do we use to change whether the element is a block or inline? "},{"title":"CSS Inheritance, Cascade and Specificity​","type":1,"pageTitle":"Learning Objectives","url":"/html-css/week-1/learning-objectives#css-inheritance-cascade-and-specificity","content":" Can answer: What is inheritance? Can answer: What is cascade? Can answer: What is specificity? "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/html-css/week-2/homework","content":"","keywords":""},{"title":"Coursework Source of Truth...​","type":1,"pageTitle":"Coursework","url":"/html-css/week-2/homework#coursework-source-of-truth","content":"Is your Google Classroom, not here! Teachers and trainees, make sure you check your Google Classroom for latest updates. "},{"title":"Mandatory coursework​","type":1,"pageTitle":"Coursework","url":"/html-css/week-2/homework#mandatory-coursework","content":""},{"title":"1) Forms, Data, Validation, and Devtools 🔑 (4 hours)​","type":1,"pageTitle":"Coursework","url":"/html-css/week-2/homework#1-forms-data-validation-and-devtools--4-hours","content":"Design a form to collect your data. Choose form controls to help you validate the inputs. Evaluate your work with Devtools. https://github.com/CodeYourFuture/HTML-CSS-Challenges/tree/main/Form-Controls For this project, you will need to make decisions yourself and explore your own code with Devtools. What blockers will you encounter? How will you get help to solve them? Come to class with questions. "},{"title":"2) Complete the Bikes For Refugees project​","type":1,"pageTitle":"Coursework","url":"/html-css/week-2/homework#2-complete-the-bikes-for-refugees-project","content":"Use flexbox to complete the Bikes For Refugees project if you did not complete this in class. "},{"title":"3) Design Basics (1.5 hours)​","type":1,"pageTitle":"Coursework","url":"/html-css/week-2/homework#3-design-basics-15-hours","content":"Take this free introduction to UX/UI on Scrimba: https://scrimba.com/learn/design "},{"title":"4) Module Project (8 hours)​","type":1,"pageTitle":"Coursework","url":"/html-css/week-2/homework#4-module-project-8-hours","content":"https://github.com/CodeYourFuture/HTML-CSS-Module-Project/tree/master/level-2 Submitting your work​ Create a new branch for level 2Remember to commit and push your code often.Once you're ready to submit your work for review, do a final push and create a Pull Request. Note: If you've added your code to the same branch you were using last week, then it will just update your original Pull Request and you won't need a new PR. "},{"title":"5) Prepare for next class (.5 hours)​","type":1,"pageTitle":"Coursework","url":"/html-css/week-2/homework#5-prepare-for-next-class-5-hours","content":"You need to prepare for every class. The syllabus is a sample lesson, so you might do something different in class, but the broad learning objectives will be similar. Read the learning objectives. What other reading can you do to prepare for class? Is there any code to checkout from github? "},{"title":"6) Active listening techniques (PD - 1 hr)​","type":1,"pageTitle":"Coursework","url":"/html-css/week-2/homework#6-active-listening-techniques-pd---1-hr","content":"Read the active listening techniques on the link below and reflect. Write a 250 word essay on your own listening habits, challenges and improvement goals. Active listening doc "},{"title":"Stretch coursework​","type":1,"pageTitle":"Coursework","url":"/html-css/week-2/homework#stretch-coursework","content":""},{"title":"1) Complete the Zoo CSS challenge​","type":1,"pageTitle":"Coursework","url":"/html-css/week-2/homework#1-complete-the-zoo-css-challenge","content":"Use flexbox to complete the Zoo CSS challenge. "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/html-css/week-2/instructors","content":"","keywords":""},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-2/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-html-css For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Resources​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-2/instructors#resources","content":"Bootstrap Demo "},{"title":"Articles​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-2/instructors#articles","content":"What is design system - Please scroll the bottom for explanation in the FAQs "},{"title":"Quizzes​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-2/instructors#quizzes","content":"HTML/CSS Quick Quiz - 19/05/2020 Created by Scotland and Nate HTML/CSS Quick Quiz - 18/04/2020 Created by Manchester and Anthony Tran "},{"title":"Overview​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-2/instructors#overview","content":"This outline provides tips to help mentors guide trainees to the best answers or outcomes for the lesson topics and exercises. "},{"title":"Open-source HTML/CSS Frameworks​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-2/instructors#open-source-htmlcss-frameworks","content":"Using the Navbar color schemes, use the browser's dev tools to show how changing the navbar classes in the example website changes the look based on Bootstrap. Using the Card example, try to illustrate the way tags are nested inside of each other in a specific hierarchy. Emphasise the practice of paying close attention to documentation and picking up on minor details. "},{"title":"Personal Websites​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-2/instructors#personal-websites","content":"The goal of this exercise is to identify trainees who are struggling to keep up. Try to identify where a trainee is struggling: Can they find their files quickly?Are they using the command line when appropriate?Do they understand how their HTML and CSS interact?Do they seem to understand syntax, or are they writing code in the wrong place? If you find a trainee who is struggling with any of these basics, try to work through them together, then give them a short assignment where they need to do something on their own. There will be several trainees who have the basics down. If they do, push them on some of the higher-level abstract concepts, like re-usable HTML/CSS components, and using CSS specificity cleverly (eg - basic and primary buttons). Beyond that, let them read up on HTML Forms (links in the resources), do some of the advanced suggestions in the syllabus, or challenge them to read and implement BEM naming syntax. "},{"title":"Retrospective​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-2/instructors#retrospective","content":"Try to use a tool such as MetroRetro to facilitate this discussion. It is very important to reinforce the fact tha criticizing the course makes us better. Remind the trainees that there are 100s of trainees coming after them at CodeYourFuture - every bit of critical feedback makes us better for them. You can prompt them with questions such as: What did you not understanding for the module?What else do you with you learnt?What do you wish we did more of?What do you with we did less of? "},{"title":"Learning Objectives","type":0,"sectionRef":"#","url":"/html-css/week-2/learning-objectives","content":"","keywords":""},{"title":"Forms​","type":1,"pageTitle":"Learning Objectives","url":"/html-css/week-2/learning-objectives#forms","content":" Can answer: what are HTML forms used for? "},{"title":"Form controls​","type":1,"pageTitle":"Learning Objectives","url":"/html-css/week-2/learning-objectives#form-controls","content":" Can answer: what form controls can we use when we want the user to enter text Can answer: what form controls can we use when we want the user to choose a single option from a list Can answer: what form controls can we use when we want the user to choose multiple options from a list Can: identify the type of form input likely in use in a sample form Can: select the correct form inputs when building a simple form "},{"title":"Labels​","type":1,"pageTitle":"Learning Objectives","url":"/html-css/week-2/learning-objectives#labels","content":" Can answer: why are labels necessary? Can answer: in which ways do form control labels benefit users? Can answer: how do we associate a label with a form control? Can answer: how do we give a group of radio or checkbox inputs a label Can answer: why are text input placeholders bad? "},{"title":"Form validation​","type":1,"pageTitle":"Learning Objectives","url":"/html-css/week-2/learning-objectives#form-validation","content":" Can answer: what are some attributes we can use for form validation? "},{"title":"Form submission​","type":1,"pageTitle":"Learning Objectives","url":"/html-css/week-2/learning-objectives#form-submission","content":" Can answer: in which ways can we submit a form? Can answer: how can we submit a form to a web server? "},{"title":"Form security​","type":1,"pageTitle":"Learning Objectives","url":"/html-css/week-2/learning-objectives#form-security","content":" Can answer: what should we never trust in software? "},{"title":"Devtools​","type":1,"pageTitle":"Learning Objectives","url":"/html-css/week-2/learning-objectives#devtools","content":" Can: manually locate the source of a specific piece of text from a page's rendered view in the source HTML, for a simple case. Can: use the browser's inspector to automatically locate the corresponding source for a given element of the rendered view. Can: discover the current box model attributes of an element, using the inspector. "},{"title":"Developer thinking​","type":1,"pageTitle":"Learning Objectives","url":"/html-css/week-2/learning-objectives#developer-thinking","content":" Can participate in live coding "},{"title":"HTML/CSS - 1","type":0,"sectionRef":"#","url":"/html-css/week-1/lesson","content":"","keywords":""},{"title":"Contents​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#contents","content":"ContentsLearning ObjectivesHTML/CSS ProjectWho uses the web?What makes a web page?What is HTML? HTML AnatomyHTML Structure Semantic HTML Sectioning ContentText ContentImage ContentTabular Content What is CSS? CSS AnatomyCommon CSS propertiesCSS UnitsCSS SelectorsCSS Box Model CSS Inheritance, Cascade and Specificity InheritanceCascadeSpecificity Flexbox Display elements in a rowDisplay elements in a columnSpace out elements equally in a rowSpace out elements equally in a columnAlign elements in a rowAlign elements in a column PD (Developer communication)CourseworkFurther LearningFeedback "},{"title":"Learning Objectives​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#learning-objectives","content":"Learning objectives for this lesson can be found on the Learning Objectives page  "},{"title":"HTML/CSS Project​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#htmlcss-project","content":"In today's class, we will begin adapting styles on the Bikes for Refugees project. We'll review some of the HTML/CSS basics you already encountered during your application process and learn some new concepts. Fork the repository to your personal account and then clone the repository. "},{"title":"Who uses the web?​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#who-uses-the-web","content":"Exercise (10 minutes) As a group, let's think of everyone that uses the web. What kinds of people use the web?How might their experiences be different? As web developers, we don't build websites for ourselves—we build them for our users. Therefore, it is our responsibility to build websites that can be used by all users of the web. These include: Users that are blind or have low visionUsers that are colourblindUsers with mobility impairmentUsers that are deaf or have hearing loss To aid using the web, these users might use assistive technologies. These include: Screen readers, which is software that reads out content on the screen to the user.Screen magnification software, which enlarges the content on the screen for the user to see better.Speech input software, which allows the user to perform commands using their voice instead of a mouse and keyboard. Creating accessible websites is important for users with disabilities and users that use assistive technologies so they can access the same content as able-bodied users. This is especially important when the website provides an essential service, such as one through a government website. In this module, we will learn some of the ways to make websites accessible. "},{"title":"What makes a web page?​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#what-makes-a-web-page","content":" A web page consists of three programming languages: HTML, CSS, and JavaScript. They define the structure (HTML), presentation (CSS), and behaviour (JavaScript) of the page. Separation of Concerns: In computer science, separation of concerns (SoC) is a design principle for separating a computer program into distinct sections, such that each section addresses a separate concern. (Wikipedia) Principles: During the course, we will highlight principles that apply to the specific topic but also to Computer Science and Programming in general. It is important to understand these principles, terms and apply them to your thinking in general. Exercise (5 minutes) In the Bikes for Refugees project, spend a few minutes exploring the .html and .css files. Why don't we put everything in one file? "},{"title":"What is HTML?​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#what-is-html","content":"HTML (HyperText Markup Language) is the language used to create documents that are displayed on web browsers. It gives structure and meaning to content by using tags such as &lt;h1&gt; and &lt;p&gt; to describe headings and paragraphs of text. "},{"title":"HTML Anatomy​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#html-anatomy","content":" An HTML element is made up of tags, attributes, and content. A tag is the HTML element name enclosed in angle brackets &lt;p&gt; is the opening tag&lt;/p&gt; is the closing tag An attribute comes after the HTML element name within the angle brackets class=&quot;text&quot; is the attributeclass is the attribute nametext is the attribute value The content is the part of the code in between the opening and closing tags Welcome to lesson 1 is the content Exercise (1 minute) All together, let's review the basic syntax in the following example. Which parts are the elements, tags, attributes, and content? &lt;article&gt; &lt;h1&gt;Learning HTML&lt;/h1&gt; &lt;p&gt;Get to know the HTML basics.&lt;/p&gt; &lt;a href=&quot;http://html5rocks.com&quot;&gt;Read Article&lt;/a&gt; &lt;/article&gt;  "},{"title":"HTML Structure​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#html-structure","content":"Every HTML document has the same base structure, shown in the code example below. &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;title&gt;My web page&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;article&gt; &lt;h1&gt;Learning HTML&lt;/h1&gt; &lt;p&gt;Get to know the HTML basics.&lt;/p&gt; &lt;a href=&quot;http://html5rocks.com&quot;&gt;Read Article&lt;/a&gt; &lt;/article&gt; &lt;/body&gt; &lt;/html&gt;  The html element declares that it is an HTML document, and contains a head and body element. The head contains data about the web page, such as the name of the page (My web page) and the text encoding (UTF-8).The body contains the content which is shown in the browser. HTML tags are arranged in a hierarchy. This is sometimes called nesting tags or creating an HTML tree. Between the opening &lt;article&gt; tag and the closing &lt;/article&gt; tag there are three other tags. We call these child tags, because they have a parent-child relationship.  Exercise (5 minutes) As a group, let's try to name all of the parent and child tags in the following example. &lt;article&gt; &lt;h1&gt;Learning HTML&lt;/h1&gt; &lt;p&gt; &lt;span class=&quot;author&quot;&gt;Author:&lt;/span&gt; &lt;a href=&quot;http://codeyourfuture.io&quot;&gt;Code Your Future&lt;/a&gt; &lt;/p&gt; &lt;p&gt;Get to know the HTML basics.&lt;/p&gt; &lt;a href=&quot;http://html5rocks.com&quot;&gt;Read Article&lt;/a&gt; &lt;/article&gt;  "},{"title":"Semantic HTML​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#semantic-html","content":"Semantic HTML is the use of HTML markup to reinforce the semantics, or meaning, of the information in webpages and web applications rather than merely to define its presentation or look. Wikipedia When writing HTML code, we can use different tags to describe the content. Is it a navigation menu, a paragraph of text, or an article? By using the correct tag, we help search engines like Google or screen readers for the visually impaired understand the content better. When possible, we should use semantic HTML instead of generic HTML like &lt;div&gt; and &lt;span&gt;. The following four sections cover different types of semantic HTML we can use. If you want to view all semantic HTML elements, visit the MDN HTML elements reference page. tip When creating a web page, we should always think about how to structure the content using semantic HTML first, then think about the styling afterwards. "},{"title":"Sectioning Content​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#sectioning-content","content":"We can put groups of content that make up areas of a web page inside 'sectioning' elements. These split the page up into named sections that help to organise the page's structure.  The image above shows a common layout of a web page. We can use specific HTML elements for each of these sections. We can use a &lt;header&gt; element for the header contentWe can use a &lt;footer&gt; element for the footer contentWe can use a &lt;main&gt; element for the main content of the pageSidebar content can go inside an &lt;aside&gt; elementIf there is a list of links, for example within the &lt;header&gt; of a page, they can go inside a &lt;nav&gt; element Additionally, we can use &lt;article&gt; and &lt;section&gt; to divide these sections into more sections. tip Use these sectioning HTML elements in every website you build. This lets screen reader users jump to these sections of the website quickly. "},{"title":"Text Content​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#text-content","content":"For text we mainly use these block and inline elements. &lt;h1&gt; to &lt;h6&gt; for headings There should be only one &lt;h1&gt; element on the page, and we shouldn't skip levels &lt;p&gt; for paragraphs of text&lt;ul&gt; and &lt;ol&gt; for lists &lt;ul&gt;, unordered list for items not in any particular order&lt;ol&gt;, ordered list for lists where the order matters &lt;em&gt; for emphasis&lt;strong&gt; to indicate importance, seriousness or urgency "},{"title":"Image Content​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#image-content","content":"We can use &lt;img&gt; to display images on our page. Every &lt;img&gt; element must have an alt attribute which describes the image. This is important so that if the image does not load or if the user is using a screen reader, users can still understand the image content. If the image is not important because it is only for decoration, we can provide an empty alt (alt=&quot;&quot;) to indicate this. &lt;!-- Image with a description --&gt; &lt;img src=&quot;sleepy-cat.jpg&quot; alt=&quot;A sleeping cat&quot; /&gt; &lt;!-- Image for decoration --&gt; &lt;img src=&quot;decorative-image.jpg&quot; alt=&quot;&quot; /&gt;  "},{"title":"Tabular Content​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#tabular-content","content":"We can use &lt;table&gt; and its related tags to display tabular content. Below is a table with a caption, along with the HTML code that creates it. Family member ages Name\tAgeKehinde\t25 Chadwick\t27 &lt;table&gt; &lt;caption&gt; Family member ages &lt;/caption&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Age&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Kehinde&lt;/td&gt; &lt;td&gt;29&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Chadwick&lt;/td&gt; &lt;td&gt;27&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;  Exercise 1 (10 minutes) Paired Programming Challenge Work in pairs to determine where the following tags should be used instead in the Bike for Refugees index.html file. &lt;header&gt;&lt;footer&gt;&lt;main&gt;&lt;nav&gt;&lt;article&gt;&lt;aside&gt; Who benefits when we write semantic HTML? Exercise 2 (10 minutes) Paired Programming Exercise Work in pairs to determine what changes we should make to the code below to make it more semantic. Semantic means 'meaningful'. &lt;div&gt;Pancake recipe&lt;/div&gt; &lt;div src=&quot;pancakes-with-syrup.jpg&quot; /&gt; &lt;div&gt;A quick and easy recipe to make pancakes!&lt;/div&gt; &lt;div&gt;Ingredients&lt;/div&gt; &lt;div&gt; &lt;div&gt;175g flour&lt;/div&gt; &lt;div&gt;3 eggs&lt;/div&gt; &lt;div&gt;450ml milk&lt;/div&gt; &lt;div&gt;Sunflower oil&lt;/div&gt; &lt;/div&gt; &lt;div&gt;Method&lt;/div&gt; &lt;div&gt; &lt;div&gt;Add the flour, eggs, and milk to a bowl&lt;/div&gt; &lt;div&gt;Whisk the mixture and set it aside for half an hour&lt;/div&gt; &lt;div&gt;Heat a pan and add some sunflower oil&lt;/div&gt; &lt;div&gt;Add some of the mix to the pan and cook for a few minutes&lt;/div&gt; &lt;div&gt;Flip and cook the other side until done, then serve&lt;/div&gt; &lt;/div&gt;  Exercise 3 (10 minutes) Solo exercise Create a table that contains your favourite food and where it comes from. It should have two columns: the first column should contain the name of the dish, and the second column should contain the country of origin. You can create the table on https://codepen.io/pen/ if you wish. "},{"title":"What is CSS?​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#what-is-css","content":"CSS (Cascading Style Sheets) is the language used to modify the style of the HTML document. "},{"title":"CSS Anatomy​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#css-anatomy","content":" A CSS rule is made up of selectors, properties, and values. A selector describes which HTML elements to style h1 is the selector A property is the specific style to apply font-size is the property A value is the value for the property 1.5rem is the value A declaration is the combination of the property and value font-size: 1.5rem; is the declaration A rule is the combination of the selector and its declarations h1 { font-size: 1.5rem; } is the rule Exercise (1 minute) All together, let's review the basic syntax in the following example. Which parts are the rules, selectors, properties, values, and declarations? h1, h2, h3, h4, h5, h6, p { color: #333; margin-bottom: 2rem; } .box { border: 1px solid #333; }  "},{"title":"Common CSS properties​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#common-css-properties","content":"A typical web page contains text structured into headings and paragraphs. We can use CSS to modify the styling of text. Some common CSS properties are shown in the following example: body { font-family: Arial, serif; font-size: 1rem; font-weight: normal; line-height: 1.5; background-color: white; color: black; }  Exercise (10 minutes) Paired Programming Exercise In the Bikes for Refugees project, work in pairs to make the Donate Now and Donate a bike todaybuttons on the page an orange-red #c05326 colour, and make the Volunteer button white #fffwith orange-red #c05326 text. Leave the border for now. "},{"title":"CSS Units​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#css-units","content":"When we measure objects in real life we might use centimeters or inches. CSS also uses measurement units like these. There are two types of units: absolute and relative units. Absolute units are always the same size, even when the user zooms in on the browser.Relative units are based on the size of something else, such as the font size or viewport size. When the user zooms in the browser, elements using relative units will increase in size too. The following table contains some of the most commonly used CSS units. Common CSS units Unit\tRelative or absolute\tDescriptionrem\tRelative\t1rem is equal to the font size of the root element. If the root font size is 16px, then 1rem = 16px and 0.5rem = 8px em\tRelative\t1em is equal to the font size of the parent element. If the parent font size is 16px, then 1em = 16px and 0.5em = 8px %\tRelative\t100% is equal to the full width or height of the parent element px\tAbsolute\t1px is 1/96th of 1 inch The following code example shows how these units are typically used. body { font-size: 16px; } h1 { font-size: 2rem; } h2 { font-size: 1.5rem; } .sidebar { padding: 1rem; width: 25%; }  If you want to view all CSS units, visit the MDN CSS values and units page. Exercise (5 minutes) All together, let's review what each of the values in the previous code example mean. "},{"title":"CSS Selectors​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#css-selectors","content":"We target or select HTML elements with CSS Selectors. The selector comes before the ruleset. ExerciseClues Exercise (5 minutes) Go around the room and name a selector each until you run out. To view all CSS selectors, visit the MDN CSS selectors page. tip There are many selectors, but professionals typically avoid using type, ID, and combinators, as well as the style attribute. Exercise (10 minutes) Paired Programming Exercise In the Bikes for Refugees project, work in pairs and use pseudo classes to make the background color of all buttons change to the darker colour #934423 when in a &quot;hover&quot; and &quot;focus&quot; state. Test that it works by hovering over all buttons with your mouse, and by using the Tab key to focus on each button. "},{"title":"CSS Box Model​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#css-box-model","content":"In CSS, everything is a box. An image is a box. A link is a box. The following diagram shows what the box model looks like.  The content is the text or image and it has a border. Inside the border there is space called padding, and outside the border there is space called margin. We can modify these properties using CSS like in the following example. .content { border-width: 1px; border-style: solid; border-color: black; margin-top: 1rem; margin-right: 1rem; margin-bottom: 1rem; margin-left: 1rem; padding-top: 0.5rem; padding-right: 1rem; padding-bottom: 0.5rem; padding-left: 1rem; }  Instead of typing out each property, we can use shorthand properties for border, margin, and padding so we can make the code more concise. .content { /* width | style | color */ border: 1px solid black; /* Apply to all four sides */ margin: 1rem; padding: 1rem; /* vertical | horizontal */ margin: 0.5rem 1rem; padding: 0.5rem 1rem; /* top | right | bottom | left */ margin: 1rem 0.5rem 2rem 0.25rem; padding: 1rem 0.5rem 2rem 0.25rem; }  We can also modify the width and height of the content like in the following example. .square { height: 10rem; width: 10rem; }  Exercise 1 (20 minutes) In the Bikes for Refugees project, work in pairs and: Use the padding property to add some more horizontal space inside the navigation links in the header.Use the padding property to add more space inside all buttons.Use the border property to remove the border from all buttons.For bonus points, you can use the border-radius property to make the corners of the buttons rounded. Block and Inline Boxes​ We can think of CSS as having two types of boxes: block boxes and inline boxes. Block boxes take up the whole width of its container and stack on top of each other vertically.Inline boxes are only as wide as its content and flow next to each other horizontally. In other words they go along in a line.  Block and inline boxes have a few more differences, which if you're not aware of can make it difficult to understand why inline elements are not being styled as expected. The following table describes the differences between the two in more detail. Block versus inline boxes Block\tInlineDoes it start on a new line?\tYes, block elements start on a new line\tNo, inline elements continue on the same line Does it take up the full width?\tYes, block elements extend to take up the full width\tNo, inline elements are only as wide as its content How does width and height work?\tThey work as expected for block elements\tThey do not work for inline elements How does padding, margin, and border work?\tThey work as expected for block elements, and push other boxes away\tHorizontal padding, margin, and border work as expected, and push other boxes away. Vertical padding, margin, and border work as expected but do not push other boxes away. HTML elements are either block or inline elements. Common block elements\tCommon inline elementsh1 to h6\ta p\timg ul, ol and li\tbutton form\tinput and select table\tlabel article and section\tstrong div\tspan To change the type of box, we can use the display CSS property like in the following example. /* Change the inline `img` element into a block */ img { display: block; } /* Change the block `li` element into an inline */ li { display: inline; }  If you want to view a list of all block and inline elements, visit theMDN block-level elements page andMDN inline-level elements page. "},{"title":"CSS Inheritance, Cascade and Specificity​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#css-inheritance-cascade-and-specificity","content":"In CSS, you can write many rules including ones that conflict with one another. How does CSS know when to apply rules and when to override them? It uses the concepts of inheritance, cascade, and specificity to figure it out. "},{"title":"Inheritance​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#inheritance","content":"Inheritance is where a CSS property is inherited by child elements. Some properties that are inherited are font, color, and line-height. This means we can set the color of text for the body as pink and all its descendent elements will have pink text. /* All descendent elements of `body` will have pink text because of inheritance */ body { color: pink; }  "},{"title":"Cascade​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#cascade","content":"In CSS, the stylesheets cascade which means that the order of the CSS rules matter. If we have two CSS rules that target the same element, then the one that comes last in the stylesheet is used. p { color: red; } /* Since this rule comes last, the `p` element will be blue and not red because of cascade */ p { color: blue; }  "},{"title":"Specificity​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#specificity","content":"Specificity is how CSS figures out which rule to use when different selectors are used for the same element. Selectors have different 'weights'. A rule with an ID selector is typically chosen over one with a class selector, which is typically chosen over one with a type selector. /* An ID selector has the highest specificity of these three rules, so the paragraph is orange */ #paragraph { color: orange; } /* Even though this rule comes after, the paragraph is not yellow because the ID selector has higher specificity */ .paragraph { color: yellow; } /* Even though this rule comes after, the paragraph is not green because the ID selector has higher specificity */ p { color: green; }  To read more about inheritance, cascade and specificity, visit the MDN Cascade and inheritance page. "},{"title":"Flexbox​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#flexbox","content":"Flexbox is a name for a set of CSS layout rules for laying out items in rows or columns. They allow you to apply rules to elements to place them side-by-side and re-arrange them. You just specify how you want your elements arranged and the browser will scale this arrangement depending on the screen size and device used for viewing. To add flexbox: Identify the elements you want to arrange in a certain way. For example, these three buttons: &lt;button&gt;Home&lt;/button&gt; &lt;button&gt;Gallery&lt;/button&gt; &lt;button&gt;Contact&lt;/button&gt; Make sure they're part of the same container: &lt;div class=&quot;menu&quot;&gt; &lt;button&gt;Home&lt;/button&gt; &lt;button&gt;Gallery&lt;/button&gt; &lt;button&gt;Contact&lt;/button&gt; &lt;/div&gt; Tell the container to use Flexbox to arrange all its children: .menu { display: flex; }  Once you have flexbox applied to the container you can start adding more rules to tell it exactly how the elements should be arranged. "},{"title":"Display elements in a row​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#display-elements-in-a-row","content":"Use flex-direction: row to display the child elements in a row. .menu { display: flex; flex-direction: row; }   "},{"title":"Display elements in a column​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#display-elements-in-a-column","content":"Use flex-direction: column to display the child elements in a column. .menu { display: flex; flex-direction: column; }   "},{"title":"Space out elements equally in a row​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#space-out-elements-equally-in-a-row","content":"Use justify-content: space-between to space out elements equally. This can be used when the elements are displayed in a row: .menu { display: flex; flex-direction: row; justify-content: space-between; /* or space-around */ }   "},{"title":"Space out elements equally in a column​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#space-out-elements-equally-in-a-column","content":"This can be used when the elements are displayed in a column: .menu { display: flex; flex-direction: row; justify-content: space-between; /* or space-around */ }   In the above 2 examples we used the same rule justify-content: space-between, but we changed flex-direction from row to column. Notice how justify-content works in the same direction as flex-direction. In the images above, the green arrow for justify-content is operating in the same direction as flex-direction. "},{"title":"Align elements in a row​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#align-elements-in-a-row","content":"Use align-items: center to align the child elements in the centre. This can be used when the elements are displayed in a row: .menu { display: flex; flex-direction: row; align-items: center; }   "},{"title":"Align elements in a column​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#align-elements-in-a-column","content":"This can be used when the elements are displayed in a column: .menu { display: flex; flex-direction: column; align-items: center; }   While justify-content works in the same direction as flex-direction, align-items works the opposite way! Have a close look at the above images—the green arrow is opposite to the yellow flex-direction one. If you want to view all flexbox rules, visit the A Guide To Flexbox article. Exercise (20 minutes) Continue editing the &quot;Bike for refugees&quot; website by adding 3 boxes below Jumbotron, and using Flexbox, make sure they are arranged like in the sketch below: You can start with something like the below, by just adding a container, and the 3 text pieces within it. Try to use flexbox to position the text elements within the container to match the picture: &lt;div&gt; &lt;!-- CONTAINER START --&gt; &lt;div&gt;Check availability&lt;/div&gt; &lt;div&gt;Donate bikes&lt;/div&gt; &lt;div&gt;Volunteer with us&lt;/div&gt; &lt;/div&gt; &lt;!-- CONTAINER END --&gt; Once that's done you can move on to creating boxes for each individual text piece, and again, using flexbox to position the text piece in the middle of its box. Exercise (5 minutes) Let's take a break from flexbox for a minute. Do you remember the :first-child pseudo class? There's a :last-child pseudo class as well. See if you can use these pseudo classes to give the left box a grey background (#ddd) and the right box a grey border (1px solid #ddd). "},{"title":"PD (Developer communication)​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#pd-developer-communication","content":"Session objective: In this section we'll explore how a professional developer uses technical language to communicate to different audiences. Exercise (20 min) Exercise objective: To explain concepts to different audiences In small groups. Prepare a 3 min tutorial based on what you have learned so far. Address one of the three different audiences: A group of 10 year oldsYour bossA peer group at a similar level to you The tutorial should explain the following: Why is it important to build accessible websites?What is an HTML tag?What is semantic HTML?What is the CSS box model? Exercise (30 min) Exercise objective: To practice public speaking skills Volunteer to present back to the class. Exercise (10 min) Exercise objective: To reflect on tasks and identify strengths Reflect on what you found challenging and share one positive feedback to the wider group. "},{"title":"Coursework​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#coursework","content":"Visit the Coursework page to view the coursework for this lesson. "},{"title":"Further Learning​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#further-learning","content":"If you want to learn about box-sizing and why the default is changed for many websites, read this CSS Tricks article.If you want to learn how to add a title and favicon to a webpage, visit the MDN Metadata in HTML page. "},{"title":"Feedback​","type":1,"pageTitle":"HTML/CSS - 1","url":"/html-css/week-1/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/html-css/week-3/homework","content":"","keywords":""},{"title":"Coursework Source of Truth...​","type":1,"pageTitle":"Coursework","url":"/html-css/week-3/homework#coursework-source-of-truth","content":"Is your Google Classroom, not here! Teachers and trainees, make sure you check your Google Classroom for latest updates. "},{"title":"Mandatory coursework​","type":1,"pageTitle":"Coursework","url":"/html-css/week-3/homework#mandatory-coursework","content":""},{"title":"1) 🔑 Cakes and Co (10 hours)​","type":1,"pageTitle":"Coursework","url":"/html-css/week-3/homework#1--cakes-and-co-10-hours","content":"Follow the instructions in this repo to create your own Cakes company website. Fork then clone https://github.com/CodeYourFuture/HTML-CSS-Coursework-Week3Follow the instructions in the README.md file. "},{"title":"2) Module Project: Code review (3 hours)​","type":1,"pageTitle":"Coursework","url":"/html-css/week-3/homework#2-module-project-code-review-3-hours","content":"https://github.com/CodeYourFuture/HTML-CSS-Module-Project Learning to read and review other people's code is a key skill for a developer. When you join a new team, you will usually also join an existing codebase, and you will need to be able to read it. If you've never looked at code written by other people, you will find this really challenging (it's already hard!). Do the Github Lab course in reviewing pull requestsAsk for a code review from a colleague on your Karma project.Complete a code review for a colleague on their Karma project. You don't need to have completed the entire project to get code review. You can ask for help with something specific. "},{"title":"3) Module Project: Responsive (3 hours)​","type":1,"pageTitle":"Coursework","url":"/html-css/week-3/homework#3-module-project-responsive-3-hours","content":"Work through Level 3 and make your Karma clone responsive. "},{"title":"4) Prepare for next class (0.5 hours)​","type":1,"pageTitle":"Coursework","url":"/html-css/week-3/homework#4-prepare-for-next-class-05-hours","content":"You need to prepare for every class. The syllabus is a sample lesson, so you might do something different in class, but the broad learning objectives will be similar. Read the learning objectives. What other reading can you do to prepare for class? Is there any code to checkout from github? "},{"title":"5) Developing a growth mindset as a developer (PD - 1 hr)​","type":1,"pageTitle":"Coursework","url":"/html-css/week-3/homework#5-developing-a-growth-mindset-as-a-developer-pd---1-hr","content":"Task 1: Reflection Write your reflections on on why it is important to have a growth mindset as a developer and how a growth mindset will positively impact you in your career in the long term. Video 1: https://www.youtube.com/watch?v=_X0mgOOSpLU Task 2: Introspection Learn more about neuroplasticity (Watch, Hear, See). How can you change your brain? Is neuroplasticity, the biological foundation for growth mindset? Watch this Sentis Brain Animation Series video - https://youtu.be/ELpfYCZa87g Based on the information in the video reflect on these questions: When did I have a closed mindset this week, and why?When did I have an open mindset this week, and why? What have I learnt about myself, as a result? What will I do differently next time?  Task 3: Interaction Reflect on what your barriers are when it comes to participating in live coding, hold yourself accountable and write in the Slack channel about what actions you will take in order to overcome your barriers to participating in live coding and write a supportive message to your peers who have shared their barriers in the channel. "},{"title":"HTML/CSS - 2","type":0,"sectionRef":"#","url":"/html-css/week-2/lesson","content":"","keywords":""},{"title":"What will we learn today?​","type":1,"pageTitle":"HTML/CSS - 2","url":"/html-css/week-2/lesson#what-will-we-learn-today","content":"FormsPD - Active listening  "},{"title":"Learning Objectives​","type":1,"pageTitle":"HTML/CSS - 2","url":"/html-css/week-2/lesson#learning-objectives","content":"Learning objectives for this lesson can be found here  "},{"title":"Coursework review​","type":1,"pageTitle":"HTML/CSS - 2","url":"/html-css/week-2/lesson#coursework-review","content":"We open our class with live coding and group debugging using trainees' coursework as material. This session is an opportunity to work through common problems with coursework and also to demonstrate productive code review and debugging strategies. Use Devtools and live code. "},{"title":"Forms​","type":1,"pageTitle":"HTML/CSS - 2","url":"/html-css/week-2/lesson#forms","content":"On many websites, the user can enter data into the website. This is done using a web form, which contains form controls such as text input fields. In HTML, we create a form using the form element, and create input fields within it. "},{"title":"Form controls​","type":1,"pageTitle":"HTML/CSS - 2","url":"/html-css/week-2/lesson#form-controls","content":"HTML provides several form controls for us to use. Every form control must have a label and should have a name. tip Form controls don't inherit font styling in some browsers. We can make sure it uses the defined font by using the following CSS. button, input, select, textarea { font-family: inherit; font-size: 100%; }  Text input fields​ When we want the user to enter text, we can use a text input field in our form. We can use &lt;input type=&quot;text&quot;&gt; to create a single-line text input, like in the following example. &lt;input type=&quot;text&quot; /&gt;  Interactive example However, as a user, what are we supposed to enter here? There is no information to tell us what to enter! To provide this information, we use a label element. We: Create a label elementAdd an id to the inputAdd a for attribute with the same id to the label to connect it to the input &lt;label for=&quot;username&quot;&gt;Username&lt;/label&gt; &lt;input id=&quot;username&quot; type=&quot;text&quot; name=&quot;username&quot; /&gt;  Interactive example Username Now we can see that we are supposed to enter a username! We can also choose a different type other than text to suit our needs, such as type=&quot;password&quot; to show the input text as asterisks. If you want to view more input types, visit the MDN input types page. If we want the user to enter multiple lines, we can use &lt;textarea&gt; instead, like in the following example. &lt;label for=&quot;description&quot;&gt;Description&lt;/label&gt; &lt;textarea id=&quot;description&quot; cols=&quot;50&quot; rows=&quot;5&quot;&gt;&lt;/textarea&gt;  Interactive example Description Radio input fields​ When we want the user to select a single choice out of a list of options, we can use radio inputs in our form. We can use &lt;input type=&quot;radio&quot;&gt; to create a radio input, like in the following example. When creating a group of radio inputs, we should give each radio input the same name so we can indicate that each option is part of the same list. We can also use the checked attribute to make an option selected by default. &lt;input id=&quot;small&quot; type=&quot;radio&quot; name=&quot;size&quot; value=&quot;small&quot; /&gt; &lt;label for=&quot;small&quot;&gt;Small&lt;/label&gt; &lt;input id=&quot;medium&quot; type=&quot;radio&quot; name=&quot;size&quot; value=&quot;medium&quot; checked /&gt; &lt;label for=&quot;medium&quot;&gt;Medium&lt;/label&gt; &lt;input id=&quot;large&quot; type=&quot;radio&quot; name=&quot;size&quot; value=&quot;large&quot; /&gt; &lt;label for=&quot;large&quot;&gt;Large&lt;/label&gt;  Interactive example SmallMediumLarge However, as a user, what does small, medium and large refer to? Even though each radio input has a label, there is no information to tell us what our choice means! For a group of radio inputs, we can wrap the inputs in a fieldset with a legend to add a label to the group of inputs to give it meaning. &lt;fieldset&gt; &lt;legend&gt;Coffee size&lt;/legend&gt; &lt;input id=&quot;small&quot; type=&quot;radio&quot; name=&quot;size&quot; value=&quot;small&quot; /&gt; &lt;label for=&quot;small&quot;&gt;Small&lt;/label&gt; &lt;input id=&quot;medium&quot; type=&quot;radio&quot; name=&quot;size&quot; value=&quot;medium&quot; /&gt; &lt;label for=&quot;medium&quot;&gt;Medium&lt;/label&gt; &lt;input id=&quot;large&quot; type=&quot;radio&quot; name=&quot;size&quot; value=&quot;large&quot; /&gt; &lt;label for=&quot;large&quot;&gt;Large&lt;/label&gt; &lt;/fieldset&gt;  Interactive example Coffee size Small Medium Large Now we can see that we are choosing the size of a cup of coffee! tip Fieldsets are rendered with a black border by default. However, it is uncommon nowadays to see this style in forms. This does not mean we should use another HTML element instead for a different look. As we learned in lesson 1, we should always use the correct HTML structure, then use CSS afterwards to style our website. So when we create groups of inputs, we should always wrap them in a fieldset with legend, then use CSS to change the style to our desired look. Checkbox input fields​ When we want the user to toggle a choice, or select multiple choices out of a list of options, we can use checkbox inputs. We can use &lt;input type=&quot;checkbox&quot;&gt; to create a checkbox input, like in the following example. &lt;input id=&quot;agreement&quot; type=&quot;checkbox&quot; name=&quot;agreement&quot; /&gt; &lt;label for=&quot;agreement&quot;&gt;I agree you are the best mentor in CodeYourFuture&lt;/label&gt;  Interactive example I agree you are the best mentor in CodeYourFuture Like with radio inputs: When creating a group of checkboxes, we should give each checkbox the same name so we can indicate that each option is part of the same list.We should add a label to the group of checkbox inputs using fieldset and legend.We can make checkbox inputs checked by default by using the checked attribute. &lt;fieldset&gt; &lt;legend&gt;Fruit I like&lt;/legend&gt; &lt;input id=&quot;apples&quot; type=&quot;checkbox&quot; name=&quot;favourite-fruit&quot; value=&quot;apples&quot; /&gt; &lt;label for=&quot;apples&quot;&gt;Apples&lt;/label&gt; &lt;input id=&quot;bananas&quot; type=&quot;checkbox&quot; name=&quot;favourite-fruit&quot; value=&quot;bananas&quot; /&gt; &lt;label for=&quot;bananas&quot;&gt;Bananas&lt;/label&gt; &lt;input id=&quot;oranges&quot; type=&quot;checkbox&quot; name=&quot;favourite-fruit&quot; value=&quot;oranges&quot; /&gt; &lt;label for=&quot;oranges&quot;&gt;Oranges&lt;/label&gt; &lt;/fieldset&gt;  Interactive example Fruit I like Apples Bananas Oranges Select input fields​ When we want the user to select a single choice out of a list of options, we can use a select input in our form. We can use the select and option elements to create a dropdown of values for the user to select, like in the following example. We can also use the selected attribute to make an option selected by default. &lt;label for=&quot;cuisine&quot;&gt;Favourite cuisine&lt;/label&gt; &lt;select id=&quot;cuisine&quot; name=&quot;cuisine&quot;&gt; &lt;option value=&quot;scottish&quot; selected&gt;Scottish&lt;/option&gt; &lt;option value=&quot;italian&quot;&gt;Italian&lt;/option&gt; &lt;option value=&quot;french&quot;&gt;French&lt;/option&gt; &lt;option value=&quot;polish&quot;&gt;Polish&lt;/option&gt; &lt;option value=&quot;romanian&quot;&gt;Romanian&lt;/option&gt; &lt;option value=&quot;greek&quot;&gt;Greek&lt;/option&gt; &lt;option value=&quot;mexican&quot;&gt;Mexican&lt;/option&gt; &lt;option value=&quot;turkish&quot;&gt;Turkish&lt;/option&gt; &lt;option value=&quot;lebanese&quot;&gt;Lebanese&lt;/option&gt; &lt;option value=&quot;syrian&quot;&gt;Syrian&lt;/option&gt; &lt;option value=&quot;moroccan&quot;&gt;Moroccan&lt;/option&gt; &lt;option value=&quot;ethiopian&quot;&gt;Ethiopian&lt;/option&gt; &lt;option value=&quot;nigerian&quot;&gt;Nigerian&lt;/option&gt; &lt;option value=&quot;indian&quot;&gt;Indian&lt;/option&gt; &lt;option value=&quot;chinese&quot;&gt;Chinese&lt;/option&gt; &lt;option value=&quot;thai&quot;&gt;Thai&lt;/option&gt; &lt;option value=&quot;korean&quot;&gt;Korean&lt;/option&gt; &lt;option value=&quot;japanese&quot;&gt;Japanese&lt;/option&gt; &lt;/select&gt;  Interactive example Favourite cuisine ScottishItalianFrenchPolishRomanianGreekMexicanTurkishLebaneseSyrianMoroccanEthiopianNigerianIndianChineseThaiKoreanJapanese tip Both radio and select inputs allow the user to select one choice out of many. When do we know which one to use? A helpful guideline is if there are only a few options to choose from (less than 5), use radio inputs. If there are lots of options to choose from, use a select input. "},{"title":"Labels​","type":1,"pageTitle":"HTML/CSS - 2","url":"/html-css/week-2/lesson#labels","content":"Every form control must have a label. Firstly, this is important for users to see what they should enter into the form. Secondly, there are visually-impaired users that use screen readers to interact with websites. When screen reader users navigate to a form control, the screen reader reads out the label so the user can understand what to enter into the form. Without a label, the screen reader user does not get a description of what they are supposed to enter. There are two ways to associate a label with an input. The first way is by connecting the label and input using for and id as we have seen. This is the preferred way as it is more explicit. &lt;label for=&quot;username&quot;&gt;Username&lt;/label&gt; &lt;input id=&quot;username&quot; type=&quot;text&quot; name=&quot;username&quot; /&gt;  The second way is by wrapping the input within the label. &lt;label&gt; Username &lt;input type=&quot;text&quot; name=&quot;username&quot; /&gt; &lt;/label&gt;  It is also important that every group of radio and checkbox inputs is wrapped in a fieldset with a legend, which we've seen in the radio input fields section. Again, when screen reader users navigate to this group of inputs, they will understand what the website is asking them to choose. Another feature of labels is that the user can click on the label to activate the form control. This provides a larger clickable area to select the form control, and can be beneficial to users who have motor disabilities. tip It is quite common to add placeholders to text inputs. Adding only placeholders is bad practice, because it is not guaranteed to be read out by screen readers. Default styles for placeholders can also have poor colour contrast, which means visually-impaired users might not be able to read it. In summary, always give every form control a label. "},{"title":"Form validation​","type":1,"pageTitle":"HTML/CSS - 2","url":"/html-css/week-2/lesson#form-validation","content":"We can add attributes to our form controls to prevent the form from being submitted when there are invalid values. The following example demonstrates some of the attributes we can use. &lt;form&gt; &lt;label for=&quot;username&quot;&gt;Username that must be between 3 and 8 characters&lt;/label&gt; &lt;input id=&quot;username&quot; type=&quot;text&quot; minlength=&quot;3&quot; maxlength=&quot;8&quot; required /&gt; &lt;label for=&quot;email&quot;&gt;Email that is required&lt;/label&gt; &lt;input id=&quot;email&quot; type=&quot;email&quot; required /&gt; &lt;label for=&quot;password&quot; &gt;Password that can autocomplete with a suggested new password&lt;/label &gt; &lt;input id=&quot;password&quot; type=&quot;password&quot; autocomplete=&quot;new-password&quot; required /&gt; &lt;label for=&quot;age&quot;&gt;Age that must be between 18 and 118&lt;/label&gt; &lt;input id=&quot;age&quot; type=&quot;number&quot; min=&quot;18&quot; max=&quot;118&quot; required /&gt; &lt;label for=&quot;disabled&quot;&gt;Disabled input&lt;/label&gt; &lt;input id=&quot;disabled&quot; type=&quot;text&quot; value=&quot;You cannot click me&quot; disabled /&gt; &lt;label for=&quot;read-only&quot;&gt;Read-only input&lt;/label&gt; &lt;input id=&quot;read-only&quot; type=&quot;text&quot; value=&quot;You can only read my value&quot; readonly /&gt; &lt;button&gt;Submit&lt;/button&gt; &lt;/form&gt;  Interactive example Username that must be between 3 and 8 characters Email that is required Password that can autocomplete with a suggested new password Age that must be between 18 and 118 Disabled input Read-only input Submit If you want to view more input attributes, visit the MDN input attributes page. "},{"title":"Form submission​","type":1,"pageTitle":"HTML/CSS - 2","url":"/html-css/week-2/lesson#form-submission","content":"Finally, to let the user submit the form, we can add a button within the form element. A button within a form will submit it.Pressing the Enter key when on a form control within a form will also submit it. To prevent a button from submitting the form, we can add type=&quot;button&quot; to the button. &lt;form&gt; &lt;label for=&quot;search&quot;&gt;Search&lt;/label&gt; &lt;input id=&quot;search&quot; type=&quot;text&quot; /&gt; &lt;button&gt;I will submit the form&lt;/button&gt; &lt;button type=&quot;button&quot;&gt;I will not submit the form&lt;/button&gt; &lt;/form&gt;  Interactive example SearchI will submit the formI will not submit the form Websites typically handle form submissions in one of two ways. They will either: Send the form to the web server, orHandle the form using JavaScript. Server-side form submission​ To tell the form to submit itself to the server, we need to provide it with action and method attributes. action tells the browser which URL to submit the form tomethod tells the browser what type of request it is. Usually this is either a GET (asking for something) or a POST (updating something) request. GET and POST requests will be covered in more detail in the JavaScript module. The form values are converted into key-value pairs and are sent along in the request. In the following example, if we type in codeyourfuture into the input field and submit the form, the browser will send the q=codeyourfuture key-value pair to https://duckduckgo.com in the format https://duckduckgo.com?q=codeyourfuture. &lt;form action=&quot;https://duckduckgo.com&quot; method=&quot;get&quot;&gt; &lt;label for=&quot;search&quot;&gt;Search&lt;/label&gt; &lt;input id=&quot;search&quot; type=&quot;submit&quot; name=&quot;q&quot; /&gt; &lt;button&gt;Search DuckDuckGo&lt;/button&gt; &lt;/form&gt;  Interactive example SearchSearch DuckDuckGo Exercise (30 minutes) Create a form that performs a search on GitHub. It should: Make a GET request to https://github.com/searchHave a dropdown to select how the results should be sort by, with the name as s and possible values as stars, forks and updated.Have a set of radio options for the sort order, with name as o and possible values as desc and ascHave a search input field with name as q If you want to open the search results in a new tab, you can add target=&quot;_blank&quot; to the form. Client-side form submission​ If we want to handle the form using JavaScript instead, we don't add action and method attributes. Instead, we can use addEventListener to execute JavaScript on submission of the form. Additionally, we can use FormData or the Constraint Validation API to help us when working with forms. However, as we haven't covered JavaScript yet, don't worry about this right now. We'll cover it later in the course. "},{"title":"Form security​","type":1,"pageTitle":"HTML/CSS - 2","url":"/html-css/week-2/lesson#form-security","content":"Forms are one way in which users can enter data to a website. However, this also means that malicious users can enter malicious data into your website to try to break it or compromise it! In software, we follow the rule that we never trust user input. Learning about web security is outside the scope of this module, but if you want an introduction to web security, visit the MDN website security page. "},{"title":"PD (Active listening)​","type":1,"pageTitle":"HTML/CSS - 2","url":"/html-css/week-2/lesson#pd-active-listening","content":"Session objective: This section explores active listening techniques, good listenings habits and offers tips for better listening skills. Exercise (10 min) Exercise objective: Identify feelings resulting from passive listening Group splits into two (A &amp; B)Bs leave the room and wait outsideInstruction for As: Whilst listening to their partner, As will put their hand up for five seconds everytime their partner says something that evokes As 'inner voice' (e.g. they want to ask a question, makes them think about something etc.). They do this for the entire conversation. They are not allowed to interact with Bs; ask questions, affirm understanding, etc. They just raise their hand every time their inner voice kicks in.Instruction for Bs: Bs will speak to As about something of interest to themselves; an experience, last holiday, anything positive that has happened in the last six months. They have three minutes to talk.Bs come back into the room, each trainee from group B pairs up with another trainee from group As.Bs talk for three minutes to their pairs.At the end of the three minutes groups switch, and they repeat the exercise the other way around.At the end of the second three minutes, trainees discuss how they felt while talking or listening to their pairs, and what emotions were evoked. Active listening slides Exercise (15 min) Exercise objective: To reflect on learning and come up with practical ideas for communication challenges Step 1: Write down in bullet points how you can build trust within a team Step 2: Write down in bullet points how you will show empathy and concern for others Step 3: Write down how you will seek clarity if someone in your group is not clear, and clarify when someone has misunderstood what you are trying to say Step 4: Write down three open-ended questions which will help you to de-escalate a conflict in your group When completed, volunteer to present your ideas to the class. "},{"title":"Coursework​","type":1,"pageTitle":"HTML/CSS - 2","url":"/html-css/week-2/lesson#coursework","content":"Click here to view the coursework for this lesson. "},{"title":"Feedback​","type":1,"pageTitle":"HTML/CSS - 2","url":"/html-css/week-2/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/html-css/week-3/instructors","content":"","keywords":""},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-3/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-html-css For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Presentations​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-3/instructors#presentations","content":"Week 2 - Responsive Design [Google Slides] - 28/05/2020 Created by Birmingham Week 2 - Flexbox &amp; Media Queries [Google Slides] - 28/05/2020 Created by Birmingham "},{"title":"Overview​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-3/instructors#overview","content":"This outline provides tips to help mentors guide trainees to the best answers or outcomes for the lesson topics and exercises. "},{"title":"Articles​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-3/instructors#articles","content":"History of Responsive Web DesignMost Common ViewPort Sizes "},{"title":"Responsive Web Design​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-3/instructors#responsive-web-design","content":"Devices to brainstorm together: PhonesTabletsLaptopsDesktop computersGaming consoles (Playstation/Xbox)Apple WatchSmart devices (fridges, washing machines, TVs)Screen readersCrawlers (search engines) Use this list to illustrate the range of device sizes we build for. Reinforce the separation between data and display. "},{"title":"Media Queries​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-3/instructors#media-queries","content":"When completing the exercises, make sure they use a &quot;mobile-first&quot; technique. They shouldn't shrink the text on small screens, but enlarge it on bigger screens. /* Don't */ @media (max-width: 480px) { .jumbotron .display-3 { font-size: 3rem; } } /* Do */ .jumbotron .display-3 { font-size: 3rem; } @media (min-width: 480px) { .jumbotron .display-3 { font-size: 4.5rem; } }  When completing the second exercise, make sure they're only modifying the buttons in the jumbotron. The button in the header shouldn't be effected. "},{"title":"Learning Objectives","type":0,"sectionRef":"#","url":"/html-css/week-3/learning-objectives","content":"","keywords":""},{"title":"Responsive web design​","type":1,"pageTitle":"Learning Objectives","url":"/html-css/week-3/learning-objectives#responsive-web-design","content":" Can: identify a diverse set of devices for the web (phone, tablet, laptop, desktop, tv, game console, etc.) Can answer: What is responsive web design? Can answer: what are some ways we might want to have a layout change as we reduce or increase screen size? "},{"title":"Media queries​","type":1,"pageTitle":"Learning Objectives","url":"/html-css/week-3/learning-objectives#media-queries","content":" Can answer: What is a media query? Can answer: When would you use a media query? Can answer: How can I test how a website looks on different screen sizes? "},{"title":"Flexbox​","type":1,"pageTitle":"Learning Objectives","url":"/html-css/week-3/learning-objectives#flexbox","content":" Can answer: What is flexbox? Can answer: When would you use flexbox? Can answer: What are the different ways to arrange elements using flexbox? Can answer: In what ways can you position individual items using flexbox? "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/html-css/week-4/homework","content":"","keywords":""},{"title":"Coursework Source of Truth...​","type":1,"pageTitle":"Coursework","url":"/html-css/week-4/homework#coursework-source-of-truth","content":"Is your Google Classroom, not here! Teachers and trainees, make sure you check your Google Classroom for latest updates. "},{"title":"1) 🔑 Recreate a design (10 hours)​","type":1,"pageTitle":"Coursework","url":"/html-css/week-4/homework#1--recreate-a-design-10-hours","content":"Choose one of the designs listed in the readme. Re-create the design to perfection, using CSS Grid, and media queries to make the site fully responsive. https://github.com/CodeYourFuture/HTML-CSS-Coursework-Week4 "},{"title":"2) Record a Goose (3 hours)​","type":1,"pageTitle":"Coursework","url":"/html-css/week-4/homework#2-record-a-goose-3-hours","content":"A mission of discovery for you. Go to https://record-a-goose.onrender.com/Using Devtools, Lighthouse, and the WAVE accessibility plugin, find all the ways this app is brokenHow would you fix the problems? Discuss in the channel (in threads, please!) "},{"title":"3) Prepare for the next class (2 hours)​","type":1,"pageTitle":"Coursework","url":"/html-css/week-4/homework#3-prepare-for-the-next-class-2-hours","content":"Next lesson, we will be going back to learning about JavaScript. Review what you've learnt so far to prepare yourself for the next lesson. You should always prepare for class and not passively wait for things to be explained to you. As a professional, you will need to learn things on your own and answer questions that do not have answers yet. Begin developing this skill now. Keep working through FreeCodeCamp and find some gaps in your knowledgeHave a call with other trainees to discuss the things you are working onPrepare at least two questions about basic JavaScript to bring to class You should always read through the next lesson, in preparation for class. For JS-1 you need to complete this prep:https://syllabus.codeyourfuture.io/js-core-1/preparation "},{"title":"4) Join Codewars​","type":1,"pageTitle":"Coursework","url":"/html-css/week-4/homework#4-join-codewars","content":"Join Codewars https://www.codewars.com/join You will complete at least three kata a week, every week, for the rest of the course. A kata is a short coding workout and you should aim to spend twenty minutes, three times a week, doing kata. Read this tutorial and code along with the example kata: https://docs.codeyourfuture.io/course-processes/running-the-course/codewarsLink your account with Github, and join the CodeYourFuture clan, so we can find you on the clan board here: https://www.codewars.com/users/CodeYourFuture/following).Add your Codewars name to the Trainee Info form for your class. It should be the same as your Github name. By the end of JS1, you will have completed at least nine kata. Codewars is not just to practice JavaScript, it's to practice time management and study skills, so don't put this off. "},{"title":"5) Read Intro To Tests​","type":1,"pageTitle":"Coursework","url":"/html-css/week-4/homework#5-read-intro-to-tests","content":"https://syllabus.codeyourfuture.io/guides/intro-to-tests Make sure you read all of this guide - it will be very helpful in getting you to understand tests and helping you with setting up your homework repos. Make notes on what you learn. "},{"title":"6) Using critical thinking to remain inclusive as a developer (PD - 1.5 hr)​","type":1,"pageTitle":"Coursework","url":"/html-css/week-4/homework#6-using-critical-thinking-to-remain-inclusive-as-a-developer-pd---15-hr","content":"Companies are very interested in the data provided by Apply Magic Sauce. Automated language analysis is already being used in the hiring of personnel. Click on the link below for the source of this information. Apply Magic Sauce is an alternative machine interpretation of one’s personality based on the analysis of how a person writes a sentence in an email or the types of content they like on social media. This is great when it gets the personality traits 99% accurate. But what if it goes horribly wrong and ruins lives? Choose one thing that Apply Magic Sauce can do that you don't like (or like the least). Describe what it is and say why you don't like it (250 words). Below are three scenarios for you to contemplate: What if the software wrongfully judges and jeopardises a person’s career without their knowledge?Are humans unable to think for themselves and do they have to rely on machines to form a non-holistic opinion?Are civilians expected to be on guard at all times and be careful of what they say and how they comment a post or tweet in a censored cyber world where everything is traceable and nothing is ever really erased? Additional article "},{"title":"HTML/CSS - 3","type":0,"sectionRef":"#","url":"/html-css/week-3/lesson","content":"","keywords":""},{"title":"Contents​","type":1,"pageTitle":"HTML/CSS - 3","url":"/html-css/week-3/lesson#contents","content":"Responsive Web DesignMedia QueriesGridPD - Delivering tutorials  "},{"title":"Learning Objectives​","type":1,"pageTitle":"HTML/CSS - 3","url":"/html-css/week-3/lesson#learning-objectives","content":"Learning objectives for this lesson can be found here "},{"title":"Coursework review (45 minutes)​","type":1,"pageTitle":"HTML/CSS - 3","url":"/html-css/week-3/lesson#coursework-review-45-minutes","content":"We open our class with live coding and group debugging using trainees' work as material. This session is an opportunity to work through common problems with coursework and also to demonstrate productive code review and debugging strategies. Use Devtools and live code. "},{"title":"Responsive Web Design​","type":1,"pageTitle":"HTML/CSS - 3","url":"/html-css/week-3/lesson#responsive-web-design","content":"When we build for the web, we're making websites that can be viewed in a phone, a laptop, a tablet and more. To ensure we're presenting a website that's easy to use on any device, we use Responsive Web Design techniques to modify how content is displayed depending on the viewport. See how much variety there is in viewport sizes. Exercise (5 minutes) As a group, let's brainstorm as many devices as we can think of which might access the websites we build. "},{"title":"Media Queries​","type":1,"pageTitle":"HTML/CSS - 3","url":"/html-css/week-3/lesson#media-queries","content":"As you learned in your homework assignment, media queries help us change the display of our content depending on the size of the viewport. Let's review what you learned and break down a media query: @media screen and (min-width: 900px) { body { background: red; } }  In this media query, we're assigning a red background color to the &lt;body&gt; element whenever the viewport is larger than 900px, and we're viewing on a screen. @media starts the media queryscreen tells it to apply these styles to screen displays. Other displays might be print, for when a webpage is being printed.(min-width: 900px) tells it to apply these styles when the viewport is larger than 900px Finally, we wrap all of our styles for this media query in brackets ({ and }), just like a CSS rule. Exercise (10 minutes) Working in pairs, reduce the size of the &quot;Bikes for Refugees&quot; text so that it fits on a small screen (320px). But make sure it increases in size on larger screens. Exercise (10 minutes) The two buttons in the jumbotron don't fit on the same line on small screens around 320px wide. Can you adjust their size so that they fit on the same line? "},{"title":"CSS Grid​","type":1,"pageTitle":"HTML/CSS - 3","url":"/html-css/week-3/lesson#css-grid","content":"Exercise (5 minutes) Open a web page. Everyone point to the grid. Now everyone circle a card component. You can use the annotations tool in Zoom or an extension like Annotate in person. Go around the room -- each person must circle a smaller component until you have reached single html tags. "},{"title":"What is CSS Grid?​","type":1,"pageTitle":"HTML/CSS - 3","url":"/html-css/week-3/lesson#what-is-css-grid","content":"CSS grid is a way to lay out both components and whole pages with CSS. We can define a layout grid, then slot child components into the grid wherever we want them, regardless of the HTML structure. It's a display property, so first we turn on the grid: display: grid;  Then we define the layout of the grid as a template. There are lots of ways to do this, but the simplest way is to do this with named areas so it's really clear what should go where. Let's imagine in our semantic html page we have a header, some navigation, some main content, a sidebar and a footer. We can describe that with grid: grid-template-areas: &quot;header header header&quot; &quot;nav nav sidebar&quot; &quot;main main sidebar&quot; &quot;footer footer footer&quot;;  tip CSS Grid areas, like all HTML elements, are always rectangles. To make more complicated shapes you must overlap areas. Exercise (1min) Draw around the words to create a wireframe layout. When you are designing your CSS grid, it helps to sketch the boxes first. The words make a layout template - a little map of where things will be placed on the page. This is a different kind of semantics. Instead of describing our code to a computer, we are describing it to our fellow coders. The computer doesn't understand these words at all. Exercise (10 minutes) Unlike the semantic HTML elements we discussed, where different tags are parsed in different ways by the browser, you could use any string of characters as a name in CSS Grid. But should you? What is the value and purpose of naming things clearly? Discuss your ideas in small groups. ======= "},{"title":"PD (Delivering tutorials)​","type":1,"pageTitle":"HTML/CSS - 3","url":"/html-css/week-3/lesson#pd-delivering-tutorials","content":"Session objective: In this section we'll continue exploring how to use the technical language to communicate to different audiences. Exercise (20 min) Exercise objective: To explain concepts to different audiences In small groups. Prepare a 3 min tutorial based on what you have learned so far to one of the four different audiences: A group of 10 year oldsPeople who are new internet usersYour bossA team of new developers The tutorial should explain the following: What are HTML forms used for?How do form control labels benefit users?Why are forms useful for different types of users? Exercise (30 min) Exercise objective: To practice public speaking skills Volunteer to present back to the class. Exercise (10 min) Exercise objective: To reflect on tasks and identify strengths Reflect on what you found challenging and share one positive feedback to the wider group. "},{"title":"Coursework​","type":1,"pageTitle":"HTML/CSS - 3","url":"/html-css/week-3/lesson#coursework","content":"Click here to view the coursework for this lesson. "},{"title":"Further Learning​","type":1,"pageTitle":"HTML/CSS - 3","url":"/html-css/week-3/lesson#further-learning","content":"There are other CSS layout techniques not covered in this lesson. To learn more about these other techniques, visit the following MDN pages. CSS positioning — this is still commonly used across the web.CSS grids — this is a recent addition to CSS. Flexbox is used for creating 1-dimensional layout; grid is used for creating 2-dimensional layout.CSS floats — this is not really used anymore, so it's not essential to know it. "},{"title":"Feedback​","type":1,"pageTitle":"HTML/CSS - 3","url":"/html-css/week-3/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Learning Objectives","type":0,"sectionRef":"#","url":"/html-css/week-4/learning-objectives","content":"","keywords":""},{"title":"Devtools​","type":1,"pageTitle":"Learning Objectives","url":"/html-css/week-4/learning-objectives#devtools","content":" Can distinguish the DOM API and the Accessiblity API "},{"title":"Developer thinking​","type":1,"pageTitle":"Learning Objectives","url":"/html-css/week-4/learning-objectives#developer-thinking","content":" Can participate in a retrospective Can ask for code review on a pull request Can complete a simple code review on a pull request "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/html-css/week-4/instructors","content":"","keywords":""},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-4/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-html-css For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Resources​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-4/instructors#resources","content":"Bootstrap Demo "},{"title":"Articles​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-4/instructors#articles","content":"What is design system - Please scroll the bottom for explanation in the FAQs "},{"title":"Quizzes​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-4/instructors#quizzes","content":"HTML/CSS Quick Quiz - 19/05/2020 Created by Scotland and Nate HTML/CSS Quick Quiz - 18/04/2020 Created by Manchester and Anthony Tran "},{"title":"Overview​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-4/instructors#overview","content":"This outline provides tips to help mentors guide trainees to the best answers or outcomes for the lesson topics and exercises. "},{"title":"Open-source HTML/CSS Frameworks​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-4/instructors#open-source-htmlcss-frameworks","content":"Using the Navbar color schemes, use the browser's dev tools to show how changing the navbar classes in the example website changes the look based on Bootstrap. Using the Card example, try to illustrate the way tags are nested inside of each other in a specific hierarchy. Emphasise the practice of paying close attention to documentation and picking up on minor details. "},{"title":"Personal Websites​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-4/instructors#personal-websites","content":"The goal of this exercise is to identify trainees who are struggling to keep up. Try to identify where a trainee is struggling: Can they find their files quickly?Are they using the command line when appropriate?Do they understand how their HTML and CSS interact?Do they seem to understand syntax, or are they writing code in the wrong place? If you find a trainee who is struggling with any of these basics, try to work through them together, then give them a short assignment where they need to do something on their own. There will be several trainees who have the basics down. If they do, push them on some of the higher-level abstract concepts, like re-usable HTML/CSS components, and using CSS specificity cleverly (eg - basic and primary buttons). Beyond that, let them read up on HTML Forms (links in the resources), do some of the advanced suggestions in the syllabus, or challenge them to read and implement BEM naming syntax. "},{"title":"Retrospective​","type":1,"pageTitle":"Instructor Notes","url":"/html-css/week-4/instructors#retrospective","content":"Try to use a tool such as MetroRetro to facilitate this discussion. It is very important to reinforce the fact tha criticizing the course makes us better. Remind the trainees that there are 100s of trainees coming after them at CodeYourFuture - every bit of critical feedback makes us better for them. You can prompt them with questions such as: What did you not understanding for the module?What else do you with you learnt?What do you wish we did more of?What do you with we did less of? "},{"title":"HTML/CSS - 4","type":0,"sectionRef":"#","url":"/html-css/week-4/lesson","content":"","keywords":""},{"title":"What will we learn today?​","type":1,"pageTitle":"HTML/CSS - 4","url":"/html-css/week-4/lesson#what-will-we-learn-today","content":"Putting it all togetherPD - Presentations  "},{"title":"Learning Objectives​","type":1,"pageTitle":"HTML/CSS - 4","url":"/html-css/week-4/lesson#learning-objectives","content":"Learning objectives for this lesson can be found here  "},{"title":"Coursework review (90 minutes)​","type":1,"pageTitle":"HTML/CSS - 4","url":"/html-css/week-4/lesson#coursework-review-90-minutes","content":"We open our class with live coding and group debugging using trainees' work as material. This session is an opportunity to work through common problems with coursework and also to demonstrate productive code review and debugging strategies. Use Devtools and live code. "},{"title":"Ship It (90 minutes)​","type":1,"pageTitle":"HTML/CSS - 4","url":"/html-css/week-4/lesson#ship-it-90-minutes","content":"We are going to build a site and deploy it to the internet, or 'Ship It', just like we did in Fundamentals. Many developers struggle with perfectionism. At CYF we challenge you to ship your code quickly and often, as this is the best way to improve your quality and your quantity. We will also use Devtools to run tests (Lighthouse Audit) on our websites and examine our code critically. Developers must test their work. Exercise Using the Deploying to Netlify Guide, deploy your: Bikes For Refugees projectKarma clone project "},{"title":"PD (Presentations)​","type":1,"pageTitle":"HTML/CSS - 4","url":"/html-css/week-4/lesson#pd-presentations","content":"Session objective: It's time to reflect on what you have learned and share it with each other. Exercise (20 min) Exercise objective: To work on a task as a team In small groups. Prepare a 3-min presentation. Your presentation must cover the following points: Why it is important to build accessible websites? You must cover who browses the web, and the different types of usersWhat form controls we use when we want the user to choose multiple options from a listThe difference between the DOM API and the Accessibility APIWhy it's important to be transparent as a developerWhy developers use pull requestsWhy we do a retro Exercise (30 min) Exercise objective: To practice public speaking skills Volunteer to present back to the class. Exercise (10 min) Exercise objective: To reflect on learnings and processes, to come up with suggestions Let's spend some time on a class retrospective for the this module. Discuss the following points: What we covered over the past weeksWhat parts we enjoyedWhat we will do differently in the next moduleWhat tips and tricks we can share with each otherWhat advice we would give to the next class  "},{"title":"Coursework​","type":1,"pageTitle":"HTML/CSS - 4","url":"/html-css/week-4/lesson#coursework","content":"The coursework for this lesson. "},{"title":"Further learning​","type":1,"pageTitle":"HTML/CSS - 4","url":"/html-css/week-4/lesson#further-learning","content":"There's much more we haven't covered in this module. Once you're comfortable with CSS, you can read up on the following topics which are used by a variety of software teams. BEM — this is a set of rules to improve the naming and structure of a project's CSSCSS transitions — this is used to create an animation from one state to anotherCSS animations — this is used to create looping animationsCSS custom properties — these are variables within CSS "},{"title":"Feedback​","type":1,"pageTitle":"HTML/CSS - 4","url":"/html-css/week-4/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Overview","type":0,"sectionRef":"#","url":"/js-core-1/","content":"","keywords":""},{"title":"Preparation​","type":1,"pageTitle":"Overview","url":"/js-core-1/#preparation","content":"Before starting this module, make sure you have completed all of the steps in the Preparation page. It is essential you complete all of the steps before you attend this module. "},{"title":"Content​","type":1,"pageTitle":"Overview","url":"/js-core-1/#content","content":"Week\tContentWeek 1\tHello world (of jS): variables, strings, types, numbers, statements, expressions, functions. Week 2\tLogic and Loops: booleans, conditionals, comparisons, operators. Introducing loops: for, for/of, do, do/while. Week 3\tLogic and Arrays: Truthy, falsy, null, and undefined. Arrays and looping over arrays. Week 4\tArray methods and higher order functions Week 1 Hello WorldVariablesTypesStringsNumbersStatements vs. ExpressionsFunctions Week 2 Functions (review)BooleansComparison OperatorsConditionalsLogical Operatorsif statementwhile loopdo/while loopfor loopfor/of loop Week 3 Truthy and falsyundefined and nullArraysLooping over arrays Week 4 Array methodsPassing function as an argumentArrow functionsMore array methods (the ones which take functions as arguments) "},{"title":"Coordination​","type":1,"pageTitle":"Overview","url":"/js-core-1/#coordination","content":"Coordination details for this module can be found on the Module Coordinator's page "},{"title":"JS1 Module Project","type":0,"sectionRef":"#","url":"/js-core-1/module-project/","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"JS1 Module Project","url":"/js-core-1/module-project/#overview","content":"The JS1 Module Project will appear here in due time... "},{"title":"Preparation","type":0,"sectionRef":"#","url":"/js-core-1/preparation","content":"","keywords":""},{"title":"1) Install a UNIX based operating system​","type":1,"pageTitle":"Preparation","url":"/js-core-1/preparation#1-install-a-unix-based-operating-system","content":"You probably already have this if you have done Fundamentals and Html/CSS. You probably already have this if you have done Fundamentals and Html/CSS. danger Code Your Future does not support Windows If you have a Mac or Linux machine already, you already have a UNIX based operating system. All CYF-supplied laptops run Mac OS or Linux. If you have your own machine and it runs Windows, you should already have set up a Linux partition after Fundamentals. If you have still not done this, you must do it now. We cannot support trainees using Windows. It takes too much time from everybody else. If you need help doing this, post in #cyf-ask-tech-stuff, or bring your laptop to a CYF co-working space to get support. It's normal to need help with this process. → Dual Boot on Windows "},{"title":"2) Install Node.js (30 minutes)​","type":1,"pageTitle":"Preparation","url":"/js-core-1/preparation#2-install-nodejs-30-minutes","content":"If you get stuck on any of the below or above instructions, please post in your class channel on Slack. "},{"title":"On Ubuntu​","type":1,"pageTitle":"Preparation","url":"/js-core-1/preparation#on-ubuntu","content":"Type ctrl + alt + T to open up the terminalCheck whether you already have NodeJS installed by runnning node -v, which should return a version number. If it does, you can skip the next steps.Install NodeJS and npm by copying and pasting the following into the terminal: sudo apt-get install -y curl &amp;&amp; curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash - &amp;&amp; sudo apt-get install -y nodejsCheck that you have successfully installed NodeJS by ensuring that the following command returns returns a version number e.g. &quot;v18.12.1&quot; node -v Check that you have successfully installed npm by ensuring that the following command returns a version number e.g. &quot;8.19.2&quot; npm -v "},{"title":"On Mac​","type":1,"pageTitle":"Preparation","url":"/js-core-1/preparation#on-mac","content":"Click cmd + spacebar and type &quot;Terminal&quot; to open up the terminalInstall Homebrew, which is a package manager for MacOS. Copy and paste the following command into your terminal: /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;Ensure that you have successfully installed Homebrew by typing brew -v in your terminal - you should get an output that says something like &quot;Homebrew &lt;version number&gt;&quot;Install NodeJS and npm by typing brew install node@18Check that you have successfully installed NodeJS by ensuring that the following command returns a version number e.g. &quot;v18.12.1&quot; node -v Check that you have successfully installed npm by ensuring that the following command returns a version number e.g. &quot;8.19.2&quot; npm -v "},{"title":"Module Coordinator","type":0,"sectionRef":"#","url":"/js-core-1/coordinator","content":"","keywords":""},{"title":"1) Preparation​","type":1,"pageTitle":"Module Coordinator","url":"/js-core-1/coordinator#1-preparation","content":"This module has some preparation work that should be set as coursework before the module starts You can find the preparation work here "},{"title":"2) Assessment​","type":1,"pageTitle":"Module Coordinator","url":"/js-core-1/coordinator#2-assessment","content":"All trainees will take an automated assessment on their entry to JS2. This module also has a personal 121 assessment available, which mentors can assign if it's useful to do so. 🔒 https://github.com/CodeYourFuture/JavaScript-Core-1-Assessment These assessments should be conducted one-on-one with a mentor (possibly the trainee's buddy). Each of the assessments has a rubric to help you evaluate the code. After completion, the trainee's score should be shared with the Tech Ed team. The aim of these assessments is: Work out how a trainee is doing 121Highlight trainees who are falling behind and require helpGet oversight of any common misconceptions in the class "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/js-core-1/week-1/instructors","content":"","keywords":""},{"title":"Before Teaching this Module​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-1/instructors#before-teaching-this-module","content":"Before you start teaching this module you must inform all trainees that there is preparation work to do. You can find the preparation material here. Be sure to assign all of the tasks to your trainees several days before you aim to teach. "},{"title":"Delivery Notes​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-1/instructors#delivery-notes","content":""},{"title":"Context​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-1/instructors#context","content":"This module takes us out of the browser for a few weeks and is trainees first exposure to actual javascript code, both of which might be challenging. It's worth spending time helping trainees to not feel too lost. "},{"title":"Flipped classroom recap/Q&A​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-1/instructors#flipped-classroom-recapqa","content":"The flipped classroom practice should have trainees Write and run (using node/the terminal inside of VS Code) their first single-line console.log programWrite and run multi-line console.log programUse the REPL to evaluate expressions (and define variables) stringslet variable + assigntemplate strings (preferred to using +)simple arithmetic operationscall functions that are part of standard javascript (e.g. Math)define functions and call them Write and call their own functionsMaybe run npm install and npm test (or this happens while doing coursework) Some questions/prompts that may be useful What does this program do? (show programs of varying degrees of complexity using console.log, strings, template strings, variables, function definitions and function calls)What does this expression evaluate to?What is the difference between an expression and a statement? (don't need to get too technical beyond &quot;does something&quot; vs &quot;evaluates to a value&quot;)What kinds of data types have we seen so far? (without getting too technical, &quot;string&quot;, &quot;number&quot;, maybe &quot;undefined&quot;)What is the difference between defining and calling a function?How do arguments in function calls and parameters in function definitions match up?Why/when do we use variables and functions?Discuss solutions to practice exercises (particularly 3.1 - don't get too bogged down in scope + global variables for now) "},{"title":"Giving Feedback to Each Other​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-1/instructors#giving-feedback-to-each-other","content":"For this exercise, you should open the Pull Request and share you screen. Elicit answers from the trainees based on what they've just read. You should only type what they say, try to let them take the lead. Important: Please delete the comments after you have finished the exercise so that another teachers can use it! "},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-1/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-js1 For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Presentations​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-1/instructors#presentations","content":"Week 1 Midweek Catch-up - JS Core 1 [Google Slides] - 01/05/2020 Created by Scotland and Richard Darby "},{"title":"Videos​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-1/instructors#videos","content":"Functions, Variables and Bees - An Introduction to JS1-1 Concepts Created by Scotland and Rares Matei "},{"title":"What worked well​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-1/instructors#what-worked-well","content":"Having all the exercises for the module in the js-exercises repo works well. "},{"title":"Things to improve​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-1/instructors#things-to-improve","content":"Array methods in syllabus seem outdated / not the most useful. e.g. setting a new array value using the [x] notation should be replaced with .push()Also suggest adding filter() to array methods section. Can we introduce arrow functions here? It is likely trainees will encounter this notation during their research, so it would be useful to cover this. "},{"title":"Other thoughts​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-1/instructors#other-thoughts","content":"Trainees confuse returns and console.logsIt's difficult for trainees to differentiate between variables the coder has created, and reserved words that are built into javascript. e.g. multiply() vs push()The Predicates section was spent mostly trying to grasp typeof. Not sure if this is just a good opportunity to teach typeof, or if it distracts from the point of the lesson i.e. predicates?Trainees make some confusions between the function definition and the function call during the tdd exercises. They try to reuse the values or the variables passed as parameters when calling the function inside the function itself. For Example, given the definition: function addOne(numbers) and the call: addOne(myArray), trainees try to use the name myArray inside the function or they think that the parameter in the function definition should be called myArray... "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/js-core-1/week-1/homework","content":"","keywords":""},{"title":"0) Flipped Classroom Practice (3h)​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-1/homework#0-flipped-classroom-practice-3h","content":"The video playlist contains 5 &quot;content&quot; videos and 3 &quot;practice&quot; videos. Here is an overview of the practice exercises: 1.1 Write a program that prints out to the console: Hello Code Your Future  1.2 Write a program that prints out to the console: Hello Maha Hello Megumi Hello Mohammad  2.0 Evaluate some expressions in the node REPL: The sum of any two numbersYour age this year (based on the difference between the current year and your year of birth)A string containing your nameA variable called name with your name assigned to itA template string using the name variable and a greeting in your language  2.1 Write a program that prints out to the console Hello Maha your place in the waiting list is 1 Hello Megumi your place in the waiting list is 2 Hello Mohammad your place in the waiting list is 3  Can you think how you could use variables to represent the greeting (hello) and the position in the waiting list (1, 2, 3)? 2.2 Maha has been taken off the waiting list. Modify your program so that it prints out to the console: Congratulations Megumi your place in the waiting list is 1 Congratulations Mohammad your place in the waiting list is 2  Did using variables make it easy or hard to make this change? 3.0 Write a program that contains a function called getAgeAtEndOf2023. The function should take a year of birth as an argument and return a person's age in 2023. Call this function multiple times to print out to the console: Greg will be 39 Mirabela will be 36  3.1 Modify the program you wrote in 2.1 so that it prints out the same result but uses a function called getWaitingListMessage 3.2 Modify the program you wrote in 3.1 so that it prints out to the console Hello Maha your place in the waiting list is 1 Hello Megumi your place in the waiting list is 2 Hello Mohammad your place in the waiting list is 3 Hello Margaret your place in the waiting list is 4 Hello Mohand your place in the waiting list is 5 Hello Mohib your place in the waiting list is 6 Hello Michael your place in the waiting list is 7  Did using a function make it easy or hard to make this change? "},{"title":"1) Read Intro to Tests​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-1/homework#1-read-intro-to-tests","content":"Make sure you read all of this guide by the end of this week (if you have not done so already). It will help you complete your coursework.Intro to Tests "},{"title":"2) JavaScript Challenges (4 hours) 🔑​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-1/homework#2-javascript-challenges-4-hours-","content":"Next, in the same repository, complete all of the exercises in the &quot;Mandatory&quot; folder. https://github.com/CodeYourFuture/JavaScript-Core-1-Coursework-Week1 "},{"title":"3) Read Google \"How to write code review comments\"​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-1/homework#3-read-google-how-to-write-code-review-comments","content":"How to write code review comments "},{"title":"4) Codewars (1 hour) 🔑​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-1/homework#4-codewars-1-hour-","content":"Join Codewars: www.codewars.com/r/3xvPTgRead through this tutorial, to help you understand how to use Codewars: https://docs.codeyourfuture.io/course-processes/running-the-course/codewarsLink your account with Github, and join the CodeYourFuture clan, so we can find you on the clan board here: https://www.codewars.com/users/CodeYourFuture/alliesEvery week you need to complete at least three kata. Spend at least 20 minutes, three times a week, on your kata workout. Find the collection for JS-1 Week 1 on the CodeYourFuture account: https://www.codewars.com/users/CodeYourFuture/authored_collections Codewars is one of your milestones. "},{"title":"5) (Stretch) Extra JavaScript Challenges​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-1/homework#5-stretch-extra-javascript-challenges","content":"Have some extra time before our next class? Fill it with these harder challenges to help you stretch your abilities! Alert: Some of these challenges might include concepts that we haven't taught you yet. You should us Google to try to learn how to solve them. https://github.com/CodeYourFuture/JavaScript-Core-1-Coursework-Week1 "},{"title":"6) (Stretch) Even more JavaScript Challenges​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-1/homework#6-stretch-even-more-javascript-challenges","content":"Completed all of the addition challenges in the coursework? We have more challenges that you can find here: https://github.com/CodeYourFuture/JavaScript-Core-1-Challenges Share what you're working on in Slack to find others working on the same problems. Try paired programming to solve these challenges. "},{"title":"7) (Stretch) FreeCodeCamp (1 hour)​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-1/homework#7-stretch-freecodecamp-1-hour","content":"Complete all of these lessons on FreeCodeCamp. This will help you get a deeper understanding of what we have covered so far. https://www.freecodecamp.org/learn Make sure you have completed the following lessons from the Basic JavaScript course: All the lessons starting at Comment Your JavaScript Code up to and including Find the length of a string "},{"title":"8) Course Checklist (PD - 15 min)​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-1/homework#8-course-checklist-pd---15-min","content":"Previous CYF trainees built the following course checklist to self-assess their understanding. Reflect on your understanding so far Fill in the course checklist for HTML/CSSTake the PDF to your study group and work on the areas you have identified You can use this checklist throughout the course. "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/js-core-1/week-2/homework","content":"","keywords":""},{"title":"0) Flipped Classroom Practice (3h)​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-2/homework#0-flipped-classroom-practice-3h","content":"The video playlist contains 4 &quot;content&quot; videos and one &quot;practice&quot; video for each content video. Here is an overview of the practice exercises: 1.1 Predict, evaluate and explain the following expressions in the node REPL true false true === false 5 == 2 + 4 4 * 5 == &quot;20&quot; 4 * 5 === &quot;20&quot; 3 * 2 === 6 4 = 4 let mhairiName = &quot;Mhairi&quot; let mhairiAge = 28 let isMhairOldEnoughToDrive = true &quot;hello Mhairi&quot; === `hello ${Mhairi}` `Mhairi is 28` === `mhairi is ${mhairiAge}` &quot;${mhairiName} is 28&quot; === `Mhairi is ${mhairiAge}` isMhairOldEnoughToDrive isMhairOldEnoughToDrive === true mhairiAge &gt;= 18 mhairiAge &gt;= 28 29 &lt;= mhairiAge typeof true typeof false typeof (5 === 2 + 3) typeof 7 typeof 7.234 typeof &quot;7&quot; typeof &quot;hello CYF&quot;  2.1 Write a program that defines a variable let eleniAge =  If Eleni is less than 18, the program should print out nothing to the console. If Eleni is 18 years old or older, the program should print out: Eleni is old enough to drive  2.2 Modify the program above so that if Eleni is less than 18 the program prints out: Eleni is not old enough to drive  3.1 Predict, evaluate and explain the following expressions in the node REPL false || false; true &amp;&amp; true; let cats = 2; let maximumCats = 5; let minimumCats = 3; cats &lt; maximumCats &amp;&amp; cats &gt; minimumCats; cats &gt;= maximumCats || cats &lt;= minimumCats; let hasEnoughCats = 3 &gt;= minimumCats; let hasDogs = true; hasEnoughCats &amp;&amp; hasDogs;  3.2 Write a program that prints out to the console whether Sharde can come into a bar. Sharde can come into the bar if she is 18, or if she is accompanied by an adult. How many different cases do you need to test to make sure your program is correct? 4.0 Write a program that prints out to the console the numbers from 3 to 7 (including both 3 and 7). Use a while loop. If you accidentally write a program that doesn't stop, press ctrl-c 3 4 5 6 7  4.1 Modify the program to also print out the sum of the numbers from 3 to 7 at the end 3 4 5 6 7 total: 25  4.2 Modify the program to only sum the multiples of 3 of the numbers from 3 to 7 Note that the expression to find out if a number is a multiple of 3 is n % 3 === 0. 3 4 5 6 7 total of multiples of 3: 9  5.1 (This is stretch practice - only do it if you have time) Write a program that prints out to the console the numbers from 1 to 10 (including both 1 and 10). 1 2 3 4 5 6 7 8 9 10  5.2 Modify your program so that multiples of 3 are replaced by the word &quot;Fizz&quot; 1 2 Fizz 4 5 Fizz 7 8 Fizz 10  5.2 Modify your program so that multiples of 5 are replaced by the word &quot;Buzz&quot; 1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz  Note that you can add multiple if clauses with else if: if (condition1) { //... } else if (condition2) { //... } else { //... }  5.3 Modify your program so that numbers that are both multiples of 3 and 5 are replaced by the word FizzBuzz. Also modify it so that it goes up to 20 instead of 10. 1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz 16 17 Fizz 19 Buzz  Pay special attention to the rows from 14 to 16. If you were successful, congratulations! This exercise has often been used to interview programmers to find out if they can actually code. (Historically, some students who come out of university with a Computer Science degree have not actually coded much. Others try to write the most efficient version immediately, instead of starting by writing code that works). "},{"title":"1) Review Solutions for Last Week's Coursework (45 minutes)​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-2/homework#1-review-solutions-for-last-weeks-coursework-45-minutes","content":"You should do this every week. We will stop reminding you soon as you get used to it. Once a week, someone with Maintainer access in your region will release the solutions to last week's coursework by giving repo access to your class team. Your class team is a child of Students and lives here: https://github.com/orgs/CodeYourFuture/teams/students/teams Once you have access to the solutions repo, review your work compared to the example solutions. There is a marking guide that talks through common mistakes. Which ones have you made? How will this help you identify what you need to practice more, and where you feel strong? Write down your target areas and take them to your buddy group. What does your mentor think? Do they agree with your assessment? "},{"title":"2) JavaScript Challenges (6 hours) 🔑​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-2/homework#2-javascript-challenges-6-hours-","content":"These exercises will help solidify your knowledge of JavaScript. Open the &quot;Mandatory&quot; folder and complete all of the challenges. https://github.com/CodeYourFuture/JavaScript-Core-1-Coursework-Week2 "},{"title":"3) Codewars (1 hour)​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-2/homework#3-codewars-1-hour","content":"https://docs.codeyourfuture.io/course-processes/running-the-course/codewars Every week you need to complete at least three kata. Spend at least 20 minutes, three times a week, on your kata workout. Find the collection for JS-1 Week 2 on the CodeYourFuture account: https://www.codewars.com/users/CodeYourFuture/authored_collections "},{"title":"4) Learn About the Terminal part 1 (4 hours)​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-2/homework#4-learn-about-the-terminal-part-1-4-hours","content":"Most developers spend a lot of time using something called the terminal. This week, you are going to begin a course to learn about the terminal - it has its own homework page here for you to work from. Do half this week and half next week. "},{"title":"5) (Stretch) Extra JavaScript Challenges​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-2/homework#5-stretch-extra-javascript-challenges","content":"Have some extra time before our next class? Fill it with these harder challenges to help you stretch your abilities. Alert: Some of these challenges include concepts that we haven't taught you yet. This is a common experience as a professional developer, so start learning how to handle it today. Use Google, talk to your network, share your blockers, and work the problem. https://github.com/CodeYourFuture/JavaScript-Core-1-Coursework-Week2 "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/js-core-1/week-2/instructors","content":"","keywords":""},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-2/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-js1 For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Flipped classroom recap/Q&A​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-2/instructors#flipped-classroom-recapqa","content":"The flipped classroom practice should have trainees Evaluate some boolean expression in the REPL true/false literalscomparisons with ==comparisons with ===comparisons with &lt;, &lt;=, &gt;, &gt;=logical operations to combine boolean expressions: &amp;&amp;, || Write and run programs using if statements without else clausewith else clause Write and run programs using while statementsSome exposure, but maybe not practiced: terminal commands (cd, pwd, )else if Some questions/prompts that may be useful What does this program do? (show programs of varying degrees of complexity using boolean expressions, conditionals and iteration to regulate summing and console.logging)What does this expression evaluate to, using boolean expressions?What kinds of data types have we seen so far? (without getting too technical, &quot;string&quot;, &quot;number&quot;, &quot;boolean&quot;, maybe &quot;undefined&quot;).What is the operator that allows us to figure out the type of some data.What is the difference between 9 &gt; 8 and 9 &gt; 8 === trueWhy/when do we use conditionalsWhy/when do we use iterationDiscuss solutions to practice exercises (particularly 3.2 as it asks how many test cases we should write) "},{"title":"Quiz​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-2/instructors#quiz","content":"Week 1 &amp; 2 Quiz - 19/05/2020 Created by Scotland Volunteers "},{"title":"Presentations (Out of date, for reference only)​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-2/instructors#presentations-out-of-date-for-reference-only","content":"Week 2 - JS Core 1 [Google Slides] - 01/05/2020 Created by Manchester Volunteers "},{"title":"Notes​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-2/instructors#notes","content":""},{"title":"JavaScript Core I - 1","type":0,"sectionRef":"#","url":"/js-core-1/week-1/lesson","content":"","keywords":""},{"title":"Contents​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#contents","content":"Hello WorldVariablesStringsNumbersStatements &amp; expressionsFunctionsPD - Agile development "},{"title":"Learning Objectives​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#learning-objectives","content":"By the end of this class, you should be able to: Use console.log() to print information to the consoleUse typeof to find the type of a variableAssign data to variables using let and constDefine what expressions and statements are and describe the differenceWrite and call functions in JavaScriptManipulate strings with concatenation and interpolation techniquesManipulate numbers with mathematical operators and using the Math libraryDefine the difference between console.log() and returnCall functions within functionsSearch and read documentation to help when you are stuckUse the Code Style Guide to give feedback on other trainees work  "},{"title":"Before you start​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#before-you-start","content":"Before you arrive at class you must have completed the following setup work. JavaScript Preparation If you are a teacher reading this, please check the Instructor Notes "},{"title":"Prerequisites​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#prerequisites","content":"Access to a Linux console (either on Mac, Ubuntu or by using Ubuntu WSL for Windows 10)VS Code running a default Linux terminalNodeJS must be installed To test, you can write node -v in your terminal and you should see something like v11.10.0. If you don't see this please talk to a teacher! "},{"title":"Hello World​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#hello-world","content":"It is programming tradition that the first thing you do in any language is make it output 'Hello world!'. We'll do this in JavaScript, using a command called console.log(). The console.log() method writes a message to the console. The console is a tool which is mainly used to log information - it's useful for testing purposes. "},{"title":"Exercise (10 minutes)​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#exercise-10-minutes","content":"Exercise (This exercise will help you understand how to run a basic JS script and explore the different ways you can run JS code) Create your first js1-week1.js scriptType console.log(&quot;Hello World!&quot;)There are 2 ways you can run this script - one way is by pressing F5 in your VS Code application. Can you find out what the second way is? Pair up and use a search engine to find out! Choose your favourite method and use that from now on. ::: BONUS: there is a third way of running JS code (notice how I haven't said scipt) - do you know what that is? "},{"title":"Exercise (5 minutes)​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#exercise-5-minutes","content":"Exercise (This exercise will help you expand your understanding of console.log) Write 10 statements like these, but in different languages. For example: Halo, dunia! // Indonesian Ciao, mondo! // Italian Hola, mundo! // Spanish  "},{"title":"Variables​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#variables","content":"When you write code, you'll want to create shortcuts to data values so you don't have to write out the same value every time. We can use a variable to create a reference to a value. Variables can be thought of as named containers. You can place data into these containers and then refer to the data simply by naming the container. Before you use a variable in a JavaScript program, you must declare it. Variables are declared with let and const keywords as follows. let greeting = &quot;Hello world&quot;; console.log(greeting);  const name = &quot;Irina&quot;; console.log(name);  The program above will print &quot;Hello world&quot; to the console. Notice how it uses the value assigned to the variable greeting. "},{"title":"Exercise (5 minutes)​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#exercise-5-minutes-1","content":"Exercise Add a variable greeting to js1-week1.js and assign a greeting of your choice to the variablePrint your greeting to the console 3 times. You should see your greeting 3 times on the console, one on each line. "},{"title":"Strings​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#strings","content":"In programming there are different types of data. You've used one data type already: string. Computers recognise strings as a sequence of characters but to humans, strings are simply lines of text. const message = &quot;This is a string&quot;;  Notice that strings are always wrapped inside of quote marks. We do this so that the computer knows when the string starts and ends. You can check that the data is a string by using the typeof operator: const message = &quot;This is a string&quot;; const messageType = typeof message; console.log(messageType); // logs 'string'  "},{"title":"Exercise (5 minutes)​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#exercise-5-minutes-2","content":"Exercise Write a program that: creates a variable called colorsassigns colors &quot;blue&quot; and &quot;yellow&quot; as a comma separate string to colorslogs the type colors using typeof. What is the typeof a number? "},{"title":"String concatenation​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#string-concatenation","content":"You can add two strings together using the plus operator (+) or string interpolation. String interpolation is a useful JavaScript feature that allows you to put variables directly into a string: // Here is an example using the plus operator to concat strings const greetingStart = &quot;Hello, my name is &quot;; const name = &quot;Daniel&quot;; const greeting = greetingStart + name; console.log(greeting); // Logs &quot;Hello, my name is Daniel&quot;  // Here is example using the String interpolation to concat strings const greetingStart = &quot;Hello&quot;; const name = &quot;Daniel&quot;; const greeting = `${greetingStart}, my name is ${name}`; console.log(greeting); // Logs &quot;Hello, my name is Daniel&quot;  "},{"title":"Exercise (5 mins)​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#exercise-5-mins","content":"Exercise Write a program that logs a message with a greeting and your name using the two concatenation methods we used "},{"title":"Numbers​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#numbers","content":"The next data type we will learn is number. Unlike strings, numbers do not need to be wrapped in quotes. const age = 30;  You can use mathematical operators to calculate numbers: const sum = 10 + 2; // 12 const product = 10 * 2; // 20 const quotient = 10 / 2; // 5 const difference = 10 - 2; // 8  "},{"title":"Floating point numbers​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#floating-point-numbers","content":"Numbers can be integers (whole numbers) or floats (numbers with a decimal point). const preciseAge = 30.612437;  Numbers with decimals can be rounded to the nearest whole number using the Math.round function: const preciseAge = 30.612437; const roughAge = Math.round(preciseAge); // 31  "},{"title":"Exercise (15 mins)​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#exercise-15-mins","content":"Exercise Create two variables numberOfTrainees and numberOfMentorsLog a message that displays the total number of trainees and mentors Expected Result​ Number of trainees: 15 Number of mentors: 8 Total number of trainees and mentors: 23  Exercise Using the variables you created in the previous steps, calculate the percentage of mentors and trainees in the group (percentages must be rounded to the nearest integer) You should then log this number to the console. Expected Result​ Percentage of trainees: 65% Percentage of mentors: 35%  "},{"title":"Extra Exercise (10 minutes)​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#extra-exercise-10-minutes","content":"Exercise Instructor note: Only complete this exercise if you have enough time in the lesson Using online documentation, what other things can you do with the Math library? Working in small groups, pick one other thing that Math can do and prepare a short (2 - 3 min) explanation for the rest of the class. "},{"title":"Statements and expressions​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#statements-and-expressions","content":"In JavaScript, sections of code can be called expressions and statements. We will use these words frequently to describe code. "},{"title":"Expression​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#expression","content":"Any unit of code that can be evaluated to a value is known as an expression. We say that an expression evaluates to a value. We use expressions all the time in lot of different places: they can be assigned to variablesreturned from functions (more on this later)passed as arguments to functions (more on this later)combined with other expressions to form new expressions The following are all examples of expressions: 1 + 1; // evaluates to 2 (&quot;hello&quot;); // evaluates to &quot;hello&quot; 2 * 4; // evaluates to 8 &quot;Hello&quot; + &quot;World&quot;; // evaluates to &quot;HelloWorld&quot;  We can take the value produced by an expression and assign it to a variable. let total = 1 + 1; // assign the value 2 (the value produced by the expression 1 + 1) to a variable total let greeting = &quot;hello&quot;; // assign the value &quot;hello&quot; (the value produced by the expression expression &quot;hello&quot;) to a variable greeting let product = 2 * 4; // assign the value 8 (the value produced by the expression 2 * 4) to a variable product let worldGreeting = &quot;Hello&quot; + &quot;World&quot;; // assign the value &quot;HelloWorld&quot; (the value produced by the expression &quot;Hello&quot; + &quot;World&quot; to a variable worldGreeting)  "},{"title":"Exercise ( 15 mins )​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#exercise--15-mins-","content":"Exercise You can run node by itself, which will open a node console, also called a Read–Eval–Print Loop (REPL). This console allows you to enter code in the console line by line and is a great way of testing bits of code before writing it in a script. Each time you press enter, it will print out what the expression you typed evaluates to. In your terminal, run the command node and then enter a line of code from the code below and then run enter. Do this for each line of code in the list. Think about the following questions each time: What is the output in the terminal each time ? Is there anything you didn't expect ? Can you work out which of the lines of code below are expressions and which are not ? Add some example here Remember it can only be an expression if you can place it on the right hand side of an assignment. 1 + 2; (&quot;hello&quot;); &quot;hello&quot; + &quot; &quot; + &quot;trainees and volunteers!&quot;; let favouriteColour = &quot;purple&quot;; favouriteColour; &quot;hello&quot; + 42; if (true) { } const hoursInADay = 24; hoursInADay * 7; `My favourite colour is ${favouriteColour}`; (To exit the node REPL, you have to press Ctrl+d) "},{"title":"Statement​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#statement","content":"A statement is some code that typically carries out an instruction. You have encountered statements already: const greeting = &quot;Hello Code Your Future!&quot;;  The above piece of code is a variable declaration, which is also a statement. This statement is an instruction to store the value &quot;Hello Code Your Future!&quot; in the variable greeting. There are other different types of statements that we will learn about in the coming weeks, such as an if statement. "},{"title":"Functions​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#functions","content":"Functions are blocks of code that can do a task as many times as you ask them to. They take an input and return an output. Here's a function that doubles a number: function double(number) { return number * 2; }  To use a function then we we need to call it ( some people will say invoke ) const result = double(2); console.log(result); // 4  The function double is being called by placing parathenses after the name of the function like this double() 🔑 The input given to a function is called a argument 🔑 A parameter is a variable that is used to refer to an argument In the example above, we're saying that inside the function double, there is a variable called number, but we don't know what the value of the variable is until someone calls the function, at which point they will give a value for that variable. A function can have one or more parameters, check out the example below: function add(a, b) { return a + b; }  In the function add, the parameters are a and b. If we call the function like this add(10, 32) then we're passing 2 arguments (or inputs) into the function : 10 and 32. We can use any expression as an argument. When you write a function (sometimes called declaring a function) you can define the parameters with any valid variable name. The function below does exactly the same thing as the one above: function add(num1, num2) { return num1 + num2; }  "},{"title":"Exercises (20 minutes)​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#exercises-20-minutes","content":"In a new javascript file try solving each of the questions below: Exercise 1 Create a function called formatPenceToPounds that should take a number as an input ( representing an amount of money in pence )return a string starting with a £ sign and the input number converted to pounds. For example, formatPenceToPounds(199) should evaluate to &quot;£1.99&quot; In your groups, think carefully about the following things: what the parameter name should becreating good names for any variables you usedon't use console.log inside the body of the function Call formatPenceToPounds a few times with different inputs and console.log the outputs in order to check your function. 🙂 ::: Exercise 2 Check out the code below: function printMessage(x) { console.log(&quot;Hello, nice to meet you &quot; + x); } function getMessage(name) { return &quot;Hello, nice to meet you &quot; + name; } printMessage(&quot;Mitch&quot;); printMessage(&quot;August&quot;); getMessage(&quot;Laetitia&quot;); The functions above behave similarly but differ in some important ways. In groups, study the code above and then answer the following questions: How many times is the function printMessage called ?How many times is the function getMessage called ?What is the parameter name for the function printMessage ?What is the parameter name for the function getMessage ? Discuss briefly which parameter name is better out of the two functions and why ? What is the return value of the function printMessage whenever it is called ? Someone then creates 2 further variables messageForAli and curiousMessage: const messageForAli = getMessage(&quot;Ali&quot;); const curiousMessage = getMessage(42); f) What will the variable messageForAli evaluate to when the code above is executed ? g) What will the variable curiousMessage evaluate to when the code above is executed ? Remember you can use console.log to log variables in order to check your answers to f) and g) Hint: Think carefully about the parameters and arguments for getMessage for part g) "},{"title":"Pair Programming Exercise (10 minutes)​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#pair-programming-exercise-10-minutes","content":"Exercise Swap your laptop with your neighbouring pair (or send your code to them over slack) and review each other's code for the formatPenceToPounds and increaseByHalf exercise - what can be improved? Is the code readable? "},{"title":"Giving Feedback to Each Other​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#giving-feedback-to-each-other","content":"A critical part of being developer is reading other people's code and giving good feedback and improvements. This can happen even when you don't know a lot of code - everybody has unique ideas and insights into how to make code better! Let's spend the next five minutes reviewing CodeYourFuture's Style Guide. This style guide is how we expect you to write code whilst you're at CodeYourFuture - most companies have one and it's really important you stick to it to make sure we all write code that other people can understand. https://syllabus.codeyourfuture.io/guides/code-style-guide note A style guide doesn't change anything about how your code operates - code that breaks these rules will still work. However it's important so that other people can more easily read your code. "},{"title":"Exercise (5 minutes)​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#exercise-5-minutes-3","content":"Exercise This is a Live exercise. The Teacher should take suggestions from the class on how this code can be improved and add comments themselves. Please read the teaching notes. Next, let's see an example of some code that we could suggest some improvements to. https://github.com/CodeYourFuture/BadCodeExample/pull/1 Using what you've just read in the Style Guide. What improvements could we suggest on the code?Are there any other improvement we could suggest that aren't in the Style Guide? "},{"title":"Glossary​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#glossary","content":"Console: a place on your computer to run scripts or commands fromCommand: something that you type on your computer which performs an operation that your computer doesDirectory: another word for &quot;folder&quot; on your computerParameter: a placeholder for values you can pass into functionsPrimitive type: a built-in type in JavaScript (e.g. strings and numbers are primitive types in JavaScript)Script: a file that contains a programTerminal: another word for &quot;console&quot; "},{"title":"PD (Agile development)​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#pd-agile-development","content":"Session objective: This session provides an overview of the Agile software development methodology. Agile development slides "},{"title":"Coursework​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#coursework","content":"Click here to view the homework for this lesson. "},{"title":"Feedback​","type":1,"pageTitle":"JavaScript Core I - 1","url":"/js-core-1/week-1/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/js-core-1/week-3/homework","content":"","keywords":""},{"title":"0) Flipped Classroom Practice (3h)​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-3/homework#0-flipped-classroom-practice-3h","content":"The video playlist contains one &quot;practice&quot; video for each content video. Here is an overview of the practice exercises: 0.1 After copy-pasting the function into the node REPL, predict, evaluate and explain the following expressions function getTruthiness(expression) { if (expression) { return true; } else { return false; } } getTruthiness(0); // make your prediction here getTruthiness(4); getTruthiness(-1); getTruthiness(&quot;&quot;); getTruthiness(&quot;hello&quot;); getTruthiness(undefined); getTruthiness();  0.2 After copy-pasting the function into the node REPL, predict, evaluate and explain the following expressions function getPhoneNumber(number, prefix) { if (prefix) { if (number.startsWith(&quot;0&quot;)) { number = number.substring(1); // substring(1) removes one character at the start of the string } return `${prefix}${number}`; } else { return `${number}`; } } getPhoneNumber(&quot;073858489&quot;); // make your prediction here getPhoneNumber(&quot;73858489&quot;, &quot;+49&quot;); getPhoneNumber(&quot;073858489&quot;, &quot;+33&quot;);  1.1 Predict, evaluate and explain the following expressions in the node REPL let animals = [&quot;cat&quot;, &quot;dog&quot;, &quot;cow&quot;]; animals; // make your prediction here animals.length; animals[1]; animals[0]; animals[2] = &quot;mouse&quot;; animals; animals[3] = &quot;elephant&quot;; animals.length; animals;  1.1 Write a program that defines an array: const colours = [&quot;red&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;indigo&quot;, &quot;violet&quot;]; The program should print out to the console: The 2nd colour in a rainbow is orange (counting from 1) There are 7 colours in a rainbow  Modify the initial value of the array so that it is const colours = [&quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;indigo&quot;, &quot;violet&quot;]; Predict and check what your program will now print out. 2.1 Write a program that defines an array (these are the steps I took last week): const stepCounts = [2211, 11745, 7390, 14284, 7902]; Incrementally create your program so that it prints out to the console the steps taken on each day 2211 11745 7390 14284 7902  2.2 Then add the total number of steps taken 2211 11745 7390 14284 7902 There were 43532 total Steps  2.3 Last add the number of days where the steps were over 10000 2211 11745 7390 14284 7902 There were 43532 total Steps You met your goal of 10000 steps 2 times  3.1 Predict, evaluate and explain the following expressions in the node REPL const dinosaurs = [&quot;t-rex&quot;, &quot;stegosaurus&quot;, &quot;velociraptor&quot;]; dinosaurs; dinosaurs.length; dinosaurs.push(&quot;diplodocus&quot;); dinosaurs.push(&quot;iguanadon&quot;); dinosaurs; dinosaurs.length;  3.2 Write a program that defines an array of names: const names = [&quot;Karin&quot;, &quot;Fatemeh&quot;, &quot;Luke&quot;, &quot;Michael&quot;, &quot;Douglas&quot;, &quot;Jyoti&quot;]; Create a new array containing only the names with less than 7 letters and print it out to the console: The short names are [ 'Karin', 'Luke', 'Jyoti' ]  "},{"title":"1) Review Solutions for Last Weeks Coursework (45 minutes)​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-3/homework#1-review-solutions-for-last-weeks-coursework-45-minutes","content":"You should do this every week. We will stop reminding you next week. Once a week, someone with Github maintainer access in your city will release the solutions repo to last week's coursework to your class team. Your class team is a child of Students and lives here: https://github.com/orgs/CodeYourFuture/teams/students/teams Once you have access to the solutions repo, review your work compared to the example solutions. There is a marking guide that talks through common mistakes. Which ones have you made? How will this help you identify what you need to practice more, and where you feel strong? Write down your target areas and take them to your buddy group. What does your mentor think? Do they agree with your assessment? "},{"title":"2) JavaScript Challenges (10 hours)​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-3/homework#2-javascript-challenges-10-hours","content":"Next, in the same repository complete all of the exercises in the &quot;Mandatory&quot; folder. https://github.com/CodeYourFuture/JavaScript-Core-1-Coursework-Week3 "},{"title":"3) Code review in your Buddy Group​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-3/homework#3-code-review-in-your-buddy-group","content":"Code review is a valuable skill for a developer, and is a good way to practice talking about code with confidence. Let's level up our code review now. Review Google's engineering guide on code review.In your Buddy group, code review each of your colleague's nominated pull reqs.Stretch: Try suggesting line changes, and accepting them yourself: "},{"title":"4) Codewars (1 hour)​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-3/homework#4-codewars-1-hour","content":"https://docs.codeyourfuture.io/course-processes/running-the-course/codewars Every week you need to complete at least three kata. Spend at least 20 minutes, three times a week, on your kata workout. Find the collection for JS-1 Week 3 on the CodeYourFuture account: https://www.codewars.com/users/CodeYourFuture/authored_collections Have you found the Troubleshooting Guide yet? :D "},{"title":"5) Learn About the Terminal part 2 (4 hours)​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-3/homework#5-learn-about-the-terminal-part-2-4-hours","content":"Most developers spend a lot of time using something called the terminal. This week, you are going to follow a course to learn about the terminal - it has its own homework page here for you to work from. You should have started this course last week. Complete it now. "},{"title":"6) (Stretch) Extra JavaScript Challenges​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-3/homework#6-stretch-extra-javascript-challenges","content":"Have some extra time before our next class? Fill it with these harder challenges to help you stretch your abilities. Alert: Some of these challenges might include concepts that we haven't taught you yet. You should expect to frequently encounter concepts you haven't been taught in class yet or at all. Learning how to tackle this is a crucial skill we are supporting you to develop. How will you handle this? Will you create a study group? Find a mentor? Ask for a session in class? It's your professional development, so take control of it. https://github.com/CodeYourFuture/JavaScript-Core-1-Coursework-Week3 "},{"title":"7) Giving constructive feedback (PD - 1 hr)​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-3/homework#7-giving-constructive-feedback-pd---1-hr","content":"Imagine yourself in one of the following scenarios. How would you prepare to give constructive feedback in that situation? Write a short paragraph explaining what you would doOr write a dialogue between you and the person you are giving feedback to Scenarios: Your colleague took your lunch from the office fridgeYour colleague keeps interrupting you and others in meetingsYour flatmate left dirty cups in the sink for several days "},{"title":"8) Working with your team (PD - 2 hr)​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-3/homework#8-working-with-your-team-pd---2-hr","content":"Feedback from colleagues gives you insight into your career progress. Every week you will be requesting feedback from two people. This will give you insight into your progress on this course. This week, invite a classmate for a call. Choose someone you have worked with in a small group. Invite your PD or Education Buddy too. Exchange feedback. Try to be helpful, candid, and kind. Write a 250 word essay reflecting on your strengths and development areas. Use the feedback to help you write this essay. "},{"title":"JavaScript Core I - 2","type":0,"sectionRef":"#","url":"/js-core-1/week-2/lesson","content":"","keywords":""},{"title":"Contents​","type":1,"pageTitle":"JavaScript Core I - 2","url":"/js-core-1/week-2/lesson#contents","content":"BooleansComparison OperatorsConditionalsLogical OperatorsLoopsExtra exercises "},{"title":"Learning Objectives​","type":1,"pageTitle":"JavaScript Core I - 2","url":"/js-core-1/week-2/lesson#learning-objectives","content":"By the end of this class, you should be able to: Define what a conditional isDefine what for and while loops are and define the differenceWrite an if statement using a conditionalDefine comparator operators and list the different typesUse comparator operators in an if statementDefine a logical operator and give examples  "},{"title":"Booleans​","type":1,"pageTitle":"JavaScript Core I - 2","url":"/js-core-1/week-2/lesson#booleans","content":"There is another primitive type in JavaScript known as a boolean value. A boolean is either true or false, and it should be written without quotes. let codeYourFutureIsGreat = true; let thisIsATerribleClass = false;  We can use boolean values to make decisions in our code based on certain conditions, as we shall see later on. "},{"title":"Comparison Operators​","type":1,"pageTitle":"JavaScript Core I - 2","url":"/js-core-1/week-2/lesson#comparison-operators","content":"We can also create an expression that evaluates to a boolean value - that is, either true or false. This is possible when we use comparison operators such as ===. This comparison operator will check if two values are the same. For example, 42 === 42 will evaluate to true. You can check this by logging the expression 42 === 42 in the Node REPL. 42 === 50 will evaluate to false. You can also check this out by logging the expression 42 === 50 in the Node REPL. Using a comparison operator will always return a boolean value. "},{"title":"checkIsTrue​","type":1,"pageTitle":"JavaScript Core I - 2","url":"/js-core-1/week-2/lesson#checkistrue","content":"Let's pretend that we have created a function checkIsTrue that checks if an expression evaluates to true or false. For the time being, you don't need to know how the function is implemented - you will only need to understand what the function does. For example, checkIsTrue(10 === 10) should print &quot;Yes, this expression evaluates to true! ✅&quot;checkIsTrue(3 &gt; 10000) should print &quot;Sorry, this expression evaluates to false! ❌&quot; Can you work out what will happen with the code below? checkIsTrue(1 &gt; 2); // and... checkIsTrue(2 &lt; 1);  The &gt; symbol in the expressions above is also a comparison operator. This operator checks to see if the number on the left is bigger than the number on the right. &gt; greater than &lt; less than &lt;= less than or equal &gt;= greater than or equal === same value and same type !== not the same value and type  You might see people use two other comparison operators, == and !=. They are valid, but are the evil twins of === and !== and it's generally considered bad practice because of the bugs they can cause. ✘ - Do not use == and != == equal compares only value != unequal compares only value  ✔ - Do use === and !== === equal compares both value and type !== unequal compares both value and type  If you see these, suggest people change them in pull requests. "},{"title":"Exercise ( 15 mins )​","type":1,"pageTitle":"JavaScript Core I - 2","url":"/js-core-1/week-2/lesson#exercise--15-mins-","content":"Exercise 1 What do typeof true and typeof false evaluate to - write some code and log the output to the console to work out the answer. Exercise 2 Check out the code below. Replace the variable FILL_ME_IN with actual values to prevent the checkIsTrue function from logging an error message. const mentorCount = FILL_ME_IN; const traineeCount = FILL_ME_IN; checkIsTrue(mentorCount &lt; traineeCount); const capacity = FILL_ME_IN; const people = FILL_ME_IN; checkIsTrue(capacity &gt; people); const organisation = FILL_ME_IN; checkIsTrue(typeof organisation === &quot;string&quot;); checkIsTrue(organisation.startsWith(&quot;Code&quot;)); checkIsTrue(organisation.includes(&quot; your &quot;)); checkIsTrue(organisation.endsWith(&quot;Future!&quot;)); const mystery = FILL_ME_IN; checkIsTrue(typeof mystery === &quot;boolean&quot;); checkIsTrue(!mystery); // Don't change anything below this point var FILL_ME_IN; function checkIsTrue(value1) { if (value1) { // &quot;\\x1b[32m%s\\x1b[0m&quot; will change console output to green console.log( &quot;\\x1b[32m%s\\x1b[0m&quot;, &quot;Yes, this expression evaluates to true! ✅&quot; ); } else { // &quot;\\x1b[31m%s\\x1b[0m&quot; will change console output to red console.log( &quot;\\x1b[31m%s\\x1b[0m&quot;, &quot;Sorry, this expression evaluates to false! ❌&quot; ); } }  Exercise 3 Create a function called isEven that should take a number as an inputreturn a boolean indicating if the number is even or odd Remember to avoid using console.log inside the function itself E.g. isEven(100) should return trueE.g. isEven(53) should return false Call your function with a number of different inputs to check your function is working as expected. 😄 Bonus: Can you ensure your function doesn't use an if statement for this exercise 😎 "},{"title":"Conditionals​","type":1,"pageTitle":"JavaScript Core I - 2","url":"/js-core-1/week-2/lesson#conditionals","content":"Like humans, computer programs make decisions based on the information given to them. Conditionals are a way of representing these decisions in code (remember, you saw this in a previous exercise!) For example: In a game, if the player has 0 lives, then the game is overIn a weather app, if rain is forecast, a picture of rain clouds is shown The most common type of conditional is the if statement. An if statement runs some code if a condition is met. If the condition is not met, then the code will be skipped. let isHappy = true; if (isHappy) { console.log(&quot;I am happy&quot;); }  The code in paratheses - e.g. (isHappy) - is the condition. The condition can be any expression. The following are all valid conditions: // boolean value if (true) { // do something } // variable assigned to boolean value let isHappy = true; if (isHappy) { // do something } // equality operator returns a boolean value if (1 + 1 === 2) { // do something } // comparison operator returns a boolean value if (10 &gt; 5) { // do something } // function call returns boolean value if (greaterThan10(5)) { // do something }  An if statement runs code when a condition is met. What if the condition is not met? Sometimes you want to run an alternative bit of code. An if...else statement also runs code when the condition is not met. let isHappy = true; if (isHappy) { console.log(&quot;I am happy 😄&quot;); } else { console.log(&quot;I am not happy 😢&quot;); }  What if there is more than one condition you want to handle in your function? For example, what if you can be confused as well? You can use else if to handle multiple conditions. "},{"title":"Exercise (5 mins)​","type":1,"pageTitle":"JavaScript Core I - 2","url":"/js-core-1/week-2/lesson#exercise-5-mins","content":"Exercise Can you explain what this function does line by line? What happens when you pass in a string? function numberChecker(num) { if (num &gt; 20) { return `${num} is greater than 20`; } else if (num === 20) { return `${num} is equal to 20`; } else if (num &lt; 20) { return `${num} is less than 20`; } else { return `${num} isn't even a number :(`; } }  "},{"title":"Exercise (10 mins)​","type":1,"pageTitle":"JavaScript Core I - 2","url":"/js-core-1/week-2/lesson#exercise-10-mins","content":"Exercise Create a function that gives you a message depending on your mood! It should: take one inputreturn &quot;Good job, you're doing great!&quot; if you pass in &quot;happy&quot;return &quot;Every cloud has a silver lining&quot; if you pass in &quot;sad&quot;return &quot;Beep beep boop&quot; if you pass in a numberreturn &quot;I'm sorry, I'm still learning about feelings!&quot; if you pass in anything else "},{"title":"Logical Operators​","type":1,"pageTitle":"JavaScript Core I - 2","url":"/js-core-1/week-2/lesson#logical-operators","content":"There are three logical operators in JavaScript: || (OR), &amp;&amp; (AND), ! (NOT). They let you write expressions that evaluate to a boolean value. Suppose you want to test if a number is bigger than 3 and smaller than 10. We can write this, using different logical operators. let num = 10; function satisfiesRequirements(num) { if (num &gt; 3 &amp;&amp; num &lt; 10) { return true; } return false; }  We can test expressions with logical operators in a node console too. "},{"title":"Exercise (5 mins)​","type":1,"pageTitle":"JavaScript Core I - 2","url":"/js-core-1/week-2/lesson#exercise-5-mins-1","content":"Exercise Type the following expressions into your Node and note the output. Anything you didn't expect? let num = 10num &gt; 5 &amp;&amp; num &lt; 15num &lt; 10 || num === 10false || true!truelet greaterThan5 = num &gt; 5!greaterThan5!(num === 10) "},{"title":"Exercise (15 mins)​","type":1,"pageTitle":"JavaScript Core I - 2","url":"/js-core-1/week-2/lesson#exercise-15-mins","content":"Exercise In pairs, write a function that checks a username is of an acceptable format for a user type. The function must: take two parameters: one for the username and one for the user typeif the username starts with a capital letter and has length between 5 and 10 characters long, it must return &quot;Username valid&quot;; otherwise, it must return &quot;Username invalid&quot;if the user type is an admin or a manager, all usernames must return &quot;Username valid&quot; "},{"title":"Loops​","type":1,"pageTitle":"JavaScript Core I - 2","url":"/js-core-1/week-2/lesson#loops","content":"When we're writing programs, we often find that we want to repeat a bit of code over and over, or repeat it but change something about it each time. To save ourselves from writing all that code, we use a loop. JavaScript has two main kinds of loops, a while loop and a for loop. "},{"title":"while loop​","type":1,"pageTitle":"JavaScript Core I - 2","url":"/js-core-1/week-2/lesson#while-loop","content":"A while loop is a way to repeat code until some condition is evaluated to false. For example: let i = 0; while (i &lt; 20) { someFunction(i); i++; }  It's a convention to use i in loops. You could use any valid string as your variable name: loops don't have special rules. Programmers use i to remind ourselves this is an iterator. Notice the line i++ - this is the same as saying i = i + 1 It does exactly the same thing but it is just more convenient to write. Infinite loop ∞ It's important that the condition inside the parenthesis becomes false at some point - otherwise, we'll have what's known as an infinite loop. "},{"title":"Exercise (10 minutes)​","type":1,"pageTitle":"JavaScript Core I - 2","url":"/js-core-1/week-2/lesson#exercise-10-minutes","content":"Exercise Write a function that: Takes one number n as a parameterAdds all numbers from 0 to n. For example, if the input is 3, the output should be 0 + 1 + 2 + 3You should use a while loop "},{"title":"for loop​","type":1,"pageTitle":"JavaScript Core I - 2","url":"/js-core-1/week-2/lesson#for-loop","content":"The for loop is similar to a while loop, but with a more specialized syntax. Programmers invented the for loop when they realized they were always doing the same three things: creating loop counter variables (like i above), incrementing them by some amount, and checking that they're less than a value. The for loop syntax has special places for each of those three things. Here's the first while loop above, now written as a for loop:  for (let i = 0; i &lt; 20; i++) { someFunction(i); }  "},{"title":"Exercise (10 minutes)​","type":1,"pageTitle":"JavaScript Core I - 2","url":"/js-core-1/week-2/lesson#exercise-10-minutes-1","content":"Exercise Write a function, similar to the last exercise, that: Takes one number n as a parameterAdds all numbers from 0 to n. For example, if the input is 3, the output should be 0 + 1 + 2 + 3You should use a for loop "},{"title":"for of loop​","type":1,"pageTitle":"JavaScript Core I - 2","url":"/js-core-1/week-2/lesson#for-of-loop","content":"The for of loop The for...of statement creates a loop iterating over iterable objects...~MDN An iterable object is something that can be counted. A basket of seventeen apples is an iterable object. You might write a rule that says &quot;check each apple in this basket and if it's green, yell BARNY&quot;. Let's try this out with strings, an iterable object in JS. const myName = &quot;Sally&quot;; for (const letter of myName) { console.log(letter); }  To JavaScript, your name is a string of characters. It has a length, and you can access each characters with bracket notation, like this: let myName = &quot;Sally&quot;; myName.length; //5 myName[1]; //a  It's an iterable object. Let's work through this &quot;offline&quot;. We don't need to write any code. We can play computer ourselves just by understanding the rules of JavaScript. Exercise, in pairs, (10 mins) Each person write down their first name. Write it out like this S A L L Y and number the letters with a zero-indexed count like this 0 1 2 3 4.Now pick a letter of the alphabet, any letter, and make up a rule for your partner to say, do, or act out. You could make them meow like a cat, or draw a picture, or anything (fun and nice).The first player, speak your rule - say &quot;For each letter of your name, if that letter is $letterYouChose, do $ruleYouInvented.&quot;The second player, hold up your name and act out the for of loop.Now swap! So to sum up, for of loops are pretty similar to for loops, but: they only work on iterable objectsthe iterator is the value, directly, so you don't need to access the value using bracket notationyou don't need to set an end case as the loop will always go through every value in the iterable object and then end Next week, we will think more about the most common iterable object in JavaScript: arrays. "},{"title":"Coursework​","type":1,"pageTitle":"JavaScript Core I - 2","url":"/js-core-1/week-2/lesson#coursework","content":"View the homework for this lesson. "},{"title":"Feedback​","type":1,"pageTitle":"JavaScript Core I - 2","url":"/js-core-1/week-2/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/js-core-1/week-3/instructors","content":"","keywords":""},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-3/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-js1 For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Flipped classroom recap/Q&A​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-3/instructors#flipped-classroom-recapqa","content":"The flipped classroom practice should have trainees Get a basic understanding of truthiness and falsiness (see notes below) In particular, using an if (argumentToFunction) for functions with optional argumentslet foo = val || &quot;default value&quot; and if (val &amp;&amp; val.foo === 3) are not yet covered Write and run programs using basic array functionality initialise an array: const names = [&quot;Biruk&quot;, &quot;Ali&quot;, &quot;Mitch&quot;];access a zero-indexed element: let ali = names[1];modify a zero-indexed element: names[2] = &quot;Jyoti&quot;get the length of an array: let countNames = names.lengthadd elements to an array: names.push(&quot;Zsolt&quot;) Iterate through an array using for (const name of names) {console.log(name);}Iterate through an array using for (let i=0; i&lt;names.length; i++) {console.log(i, names[i])} it is not important at this stage for all trainees to understand this (it's included only for completeness as trainees will find these loops through stackoverflow/google)equivalence between c-style for and while loop is not yet clarified Note: array methods are not covered, particularly 2nd order functions: .filter(), .map(), .forEach() Some questions/prompts that may be useful What does this program do? (show programs of varying degrees of complexity using arrays)What does this expression evaluate to, using array expressions?What kinds of data types have we seen so far? (without getting too technical, &quot;string&quot;, &quot;number&quot;, &quot;boolean&quot;, &quot;undefined&quot;). What values are falsy/truthy?What are some ways to iterate over an array? Why would we use one over the other?Discuss solutions to practice exercises "},{"title":"Notes on truthy, falsy, null, and undefined​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-3/instructors#notes-on-truthy-falsy-null-and-undefined","content":"This session is only to establish some initial habits of thought, especially around debugging. This is such a tricky idea to grasp and so helpful to understand, so talk a little bit about different errors produced by these states. Don't get too deep into the technicalities as trainees have not yet covered enough JS to grasp the implications (eg scope, state and initialisation). Instead, try to produce some common Type errors and Reference errors, particularly: Uncaught TypeError: Cannot read property of undefinedUncaught TypeError: undefined is not a function and discuss them together. If you have time, connect this back to user input validation in HTML Forms. What happens when you write code that assumes a variable has a length, but the user doesn't set a name? There's a small Codewars collection and you could work through a kata in class as a group. "},{"title":"Presentations (Out of date, for reference only)​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-3/instructors#presentations-out-of-date-for-reference-only","content":"Week 3 - JS Core 1 [Google Slides] - 01/05/2020 Created by Manchester Volunteers "},{"title":"Resources​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-3/instructors#resources","content":"Quiz - Git vs Github, Arguments vs Parameters - (07/05/2020)Quiz - JavaScript 1 Recap - (10/05/2020) This can be done in class or set as homework. Self-Assessment - JavaScript Core 1 Created by London and Chris Owen Basic JS Comprehension Assessment Created by Shukri Ali and Birmingham "},{"title":"Notes​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-3/instructors#notes","content":""},{"title":"Coursework","type":0,"sectionRef":"#","url":"/js-core-1/week-4/homework","content":"","keywords":""},{"title":"0) Flipped Classroom Practice (3h)​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-4/homework#0-flipped-classroom-practice-3h","content":"The video playlist contains some &quot;content&quot; videos and one &quot;practice&quot; video for each content video. 0.1 What does the following code do? Can you refactor it so that: the variables have more understandable namesthe if statements are rewritten into a function with an understandable namethe whole loop is extracted into a reusable function with an understandable name (test the function by calling it with the values [3, 12, 6, 11, 2] and also logging the output) const c = [13, 4, 10, 7, 1]; const t = [3, 12, 6, 11, 2]; const n = []; for (const k of c) { let v = k; if (k === 13) { v = &quot;K&quot;; } else if (k === 12) { v = &quot;Q&quot;; } else if (k === 11) { v = &quot;J&quot;; } else if (k === 1) { v = &quot;A&quot;; } else { v = k; } n.push(v); } console.log(&quot;Your cards are named&quot;, n);  1.1 Refactor this code to use the .filter() array method const yourCards = [13, 4, 10, 7, 1]; const theirCards = [3, 12, 6, 11, 2]; function getNumberCards(cards) { const numberCards = []; for (const card of cards) { if (card &gt; 1 &amp;&amp; card &lt; 11) { numberCards.push(card); } } return numberCards; } console.log(&quot;Your number cards are&quot;, getNumberCards(yourCards)); console.log(&quot;Their number cards are&quot;, getNumberCards(theirCards));  2.1 Refactor the code from 0.1 above even further to use the .map() array method. 3.1 Using .filter() and .map(), can you write a program that starts with the same yourCards and theirCards arrays as above and prints out to the console: Your suit cards are [ 'K', 'A' ] Their suit cards are [ 'Q', 'J' ]  "},{"title":"1) Review Solutions for Last Weeks Coursework (30 minutes)​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-4/homework#1-review-solutions-for-last-weeks-coursework-30-minutes","content":"You should do this every week from now on. We will stop reminding you soon. Once a week, someone with Github maintainer access in your city will release the solutions repo to last week's coursework to your class team. Your class team is a child of Students and lives here: https://github.com/orgs/CodeYourFuture/teams/students/teams Once you have access to the solutions repo, review your work compared to the example solutions. Set a timer for thirty minutes. There is a marking guide that talks through common mistakes. Which ones have you made? How will this help you identify what you need to practice more, and where you feel strong? Write down your target areas and take them to your buddy group. What does your mentor think? Do they agree with your assessment? "},{"title":"2) JavaScript Challenges (10 hours)​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-4/homework#2-javascript-challenges-10-hours","content":"In the repository for week 4, complete all of the exercises in the &quot;Mandatory&quot; folder. https://github.com/CodeYourFuture/JavaScript-Core-1-Coursework-Week4 "},{"title":"3) Codewars (1 hour)​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-4/homework#3-codewars-1-hour","content":"https://docs.codeyourfuture.io/course-processes/running-the-course/codewars Every week you need to complete at least three kata. Spend at least 20 minutes, three times a week, on your kata workout. This week, try pairing on a kata with a colleague. We will do more pairing in the next module. "},{"title":"4) (Stretch) Extra JavaScript Challenges​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-4/homework#4-stretch-extra-javascript-challenges","content":"Have some extra time before our next class? Fill it with these harder challenges to help you stretch your abilities! Alert: Some of these challenges might include concepts that we haven't taught you yet. You should us Google to try to learn how to solve them. https://github.com/CodeYourFuture/JavaScript-Core-1-Coursework-Week4 "},{"title":"5) Writing a meeting request email (PD - 30 min)​","type":1,"pageTitle":"Coursework","url":"/js-core-1/week-4/homework#5-writing-a-meeting-request-email-pd---30-min","content":"In the following scenario imagine you are a recruit for a company and your team leader asks you to write an email requesting a meeting with the Head of Customer Services (HCS). Remember to include the subject line and use appropriate formatting. &quot;HCS has complained about the customer services application to the software team leader. He has found some frustrating problems with the user interface. The team leader told you to go and see the HCS, find out what is wrong and then come back with improvements. The HCS is very busy. You should email requesting a meeting and outline clearly what you need the meeting for.&quot; "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/js-core-1/week-4/instructors","content":"","keywords":""},{"title":"Coursework​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-4/instructors#coursework","content":"As an alternative to week 4 coursework, some consolidation on week 3 using array methods could be done. "},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-4/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-js1 For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Flipped classroom recap/Q&A​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-4/instructors#flipped-classroom-recapqa","content":"The flipped classroom practice should have trainees Refactor code to pull out meaningfully named functions to represent business logic (e.g. isShortName instead of name.length&lt;7)Refactor code to use array methods as appropriate instead of for ... of .map().filter() As bonus, some minimal explanation of named functions, anonymous functions and arrow functions is given -&gt; not all trainees need to understand it at this stage. They should return to the video when they are ready for it/feel the need for it.Note that the following are not currently covered .forEach() does not tend to have much value over for ... of, so is not covered.reduce() trainees find a lot of code with reduce on the web and typically cannot adequately explain it Not covered but trainees can look up in syllabus or MDN .includes().sort()other array methods Some questions/prompts that may be useful What does this program do? (show programs of varying degrees of complexity using .map() and .filter())When do we use .map()?When do we use .filter()?What is the difference between arr.filter(isBig) and arr.filter(isBig())?What is the difference between .map() and .filter() in terms of the result that is output?in terms of the function that must be passed What are some reasons for refactoring expressions into functions that evaluate to the same thing? e.g. if (cards.length &gt; 7) { console.log(&quot;you have too many cards in your hand&quot;); }  vs shouldDiscard(cards) { return cards.length &gt; 7; } if (shouldDiscard(cards)) { console.log(&quot;you have too many cards in your hand&quot;); }  "},{"title":"Presentations (Out of date, for reference only)​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-4/instructors#presentations-out-of-date-for-reference-only","content":"Week 3 - JS Core 1 [Google Slides] - 01/05/2020 Created by Manchester Volunteers "},{"title":"Resources​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-4/instructors#resources","content":"Quiz - Git vs Github, Arguments vs Parameters - (07/05/2020)Quiz - JavaScript 1 Recap - (10/05/2020) This can be done in class or set as homework. Self-Assessment - JavaScript Core 1 Created by London and Chris Owen Basic JS Comprehension Assessment Created by Shukri Ali and Birmingham "},{"title":"Notes​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-1/week-4/instructors#notes","content":""},{"title":"JavaScript Core I - 3","type":0,"sectionRef":"#","url":"/js-core-1/week-3/lesson","content":"","keywords":""},{"title":"Contents​","type":1,"pageTitle":"JavaScript Core I - 3","url":"/js-core-1/week-3/lesson#contents","content":"truthy and falsyundefined and nullarraysPD - Developer thinking "},{"title":"Learning Objectives​","type":1,"pageTitle":"JavaScript Core I - 3","url":"/js-core-1/week-3/lesson#learning-objectives","content":"By the end of this class, you should be able to: List the falsy valuesExplain the difference between null and undefinedDefine an arrayWrite code that interacts with an arrayLoop over an array  "},{"title":"Truthy and falsy​","type":1,"pageTitle":"JavaScript Core I - 3","url":"/js-core-1/week-3/lesson#truthy-and-falsy","content":"In JavaScript, things can be set to or evaluated as true or false. We've already met this idea. The boolean data type has two possible values: true or false. But in JavaScript values may be truthy or falsy. In JavaScript, a truthy value is a value that is considered true when encountered in a Boolean context. All values are truthy unless they are defined as falsy. That is, all values are truthy except false, 0, -0, 0n, &quot;&quot;, null, undefined, and NaN. ~ MDN, 'Truthy' So in other words, the value is treated as if it is true or false. The value is 'coerced' into true or false. Let's look at how this affects an if statement. function getFalsiness(value) { if (value) { return &quot;Truthy&quot;; } else { return &quot;Falsy&quot;; } }  You can think of falsy as a closed door. If the value passed into getFalsiness is a falsy value, the door to the &quot;Truthy&quot; string will never be opened. getFalsiness(undefined) will return &quot;Falsy&quot;. Exercise (5 minutes) Open your console and start node. Define the following function, getTruthiness: const getTruthiness = (value) =&gt; (value ? &quot;Truthy!&quot; : &quot;Falsy&quot;); Call getTruthiness(null)Try each of the falsy values.How will you get 'Truthy!' to return?What would happen if you tried getTruthiness(getTruthiness(0)) ? Make a prediction and then test your theory. Last week, we learned about loose equals == and strict equals === and why we should always use strict equality. In your console, try comparing: getTruthiness(null == undefined); getTruthiness(null === undefined);  Now try doing the comparisons on their own: null == undefined; null === undefined;  "},{"title":"Null and undefined​","type":1,"pageTitle":"JavaScript Core I - 3","url":"/js-core-1/week-3/lesson#null-and-undefined","content":"Both null and undefined are falsy values, but have some important differences. let thisUndefinedVariable; let thisNullVariable = null;  undefined means the variable has been declared, but is undefined. No value, not even 0 or null, has been assigned to this variable. null means the variable has been assigned the value null. Exercise (5 mins) If a variable has never been declared, and you try to call it, what will the console say? Make a prediction, either by writing in chat or writing it on piece of paper and holding it up. Try calling a nonexistent variable in your console now. Discuss! We're spending a little time on this now because the most common error you will encounter as a JavaScript programmer is Uncaught TypeError: Cannot read property of undefined. In fact 9 of the top 10 most common errors are to do with null or undefined. (The other one is CORS, more about this in future modules.) As you progress through the course you will incrementally develop your understanding of these concepts, often through debugging! tip You won't often assign null to a variable. However, you will often encounter null in DOM traversal, so we will come back to this in JS2 and JS3. "},{"title":"Arrays​","type":1,"pageTitle":"JavaScript Core I - 3","url":"/js-core-1/week-3/lesson#arrays","content":"If you ever find yourself writing code like this... const mentor1 = &quot;Daniel&quot;; const mentor2 = &quot;Irina&quot;; const mentor3 = &quot;Rares&quot;;  ...then it's probably time to use an array! Arrays are data structures that hold a list of values. We call these values the elements of the array. const mentors = [&quot;Daniel&quot;, &quot;Irina&quot;, &quot;Rares&quot;];  Arrays can hold any type of value (although almost always you only have one data type per array). const testScores = [16, 49, 85]; const grades = [&quot;F&quot;, &quot;D&quot;, &quot;A&quot;]; const greetings = [&quot;Hello, how are you?&quot;, &quot;Hi! Nice to meet you!&quot;];  You can access elements in an array using the index of an element with bracket notation 🔔 Remember: All arrays start at position 0! To access the first element in an array, you need to access index 0, the second element at 1, the fifth at 4 and so forth. This is called zero-based indexed arrays. There are some very intense reasons for this, but most people just accept it and move on. const trainees = [&quot;Ahmed&quot;, &quot;Maria&quot;, &quot;Atanas&quot;, &quot;Nahidul&quot;, &quot;Jack&quot;]; trainees[0]; // &quot;Ahmed&quot; trainees[3]; // &quot;Nahidul&quot;  You can also assign new values to parts of an array: const trainees = [&quot;Ahmed&quot;, &quot;Maria&quot;, &quot;Atanas&quot;, &quot;Nahidul&quot;, &quot;Jack&quot;]; trainees[2] = &quot;Bianca&quot;; console.log(trainees); // [&quot;Ahmed&quot;, &quot;Maria&quot;, &quot;Bianca&quot;, &quot;Nahidul&quot;, &quot;Jack&quot;]  "},{"title":"Exercise (5 mins)​","type":1,"pageTitle":"JavaScript Core I - 3","url":"/js-core-1/week-3/lesson#exercise-5-mins","content":"Exercise In Node, enter the following array: &gt; const fruits = ['banana', 'apple', 'strawberry', 'kiwi', 'fig', 'orange']; Now, using the correct indexes, get the following values from the array: strawberrykiwiorangebanana Then, replace 'apple' with 'raspberry', and replace 'fig' with 'pineapple'. "},{"title":"Exercise (5 mins)​","type":1,"pageTitle":"JavaScript Core I - 3","url":"/js-core-1/week-3/lesson#exercise-5-mins-1","content":"Exercise Complete this function so that, if the second element in the array contains the name &quot;Amy&quot;, it returns &quot;Second element matched!&quot; function secondMatchesAmy(array) { if ( ) { return &quot;Second element matched!&quot;; } return &quot;Second element not matched&quot;; }  "},{"title":"Using for loops with arrays​","type":1,"pageTitle":"JavaScript Core I - 3","url":"/js-core-1/week-3/lesson#using-for-loops-with-arrays","content":"We can use the power of loops to run some code for each element in our array. When we do this say we iterate over an array. const daysOfWeek = [ &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;, &quot;Sunday&quot;, ]; for (let i = 0; i &lt; daysOfWeek.length; i++) { const dayMessage = &quot;day is: &quot; + daysOfWeek[i]; const indexMessage = &quot;index is: &quot; + i; console.log(indexMessage, dayMessage); }  "},{"title":"Exercise (10 mins)​","type":1,"pageTitle":"JavaScript Core I - 3","url":"/js-core-1/week-3/lesson#exercise-10-mins","content":"Exercise Write a function which takes your trainees array as an input. In the function, use a for loop to iterate over the array and print the name of each trainee to the console. "},{"title":"Exercise - extra credit (20 mins)​","type":1,"pageTitle":"JavaScript Core I - 3","url":"/js-core-1/week-3/lesson#exercise---extra-credit-20-mins","content":"Exercise In pairs, write a function which squares all numbers in an array and returns the array of squared numbers. Write a second function which takes an input of arrays and only returns an array of even numbers. How can you combine the two functions to return an array of even and squared numbers? "},{"title":"Extra exercises​","type":1,"pageTitle":"JavaScript Core I - 3","url":"/js-core-1/week-3/lesson#extra-exercises","content":"Exercise Playing computer I​ Working in pairs or groups, you have to predict the output of this program without executing it.What is printed to the console?Have you learned anything new during this exercise? const daysOfWeek = [ &quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;, &quot;Saturday&quot;, &quot;Sunday&quot;, ]; function workingDay(day) { return day + &quot; is a working day&quot;; } function weekendDay(day) { return day + &quot; is at the weekend!&quot;; } for (let i = 0; i &lt; daysOfWeek.length; i++) { if (i &lt; 5) { let day = workingDay(daysOfWeek[i]); console.log(day); } else { let day = weekendDay(daysOfWeek[i]); console.log(day); } }  Exercise Playing computer II​ Working in pairs or groups, you have to predict the output of this program without executing it.What is printed to the console?Have you learned anything new during this exercise? const a = 4; const b = 8; const multiplyNumbers = function (a, b) { return a * b; }; const addNumbers = function (a, b, c) { return a + b + c; }; for (let i = 0; i &lt; 5; ++i) { if (i &lt; 3) { const day = addNumbers(i, 2, a); console.log(day); } else { const day = multiplyNumbers(i, 4); console.log(day); } }  Exercise Playing computer III​ Again, working in pairs or groups, you have to predict the output of this program without executing it.What is printed to the console?What was difficult about this exercise?Have you learned anything new? let x = 2; let y = 4; let a = 2; let b = 20; const f1 = function (a, b) { return a * b; }; const f2 = function (a, b, c) { return a + b + c; }; console.log(x); x = 3; y = f1(x, 2); console.log(y); for (let i = 0; i &lt; 10; ++i) { a = a + 1; if (i % 2 === 0) { const d = f2(i, y, a); console.log(d); } else { const e = f1(i, 2); console.log(e); } }  "},{"title":"Glossary​","type":1,"pageTitle":"JavaScript Core I - 3","url":"/js-core-1/week-3/lesson#glossary","content":"Assert: to determine whether something is true or not true, more precisely falseDuplicate: exact copies of something (e.g. two or more files, numbers, directory can be exactly the same)Index: numbers that let you know an item's position inside an arrayElement: another name for an item in an arrayIterate: to repeat some code multiple times, as we do when we use a loopREPL: (Read-Eval-Print-Loop) an interactive way to execute code you write inside the consoleZero-based Index: an array starting at 0 and not at 1 For words like Terminal, Primitive Types please see Glossary: JavaScript Core I - 2 "},{"title":"PD (Developer thinking)​","type":1,"pageTitle":"JavaScript Core I - 3","url":"/js-core-1/week-3/lesson#pd-developer-thinking","content":"Session objective: This session highlights the importance of critical thinking for developers, and provides methods to form good arguments. Developer thinking slides Exercise (10 min) Exercise objective: To identify arguments formed through critical thinking Put the statements in the slides in the right order. Exercise (20 min) Exercise objective: To brainstorm as a group about critical thinking skills In small groups, explore how and why developers need to develop critical thinking skills. How will you use critical thinking skills as a developer?Why is it important to use critical thinking skills when developing products for diverse audiences? Exercise (10 min) Exercise objective: To practice public speaking skills Volunteer to share to the wider group one important reason to use critical thinking. "},{"title":"Feedback​","type":1,"pageTitle":"JavaScript Core I - 3","url":"/js-core-1/week-3/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Overview","type":0,"sectionRef":"#","url":"/js-core-2/","content":"","keywords":""},{"title":"Coordination​","type":1,"pageTitle":"Overview","url":"/js-core-2/#coordination","content":"Coordination details for this module can be found on the Module Coordinator's page "},{"title":"Module Coordinator","type":0,"sectionRef":"#","url":"/js-core-2/coordinator","content":"","keywords":""},{"title":"1) Assessment​","type":1,"pageTitle":"Module Coordinator","url":"/js-core-2/coordinator#1-assessment","content":"After the final week of this module there are assessment that should be completed by all trainees. 🔒 https://github.com/CodeYourFuture/JavaScript-Core-2-Assessment These assessments should be conducted one-on-one with a volunteer (possibly the trainee's buddy). Each of the assessments has a rubric that should be followed. After completion, the trainees score should be shared with the City Coordinator The aim of these assessments is to Work out how well each trainee is doing in the classHighlight trainees who are falling behind and require helpGet oversight of any common misconceptions in the class "},{"title":"possible solutions + variants (with/without for loops)","type":0,"sectionRef":"#","url":"/js-core-2/mentor-guide","content":"","keywords":""},{"title":"iterating and printing off an object​","type":1,"pageTitle":"possible solutions + variants (with/without for loops)","url":"/js-core-2/mentor-guide#iterating-and-printing-off-an-object","content":"Exercise Write a function &quot;printProperties&quot; that takes an object and prints its properties // with for loop function printProperties(trainee) { var properties = []; for (var p of trainee) { properties.push(p); } console.log(properties.join(&quot;,&quot;)); } // without for loop function printProperties(trainee) { var properties = Object.keys(trainee); console.log(properties.join(&quot;,&quot;)); }  Write a function called hasProperty that takes an object and a property. The function should return true if the property exists,false if it doesn't. // with for loop function hasProperty(trainee, propertyName) { for (var p of trainee) { if (p === propertyName) { return true; } } return false; } // without for loop function hasProperty(trainee, propertyName) { Object.keys(trainee).some(function (p) { return p === propertyName; }); } // shortcut/lazy way (js already has a method like this) function hasProperty(trainee, propertyName) { return trainee.hasOwnProperty(propertyName); }  Write a function called printObject that takes an object and iterates through all its properties and prints a string formatted property: value Bonus point if you can format the list of interests properly // with for loop (and not handling array property (interests) function printObject(trainee) { var result = [] for (var p of trainee) { result.push(`${p} is ${trainee[p]}`) } console.log(result.join(&quot;\\n&quot;)) } // with for loop, handling array values function printObject(trainee) { var result = [] for (var p of trainee) { if (Array.isArray(trainee[p])) { result.push(`${p} are ${trainee[p].join(&quot;,&quot;)}`) } else { result.push(`${p} is ${trainee[p]}`) } } console.log(result.join(&quot;\\n&quot;)) } // without for loop, handling array values // could be more concise with a ternary, this seemed easier to read/parse function printObject(trainee) { var result = Object.keys(trainee).map(function (p) { if (Array.isArray(trainee[p]) { return `${p} are ${trainee[p].join(&quot;,&quot;)}`; } else { return `${p} is ${trainee[p]}` } }) console.log(result.join(&quot;\\n&quot;)) }  "},{"title":"More advanced working with objects​","type":1,"pageTitle":"possible solutions + variants (with/without for loops)","url":"/js-core-2/mentor-guide#more-advanced-working-with-objects","content":"Notes: examples here are done on with the most straightforwar/simplest way possiblefirst - if you were to write sumWallet as dynamic for different note denominations on the first attempt, you'd basically have finished the entire section.they are also using forEach and mutations in favour of reduce in order to keep it simple. feel free to demonstrate a solution using reduce if you feel it's appropriate. Write a function that takes in the wallet as an argument, and returns the total money in the wallet. // quotes or no quotes will work for these keys function sumWallet(wallet) { var total = 0; total += wallet[5]; total += wallet[10]; total += wallet[20]; return total; }  Write a function that takes the array wallets and returns the total amount of money for all of the wallets. function sumAllWallets(walletArray) { var total = 0; walletArray.forEach(function (wallet) { total += wallet[5]; total += wallet[10]; total += wallet[20]; }); return total; }  Write another function that takes the array of wallets and combines all of the notes in each of them, returning a single wallet with all of the other wallets' notes. function combineWallets(walletArray) { var resultWallet = { 5: 0, 10: 0, 20: 0, }; walletArray.forEach(function (wallet) { resultWallet[5] += wallet[5]; resultWallet[10] += wallet[10]; resultWallet[20] += wallet[20]; }); return resultWallet; }  See if you can write a function that will sum up and return the total amount in a single wallet, but it could have any denomination of notes inside it (£7 note or a £13 or any other number). Note: we're using javascript's coercion for the * operator for our object keynote (it's a string). If that coercion fails - it will not throw and will result in NaN polluting the rest of the calculation. I've decided to leave out any isNaN checks here to keep the example code clear. function sumDynamicWallet(wallet) { var total = 0; Object.keys(wallet).forEach(function (note) { total += note * wallet[note]; }); return total; }  See if you can write a function that takes in any number of wallets, which could contain any denomination/type of notes inside them (each being different). Tip: have a think about if you could re-use a function from a previous example... function sumDynamicWallets(walletArray) { var grandTotal = 0; // could be `total`, renamed for clarity/to avoid confusion walletArray.forEach(function (wallet) { grandTotal += sumDynamicWallet(wallet); }); return grandTotal; } // with reduce (I'd recommend showing this example if you can get to it) function sumDynamicWallets(walletArray) { return walletArray.reduce(sumDynamicWalletForReduce, 0); } // modifying the previous example's function `sumDynamicWallet` to take a total in // and return a new total with the wallet total added to it function sumDynamicWalletForReduce(acc, wallet) { Object.keys(wallet).forEach(function (note) { acc += note * wallet[note]; }); return acc; }  "},{"title":"JavaScript Core I - 4","type":0,"sectionRef":"#","url":"/js-core-1/week-4/lesson","content":"","keywords":""},{"title":"Contents​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#contents","content":"Array propertiesManipulating arraysArray methodsArray mapArray forEachArray filterArray findPD - Asking good questions "},{"title":"Learning Objectives​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#learning-objectives","content":"By the end of this class, you should be able to: Define the meaning of &quot;array method&quot;Use array methods to manipulate an arrayWrite code that chains array methods togetherDefine a callbackWrite code that uses a callback to run codeDefine an anonymous functionWrite code that uses an anonymous function as a callback  "},{"title":"Array properties​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#array-properties","content":"Arrays, like strings, have a length property. The length is the number of items in the array. You can check this by starting a node console in your terminal. $ node &gt; let arr = [1, 2, 3]; undefined &gt; arr [1, 2, 3] &gt; arr.length 3  "},{"title":"Manipulating arrays​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#manipulating-arrays","content":"You can get a single value out of an array using bracket notation. $ node &gt; let ingredients = [&quot;Flour&quot;, &quot;Water&quot;, &quot;Salt&quot;]; undefined &gt; ingredients[0] Flour &gt; ingredients[1] Water &gt; ingredients.length 3  Did you notice how we use [0] to get the first value? In programming we count starting at zero. This is called zero-indexing. The number inside the brackets is called an index. Index means the position of the item within the array. You can set a value using bracket notation and an assignment operator (=). const scores = [80, 41, 47]; scores[2] = 29; // Change the last score scores[3] = 51; // Add a new score  "},{"title":"Exercise (5 minutes)​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#exercise-5-minutes","content":"Exercise Create an array with the names of the people in your groupconsole.log out the names and how many people are in the groupPut someone from another group at the beginning of the arrayAdd someone else to the end of the list ## Working with Arrays When working with lists, you often need to manipulate, enhance, or search the information in that list. Some examples of things you might want to do with a list of data: Only use the first 10 items in a listGet people from a list whose name starts with a MFind the first person in a list to be over 100 years oldArrange people in a list alphabeticallyGet the last 10 items in an arrayAdd all the numbers up in a listGet all the cats in an array of animalsFrom a list of numbers, add a £ sign prefixCombine a list of romance films and thrillers "},{"title":"Exercise - extra credit (10 minutes)​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#exercise---extra-credit-10-minutes","content":"Exercise Working as a group - use the MDN documentation on arrays to see if you can find what methods might be useful to achieving the above examples. "},{"title":"Array methods​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#array-methods","content":"Do you remember how strings have special functions called methods? Here's an example to jog your memory: $ node &gt; let name = &quot;Daniel&quot;; undefined &gt; name.toLowerCase() daniel  Arrays also have several methods that you can use. "},{"title":".sort()​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#sort","content":"An array method that sorts the values in an array into ascending alphabetical or numerical order. const unorderedLetters = [&quot;z&quot;, &quot;v&quot;, &quot;b&quot;, &quot;f&quot;, &quot;g&quot;]; const orderedLetters = unorderedLetters.sort(); const unorderedNumbers = [8, 5, 1, 4, 2]; const orderedNumbers = unorderedNumbers.sort(); console.log(orderedLetters); // logs [ 'b', 'f', 'g', 'v', 'z' ] console.log(unorderedLetters); // logs [ 'b', 'f', 'g', 'v', 'z' ] console.log(orderedNumbers); // logs [ 1, 2, 4, 5, 8 ] console.log(unorderedNumbers); // logs [ 1, 2, 4, 5, 8 ]  When you call this array method it uses the array on the left side of the dot as an input, and it sorts that array also returning it. Notice that both ordered and unordered arrays are sorted now. "},{"title":".concat()​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#concat","content":"Adds (or concatenates) another value or array to the array. $ node &gt; let arr = [1, 2, 3]; undefined &gt; arr.concat(4) [1, 2, 3, 4] &gt; arr [1, 2, 3]  Did you notice how calling the concat method did not change arr? This is because concat, like most array methods, returns a new array; it does not alter the array you called the method on. If you want to use the array returned by calling .concat() you should store it in a new variable. const arr = [1, 2, 3]; const newArr = arr.concat(4); console.log(newArr); // logs [1, 2, 3, 4]  "},{"title":".slice()​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#slice","content":"Returns a slice of the array. You can tell .slice() where you want the slice to begin and end by passing it two parameters. $ node &gt; let arr = [0, 1, 2, 3, 4] undefined &gt; arr.slice(0, 2) [0, 1] &gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;].slice(1, 2) ['b']  "},{"title":".includes()​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#includes","content":"Returns true if a value is in the array. const mentors = [&quot;Daniel&quot;, &quot;Irini&quot;, &quot;Ashleigh&quot;, &quot;Rob&quot;, &quot;Etzali&quot;]; function isAMentor(name) { return mentors.includes(name); } console.log(&quot;Is Rukmuni a mentor?&quot;); console.log(isAMentor(&quot;Rukmini&quot;)); // logs false  "},{"title":".join()​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#join","content":"Returns all the array values joined together in a string. By default, this method takes no parameters and then the elements are divided with a comma ,. If you provide it with a string parameter though, then it becomes the divider of the elements, like the example below: $ node &gt; [&quot;H&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;].join(); 'H,e,l,l,o' &gt; [&quot;H&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;].join(&quot;--&quot;); 'H--e--l--l--o'  There is a string method .split(). In an interactive console try using the string .split() method and the array .join(). How could they work together? "},{"title":"Exercise (10 minutes)​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#exercise-10-minutes","content":"Exercise Use the array of the people from your table (or breakout room)Combine it with another array filled with the names from another tableconsole.log the names in alphabetical orderCreate a new value with the 2nd, 3rd and 4th people in itCreate a function that takes a name and an array of names and returns a string. If the name is not in an array, it should return &lt;name&gt; is not sitting at the table with &lt;people in the array&gt;. If the name is in the array, it should return &lt;name&gt; is sitting at the table with &lt;people in the array&gt;. "},{"title":"Array map​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#array-map","content":"Imagine you have an array of names... const mentors = [&quot;Daniel &quot;, &quot;irina &quot;, &quot; Gordon&quot;, &quot;ashleigh &quot;];  You notice that the names are not formatted consistently. To fix the array you decide you need to trim whitespace and convert to lowercase. How do you do that for every value in the array? We can write a function that changes one name: function tidy(name) { return name.trim().toLowerCase(); }  Now you need to run every name in the array through this function and update the array values. Thankfully there is an array method that does just this! "},{"title":".map()​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#map","content":"Runs every item in the array through a function and returns a new array with the values returned by the function. Have a look at this other example: function double(number) { return number * 2; } const numbers = [1, 2, 3]; const numbersDoubled = numbers.map(double);  The map() method runs the function we provided (double) on each item in the array and uses the return values to create a new array. In the example numbersDoubled is a new array containing [2, 4, 6]. Pay special attention to the map() method. You will use it a lot. "},{"title":"Callback functions​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#callback-functions","content":"A function that we provide to a method is called a callback function. The term highlights that although we provide the double function, the .map() method calls it. (Notice how we never write double() to call the function). We'll see callback functions used a lot more in the coming weeks. When a function is only needed for a map operation, developers will often declare the callback function inside the method call. Let's try copying and pasting the function declaration inside the .map() method call. const numbers = [1, 2, 3]; const numbersDoubled = numbers.map(function double(number) { return number * 2; });  We can make this a bit easier to read by removing the function name to declare an anonymous function. We can do this because we are not using the function anywhere else in the code, so we don't need the function name to reference it. We've named the returned array numbersDoubled, so it's clear what is going on. const numbers = [1, 2, 3]; const numbersDoubled = numbers.map(function (number) { return number * 2; });  We can make this code even simpler with arrow functions. const numbers = [1, 2, 3]; const numbersDoubled = numbers.map((number) =&gt; { return number * 2; });  The arrow function syntax declares a function without the function keyword. (There are some other differences between arrow functions and regular functions that you will learn about at a much later stage.) There is another thing you can do to make your code simpler. Remove the braces ({}) from an arrow function and the body of the function will be returned without needing to write the return keyword. const numbers = [1, 2, 3]; const numbersDoubled = numbers.map((number) =&gt; number * 2);  The expression number * 2 is automatically returned because it comes directly after the =&gt; arrow (instead of coming after curly braces). This is called an implicit return. "},{"title":"Exercise (10 minutes)​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#exercise-10-minutes-1","content":"Exercise I have a function defined below as: function abracaFunction(yourFunc) { console.log( &quot;I am abracaFunction! Watch as I mutate an array of strings to your heart's content!&quot; ); const abracaArray = [ &quot;James&quot;, &quot;Elamin&quot;, &quot;Ismael&quot;, &quot;Sanyia&quot;, &quot;Chris&quot;, &quot;Antigoni&quot;, ]; const abracaOutput = yourFunc(abracaArray); return abracaOutput; } This function does not need to be modified. Can you pass in a callback function which will mutate abracaArray such that it: Upper cases all letters in the array "},{"title":"Exercise - extra credit​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#exercise---extra-credit","content":"Exercise Modify your callback function from the previous exercise so that it also: Sorts abracaArray in alphabetical order "},{"title":"Array forEach​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#array-foreach","content":"The .forEach() method seems similar to .map() but it does not return a new array. Therefore .forEach() is only useful if you want to perform side effects. "},{"title":"Side effects​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#side-effects","content":"Generally, functions should take an input and return an output (based on that input), and not do anything else. When functions meet this criteria they can be called pure functions. A pure function does not: access any data unless it was passed in as a parameterchange data declared outside the functioninteracts with anything outside of the function (e.g. logs a message to the console, shows a message on a website, saves data to disk) These are all example of side effects. Of course, from time to time, we will need to perform side effects, but we should try to avoid side effects in functions and only have them when absolutely necessary. "},{"title":".forEach()​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#foreach","content":"Say we want to log to the console a list of names. const names = [&quot;Daniel&quot;, &quot;mozafar&quot;, &quot;irina&quot;];  We can use .forEach() to go through the array, item by item, and call a function we provide. names.forEach(function (name, index) { console.log(index + &quot;: &quot; + name); });  ###Exercise (10 minutes) Exercise Create a function that takes a birthYear, and returns the age of someoneYou are given an array with year that 7 people were born, [1964, 2008, 1999, 2005, 1978, 1985, 1919]. Take this array and create another array containing their ages.console.log the birth years array "},{"title":"Exercise (5 minutes)​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#exercise-5-minutes-1","content":"Exercise You can drive in the UK at the age of 17. Write another function that takes a birth year and returns a string Born in {year} can drive or Born in {year} can drive in {x} yearsUse the array of birth years, [ 1964, 2008, 1999, 2005, 1978, 1985, 1919 ], to get an array of strings saying if these people can driveconsole.log the answers "},{"title":"Array filter​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#array-filter","content":"Imagine you have an array of trainees' test scores: const testScores = [90, 50, 100, 66, 25, 80, 81];  You want to show only the test scores that are higher than 80. How do you do that for every value in the array? We can write a function that checks if one score is greater than 80: function isHighScore(score) { return score &gt; 80; }  To find out which scores were greater than 80, you'd have to run this function against every score in the array, and push the 80+ scores into a new array. Thankfully there is an array method that does just this! "},{"title":".filter()​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#filter","content":"Runs every item in the array through a condition that we set, and returns a new array with the values that match the condition. const highTestScores = testScores.filter(isHighScore); console.log(highTestScores); // logs [90, 100, 81]  "},{"title":"Exercise (10 mins)​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#exercise-10-mins","content":"Exercise Create a function which: Takes an array of birthYearsUses console.log to print the message These are the birth years of people who can drive: &lt;filtered birth years&gt;Returns an array of people who can drive (remember, you can drive if you are 17 years or older) "},{"title":"Array find​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#array-find","content":"Imagine you have an array of names: const names = [&quot;Daniel&quot;, &quot;James&quot;, &quot;Irina&quot;, &quot;Mozafar&quot;, &quot;Ashleigh&quot;];  How would you find the first name that's longer than 6 characters? You can write a predicate function that checks if a string is longer than 6 characters: function isLongName(name) { return name.length &gt; 6; }  To find the first item that satisfies the predicate you would have to go through each array item, and pass it into isLongName. Once it returns true, we can stop going through the array and grab the item that passed the predicate's test. Sounds complicated! Thankfully there is an array method that does just this! "},{"title":".find()​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#find","content":"Searches through the array and returns the value of the first item that satisfies a predicate function. const longName = names.find(isLongName); console.log(longName); // logs Mozafar  "},{"title":"Exercise (10 mins)​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#exercise-10-mins-1","content":"Exercise Create a function which: Takes an array of names as a parameterLooks to see if your name is in the arrayIf it is, return Found me!; if not, return Haven't found me :( "},{"title":"Chaining​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#chaining","content":"Notice how we were able to write one method after another e.g. names.map(formatName).forEach(log)? This is called method chaining. You can call .forEach() after .map() because .map() returns a new array. Consider this code: function formatName(name) { return name.split(&quot;&quot;)[0].toUpperCase() + name.slice(1); } function log(name, index) { console.log(index + &quot;: &quot; + name); } const namesFormatted = names.map(formatName); namesFormatted.forEach(log);  It can be written more simply (without assigning the array returned from .map() to a variable): names.map(formatName).forEach(log);  Be careful though! You can not call .map() after .forEach. names.forEach(log).map(formatName); // ERROR  This code does not work because forEach() does not return a new array (it returns undefined). The code is therefore attempting to call .map() on undefined, and undefined does not have a .map() method. "},{"title":"Exercise (15 minutes)​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#exercise-15-minutes","content":"Exercise Create a function which accepts an array of &quot;messy&quot; strings. Example: [ 100, &quot;iSMael&quot;, 55, 45, &quot;sANyiA&quot;, 66, &quot;JaMEs&quot;, &quot;eLAmIn&quot;, 23, &quot;IsMael&quot;, 67, 19, &quot;ElaMIN&quot;, ]; This function should: Remove all non-string entriesChange the strings to upper case, and add an exclamation mark to the end If you're using the above example, you should expect to return an array with 2x ELAMIN!, 1x SANYIA!, 2x ISMAEL! and 1x JAMES!. "},{"title":"PD (Asking good questions)​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#pd-asking-good-questions","content":"Adapted from Tectonica workshop Session objective: This session focuses on learning on the job by being proactive and asking for help in a structured way. Asking Good Questions slides Exercise (15 min) Exercise objective: To practice asking questions following the format provided. In small groups, pick a programming concept that you have difficulty with or are trying to learn. Use StackOverflow to see if you can get some good information about it. Role play for asking questions with a partner, use the the template sample script: &quot;I could use some help. I’m using this tech stack: . I want to to accomplish . I searched for and I read and tried . I’m getting this error/result: . I think the problem could be . Here’s a link to my code: __. Do you have any suggestions for me?&quot; "},{"title":"Coursework​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#coursework","content":"Click here to view the coursework for this lesson. "},{"title":"JavaScript 1 Quiz​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#javascript-1-quiz","content":"An optional quiz can be found here which can be used to test trainees understanding. This can be done in class or set as homework. "},{"title":"Feedback​","type":1,"pageTitle":"JavaScript Core I - 4","url":"/js-core-1/week-4/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"JS2 Module Project","type":0,"sectionRef":"#","url":"/js-core-2/module-project/","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"JS2 Module Project","url":"/js-core-2/module-project/#overview","content":"CYF Learning Lab - Coworker Discovery Tools An organisation wants to help its members connect with each other more easily. The tools you'll build will enable members to discover where their colleagues work, what they do, and how to contact them. "},{"title":"Requirements​","type":1,"pageTitle":"JS2 Module Project","url":"/js-core-2/module-project/#requirements","content":"Go to the Learning Lab and work through Sprint 1. This simulated project will introduce you to Agile working practices and roles. "},{"title":"Iteration​","type":1,"pageTitle":"JS2 Module Project","url":"/js-core-2/module-project/#iteration","content":"(More sprints to be enabled! This is MVP) "},{"title":"Delivery​","type":1,"pageTitle":"JS2 Module Project","url":"/js-core-2/module-project/#delivery","content":"When you have completed your simulated project, discuss what you have learned in your class channel. How did this project develop your understanding of Agile? How will you work together with other developers in the future? "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/js-core-2/week-1/instructors","content":"","keywords":""},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-1/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-js2 For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Flipped classroom recap/Q&A​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-1/instructors#flipped-classroom-recapqa","content":"The flipped classroom practice should have trainees define object literals and assign them to a variablelog objects using console.log and console.tableaccess fields of objects (using both .foo and [&quot;foo&quot;])modify fields of objectsadd fields to objectsdefine and access nested objects and arrays as valueswrite their first testcovered but not practiced (probably not useful) keys with spaces/adding quotes around keysdelete covered but probably a bit much defining methods using the this keyword not covered using objects as a dictionary/map (i.e. using bracket notation with keys that are not string literals) Some questions/prompts that may be useful When do we use an object?What notation do we use to write an object literal?Consider the following object: {name: 'Helium', symbol: 'He', atomicNumber: 2,} what fields (or properties) does it havewhat are the keys of the object?what are the corresponding values? What kinds of data can be stored in a value?In what way is a key/value pair different from a variable and its value (only in that it's contained inside an object? Otherwise, it can be changed, it can be assigned expressions of arbitrary complexity, etc.)Ask trainees to write/understand a filter function against an array of objectsAsk trainees to write/understand a map function against an array of objectsShow a test from a previous week and ask what the test is doing (trainees have all the pieces of notation at this point, though the expect(foo).toEqual(bar) chaining probably needs some handwaving) "},{"title":"Presentations​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-1/instructors#presentations","content":"JS 2 Week 1 - 2022 - London Created by London Volunteers Week 1 - JS Core 2 [Google Slides] - 14/05/2020 ResourcesCreated by Manchester and Abdoulrazack Arrays of Objects [Google Slides] - 04/06/2020 Created by Scotland Volunteers "},{"title":"Videos​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-1/instructors#videos","content":"Cooking with JavaScript Objects - 04/06/2020 Created by Scotland Volunteers &amp; Rares Matei "},{"title":"Notes​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-1/instructors#notes","content":""},{"title":"Build a static mockup first​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-1/instructors#build-a-static-mockup-first","content":"I'll normally have the trainees first make a prototype static html version of the expected output, based on their interpretation of the homework's written taskDo they agree? Give them time to discuss it and convince each other. If they all agree on the same wrong question interpretation, I'll be tempted to aim for that rather than correct them - knowing the learning objectives is important here.Normally I'll have them do this mockup on codepen, or somewhere quite distinct from their programmatically-constructed work so they don't mix them up. "},{"title":"Give trainees the intended HTML​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-1/instructors#give-trainees-the-intended-html","content":"I'd much prefer the exercise provided these mock-ups up-front, so the trainee can focus on the programming task. They waste a lot of time trying to interpret ambiguous task statements, and I'm sure volunteers also waste a lot of time trying to write them clearly, too. Picture is worth a 1000 words. "},{"title":"DOM Tree diagram​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-1/instructors#dom-tree-diagram","content":"I'll have (or I'll help) the trainees draw the intended DOM tree based on their static HTML prototype. By hand is best (https://autodraw.com is quick and simple).I'll have the trainees draw the starting DOM diagram (often the exercise has a starting div element into which the trainees will append created elements)I'll show the trainees how I think of createElement and appendElement working - the former creating an element that is imagined but not yet attached to the treeI'll stress that only those elements attached somehow to the tree will be shown. "},{"title":"Element view in dev tools​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-1/instructors#element-view-in-dev-tools","content":"This will come in particularly useful when the trainees are debugging the addition of elements which are invisible due to missing text content. "},{"title":"Decomposition​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-1/instructors#decomposition","content":"Guide the trainees in breaking down the task into smaller steps, including learning experiments not directly contributing to the final wanted HTML.With each subtask, prepare starting and target versions of HTML prototype codepen, and the starting version of the DOM tree diagram. "},{"title":"Use ALL of the representations​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-1/instructors#use-all-of-the-representations","content":"Get trainees to work through making the changes to the static HTML prototype (codepen) and then their DOM tree diagram, talking through the operations they need (creating an element, appending an element (where?)).get commitment to predictions at each point.Be wary of overwhelming the trainees with too many representations, but if they've met all of these individually with the exception of the DOM tree diagram, I have only seen struggling trainees embrace these different views and benefit from them. Certainly let them choose the ones that work best for them. Whatever helps them to reason about the task, their code, and the changes they need to make to it. "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/js-core-2/week-1/homework","content":"","keywords":""},{"title":"0) Flipped Classroom Practice (3h)​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-1/homework#0-flipped-classroom-practice-3h","content":"The video playlist contains some &quot;content&quot; videos and one &quot;practice&quot; video for each content video. Define an object. Complete the following code, assigning objects to the variables salem and ijeoma so that the output of the program is as below. Don't change the function! let salem = { // fill in object here }; // create an object here and assign it to a variable called ijeoma // This function is provided. You should not modify it! // It takes as input a person -&gt; how it uses the fields // in the person object will tell you what fields to put in the // objects above function logInformationAbout(person) { let age = 2023 - person.yearOfBirth; console.log( `${person.firstName} is from ${person.countryOfOrigin}`, `and will be ${age} years old in 2023` ); } logInformationAbout(salem); logInformationAbout(ijeoma);  The output should be Salem is from Sudan and will be 30 years old in 2023 Ijeoma is from England and will be 22 years old in 2023  1.1 Predict, evaluate and explain the following expressions in the node REPL let stock = { name: &quot;aapl&quot;, lastClosingPrice: 171.45, lastFiveDaysClosingPrices: [180.33, 176.28, 175.64, 172.99, 171.45], }; stock.name; stock[&quot;name&quot;]; stock.lastClosingPrice * 100; stock.lastFiveDaysClosingPrices[1]; stock.name = &quot;AAPL&quot;; stock;  Add a field (a key + value pair) to the stock object, describing it's change over the last 5 days let stock = { name: &quot;aapl&quot;, lastClosingPrice: 172.99, lastFiveDaysClosingPrices: [179.99, 180.33, 176.28, 175.64, 172.99], }; // write code here to add the changeInLastFiveDays field to stock console.log( &quot;In the last 5 days, the stock changed by&quot;, stock.changeInLastFiveDays );  The output should be In the last 5 days, the stock changed by -7  3.1 Write a program that prints out to the console information from the following object uk = { name: &quot;The United Kingdom of Great Britain and Northern Ireland&quot;, shortName: &quot;The UK&quot;, capitalCity: { name: &quot;London&quot;, population: 9648000, }, };  The output should be The capital of The UK is London. London has a population of 9648000  3.2 Complete the following program so that it prints out information about the stocks that went down in the past 5 days. const stocks = [ { name: &quot;aapl&quot;, lastClosingPrice: 172.99, lastFiveDaysClosingPrices: [179.99, 180.33, 176.28, 175.64, 172.99], }, { name: &quot;msft&quot;, lastClosingPrice: 327.29, lastFiveDaysClosingPrices: [340.69, 342.45, 334.69, 333.2, 327.29], }, { name: &quot;amzn&quot;, lastClosingPrice: 3408.34, lastFiveDaysClosingPrices: [3384.44, 3393.39, 3421.37, 3420.74, 3408.34], }, { name: &quot;googl&quot;, lastClosingPrice: 2869.45, lastFiveDaysClosingPrices: [2951.88, 2958.13, 2938.33, 2928.3, 2869.45], }, { name: &quot;tsla&quot;, lastClosingPrice: 938.53, lastFiveDaysClosingPrices: [1101.3, 1093.94, 1067.0, 1008.87, 938.53], }, ]; function getMessage(stock) { // return a message containing the name and last closing price of the stock } function isStockPriceDecreasing(stock) { // return a boolean indicating whether the stock decreased in price over the last 5 days } const decreasingStocks = stocks.filter(isStockPriceDecreasing); const messages = decreasingStocks.map(getMessage); console.log(&quot;Stocks that decreased in price over the last 5 days:&quot;); for (const message of messages) { console.log(message); }  Most of the code is already written. You should only modify the functions isStockPriceDecreasing and getMessage The output should be Stocks that decreased in price over the last 5 days: aapl last closing at 172.99 msft last closing at 327.29 googl last closing at 2869.45 tsla last closing at 938.53  Complete the lastClosingPrice method of the stock object so that it returns the last element of the lastFiveDaysClosingPrices array. This practice exercise is optional. let stock = { name: &quot;aapl&quot;, lastClosingPrice: function () { return this.lastFiveDaysClosingPrices[4]; }, lastFiveDaysClosingPrices: [179.99, 180.33, 176.28, 175.64, 173.99], }; console.log(stock.lastClosingPrice());  The output should be 173.99  Add a test to your solution to 1-weather-report.js in JavaScript-Core-1-Coursework-Week3. This test should check that when 3 city names are passed as an argument to the getTemperatureReport function, the returned array should be of length 3. The assertion portion of such a test would look like this: expect(getTemperatureReport(usersCities).length).toEqual(3);  "},{"title":"1) Review Solutions for Last Weeks Coursework​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-1/homework#1-review-solutions-for-last-weeks-coursework","content":"Before starting this week, be sure to review the solutions for last weeks coursework https://github.com/CodeYourFuture/JavaScript-Core-1-Coursework-Week4-Solution Make sure you work out what you don't understand and spend some time considering how the code works. In each of the folders you'll find a solutions.md file that will explain more of the solution to you. You should read each of them. Note: This is a private repository. Please speak to your Teacher, Buddy or Class Coordinator to get access. You should ask them to invite your whole class. "},{"title":"2) CodeWars (1 hour)​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-1/homework#2-codewars-1-hour","content":"https://docs.codeyourfuture.io/course-processes/running-the-course/codewars#codeyourfuture-collections Every week you need to complete at least three kata. Spend at least 20 minutes, three times a week, on your kata workout. You must be at level 7 kyu or below in this week of the course. Find the Collection for JS2 Week 1 on the CodeYourFuture account: https://www.codewars.com/users/CodeYourFuture/authored_collections "},{"title":"3) JavaScript Challenges (3 hours) 🔑​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-1/homework#3-javascript-challenges-3-hours-","content":"Here are a set of exercise that will help you to solidify your knowledge of JavaScript. For this step, open the &quot;Mandatory&quot; folder and complete all of the challenges. https://github.com/CodeYourFuture/JavaScript-Core-2-Coursework-Week1 Before you start, make sure you fork the repository to your Github account. "},{"title":"4) Git and the Command Line (7 Hours)​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-1/homework#4-git-and-the-command-line-7-hours","content":"This week we'll be introducing you to Git on the Command Line. You can find these exercises here https://syllabus.codeyourfuture.io/git/cli/homework Instructor Note: Please open this link and copy each task one by one to Google Classroom "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/js-core-2/week-2/homework","content":"","keywords":""},{"title":"0) Flipped Classroom Practice (3h)​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-2/homework#0-flipped-classroom-practice-3h","content":"1.1 Given the following array of objects let people = [ { name: &quot;Bob&quot;, age: 30 }, { name: &quot;Hamed&quot;, age: 15 }, { name: &quot;John&quot;, age: 20 }, { name: &quot;Elise&quot;, age: 35 }, { name: &quot;Nasir&quot;, age: 24 }, ];  Use the appropriate array method(s) to Log to the console an array containing the people older than 25Log to the console an array containing the names of the people [ { name: 'Bob', age: 30 }, { name: 'Elise', age: 35 } ] [ 'Bob', 'Hamed', 'John', 'Elise', 'Nasir']  2.1 TDD practice Fork and clone https://github.com/CodeYourFuture/tdd-practice. Begin solving the exercise by answering the questions about the first few steps. 2.2 Finish solving the exercise, continuing to write tests step by step. "},{"title":"1) Review Solutions for Last Weeks Coursework​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-2/homework#1-review-solutions-for-last-weeks-coursework","content":"Before starting this week, be sure to review the solutions for last weeks coursework https://github.com/CodeYourFuture/JavaScript-Core-1-Coursework-Week1-Solution Make sure you work out what you don't understand and spend some time considering how the code works. In each of the folders you'll find a solutions.md file that will explain more of the solution to you. You should read each of them. Note: This is a private repository. Please speak to your Teacher, Buddy or Class Coordinator to get access. You should ask them to invite your whole class. "},{"title":"2) CodeWars (1 hour)​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-2/homework#2-codewars-1-hour","content":"https://docs.codeyourfuture.io/course-processes/running-the-course/codewars#codeyourfuture-collections Every week you need to complete at least three kata. Spend at least 20 minutes, three times a week, on your kata workout. You must be at level 7 kyu or below in this week of the course. Find the Collection for JS2 Week 2 on the CodeYourFuture account: https://www.codewars.com/users/CodeYourFuture/authored_collections "},{"title":"3) JavaScript Challenges (3 hours) 🔑​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-2/homework#3-javascript-challenges-3-hours-","content":"Here are a set of exercise that will help you to solidify your knowledge of JavaScript. For this step, open the &quot;Mandatory&quot; folder and complete all of the challenges. https://github.com/CodeYourFuture/JavaScript-Core-2-Coursework-Week2 Before you start, make sure you fork the repository to your Github account. "},{"title":"4) Sign Up to Render (20 minutes)​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-2/homework#4-sign-up-to-render-20-minutes","content":"Render is a hosting site for static sites (front end). Sign up for a free account only. Sign in with github.https://render.com/ "},{"title":"5) Module Project​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-2/homework#5-module-project","content":"Begin your module project, if you have not done so already. "},{"title":"8) Teamwork Project - Gathering requirements (PD - 3 hr)​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-2/homework#8-teamwork-project---gathering-requirements-pd---3-hr","content":"Thinking back to your Agile Development class on JavaScript 1, Week 1, your group should: Define what would be the minimum viable product (MVP)Define which features are need for the MVPCreate some user stories that reflect these features Stretch target: define the acceptance criteria of the user stories so that you can ensure that developer and tester have all the necessary information "},{"title":"9) Teamwork Project - Resolving conflicts (PD - 1 hr)​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-2/homework#9-teamwork-project---resolving-conflicts-pd---1-hr","content":"If you need to remember this video on Resolving Workplace Conflict, watch it again. It's 7 minutes long. Make a plan about how to resolve conflicts in your group. "},{"title":"10) Agile reading (PD - 1 hr)​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-2/homework#10-agile-reading-pd---1-hr","content":"Read the following material and share your 3 key takeaways: ScrumGithub for project management "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/js-core-2/week-2/instructors","content":"","keywords":""},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-2/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-js2 For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Flipped classroom recap/Q&A​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-2/instructors#flipped-classroom-recapqa","content":"The flipped classroom practice should have trainees Revisit arrays of objects in greater detailPractice TDD Red-&gt;Green-&gt;RefactorGiven/When/ThenWrite/run Jest tests Bonus material (i.e. trainees should come back to this when they are ready/when they need it) Using objects as maps (dictionaries, and other names)for .. in loop Some questions/prompts that may be useful Why is it useful for arrays of objects to contain objects that &quot;look the same&quot;What does it mean for 2 objects to &quot;look the same&quot;?Ask trainees to write/understand a filter function against an array of objectsAsk trainees to write/understand a map function against an array of objectsShow a test from a previous week and ask what the test is doing (trainees have all the pieces of notation at this pointWhy do we test? (probably still unclear at this point)What is the red-green-refactor cycleWhat is the structure we use to write tests? (Given/When/Then)Can you translate some user requirements into Given/When/Then? "},{"title":"TDD Kata​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-2/instructors#tdd-kata","content":"Choose a very simple kata, level 7 at max. Go much slower than you feel is reasonable. If you don't have a mentor who can demonstrate TDD style kata, ask in the #cyf-codewars channel for someone to dial in for 20 minutes. But don't worry - it doesn't have to be perfect! Just sharing these strategies with trainees is the goal here. Keep it simple, keep it short. Keep your mistakes in so trainees understand that mistakes are normal. "},{"title":"Presentations​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-2/instructors#presentations","content":"JS 2 Week 2 - 2023 - London Created by London Volunteers ResourcesCreated by Manchester and AbdoulrazackArrays of Objects [Google Slides] - 04/06/2020 Created by Scotland Volunteers "},{"title":"Videos​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-2/instructors#videos","content":"Cooking with JavaScript Objects - 04/06/2020 Created by Scotland Volunteers &amp; Rares Matei "},{"title":"JavaScript Core II - 1","type":0,"sectionRef":"#","url":"/js-core-2/week-1/lesson","content":"","keywords":""},{"title":"Contents​","type":1,"pageTitle":"JavaScript Core II - 1","url":"/js-core-2/week-1/lesson#contents","content":"ObjectsObjects Get and SetMore complex objectsObject methods  "},{"title":"Learning Objectives​","type":1,"pageTitle":"JavaScript Core II - 1","url":"/js-core-2/week-1/lesson#learning-objectives","content":"By the end of this lesson trainees should be able to: Define what an object is in JavaScriptBe able to write code that can use an object to store dataBe able to write code that changes the properties of an objectBe able to write code that can retrieve data from an objectWrite and call methods inside JavaScript objects  "},{"title":"Objects​","type":1,"pageTitle":"JavaScript Core II - 1","url":"/js-core-2/week-1/lesson#objects","content":"Objects in the real world have properties that describe how they are unique. Your laptop, for example, has a brand (Lenovo/Apple etc.), a screen size (13/15 inch), RAM (8/16GB) etc. How would we describe the above laptop as a JavaScript object? let laptop = { brand: &quot;Lenovo&quot;, screenSize: 13, isTouchscreen: true, };  "},{"title":"Exercise (1)​","type":1,"pageTitle":"JavaScript Core II - 1","url":"/js-core-2/week-1/lesson#exercise-1","content":"ExerciseSolution Exercise Describe your own laptop as a JavaScript object. Try to think of as many properties as you can! Example: let laptop = { brand: &quot;Lenovo&quot;, screenSize: 13, isTouchscreen: true, };  "},{"title":"Exercise (2)​","type":1,"pageTitle":"JavaScript Core II - 1","url":"/js-core-2/week-1/lesson#exercise-2","content":"Exercise Think of 5 different real world &quot;things&quot; that you can describe with a JavaScript object Assign each of them to a separate variable Example: let jumper = { color: &quot;blue&quot;, isCotton: true, };  "},{"title":"Exercise (3)​","type":1,"pageTitle":"JavaScript Core II - 1","url":"/js-core-2/week-1/lesson#exercise-3","content":"Exercise The objects below have some syntax issues - try and fix them all! let kitten = { fur colour: &quot;orange&quot;, age &quot;23&quot; }; let laptop = brand: &quot;Lenovo&quot; ram &quot;5GB&quot; } let phone = { operating system &quot;iOS&quot;, hasStylus: true, megapixels 12 &quot;batteryLife&quot;: &quot;24 hours&quot; Useful words to remember when talking about objects: object literal: anything that has a set of {...} around a set of properties is an object literalproperty or key: brand, screenSize and isTouchScreen are properties/keys of the objectvalues: &quot;Lenovo&quot;, 13 and true are values of the object's properties "},{"title":"Exercise (4)​","type":1,"pageTitle":"JavaScript Core II - 1","url":"/js-core-2/week-1/lesson#exercise-4","content":"Exercise Choose a few nearby colleagues and one mentor, and go through each variable you declared above in Part 1, 2 or 3, reading everything that happens out loud. Make sure each member of your group has read at least one variable! Make sure you use words like: object literalproperty / keyvaluestring / number / booleandeclaring a variableetc. "},{"title":"Objects Get and Set​","type":1,"pageTitle":"JavaScript Core II - 1","url":"/js-core-2/week-1/lesson#objects-get-and-set","content":""},{"title":"Getting the value of an object's property​","type":1,"pageTitle":"JavaScript Core II - 1","url":"/js-core-2/week-1/lesson#getting-the-value-of-an-objects-property","content":"Let's take one of the objects we looked at earlier.. let laptop = { brand: &quot;Lenovo&quot;, screenSize: 13, isTouchscreen: true, };  Try to console.log(laptop). The output might depend on your environment! To find out the value of an object's property, you can use the dot notation.. console.log(laptop.brand);  You can also use the bracket notation (although this is rarely used, it's good to know): console.log(laptop[&quot;brand&quot;]);  Exercise (1)​ Console.log the values of each property of &quot;kitten&quot; ExerciseSolution Exercise /* Console.log the values of each property of &quot;kitten&quot; */ let kitten = { ageMonths: 3, isFemale: true, furColour: &quot;brown&quot;, };  Exercise (2)​ ExerciseSolution Exercise The following code contains syntax errors - try and fix them! Once you fix them, run the code, it should output the correct values! It should output: iPhone 2017 let phone = { brand:'iPhone, model 'iPhone X' launchYear: 2017, is Unlocked: true ; let phoneBrand = phone.brand; let phoneLaunchYear = phone[&quot;launchYear&quot;]; console.log(phoneBrand); console.log(phoneLaunchYear);  "},{"title":"Setting the value of a property​","type":1,"pageTitle":"JavaScript Core II - 1","url":"/js-core-2/week-1/lesson#setting-the-value-of-a-property","content":"Similar to reading, if we want to set a property: laptop.brand = &quot;Apple&quot;;  It's strongly recommended you always use the same type when re-assigning an object's property (if it was a string before, keep it a string - and so on). let laptop = { brand: &quot;Lenovo&quot;, screenSize: 13, isTouchscreen: true, }; // DON'T DO THIS laptop.screenSize = &quot;15 inch&quot;; // OK TO DO laptop.screenSize = 15;  Exercise (1)​ ExerciseSolution Exercise Write code in the space provided so that it outputs &quot;Gilbert&quot; It should output: &quot;Gilbert&quot; // WRITE CODE BELOW THIS // WRITE CODE ABOVE THIS console.log(kitten.name);  Exercise (2)​ ExerciseSolution Exercise Write code in the space provided so that the expected values output It should output: Rex true let dog = { name: &quot;Billy&quot;, wantsToPlay: false, }; // WRITE CODE BELOW THIS LINE // WRITE CODE ABOVE THIS LINE console.log(dog.name); console.log(dog.wantsToPlay); // -&gt; it should output: // Rex // true  "},{"title":"More Complex Objects​","type":1,"pageTitle":"JavaScript Core II - 1","url":"/js-core-2/week-1/lesson#more-complex-objects","content":"Object properties can even be assigned other objects, arrays or variables too. The example below shows an object with keys that have been assigned a variable, an array, and an object. let kittenName = &quot;Feathers&quot;; let kitten = { name: kittenName, toyCollection: [&quot;blue ball&quot;, &quot;green ball&quot;, &quot;hoover box&quot;], favoriteLocation: { roomName: &quot;Living room&quot;, napPlace: &quot;window&quot;, idealTemperatureCelsius: 24, }, };  "},{"title":"Exercise (1)​","type":1,"pageTitle":"JavaScript Core II - 1","url":"/js-core-2/week-1/lesson#exercise-1-3","content":"ExerciseSolution Exercise Given the following house - follow the instructions below. Make sure you run the file after and it outputs the correct results. let house = { address: &quot;1 Kinning Park&quot;, previousOwners: [&quot;Claire M.&quot;, &quot;John A.&quot;], currentOwner: { firstName: &quot;Margaret&quot;, lastName: &quot;Conway&quot;, }, }; /* DO NOT EDIT ANYTHING ABOVE THIS LINE WRITE YOUR CODE BELOW */ // - change the address of &quot;house&quot; to '51 Berkley Road' // - change the previous owners of &quot;house&quot; to [&quot;Brian M.&quot;, &quot;Fiona S.&quot;] // - change the last name of the current owner of &quot;house&quot; to &quot;Montgomery&quot; /* DO NOT EDIT ANYTHING BELOW THIS LINE */ console.log( `Expected result: 51 Berkley Road. Actual result: ${house.address}` ); console.log( `Expected result: Brian M., Fiona S. Actual result: ${house.previousOwners.toString()}` ); console.log( `Expected result: Montgomery. Actual result: ${house.currentOwner.lastName}` );  "},{"title":"Exercise (2)​","type":1,"pageTitle":"JavaScript Core II - 1","url":"/js-core-2/week-1/lesson#exercise-2-3","content":"ExerciseSolution Exercise Given the same &quot;house&quot; object again Follow the instructions below and then run the file and make sure it outputs the correct results let house = { address: &quot;1 Kinning Park&quot;, previousOwners: [&quot;Claire M.&quot;, &quot;John A.&quot;], currentOwner: { firstName: &quot;Margaret&quot;, lastName: &quot;Conway&quot;, }, }; let newCurrentOwner = { firstName: &quot;Georgina&quot;, lastName: &quot;Hernandez&quot;, }; /* DO NOT EDIT ANYTHING ABOVE THIS LINE WRITE YOUR CODE BELOW */ // - assign the value of the variable 'newCurrentOwner' as the value to the house's &quot;currentOwner&quot; // - from the list of previous owners, replace only &quot;John A.&quot; with &quot;Stephen B.&quot; // - give the house a new property called 'isForSale' with the value 'false' /* DO NOT EDIT ANYTHING BELOW THIS LINE */ console.log( `Did you correctly assign the new owner using the given variable?&quot;,&quot;Expected result: true. Actual result: &quot; ${ house.currentOwner === newCurrentOwner }` ); console.log( `Expected result: Claire M., Stephen B. Actual result: ${house.previousOwners.toString()}` ); console.log(`Expected result: false. Actual result: ${house.isForSale}`);  "},{"title":"Exercise (3)​","type":1,"pageTitle":"JavaScript Core II - 1","url":"/js-core-2/week-1/lesson#exercise-3-1","content":"ExerciseSolution Exercise Given the same &quot;house&quot; object again Write the code for the functions as per the description above them let kinningParkHouse = { address: &quot;1 Kinning Park&quot;, price: 180000, currentOwner: { firstName: &quot;Margaret&quot;, lastName: &quot;Conway&quot;, email: &quot;margaret@fake-emails.com&quot;, }, }; let parkAvenueHouse = { address: &quot;50 Park Avenue&quot;, price: 195000, currentOwner: { firstName: &quot;Marie&quot;, lastName: &quot;McDonald&quot;, email: &quot;marie.m@real-emails.com&quot;, }, }; /* DO NOT EDIT ANYTHING ABOVE THIS LINE WRITE YOUR CODE BELOW */ // returns the full name (first name + last name) of the owner of the house function getOwnerFullName(house) {} // returns an array of the owners' email addresses of the two houses function getEmailAddresses(house1, house2) {} // returns the address for the cheapest house out of the two function getCheapestAddress(house1, house2) {} /* DO NOT EDIT ANYTHING BELOW THIS LINE */ console.log( `Expected result: Margaret Conway. Actual result: ${getOwnerFullName( kinningParkHouse )}` ); console.log( `Expected result: margaret@fake-emails.com, marie.m@real-emails.com. Actual result: ${getEmailAddresses( kinningParkHouse, parkAvenueHouse )}` ); console.log( `Expected result: 1 Kinning Park. Actual result: ${getCheapestAddress( parkAvenueHouse, kinningParkHouse )}` );  "},{"title":"Object Methods​","type":1,"pageTitle":"JavaScript Core II - 1","url":"/js-core-2/week-1/lesson#object-methods","content":"Besides having specific properties, objects in the real world can also do things. For example, a computer can display something on the screen, a person can say their names etc... In Javascript, we do this using 'methods'. A method is a function attached to a particular object. You have already used some predefined methods before, for example toUpperCase() on a string or filter() on an array. let athlete = { name: &quot;Usain Bolt&quot;, goldMedals: 25, sayHi: function () { return &quot;Hi everybody!&quot;; }, };  How do we call this method? athlete.sayHi(); // returns &quot;Hi everybody!&quot;  An object method can also rely on the other properties of the object to do more complex calculation. To reference the current object in the body of the method, we will use the keyword this. Let's take an example. let athlete = { name: &quot;Usain Bolt&quot;, goldMedals: 25, sayName: function () { return &quot;My name is &quot; + this.name; }, }; athlete.sayName(); // returns &quot;My name is Usain Bolt&quot;  Knowing this, you can have methods which modify existing properties of your object. let athlete = { name: &quot;Usain Bolt&quot;, goldMedals: 25, winNewMedal: function () { this.goldMedals = this.goldMedals + 1; }, }; athlete.winNewMedal(); console.log(athelete.goldMedals); // prints &quot;26&quot;  As methods are just functions attached to objects, they can also take parameters. let athlete = { name: &quot;Usain Bolt&quot;, goldMedals: 25, silverMedals: 7, winNewMedal: function (medal) { if (medal === &quot;gold&quot;) { this.goldMedals = this.goldMedals + 1; } else { this.silverMedals = this.silverMedals + 1; } }, }; athlete.winNewMedal(&quot;silver&quot;); console.log(athlete.goldMedals); // prints &quot;25&quot; console.log(athlete.silverMedals); // prints &quot;8&quot;  "},{"title":"Exercise (1)​","type":1,"pageTitle":"JavaScript Core II - 1","url":"/js-core-2/week-1/lesson#exercise-1-4","content":"ExerciseSolution Exercise A person named Alice is defined below. Add a method &quot;greet&quot; so this person can say hello.Add a method &quot;sayName&quot; so this person can say their own name. Hint: use 'this' keyword to access the name property. let person = { name: &quot;Alice&quot;, age: 25, }; /* DO NOT EDIT ANYTHING BELOW THIS LINE */ console.log( `Expected result: Hello everybody. Actual result: ${person.greet()}` ); console.log( `Expected result: 'My name is Alice'. Actual result: ${person.sayName()}` );  "},{"title":"Exercise (2)​","type":1,"pageTitle":"JavaScript Core II - 1","url":"/js-core-2/week-1/lesson#exercise-2-4","content":"Exercise The following code contains syntax errors - try and fix them! Once you fix them, run this file, it should output the correct values! let person = { name: &quot;Alice&quot;, age: 25, currentAddress: &quot;Glasgow&quot;, changeAddress: (newAddress) { currentAddress = newAddress; }, celebrateBirthday: function { that.age = that.age + 1; } };  "},{"title":"Exercise (3)​","type":1,"pageTitle":"JavaScript Core II - 1","url":"/js-core-2/week-1/lesson#exercise-3-2","content":"Exercise The following code contains syntax errors - try and fix them! Once you fix them, run this file, it should output the correct values! let person = { name: &quot;Alice&quot;, age: 25, currentAddress: &quot;Glasgow&quot;, changeAddress: (newAddress) { currentAddress = newAddress; }, celebrateBirthday: function { that.age = that.age + 1; } }; /* DO NOT EDIT ANYTHING BELOW THIS LINE */ person.changeAddress(&quot;Edinburgh&quot;); console.log(`Expected result: Edinburgh. Actual result: ${person.currentAddress}`); person.celebrateBirthday(); console.log(`Expected result: 26. Actual result: ${person.age}`);  "},{"title":"Exercise (4)​","type":1,"pageTitle":"JavaScript Core II - 1","url":"/js-core-2/week-1/lesson#exercise-4-1","content":"ExerciseSolution Exercise Alice has a list of good friends. Define a method &quot;makeFriend&quot; to add a new friend to her list. let person = { name: &quot;Alice&quot;, friends: [&quot;John&quot;, &quot;Nina&quot;], }; /* DO NOT EDIT ANYTHING BELOW THIS LINE */ person.makeFriend(&quot;Bob&quot;); console.log( `Expected result: 'John,Nina,Bob'. Actual result: ${person.friends}` );  "},{"title":"Exercise (5)​","type":1,"pageTitle":"JavaScript Core II - 1","url":"/js-core-2/week-1/lesson#exercise-5","content":"ExerciseSolution Exercise A coffee machine is defined below. One that can buy three different coffees. Complete the methods &quot;insertMoney&quot; and &quot;getCoffee&quot; to match the expected result. insertMoney takes an amount in parameter to add money in the coffee machine. getCoffee takes a coffee type in parameter and dispends the selected coffee only if the inserted amount is greater or equal than the price of the coffee! let coffeeMachine = { brand: &quot;Super Coffee&quot;, prices: { cappuccino: 2.4, blackCoffee: 1.5, flatWhite: 3.0, }, insertedAmount: 0, insertMoney: function (amount) {}, getCoffee: function (coffee) {}, }; /* DO NOT EDIT ANYTHING BELOW THIS LINE */ coffeeMachine.insertMoney(2.4); console.log( `Expected result: 'Please take your cappuccino'. Actual result: ${coffeeMachine.getCoffee( &quot;cappuccino&quot; )}` ); coffeeMachine.insertMoney(1.5); console.log( `Expected result: 'Please take your blackCoffee'. Actual result: ${coffeeMachine.getCoffee( &quot;blackCoffee&quot; )}` ); coffeeMachine.insertMoney(4.0); console.log( `Expected result: 'Please take your flatWhite'. Actual result: ${coffeeMachine.getCoffee( &quot;flatWhite&quot; )}` ); coffeeMachine.insertMoney(2.4); console.log( `Expected result: 'Sorry you don't have enough money for a flatWhite'. Actual result: ${coffeeMachine.getCoffee( &quot;flatWhite&quot; )}` );  "},{"title":"Coursework​","type":1,"pageTitle":"JavaScript Core II - 1","url":"/js-core-2/week-1/lesson#coursework","content":"The coursework for this lesson. "},{"title":"Feedback​","type":1,"pageTitle":"JavaScript Core II - 1","url":"/js-core-2/week-1/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/js-core-2/week-3/homework","content":"","keywords":""},{"title":"1) Complete this online course (4 hours)​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-3/homework#1-complete-this-online-course-4-hours","content":"You should complete the following sections from this online tutorial: Get ready to make your webpages interactiveJS and the DOMDOM access methodsDOM modificationDOM events https://www.khanacademy.org/computing/computer-programming/html-css-js "},{"title":"2) Study these DOM materials (1 hour)​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-3/homework#2-study-these-dom-materials-1-hour","content":""},{"title":"Readings​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-3/homework#readings","content":"MDN - Introduction to the DOM https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction Eloquent JavaScript - The Document Object Model https://eloquentjavascript.net/14_dom.html "},{"title":"Watch​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-3/homework#watch","content":"Coding Train - HTML/CSS/DOM https://thecodingtrain.com/Tutorials/8-html-css-dom/ "},{"title":"3) JavaScript Challenges (3 hours) 🔑​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-3/homework#3-javascript-challenges-3-hours-","content":"Here are a set of exercise that will help you to solidify your knowledge of JavaScript. For this step, open the &quot;Exercises&quot; folder and complete all of the challenges. https://github.com/CodeYourFuture/JavaScript-Core-2-Coursework-Week3 Before you start, make sure you fork the repository to your Github account. "},{"title":"4) JavaScript Projects (8 hours)​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-3/homework#4-javascript-projects-8-hours","content":"Next, in the same repository complete all of the exercises in the &quot;Project&quot; folder. https://github.com/CodeYourFuture/JavaScript-Core-2-Coursework-Week3 If you finish all of those, spend some time "},{"title":"5) Give feedback on your colleague's coursework (1 hour)​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-3/homework#5-give-feedback-on-your-colleagues-coursework-1-hour","content":"Use what you learned in this lesson to give feedback to other trainees who have submitted their coursework. Helping to give feedback on other peoples coursework doesn't only help them, it also helps you by reading a variety of different code. You must View the open Pull Requests here  https://github.com/CodeYourFuture/JavaScript-Core-2-Coursework-Week3/pulls Find two pull requests from people in your class that have no, or few, comments on them Leave comments on the two pull requests with improvements or suggestions Leave a comment saying that you have reviewed it and a nice comment about something you liked (always remember to be nice!)  Make sure you review at least two other pull requests. It's important that you see a variety of different answers. Remember, you should use the Code Style Guide to help you https://syllabus.codeyourfuture.io/guides/code-style-guide "},{"title":"6) CodeWars (1 hour)​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-3/homework#6-codewars-1-hour","content":"https://docs.codeyourfuture.io/course-processes/running-the-course/codewars#codeyourfuture-collections Every week you need to complete at least three kata. Spend at least 20 minutes, three times a week, on your kata workout. Find the Collection for JS-2 Week 2 on the CodeYourFuture account: https://www.codewars.com/users/CodeYourFuture/authored_collections "},{"title":"7) (Stretch) Extra Challenges​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-3/homework#7-stretch-extra-challenges","content":"Have you completed all of the above homework? Pick one of the challenges in this repository and complete it. https://github.com/CodeYourFuture/JavaScript-Core-2-Challenges "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/js-core-2/week-3/instructors","content":"","keywords":""},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-3/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-js2 For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Presentations​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-3/instructors#presentations","content":"JS 2 Week 3 - 2023 - London Created by London Volunteers "},{"title":"Notes​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-3/instructors#notes","content":""},{"title":"Build a static mockup first​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-3/instructors#build-a-static-mockup-first","content":"I'll normally have the trainees first make a prototype static html version of the expected output, based on their interpretation of the homework's written taskDo they agree? Give them time to discuss it and convince each other. If they all agree on the same wrong question interpretation, I'll be tempted to aim for that rather than correct them - knowing the learning objectives is important here.Normally I'll have them do this mockup on codepen, or somewhere quite distinct from their programmatically-constructed work so they don't mix them up. "},{"title":"Give trainees the intended HTML​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-3/instructors#give-trainees-the-intended-html","content":"I'd much prefer the exercise provided these mock-ups up-front, so the trainee can focus on the programming task. They waste a lot of time trying to interpret ambiguous task statements, and I'm sure volunteers also waste a lot of time trying to write them clearly, too. Picture is worth a 1000 words. "},{"title":"DOM Tree diagram​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-3/instructors#dom-tree-diagram","content":"I'll have (or I'll help) the trainees draw the intended DOM tree based on their static HTML prototype. By hand is best (https://autodraw.com is quick and simple).I'll have the trainees draw the starting DOM diagram (often the exercise has a starting div element into which the trainees will append created elements)I'll show the trainees how I think of createElement and appendElement working - the former creating an element that is imagined but not yet attached to the treeI'll stress that only those elements attached somehow to the tree will be shown. "},{"title":"Element view in dev tools​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-3/instructors#element-view-in-dev-tools","content":"This will come in particularly useful when the trainees are debugging the addition of elements which are invisible due to missing text content. "},{"title":"Decomposition​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-3/instructors#decomposition","content":"Guide the trainees in breaking down the task into smaller steps, including learning experiments not directly contributing to the final wanted HTML.With each subtask, prepare starting and target versions of HTML prototype codepen, and the starting version of the DOM tree diagram. "},{"title":"Use ALL of the representations​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-3/instructors#use-all-of-the-representations","content":"Get trainees to work through making the changes to the static HTML prototype (codepen) and then their DOM tree diagram, talking through the operations they need (creating an element, appending an element (where?)).get commitment to predictions at each point.Be wary of overwhelming the trainees with too many representations, but if they've met all of these individually with the exception of the DOM tree diagram, I have only seen struggling trainees embrace these different views and benefit from them. Certainly let them choose the ones that work best for them. Whatever helps them to reason about the task, their code, and the changes they need to make to it. "},{"title":"JavaScript Core II - 2","type":0,"sectionRef":"#","url":"/js-core-2/week-2/lesson","content":"","keywords":""},{"title":"Learning Objectives​","type":1,"pageTitle":"JavaScript Core II - 2","url":"/js-core-2/week-2/lesson#learning-objectives","content":"By the end of this lesson trainees should be able to: Describe the TDD cycleWrite and call methods inside JavaScript objectsUse Objects when contained inside an arrayWrite code that uses objects built-in methodsWrite code that can iterate through an objectIn a pair, complete a kata using array and object methods  "},{"title":"TDD and Methods​","type":1,"pageTitle":"JavaScript Core II - 2","url":"/js-core-2/week-2/lesson#tdd-and-methods","content":"We've used string methods. We've used array methods. We've used object methods. This week we will bring all these things together and start understanding how to use methods on arrays of objects. Then, to help you embed this learning we will practice some kata together. But first, let's spend a short time talking about Test Driven Development, so you can start using it to help you in your kata practice. "},{"title":"Red, Green, Refactor​","type":1,"pageTitle":"JavaScript Core II - 2","url":"/js-core-2/week-2/lesson#red-green-refactor","content":"Test Driven Development (TDD) is a method of writing code. Instead of writing code and then writing tests, you write the test first. Red​ Begin by writing the simplest test you can, to satisfy the smallest requirement you can see. Of course, this test will fail, as there is no code! This is the &quot;red&quot; stage. Green​ Next, write just enough code to pass the test. TDD is all about finding the smallest, simplest step to take. Once your test is passing, you have reached the &quot;green&quot; stage. Refactor​ The final stage is &quot;refactor&quot;. To refactor your code, you will improve the form without changing the function. With TDD, you can do this safely, because if the refactor changes the underlying function, the test will fail. "},{"title":"Kata​","type":1,"pageTitle":"JavaScript Core II - 2","url":"/js-core-2/week-2/lesson#kata","content":"First, mentors will demonstrate pairing on a kata using Test Driven Development.Then we will work through exercises to understand the methods the mentors used in the kata.Last, everyone will pair on a kata from CYF Array and Object Methods. TDD Kata 20 minutes Two mentors (or a mentor and trainee) will pair on this kata from CYF Array and Object Methods in a TDD style. Remember the Steps: Red, Green, Refactor Red: Write a failing testGreen: Write the minimum code to make your test passRefactor Exercise: Reflect on TDD TDD is a popular method for writing code among professional programmers. Why do you think this is? In small groups, take 5 minutes to discuss what you think the benefits of TDD might be? Then report your findings back to the group. There isn't really a &quot;correct&quot; answer here, it's a good idea to discuss with other trainees and volunteers. "},{"title":"Arrays of objects​","type":1,"pageTitle":"JavaScript Core II - 2","url":"/js-core-2/week-2/lesson#arrays-of-objects","content":"In the past weeks, you've learned about using arrays of numbers, arrays of string etc... In the following, we will learn how to use arrays of objects. let kitten1 = { name: &quot;Fluffy&quot;, weeksOld: 2, }; let kitten2 = { name: &quot;Megatron&quot;, weeksOld: 1, }; let kitten3 = { name: &quot;Billy&quot;, weeksOld: 5, }; let kittens = [kitten1, kitten2, kitten3];  You can also use all the functions for arrays that you learned before: find, some, every, filter, map, forEach... As an example, we want to filter all the kittens who are less than 3 weeks old: function isYoungerThan3Weeks(kitten) { return kitten.weeksOld &lt;= 3; } kittens.filter(isYoungerThan3Weeks); // returns [kitten1, kitten2];  What if we want to get an array of all the kitties names? function getName(kitten) { return kitten.name; } kittens.map(getName); // returns [&quot;Fluffy&quot;, &quot;Megatron&quot;, &quot;Billy&quot;]  "},{"title":"Exercise (1)​","type":1,"pageTitle":"JavaScript Core II - 2","url":"/js-core-2/week-2/lesson#exercise-1","content":"ExerciseSolution Exercise Define an array containing the 3 persons defined below.Return an array of the person names (hint: use map).Filter the persons to return an array with the person younger than 28 years old (hint: use filter). let person1 = { name: &quot;Alice&quot;, age: 25, }; let person2 = { name: &quot;Bob&quot;, age: 30, }; let person3 = { name: &quot;John&quot;, age: 20, }; /* DO NOT EDIT ANYTHING ABOVE THIS LINE WRITE YOUR CODE BELOW */ let persons = // Complete here let personNames = // Complete here let personsYoungerThan28YearsOld = // Complete here /* DO NOT EDIT ANYTHING BELOW THIS LINE */ console.log( &quot;Question 1: array defined with 3 persons -&gt; &quot;, persons[0] === person1 &amp;&amp; persons[1] === person2 &amp;&amp; persons[2] === person3 ? &quot;Passed :)&quot; : &quot;Not yet :(&quot; ); console.log( &quot;Question 2: array containing the person names -&gt; &quot;, personNames[0] === &quot;Alice&quot; &amp;&amp; personNames[1] === &quot;Bob&quot; &amp;&amp; personNames[2] === &quot;John&quot; ? &quot;Passed :)&quot; : &quot;Not yet :(&quot; ); console.log( &quot;Question 3: array containing the persons younger than 28 years old -&gt; &quot;, personsYoungerThan28YearsOld[0] === person1 &amp;&amp; personsYoungerThan28YearsOld[1] === person3 ? &quot;Passed :)&quot; : &quot;Not yet :(&quot; );  "},{"title":"Exercise (2)​","type":1,"pageTitle":"JavaScript Core II - 2","url":"/js-core-2/week-2/lesson#exercise-2","content":"ExerciseSolution Exercise An array of travel destinations is defined below. Each destination has a name, a distance from Glasgow, and a list of transportations available to go there. Filter the travelDestinations array to return all destination names reachable within 500 kms.Find a destination name reachable by ferry.Print in the console all the destination names more than 300 kms far away and reachable by train. let destination1 = { destinationName: &quot;Edinburgh&quot;, distanceKms: 80, transportations: [&quot;car&quot;, &quot;bus&quot;, &quot;train&quot;], }; let destination2 = { destinationName: &quot;London&quot;, distanceKms: 650, transportations: [&quot;car&quot;, &quot;bus&quot;, &quot;train&quot;], }; let destination3 = { destinationName: &quot;Paris&quot;, distanceKms: 900, transportations: [&quot;train&quot;, &quot;plane&quot;], }; let destination4 = { destinationName: &quot;Dublin&quot;, distanceKms: 350, transportations: [&quot;plane&quot;, &quot;ferry&quot;], }; let travelDestinations = [ destination1, destination2, destination3, destination4, ]; /* DO NOT EDIT ANYTHING ABOVE THIS LINE WRITE YOUR CODE BELOW */ let destinationNamesWithin500Kms = // Complete here let destinationNameReachableByFerry = // Complete here let destinationNamesMoreThan300KmsAwayByTrain = // Complete here (PRINT THE RESULT IN THE CONSOLE USING FOREACH) /* DO NOT EDIT ANYTHING BELOW THIS LINE */ console.log( `Question 1) Expected result: Edinburgh,Dublin, actual result: ${destinationNamesWithin500Kms}` ); console.log( `Question 2) Expected result: Dublin, actual result: ${destinationNameReachableByFerry}` ); console.log( `Question 3) Expected result: London,Paris, actual result: ${destinationNamesMoreThan300KmsAwayByTrain}` );  "},{"title":"Exercise (3)​","type":1,"pageTitle":"JavaScript Core II - 2","url":"/js-core-2/week-2/lesson#exercise-3","content":"ExerciseSolution Exercise Below are some restaurants in Glasgow. Each restaurant has a name, the number of total seats, the number of customers in the restaurant at the moment and the menu with prices. We want to build an object to simulate a Restaurant Finder application (see below restaurantFinderApplication). Define a method findAvailableRestaurants which takes a number of people in parameter and returns all the restaurant names which have the required number of seats available at the moment. Define a method findRestaurantServingDish which takes a dish name in parameter and returns all the restaurant names serving this dish. Define a method countNumberOfRestaurantsInArea which takes an area of Glasgow in parameter (center, west), and returns the number of restaurants in this area. let restaurant1 = { name: &quot;Paesano&quot;, totalSeats: 10, numberOfCustomers: 8, address: { city: &quot;Glasgow&quot;, area: &quot;center&quot;, }, menu: [&quot;pizza&quot;, &quot;calzone&quot;, &quot;salad&quot;], }; let restaurant2 = { name: &quot;Ubiquitous Chip&quot;, totalSeats: 20, numberOfCustomers: 10, address: { city: &quot;Glasgow&quot;, area: &quot;west&quot;, }, menu: [&quot;salad&quot;, &quot;chocolate cake&quot;, &quot;roast lamb&quot;], }; let restaurant3 = { name: &quot;Monkeyz&quot;, totalSeats: 15, numberOfCustomers: 8, address: { city: &quot;Glasgow&quot;, area: &quot;center&quot;, }, menu: [&quot;stew&quot;, &quot;chocolate cake&quot;, &quot;panini&quot;], }; let restaurants = [restaurant1, restaurant2, restaurant3]; /* DO NOT EDIT ANYTHING ABOVE THIS LINE WRITE YOUR CODE BELOW */ let restaurantFinderApplication = { applicationName: &quot;Restaurant Finder&quot;, applicationVersion: &quot;1.0&quot;, restaurants: restaurants, findAvailableRestaurants: function (numberOfPeople) { // Complete here }, findRestaurantServingDish: function (dishName) { // Complete here }, countNumberOfRestaurantsInArea: function (area) { // Complete here }, }; /* DO NOT EDIT ANYTHING BELOW THIS LINE */ let restaurantsAvailableFor5People = restaurantFinderApplication.findAvailableRestaurants(5); console.log( `Find available restaurants for 5 people: Expected result: Ubiquitous Chip,Monkeyz, actual result: ${restaurantsAvailableFor5People}` ); let restaurantsServingSalad = restaurantFinderApplication.findRestaurantServingDish(&quot;salad&quot;); console.log( `Find restaurants serving salad: Expected result: Paesano,Ubiquitous Chip, actual result: ${restaurantsServingSalad}` ); let numberOfRestaurantsInCityCentre = restaurantFinderApplication.countNumberOfRestaurantsInArea(&quot;center&quot;); console.log( `Number of restaurants in city centre: Expected result: 2, actual result: ${numberOfRestaurantsInCityCentre}` );  "},{"title":"Object built-in methods​","type":1,"pageTitle":"JavaScript Core II - 2","url":"/js-core-2/week-2/lesson#object-built-in-methods","content":"Since we started JavaScript, we have used console.log to print things to our console. In week 2 and 3, you learned about array methods like .map(), and .filter(). These are what we call built-in methods, and they're part of the JavaScript language. Someone else created these methods, and we can use them in our code. Like arrays, objects have built-in methods that can help us. In this lesson, we will learn about Object.keys() and Object.values(). "},{"title":"Object.keys()​","type":1,"pageTitle":"JavaScript Core II - 2","url":"/js-core-2/week-2/lesson#objectkeys","content":"This method goes into our object, and returns the object property names as an array. Here is an example output for using .keys(): let footballClubs = { chelsea_fc: &quot;England&quot;, fc_barcelona: &quot;Spain&quot;, ac_milan: &quot;Italy&quot;, }; console.log(Object.keys(footballClubs)); // prints [ 'chelsea_fc', 'fc_barcelona', 'ac_milan' ]  "},{"title":"Object.values()​","type":1,"pageTitle":"JavaScript Core II - 2","url":"/js-core-2/week-2/lesson#objectvalues","content":"This method goes into our object, and returns the values of every property as an array. Here is an example output for using .values(): let footballClubs = { chelsea_fc: &quot;England&quot;, fc_barcelona: &quot;Spain&quot;, ac_milan: &quot;Italy&quot;, }; console.log(Object.values(footballClubs)); // prints [ 'England', 'Spain', 'Italy' ]  "},{"title":"Exercise (1)​","type":1,"pageTitle":"JavaScript Core II - 2","url":"/js-core-2/week-2/lesson#exercise-1-1","content":"ExerciseSolution Exercise Return the keys and values of the following object let capitalCities = { scotland: &quot;Edinburgh&quot;, kenya: &quot;Nairobi&quot;, australia: &quot;Canberra&quot;, canada: &quot;Ottawa&quot;, }; let highScores = { 55: &quot;Alistair&quot;, 100: &quot;David&quot;, 89: &quot;Hannah&quot;, 34: [&quot;Sergi&quot;, &quot;Frank&quot;], }; // ONLY EDIT BELOW HERE let capitalCitiesKeys = ; let highScoresKeys = ; let capitalCitiesValues = ; let highScoresValues = ; // ONLY EDIT ABOVE HERE console.log(capitalCitiesKeys); // prints [ 'scotland', 'kenya', 'australia', 'canada' ] console.log(highScoresKeys); // prints ['34, '55', '89', '100'] console.log(capitalCitiesValues); // prints [ 'Edinburgh', 'Nairobi', 'Canberra', 'Ottawa' ] console.log(highScoresValues); // prints [[ 'Sergi', 'Frank' ], 'Alistair, 'David', 'Hannah']  "},{"title":"Exercise (2)​","type":1,"pageTitle":"JavaScript Core II - 2","url":"/js-core-2/week-2/lesson#exercise-2-1","content":"ExerciseSolution Exercise You have an object of mentors and their ages below, but the keys are inconsistent. JOSH and JAMIE are uppercase, while james and Mozafar are not. You want to return an array of mentors with the names in uppercase. You're going to have to used what we learned at the start of this lesson, and some other JavaScript methods to accomplish this task. let mentorsAges = { james: 29, JOSH: 35, JAMIE: 25, Mozafar: 30, }; // ONLY EDIT BELOW THIS LINE let mentorsNames = ; let mentorsNamedUppercased = ; // ONLY EDIT ABOVE THIS LINE console.log(mentorsNamedUppercased); // prints [ 'JAMES', 'JOSH', 'JAMIE', 'MOZAFAR' ]  "},{"title":"Exercise (3)​","type":1,"pageTitle":"JavaScript Core II - 2","url":"/js-core-2/week-2/lesson#exercise-3-1","content":"ExerciseSolution Exercise Objects very often contain other objects. This exercise will give you practice in getting the keys of objects inside other objects. Use the provided console.log statements below and follow the instructions above them. let storeBranches = { glasgow: { manager: &quot;Andrew&quot;, assistant: &quot;Laura&quot;, interns: { head_intern: &quot;Mozafar&quot;, intern: &quot;James&quot;, }, }, edinburgh: { director: &quot;Kelly&quot;, manager: &quot;Sally&quot;, assistant: &quot;Derek&quot;, interns: { head_intern: &quot;John&quot;, intern: &quot;Sarah&quot;, }, }, }; // ONLY EDIT BELOW THIS LINE // # 1 // prints [ 'glasgow', 'edinburgh' ] console.log(); // # 2 // prints [ 'manager', 'assistant', 'interns' ] console.log(); // # 3 // prints [ 'head_intern', 'intern' ] console.log(); // ONLY EDIT ABOVE THIS LINE  "},{"title":"Loop through an Object​","type":1,"pageTitle":"JavaScript Core II - 2","url":"/js-core-2/week-2/lesson#loop-through-an-object","content":"Once in a while it will be required to loop through objects. You can achieve this in various ways. "},{"title":"Use for...in statement​","type":1,"pageTitle":"JavaScript Core II - 2","url":"/js-core-2/week-2/lesson#use-forin-statement","content":"The for...in statement iterates over all distinct properties of an object. Example: const flowers = { tulip: 20, rose: 10, lily: 15, }; for (const key in flowers) { console.log(`${key}: ${flowers[key]}`); } // Prints // tulip: 20 // rose: 10 // lily: 15  "},{"title":"Convert object into an array and loop through the array​","type":1,"pageTitle":"JavaScript Core II - 2","url":"/js-core-2/week-2/lesson#convert-object-into-an-array-and-loop-through-the-array","content":"Since we started JavaScript, we have used console.log to print things to our console. Once you create an array of the object's keys or values using the Object.keys, Object.values methods, you can loop through it as if it was a normal array using array methods like forEach. Example: const flowers = { tulip: 20, rose: 10, lily: 15, }; // Looping through the array created from Object.keys const flowerKeys = Object.keys(flowers); flowerKeys.forEach((key) =&gt; { console.log(`${key}: ${flowers[key]}`); }); // Prints // tulip: 20 // rose: 10 // lily: 15  Exercise (1)​ ExerciseSolution Exercise You are given an object of trainee names and grades Loop through all the trainees' grades and console log the name and grade of the ones with grade more than 18 Try to use both methods shown above to achieve this const traineeGrades = { tom: 20, george: 17, abdul: 19, }; // Prints // TOM - 20 // ABDUL - 19  "},{"title":"Pair Programming Kata​","type":1,"pageTitle":"JavaScript Core II - 2","url":"/js-core-2/week-2/lesson#pair-programming-kata","content":"You will be randomly assigned a pair. exercise Coding Meetup 25 minutes Set a timer and switch between driver and navigator roles after 10 minutesThe &quot;driver&quot; is the person typing on the keyboard, just thinking about what needs to be writtenThe &quot;navigator&quot; reviews what the driver is doing and is thinking about to write next Choose a kata from CYF Array and Object Methods that suits you both. "},{"title":"PD (Gathering requirements)​","type":1,"pageTitle":"JavaScript Core II - 2","url":"/js-core-2/week-2/lesson#pd-gathering-requirements","content":"Session objective: This session will explore what a tech product is, who are the users of a product, and how the product meets user needs. What is a product? Let's talk about briefly as a class what we mean when say a &quot;product&quot;. Quick definition: Product is something that satisfies a Business Need. Products deliver value to the business stakeholders (internal or external). note Exercise (20 minutes) Exercise objective: To understand the mission of a product During the previous week's coursework you defined your team's product. Discuss the following questions to identify the users for your product. Who are your users? What different user profiles will there be?What user needs is your product trying to address? Volunteer to share your thoughts with the class. note Exercise (20 minutes) Exercise objective: To identify how products achieve user needs Brainstorm the following questions in your teams to understand your product better. What is the functionality of your product?How does it address the user needs / solve their problem? Volunteer to share your thoughts with the class for group discussion. Invite other groups to provide feedback, thoughts, additional suggestions. Quick definitions Go through the following definitions. You don't need to go into details, you will need to have a basic understanding of these concepts for this week's coursework. What is an MVP? MVP (Minimum Viable Product) refers to a product that has just enough features to satisfy the needs of early customers and, more importantly, give them something to provide feedback on to shape the future of the product. What is a feature? A feature is the product’s service/function that provides business value and meets customer needs. A single product is likely to have multiple features. What is a user story? A user story is a brief description of software features, written from the user's perspective, that describes how that functionality will provide some values. "},{"title":"Coursework​","type":1,"pageTitle":"JavaScript Core II - 2","url":"/js-core-2/week-2/lesson#coursework","content":"Click here to view the homework for this lesson. "},{"title":"Feedback​","type":1,"pageTitle":"JavaScript Core II - 2","url":"/js-core-2/week-2/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"JavaScript Core II - 3","type":0,"sectionRef":"#","url":"/js-core-2/week-3/lesson","content":"","keywords":""},{"title":"Contents​","type":1,"pageTitle":"JavaScript Core II - 3","url":"/js-core-2/week-3/lesson#contents","content":"JS in the Browser The DOMAccess DOM elements Preparation for exercisesExercise (1) Attach events to DOM elements Exercise (2)Exercise (3) Create DOM elements Exercise (4) Manipulate DOM elements Exercise (5)  "},{"title":"Learning Objectives​","type":1,"pageTitle":"JavaScript Core II - 3","url":"/js-core-2/week-3/lesson#learning-objectives","content":"By the end of this lesson trainees should be able to: Define what the DOM is and what it doesUse query selectors to retrieve elements from the DOMUse event listeners to respond to events that happen on the DOMCreate DOM elements using JavaScript and add them to the DOMManipulate DOM elements using JavaScript to change their properties  "},{"title":"JS in the Browser​","type":1,"pageTitle":"JavaScript Core II - 3","url":"/js-core-2/week-3/lesson#js-in-the-browser","content":"Up until now we've been using console.log to see the results of our code running, because it allows us to focus on writing code and seeing the results instantly. But JavaScript was not meant to be run in console.log: it was meant to make web pages dynamic. Lots of websites are powered by JavaScript today, and some (like Facebook) cannot function at all without it: it's become that important to the look and feel of the website. "},{"title":"The DOM​","type":1,"pageTitle":"JavaScript Core II - 3","url":"/js-core-2/week-3/lesson#the-dom","content":"Your webpages are made up of a bunch of HTML elements, nested within each other (parents and children). But JavaScript doesn't know about any of that. Thankfully, in JavaScript we have access to this &quot;DOM&quot; object (Document Object Model) which is actually a representation of our webpage that JavaScript can work with. Here are two examples, HTML and then JavaScript, of how the DOM might look like: &lt;html&gt; &lt;body&gt; &lt;h1&gt;Welcome!&lt;/h1&gt; &lt;p&gt;Hello world!&lt;/p&gt; &lt;/body&gt; &lt;/html&gt;  let document = { body: { h1: &quot;Welcome&quot;, p: &quot;Hello world!&quot;, }, };  This is how we would represent the document hierarchy above as a tree of nodes:  "},{"title":"Access DOM elements​","type":1,"pageTitle":"JavaScript Core II - 3","url":"/js-core-2/week-3/lesson#access-dom-elements","content":"The DOM offers a lot of useful functions we can use to find elements on the page. Here are some we'll be using today: document.querySelector(&quot;#mainHeader&quot;); document.querySelectorAll(&quot;p&quot;);  Both .querySelector and querySelectorAll accept a CSS selector as an input..querySelector selects only the first element it finds, querySelectorAll selects all elements (it returns a NodeList, which you can think of as being similar to an array; it is an ordered sequence of DOM elements which you can loop through like with an array. The difference is that many common array methods like .map or .concat can't be used on a NodeList. To turn a NodeList into an array, you can use Array.from, e.g. let elementArray = Array.from(document.querySelectorAll(&quot;div&quot;));). "},{"title":"Preparation for exercises​","type":1,"pageTitle":"JavaScript Core II - 3","url":"/js-core-2/week-3/lesson#preparation-for-exercises","content":"Exercise Let's work on the code provided here:https://github.com/CodeYourFuture/JavaScript-Core-2-Classwork-Week3 Open 1-exercises project in VS codeView your changes by using vscode-live-server plugin to get live updates of your changes. Install the pluginRight click on index.html and select &quot;Open with Live Server&quot; or just open the index.html on your browser and refresh every time you change your code "},{"title":"Exercise (1)​","type":1,"pageTitle":"JavaScript Core II - 3","url":"/js-core-2/week-3/lesson#exercise-1","content":"Exercise Write JavaScript below that logs: all the &quot;p&quot; element nodes of the document, --&gt; should log a list of nodes with a length of 6 the first div element node --&gt; should log the &quot;.site-header&quot; node the element with id &quot;jumbotron-text&quot; --&gt; should log the &quot;#jumbotron-text&quot; node all the &quot;p&quot; elements contained inside the .primary-content element node --&gt; should log a list of nodes with a length of 3 "},{"title":"Attach events to DOM elements​","type":1,"pageTitle":"JavaScript Core II - 3","url":"/js-core-2/week-3/lesson#attach-events-to-dom-elements","content":"Once you retrieve an element using .querySelector, you can attach an event to it. An event is any action that can be performed on that element. For now, we will just use the click event: let myButton = document.querySelector(&quot;#myButton&quot;); myButton.addEventListener(&quot;click&quot;, alertSomething); function alertSomething() { alert(&quot;Something&quot;); }  You will notice in the example that we passed a second argument to addEventListener. That second argument is the function that we want to invoke when that event has happened. "},{"title":"Exercise (2)​","type":1,"pageTitle":"JavaScript Core II - 3","url":"/js-core-2/week-3/lesson#exercise-2","content":"Exercise When a user clicks the &quot;ALERT&quot; button, an alert box should pop up with the text &quot;Thanks for visiting Bikes for Refugees!&quot; The elements returned by document.querySelector have the same properties as a normal HTML element: for example, you can get access to their css styles. let myElement = document.querySelector(&quot;#myElement&quot;); myElement.style.backgroundColor = &quot;red&quot;;  "},{"title":"Exercise (3)​","type":1,"pageTitle":"JavaScript Core II - 3","url":"/js-core-2/week-3/lesson#exercise-3","content":"Exercise Write JavaScript below that changes the background colour of the page when the &quot;Change colour&quot; button is clicked. "},{"title":"Create DOM elements​","type":1,"pageTitle":"JavaScript Core II - 3","url":"/js-core-2/week-3/lesson#create-dom-elements","content":"Using the document, you can also create new elements. These elements will not appear until you append them as a child of another element though: let paragraph = document.createElement(&quot;p&quot;); // here we're just creating it, element is not visible yet myElement.appendChild(paragraph); // now the element is added to our view, but it's empty  document.createElement accepts as an input any element type. So for example document.createElement(&quot;article&quot;) will create a new article element. "},{"title":"Exercise (4)​","type":1,"pageTitle":"JavaScript Core II - 3","url":"/js-core-2/week-3/lesson#exercise-4","content":"Exercise When a user clicks the &quot;Add some text&quot; button, a new paragraph should be added below the buttons that says &quot;Read more below.&quot; "},{"title":"Manipulate DOM elements​","type":1,"pageTitle":"JavaScript Core II - 3","url":"/js-core-2/week-3/lesson#manipulate-dom-elements","content":"You can then change the text displayed inside elements using the innerText property: paragraph.innerText = &quot;How are you?&quot;; // now we can see the text displaying on the screen  We've been using document.querySelector to retrieve a single element. To retrieve a list of multiple elements (that match a specific class name for example, or a specific tag) we use document.querySelectorAll. //change the background of all the paragraph items on our page let paragraphs = document.querySelectorAll(&quot;p&quot;); for (let i = 0; i &lt; paragraphs.length; i++) { paragraphs[i].style.backgroundColor = &quot;blue&quot;; }  We've learned that style and innerText are properties of DOM elements. Image tags can also have width and height. While it's really easy to change styles directly on elements using the style property, it is not usually a good idea to mix JavaScript and CSS (see separation of concerns in the first lesson). To solve this, we can use the className property to set the class for an element instead of changing its styles directly: //before: &lt;div id=&quot;myContainer&quot;&gt;&lt;/div&gt; let container = document.querySelector(&quot;#myContainer&quot;); container.className = &quot;largeBlock&quot;; //after: &lt;div id=&quot;myContainer&quot; class=&quot;largeBlock&quot;&gt;&lt;/div&gt;  To get the text from an Input field: let updateTitleBtn = document.querySelector(&quot;#updateTitleBtn&quot;); updateTitleBtn.addEventListener(&quot;click&quot;, function () { let inputBox = document.querySelector(&quot;#titleInput&quot;); let title = inputBox.value; let titleElement = document.querySelector(&quot;#lessonTitle&quot;); titleElement.innerText = title; inputBox.value = title; });  The above waits for click on a button. When the button is clicked, it gets the input box element (inputBox variable). To get the entered text from it, we use the value property: let title = inputBox.value. "},{"title":"Exercise (5)​","type":1,"pageTitle":"JavaScript Core II - 3","url":"/js-core-2/week-3/lesson#exercise-5","content":"Exercise When the &quot;Larger links!&quot; button is clicked, the text of all links on the page should increase. "},{"title":"Feedback​","type":1,"pageTitle":"JavaScript Core II - 3","url":"/js-core-2/week-3/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/js-core-2/week-4/homework","content":"","keywords":""},{"title":"1) Classwork​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-4/homework#1-classwork","content":"Firstly, complete any exercises you did not complete during class. They are essential practice for the rest of the homework tasks. If you get stuck, reach out to your classmates on Slack for help! "},{"title":"2) Watch these videos (1 hours)​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-4/homework#2-watch-these-videos-1-hours","content":"There are some really amazing videos online that explain some of the harder topics that we learnt this week. I'd like you to search online around these topics Asynchronous vs SynchronousWhat is a JavaScript callback?Client-Server Architecture Here are some to get started:Synchronous and Asynchronous Transmissionhttps://www.youtube.com/watch?v=SLjjgjp2bAA The Client Server Model | Clients and Servershttps://www.youtube.com/watch?v=L5BlpPU_muY How the Internet Works in 5 Minuteshttps://www.youtube.com/watch?v=7_LPdttKXPc Be sure to share what you find in your class channel! "},{"title":"3) JavaScript Challenges (14 hours) 🔑​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-4/homework#3-javascript-challenges-14-hours-","content":"Here are a set of exercise that will help you to solidify your knowledge of JavaScript. For this step, you have three challenges to complete. Alarm ClockQuote GeneratorSlideshow Each of these challenges could take you some time to complete You can find them all in this repository https://github.com/CodeYourFuture/JavaScript-Core-2-Coursework-Week4 Before you start, make sure you fork the repository to your Github account. "},{"title":"4) Give feedback on your colleague's coursework (1 hour)​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-4/homework#4-give-feedback-on-your-colleagues-coursework-1-hour","content":"Use what you learned in this lesson to give feedback to other trainees who have submitted their coursework. Helping to give feedback on other peoples coursework doesn't only help them, it also helps you by reading a variety of different code. You must View the open Pull Requests here  https://github.com/CodeYourFuture/JavaScript-Core-2-Coursework-Week4/pulls Find two pull requests from people in your class that have no, or few, comments on them Leave comments on the two pull requests with improvements or suggestions Leave a comment saying that you have reviewed it and a nice comment about something you liked (always remember to be nice!)  Make sure you mark at least two other pull requests. It's important that you see a variety of different answers! Remember, you should use the Code Style Guide to help you https://syllabus.codeyourfuture.io/guides/code-style-guide "},{"title":"5) CodeWars (1 hour)​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-4/homework#5-codewars-1-hour","content":"https://docs.codeyourfuture.io/course-processes/running-the-course/codewars#codeyourfuture-collections Every week you need to complete at least three kata. Spend at least 20 minutes, three times a week, on your kata workout. This week, start or join a group session and try out pairing and TDD approaches. Choose from the Array and Object Methods collection: https://www.codewars.com/collections/cyf-array-and-object-methods "},{"title":"6) Learn About Git Branches (5 hours)​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-4/homework#6-learn-about-git-branches-5-hours","content":"Continuing your background learning about Git, this week you're going to learn about something called branches. You'll find the lesson to follow here. "},{"title":"7) (Stretch) Add extra features to your Challenges (5 hours)​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-4/homework#7-stretch-add-extra-features-to-your-challenges-5-hours","content":"In the &quot;Extra&quot; folder of this repository you will find extra tasks for you to complete. https://github.com/CodeYourFuture/JavaScript-Core-2-Coursework-Week3 "},{"title":"8) (Stretch) Codeacademy Course​","type":1,"pageTitle":"Coursework","url":"/js-core-2/week-4/homework#8-stretch-codeacademy-course","content":"The end of this module is a really good opportunity to cover everything we've done over the last six weeks. Codecademy has a really good course that covers a lot of what we've done. https://www.codecademy.com/learn/introduction-to-javascript You should complete as many or as few of these modules as you'd like from this list IntroductionConditionalsFunctionsScopeArraysLoopsIteratorsObjects "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/js-core-2/week-4/instructors","content":"","keywords":""},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-4/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-js2 For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Classwork​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-4/instructors#classwork","content":"Previous teachers have made the exercises in the syllabus lesson available in this classwork repo: https://github.com/CodeYourFuture/JavaScript-Core-2-Classwork-Week4 "},{"title":"Quiz​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-4/instructors#quiz","content":"End of Module Quiz - [Google Form] - 04/06/2020 Created by London and Antigoni Makri End of Module Quiz - [Google Form] - 28/05/2020 Created by Chris Owen "},{"title":"Presentations​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-4/instructors#presentations","content":"Previous teachers have prepared and shared these slides: https://docs.google.com/presentation/d/1RZYuEaXBOoQG1y1uWmuJBN19U9OQBcEZMu28vU6jJGU/edit?usp=sharing "},{"title":"Notes​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-4/instructors#notes","content":""},{"title":"Exercise - Synchronous vs Asynchronous​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-4/instructors#exercise---synchronous-vs-asynchronous","content":"The aim of this exercise is to enable trainees to define the difference between synchronous and asynchronous code.This should be run in small groups and TAs should make sure that there's a discussion about the order of the expected results. The main messages to be delivered here are: In synchronous programmes, if you have two lines of code (L1 followed by L2), then L2 cannot begin running until L1 has finished executing. You can imagine this as if you are in a line of people waiting to buy train tickets. You can't begin to buy a train ticket until all the people in front of you have finished buying theirs. Similarly, the people behind you can't start buying their tickets until you have bought yours. In asynchronous programmes, you can have two lines of code (L1 followed by L2), where L1 schedules some task to be run in the future, but L2 runs before L1's task completes. Picture eating at a sit-down restaurant. Other people order their food. You can also order your food. You don't have to wait for them to receive their food and finish eating before you order. Similarly, other people don't have to wait for you to get your food and finish eating before they can order. Everybody will get their food as soon as it is finished cooking. "},{"title":"The Network Tab​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-4/instructors#the-network-tab","content":"The most important part of the Network Tab to explain is the relationship between the HTML file and the requests that are subsequently made. That is to say that when a HTML is parsed that GET requests are made to the resources that are required to view the page. This can be shown by Showing how a JavaScript file is referenced in a &lt;script&gt; tag and is then loaded in the Network TabShowing how an &lt;img&gt; tag referenced a src attribute and the image is loaded in the Network Tab "},{"title":"Exercise - GET Requests​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-4/instructors#exercise---get-requests","content":"The aim of this exercises to let the trainees explore the network tab and spending some time reading code. When the class has submitted their lists open the network tab and see exactly what was requested by the website. Have a discussion around each of the GET requests. You can find the website in the exercise here. For trainees that go very quickly through the exercise send them to a complicated website and continue to let them explore through the exercises. Some ideas: https://codeyourfuture.io/meet-the-team/ - Good because it has lots of imageshttps://www.bbc.co.uk/news - Lots of icons and images "},{"title":"Exercise - POST Requests​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-2/week-4/instructors#exercise---post-requests","content":"Again, the aim of this exercises is to let the trainees see how requests can be triggered by a button click and forces them to see the difference between a GET and POST request. "},{"title":"Overview","type":0,"sectionRef":"#","url":"/js-core-3/","content":"","keywords":""},{"title":"Module Learning Objectives​","type":1,"pageTitle":"Overview","url":"/js-core-3/#module-learning-objectives","content":"The learner should be able to create a single-page application that retrieves data from an API using fetchparses medium-complexity JSON responses and extracts datause DOM manipulation to build a websiteuses event handlers to respond to user interactions The learner should understand the basics of HTTP GET requests as they are used in practiceThe learner should understand the concept of Promise and how fetch is an implementation of itThe learner should be able to demonstrate a good understanding of the JavaScript language and syntax in solving practical problemsThe learner should understand the concepts around this and scope "},{"title":"Content​","type":1,"pageTitle":"Overview","url":"/js-core-3/#content","content":"Week\tContentWeek 1\tDebugging Week 2\tFetch, AJAX, APIS Week 3\tScope &amp; this Week 4\t "},{"title":"Coordination​","type":1,"pageTitle":"Overview","url":"/js-core-3/#coordination","content":"Coordination details for this module can be found on the Module Coordinator's page "},{"title":"JavaScript Core II - 4","type":0,"sectionRef":"#","url":"/js-core-2/week-4/lesson","content":"","keywords":""},{"title":"Contents​","type":1,"pageTitle":"JavaScript Core II - 4","url":"/js-core-2/week-4/lesson#contents","content":"Synchronous and Asynchronous programming A real life exampleA Javascript exampleThe CallstackCallbacks Exercise (1) How does the web work? Client/Server architectureHTTP Requests Exercise (2)  "},{"title":"Learning Objectives​","type":1,"pageTitle":"JavaScript Core II - 4","url":"/js-core-2/week-4/lesson#learning-objectives","content":"By the end of this lesson trainees should be able to: Define the difference between synchronous and asynchronous codeDescribe why writing asynchronous code is important when working with the internetWrite code that is able to pass a function to another function as a parameter and run itUse callbacks to run code at some point in the futureDefine a client's and server's role in the client/server architectureDescribe the difference between a GET and POST requestExplain how resources are loaded on the internet using GET and POSTList the steps that a browser does when loading a website from the internet  "},{"title":"Synchronous and Asynchronous programming​","type":1,"pageTitle":"JavaScript Core II - 4","url":"/js-core-2/week-4/lesson#synchronous-and-asynchronous-programming","content":"In a synchronous programming model, tasks run one at a time. When a long running action starts, the program waits for it to finish and return the result before it moves to the next action. Asynchronous programming allows multiple actions to happen at the same time. When a long running action starts, the program can continue to run. When the action finishes the program will get notified and get access to the result returned.  "},{"title":"A real life example​","type":1,"pageTitle":"JavaScript Core II - 4","url":"/js-core-2/week-4/lesson#a-real-life-example","content":"An example of this in real life, are phone calls and text messages. Phone calls are synchronous because you can't (really) do anything while the other person is speaking. You are always waiting for your turn to respondText messages are asynchronous. When you send a text, you can go away and do something else, until the other person responds. "},{"title":"A Javascript example​","type":1,"pageTitle":"JavaScript Core II - 4","url":"/js-core-2/week-4/lesson#a-javascript-example","content":"//synchronous console.log(&quot;First action&quot;); console.log(&quot;Second action&quot;); console.log(&quot;Third action&quot;);  //asynchronous console.log(&quot;First action&quot;); setTimeout(function () { console.log(&quot;Second action&quot;); }, 1000); console.log(&quot;Third action&quot;);  "},{"title":"Exercise (1)​","type":1,"pageTitle":"JavaScript Core II - 4","url":"/js-core-2/week-4/lesson#exercise-1","content":"Before running the code in your browser, discuss the expected order of each loop Synchronous - Write code that loops through the array of greek gods and print the index numbers and values to the console, e.g. '1. Ares' Asynchronous - Same as before but the index and the value of the god at position 2 in array should be printed after 2 seconds. Use: setTimeout() Exercise const greekGods = [ &quot;Aphrodite&quot;, &quot;Ares&quot;, &quot;Artemis&quot;, &quot;Athena&quot;, &quot;Poseidon&quot;, &quot;Zeus&quot;, ];  "},{"title":"The Callstack​","type":1,"pageTitle":"JavaScript Core II - 4","url":"/js-core-2/week-4/lesson#the-callstack","content":"How does JavaScript 'know' what order its code should be run in? JavaScript is a single-threaded language, which means that normally it can handle one task at a time or a piece of code at a time. It orders what it needs to do using something called the call stack. The call stack is a data structure that works by the &quot;Last in, First out&quot; principle (LIFO) to store and run functions. Whenever you call a function, it gets pushed onto the stack, and when the function returns, it is popped off of the call stack. This is why when you get an error in Javascript, you may see multiple lines with line numbers in the error, like: $ node my.js /home/dwh/my.js:2 console.log(message); ^ ReferenceError: message is not defined at logSomething (/home/dwh/my.js:2:17) at computeSomething (/home/dwh/my.js:6:5) at Object.&lt;anonymous(/home/dwh/my.js:9:1) at Module._compile (internal/modules/cjs/loader.js:689:30) at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10) at Module.load (internal/modules/cjs/loader.js:599:32) at tryModuleLoad (internal/modules/cjs/loader.js:538:12) at Function.Module._load (internal/modules/cjs/loader.js:530:3) at Function.Module.runMain (internal/modules/cjs/loader.js:742:12) at startup (internal/bootstrap/node.js:266:19)  This error happened because of a problem in the logSomething function on line 2, which was called by the computeSomething function on line 6, and so on. Each line represents one entry on the call stack. Since there is only one call stack in Javascript, function execution is done one at a time from top to bottom. This means that the last function that gets pushed into the call stack is always the one to be executed when the call stack is popped. Think of it like pushing to, and popping from, an array; it's always the last item of the array that is affected. Exercise Let's use this tool to see how the Callstack works! So, how to the call stack and asynchronous work together? Asynchronous programming essentially helps us to make JavaScript act like a multi-threaded language -- although JavaScript only has a single call stack managing function execution, coding our JavaScript asynchronously means that we can have several functions executing at the same time. "},{"title":"Callbacks​","type":1,"pageTitle":"JavaScript Core II - 4","url":"/js-core-2/week-4/lesson#callbacks","content":"We have already seen callback functions - in the Array methods forEach, map, filter etc. They are functions that are passed as parameter to another function. In order to achieve asynchronicity, callbacks can be passed on functions that perform a slow action. By doing so, the callback function can be called with the result. This allows you to run some other code while you're waiting for something to finish. function finished() { console.log(&quot;The task has finished&quot;); } function thingThatTakesALongTime(callbackFunction) { //... Task that takes a long time to complete callbackFunction(); // This is where the 'console.log' happens } // Pass the function to 'thingThatTakesALongTime' just like a normal variable thingThatTakesALongTime(finished);  A simple example of an asynchronous function is setTimeout. This allows you to run a function after a given time period. The first argument is the function you want to run, the second argument is the delay (in milliseconds) // Separate function definition function myCallbackFunction() { console.log(&quot;Hello world!&quot;); } setTimeout(myCallbackFunction, 1000); // Inline function setTimeout(function () { console.log(&quot;Hello world!&quot;); }, 500);  Now let's use a timeout and a callback function together: function mainFunction(callback) { console.log(&quot;Starting!&quot;); setTimeout(function () { callback(); }, 1000); console.log(&quot;Continuing!&quot;); } function myCallbackFunction() { console.log(&quot;Finished!&quot;); } mainFunction(myCallbackFunction);  "},{"title":"Exercise (2)​","type":1,"pageTitle":"JavaScript Core II - 4","url":"/js-core-2/week-4/lesson#exercise-2","content":"Exercise Using setTimeout, change the background colour of the page after 5 seconds (5000 milliseconds).Update your code to make the colour change every 5 seconds to something different. Hint: try searching for setInterval. Complete the exercises in this CodePen "},{"title":"Exercise (3)​","type":1,"pageTitle":"JavaScript Core II - 4","url":"/js-core-2/week-4/lesson#exercise-3","content":"Exercise Complete the exercises in this CodePen You are given a list of movie objects to work with&lt;br/Use setTimeout to imitate that some actions take timeRemember that setTimeout behaves asynchronously All set, go! Work on the tasks given. Your result html will look like this: "},{"title":"How does the web work?​","type":1,"pageTitle":"JavaScript Core II - 4","url":"/js-core-2/week-4/lesson#how-does-the-web-work","content":""},{"title":"Client/Server architecture​","type":1,"pageTitle":"JavaScript Core II - 4","url":"/js-core-2/week-4/lesson#clientserver-architecture","content":" A Client is the typical web user's internet-connected devices and apps. This can be a web browser, a Slack app, your phone, etc. A Server is a computer or program that manages access to resources such as webpages, sites, or apps. There are database servers, mail servers, game servers, etc. The vast majority of these servers are accessed over the internet. They can take the form of industrial server farms that provide a service to millions of users (used by Facebook, Google, etc.), to personal servers for storing your files. The server communicates with clients. Client–server systems use the request–response model: a client sends a request to the server, which performs some action and sends a response back to the client, typically with a result or acknowledgement.  "},{"title":"HTTP Requests​","type":1,"pageTitle":"JavaScript Core II - 4","url":"/js-core-2/week-4/lesson#http-requests","content":"A server stores the data, and the client (other programs or computers) requests data or sends some of its own. But how do they talk to each other? For the client and the server to communicate they need an established language (a protocol). Which is what HTTP (Hypertext Transfer Protocol) is for. It defines the methods you can use to communicate with a server and indicate your desired actions on the resources of the server. There are two main types of requests: GET and POST. Request type\tDescriptionGET\tAsk for a specified resource (e.g. show me that photo) POST\tSend content to the server (e.g. post a photo) HTTP is the language of the internet. In our case we're using Javascript, but you can send HTTP requests with other languages as well. "},{"title":"The Network Tab​","type":1,"pageTitle":"JavaScript Core II - 4","url":"/js-core-2/week-4/lesson#the-network-tab","content":"The network tab is a useful tool that helps us understand how content is loaded on a website. You can view it by Right Click Inspect Network. Take some time to look at the network tab when we open this lesson. The important parts of the the Network Tab are: Network LogTimeline ViewResource Details Exercise - GET Requests​ Exercise Let's take a look at GET requests in the Browser. Look at this repository here: https://github.com/CodeYourFuture/Network-Tab-Example In your groups, you should try to work out what you expect to see in the Network tab when we look at it. You should create a list of the requests that will be made in this format. Note: You are not allowed to open the website in a browser e.g. GET index.htmlGET format.deGET otherfile.se... When you have completed the list you should share it on Slack You can see the website online here https://codeyourfuture.github.io/Network-Tab-Example/ Exercise Extra Go to your favorite website and take a look at the Network tab. Can you work out what each (or any) of the requests are doing? Warning! There will be a lot of requests made on complicated websites. Exercise - POST Requests​ Exercise Let's take a look at POST requests in the Browser. You can see the website online here https://codeyourfuture.github.io/Network-Tab-Example/At the bottom of the page you will see a series of buttons. When you click a button on the website it will send a POST request to a server. Using only the Network tab work out which button is sending a post request.What is in the body of the post request? Exercise Extra Did the POST request succeed?Using the Details Panel, can you work out why? "},{"title":"Coursework​","type":1,"pageTitle":"JavaScript Core II - 4","url":"/js-core-2/week-4/lesson#coursework","content":"Click here to view the coursework for this lesson. "},{"title":"JavaScript 2 Quiz​","type":1,"pageTitle":"JavaScript Core II - 4","url":"/js-core-2/week-4/lesson#javascript-2-quiz","content":"An optional quiz can be found here which can be used to test trainees understanding. This can be done in class or set as homework. "},{"title":"Feedback​","type":1,"pageTitle":"JavaScript Core II - 4","url":"/js-core-2/week-4/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Module Coordinator","type":0,"sectionRef":"#","url":"/js-core-3/coordinator","content":"","keywords":""},{"title":"1) Assessment​","type":1,"pageTitle":"Module Coordinator","url":"/js-core-3/coordinator#1-assessment","content":"After the final week of this module there are assessment that should be completed by all trainees. 🔒 https://github.com/CodeYourFuture/JavaScript-Core-3-Assessment These assessments should be conducted one-on-one with a volunteer (possibly the trainee's buddy). Each of the assessments has a rubric that should be followed. After completion, the trainees score should be shared with the City Coordinator The aim of these assessments is to Work out how well each trainee is doing in the classHighlight trainees who are falling behind and require helpGet oversight of any common misconceptions in the class "},{"title":"2) TV Show Project​","type":1,"pageTitle":"Module Coordinator","url":"/js-core-3/coordinator#2-tv-show-project","content":"The bulk of this module's coursework is the TV Show DOM Project. This project spans the module. Trainees are instructed to get as far in this project as they can so this project is a good determinant of the trainees progress through the class so far. Given what the trainees have learnt so far, all of them - over the module - should be able to complete Level 500 and beyond. Over the module you should track the progress of the trainee (in a spreadsheet, doc etc) so that you can see their progress. "},{"title":"Trainees completing only Level 100 or 200​","type":1,"pageTitle":"Module Coordinator","url":"/js-core-3/coordinator#trainees-completing-only-level-100-or-200","content":"This trainee is struggling and they may not be ready to move onto the later parts of the course as they have not secured the key understanding of JavaScript that they need. "},{"title":"The 'this' Keyword","type":0,"sectionRef":"#","url":"/js-core-3/other/this-keyword","content":"","keywords":""},{"title":"this in a constructor​","type":1,"pageTitle":"The 'this' Keyword","url":"/js-core-3/other/this-keyword#this-in-a-constructor","content":"We saw previously that a constructor in a class is a special method which is used to instantiate on a new object. When used inside a constructor, this refers to the new object being created. class Person { constructor() { console.log(this); this.name = &quot;Mike&quot;; } } const person = new Person();  "},{"title":"this in a method​","type":1,"pageTitle":"The 'this' Keyword","url":"/js-core-3/other/this-keyword#this-in-a-method","content":"A method is a function that belongs to an object. That object can be either be created as an object literal or using a class. class Person { constructor() { this.name = &quot;Mike&quot;; } sayHi() { console.log(`Hi, ${this.name}`); } } const person = new Person(); person.sayHi();  In both above example sayHi is a method which belong to person. When a method is called, the value of this inside of that method will be the object that the method belongs to. In the example above that will be person. "},{"title":"this in a function​","type":1,"pageTitle":"The 'this' Keyword","url":"/js-core-3/other/this-keyword#this-in-a-function","content":"The value of this in a standalone function if it's executed in the browser will be the window object. If it is executed in Node it will be the global object. function sayHey() { console.log(this); } sayHey();  "},{"title":"methods called as functions​","type":1,"pageTitle":"The 'this' Keyword","url":"/js-core-3/other/this-keyword#methods-called-as-functions","content":"We can take a method and assign it to a variable. Essentially that turns it from being a method into a standalone function. class Person { constructor() { this.name = &quot;Mike&quot;; } sayHi() { console.log(`Hi, ${this.name}`); } } const person = new Person(); const sayHi = person.sayHi; sayHi(); // TypeError: Cannot read property 'name' of undefined  In above example, we are executing sayHi as a function, not method. As a result we no longer have access to the object the method belongs to. That results in the value of this being lost and instead of being person it is now undefined. That can be a problem. Fortunately we can fix it "},{"title":"arrow functions to the rescue​","type":1,"pageTitle":"The 'this' Keyword","url":"/js-core-3/other/this-keyword#arrow-functions-to-the-rescue","content":"Latest versions of JavaScript allow us to declare methods in classes using arrow functions. When an arrow function is used, the value of this inside it is bound to the object it belongs to. That allows us to call methods as functions without losing the value of this inside it. class Person { constructor() { this.name = &quot;Mike&quot;; } sayHi = () =&gt; { console.log(`Hi, ${this.name}`); }; } const person = new Person(); const sayHi = person.sayHi; sayHi(); // Hi, Mike  This behaviour will become important in the near future, when we will need to start passing methods to be called other parts of our code. "},{"title":"Exercises​","type":1,"pageTitle":"The 'this' Keyword","url":"/js-core-3/other/this-keyword#exercises","content":"In break out groups solve the following exercises. Only run code to verify answers. Try to understand what each line of code is doing and the effect it has. // Exercise 1 class Car { goFaster() { this.speed = 100; // what is the value of this code below is run } } const ferrari = new Car(); ferrari.goFaster(); // Exercise 2 class Car { goFaster() { this.speed = 100; // what is the value of this code below is run } } const honda = new Car(); const quicker = honda.goFaster; quicker(); // Exercise 3 // How can we fix the bug above? Why do have a problem and how does your solution fix it?  "},{"title":"JavaScript Classes","type":0,"sectionRef":"#","url":"/js-core-3/other/javascript-classes","content":"","keywords":""},{"title":"Exercises​","type":1,"pageTitle":"JavaScript Classes","url":"/js-core-3/other/javascript-classes#exercises","content":"Try these exercises in your breakout groups. Exercise 1​ Implement the add and getTotal methods of the RunningTotal class below. class RunningTotal { constructor() { this.currentTotal = 0; } add(n) { // Implement this method } getTotal() { // Implement this method } } const runningTotal = new RunningTotal(); runningTotal.add(3); runningTotal.add(7); runningTotal.add(7); runningTotal.getTotal(); // 17  Exercise 2​ Implement the constructor method of the StopWatch class below. class StopWatch { constructor() { this.secondsElapsed = 0; //Finish implementing the rest of the constructor so that secondsElapsed is updated } getTime() { return `Seconds elapsed: ${this.secondsElapsed}`; } } const stopWatch = new StopWatch(); // Wait a few seconds... stopWatch.getTime(); // 'Seconds elapsed: 3' // Wait a few more seconds... stopWatch.getTime(); // 'Seconds elapsed: 7'  Exercise 3​ Implement the constructor, store and the lookup methods of the AddressBook class below. class AddressBook { // Implement the constructor method // Implement the store method // Implement the lookup method } const myAddresBook = new AddressBook(); myAddressBook.store(&quot;bart&quot;, &quot;bart@simpsons.com&quot;); myAddressBook.store(&quot;maggie&quot;, &quot;maggie@simpsons.com&quot;); myAddressBook.lookup(&quot;bart&quot;); // 'bart@simpsons.com' myAddressBook.lookup(&quot;homer&quot;); // 'address not found'  Notice that when you come to using a class instance, you are only interacting with it through its methods, e.g. store and lookup for AddressBook. Similar to functions, classes provide a way of creating abstractions over lower-level implementations, which can help us better organise and maintain our code. "},{"title":"Getting a code review","type":0,"sectionRef":"#","url":"/js-core-3/tv-show-dom-project/code-review","content":"","keywords":""},{"title":"Invite your code-reviewer(s) as project collaborator(s)​","type":1,"pageTitle":"Getting a code review","url":"/js-core-3/tv-show-dom-project/code-review#invite-your-code-reviewers-as-project-collaborators","content":"You will be told who your code-reviewer(s) will be. Ask your assigned code-reviewer(s) for their github usernames. Go to your tv-show-dom-project repo Click Settings Click Manage access For each reviewer you have been assigned: Click Invite a collaboratorType the github username of the reviewer, and select themClick Add &lt;username&gt; to tv-show-dom-project "},{"title":"Make a PR and request review​","type":1,"pageTitle":"Getting a code review","url":"/js-core-3/tv-show-dom-project/code-review#make-a-pr-and-request-review","content":"Make a PR from master to your for-review branch.Click the settings cog-wheel next to ReviewersFor each reviewer you have been assigned enter the reviewer's username and select themDM your reviewer on slack to say that your code is ready for review ❗ Note: you should NEVER merge this PR into the for-review branch. ❗ Giving a code review Read the Giving Feedback page for how to do this. Back to readme "},{"title":"TV Show Project","type":0,"sectionRef":"#","url":"/js-core-3/tv-show-dom-project/","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"TV Show Project","url":"/js-core-3/tv-show-dom-project/#overview","content":"You must make a web app using HTML, CSS, and JavaScript which shows details of all of the episodes of a TV show. The episode data is provided for you as an array of objects. The page of episodes should be generated using JavaScript (which will read the properties of each episode object). There is an &quot;intro&quot; video which shows roughly what you will build. However, note that these do not replace these documents you are now reading. "},{"title":"Where do I get the episode data from?​","type":1,"pageTitle":"TV Show Project","url":"/js-core-3/tv-show-dom-project/#where-do-i-get-the-episode-data-from","content":"For the simple versions of this project, you will get the episode data by calling a provided function getAllEpisodes(). This will return you an array of objects, each of which represents an episode. (In later weeks you may be challenged to have your app dynamically fetch the data from the TV Maze API.) In both cases, here's an example of one episode from the list: { id: 4952, url: &quot;http://www.tvmaze.com/episodes/4952/game-of-thrones-1x01-winter-is-coming&quot;, name: &quot;Winter is Coming&quot;, season: 1, number: 1, airdate: &quot;2011-04-17&quot;, airtime: &quot;21:00&quot;, airstamp: &quot;2011-04-18T01:00:00+00:00&quot;, runtime: 60, image: { medium: &quot;http://static.tvmaze.com/uploads/images/medium_landscape/1/2668.jpg&quot;, original: &quot;http://static.tvmaze.com/uploads/images/original_untouched/1/2668.jpg&quot; }, summary: &quot;&lt;p&gt;Lord Eddard Stark, ruler of the North, is summoned to court by his old friend, King Robert Baratheon, to serve as the King's Hand. Eddard reluctantly agrees after learning of a possible threat to the King's life. Eddard's bastard son Jon Snow must make a painful decision about his own future, while in the distant east Viserys Targaryen plots to reclaim his father's throne, usurped by Robert, by selling his sister in marriage.&lt;/p&gt;&quot;, _links: { self: { href: &quot;http://api.tvmaze.com/episodes/4952&quot; } } }  "},{"title":"Rules about the episode data​","type":1,"pageTitle":"TV Show Project","url":"/js-core-3/tv-show-dom-project/#rules-about-the-episode-data","content":"You MUST NOT edit the static episode data. If you find that the data is unsuitable (e.g. fields are missing, or have unwanted characters), you should improve your own code so that it can deal with such issues when it runs. "},{"title":"Rules about technology​","type":1,"pageTitle":"TV Show Project","url":"/js-core-3/tv-show-dom-project/#rules-about-technology","content":"You should not use React, Vue, JQuery or other libraries. Why? This project is specifically for practicing the built-in DOM-manipulation functions you learned about in JS2. You can use bootstrap CSS but NOT bootstrap JS. (We recommend that you do NOT use bootstrap CSS.) "},{"title":"What are the requirements for the project?​","type":1,"pageTitle":"TV Show Project","url":"/js-core-3/tv-show-dom-project/#what-are-the-requirements-for-the-project","content":"This project challenge is split into various levels of difficulty. You should challenge yourself to complete as many levels as possible, in order. level 100level 200level 300level 350level 400level 500level 999 (further work) "},{"title":"Getting started​","type":1,"pageTitle":"TV Show Project","url":"/js-core-3/tv-show-dom-project/#getting-started","content":"Follow the instructions in getting-started.md "},{"title":"How to get a code review​","type":1,"pageTitle":"TV Show Project","url":"/js-core-3/tv-show-dom-project/#how-to-get-a-code-review","content":"You will be instructed when to ask for a code review. When it's time to do so, follow the instructions in code-review.md "},{"title":"Getting started with the TV Show DOM project","type":0,"sectionRef":"#","url":"/js-core-3/tv-show-dom-project/getting-started","content":"","keywords":""},{"title":"Checkpoint:​","type":1,"pageTitle":"Getting started with the TV Show DOM project","url":"/js-core-3/tv-show-dom-project/getting-started#checkpoint","content":" New repo created New repo is named EXACTLY tv-show-dom-project Repo is NOT a fork Repo has the starter content (index.html, etc) Repo also has an empty for-review branch Repo cloned locally First commits have been pushed to github (personalised title in index.html) First commits are on master Published site is visible at https://cyf-[[github-username]]-tv.netlify.app/ "},{"title":"What branch should I use?​","type":1,"pageTitle":"Getting started with the TV Show DOM project","url":"/js-core-3/tv-show-dom-project/getting-started#what-branch-should-i-use","content":"For this project you can work on your master branch. When it comes time to get a code review, you should follow code review instructions. Back to readme "},{"title":"Feedback Guide","type":0,"sectionRef":"#","url":"/js-core-3/tv-show-dom-project/giving-feedback","content":"","keywords":""},{"title":"Viewing The Code To Review​","type":1,"pageTitle":"Feedback Guide","url":"/js-core-3/tv-show-dom-project/giving-feedback#viewing-the-code-to-review","content":"You can retrieve other peoples code by Cloning their project on GithubSwitching to the branch that they have been working onOpening in VSCode You can find the branch that they have been working on inside the small blue area  If you have any problems getting setup - ask the person that you're reviewing as they will be able to help you. "},{"title":"Leaving Feedback​","type":1,"pageTitle":"Feedback Guide","url":"/js-core-3/tv-show-dom-project/giving-feedback#leaving-feedback","content":"We give feedback to people by adding comments on their pull requests. You can do this by Open the person's pull requestGo to the Files changed tabMove your cursor to the line number you want to comment onClick the blue + symbolWrite your commentClick submit You can find an example of the blue x here:  "},{"title":"Review Guidelines​","type":1,"pageTitle":"Feedback Guide","url":"/js-core-3/tv-show-dom-project/giving-feedback#review-guidelines","content":""},{"title":"Positive Feedback​","type":1,"pageTitle":"Feedback Guide","url":"/js-core-3/tv-show-dom-project/giving-feedback#positive-feedback","content":"When giving feedback it is also very important to comment on anything that is cool or that you really like! Did the person add extra functionality which is really cool?Did the person make their website look extra nice?Did the person do something cool in their code that you haven't seen before? Add a comment in their Pull Request to let them know that you like what they've done! "},{"title":"Code Style​","type":1,"pageTitle":"Feedback Guide","url":"/js-core-3/tv-show-dom-project/giving-feedback#code-style","content":"Code style is about finding writing code that is easy to understand. Does code use variable names that are related to what the variable does? let fruit = &quot;apple&quot; is goodlet xyd = &quot;apple&quot; is bad Does code use function names that are related to what the function does? function getFilms() is goodfunction doWork() is bad Is the code well indented? See here for an example Does the code use comments to explain what is happening on parts that are hard to understand?Does the code use functions well to break up the code into easy to understand parts?Is the same code duplicated in multiple places through the project? They should use a function instead the code is easy to understandThis is something called a Code Smell Is the code easy to understand? If there are any parts you don't understand - ask them to explain to you! In places where they use a for loop, could they have used an array method instead? array.forEach() is goodfor(let i = 0; i&lt;length; i++) might be good to improve Does the code use Scope well? Wherever possible variables should be inside functions when they can be - it's bad to put LOTS of variables at the top of your javascript when they don't need to be. Find some other ideas on how people can improve their code in AirBnB's Style Guide "},{"title":"Functionality​","type":1,"pageTitle":"Feedback Guide","url":"/js-core-3/tv-show-dom-project/giving-feedback#functionality","content":"Before starting this section, check which Level the trainee has completed up until. We don't want to ask them to change functionality that doesn't work yet! Does the website do everything that it is meant to?Is the website easy to use? The first time you open the website - is it obvious where everything is Does the website load quickly and respond quickly when you use it? If people write too much or too complex JavaScript your browser can slow down "},{"title":"Bugs​","type":1,"pageTitle":"Feedback Guide","url":"/js-core-3/tv-show-dom-project/giving-feedback#bugs","content":"When using the website you might find some bugs that they did not notice when making the website If you have noticed a bug in their code - you can suggest a fix for itIf you find a bug when using their website - leave a comment on their Pull Request with instructions of What happened to make bug happenWhat the bug isIdeas on how to fix it "},{"title":"Design​","type":1,"pageTitle":"Feedback Guide","url":"/js-core-3/tv-show-dom-project/giving-feedback#design","content":"In this section we want to evaluate if the project is nice too look at and to use. Are the colours they use on their website nice to look at? Can you suggest any changes in colour? Is all the text easy to read? Make sure they haven't put dark text on a dark background as this is hard to read for some people. Test the contrast with Devtools. Are images the right size in each card? Sometimes images can look distorted if they've been loaded incorrectly Is the text on the website the correct size? Is the text too large? More than 24px for body copy is probably too large. Headings can be larger.Is the text too small? In general, body copy should be 16px or more on mobile. You should also think of other ways that the design could be improved and suggest them! "},{"title":"Level 100","type":0,"sectionRef":"#","url":"/js-core-3/tv-show-dom-project/level-100","content":"","keywords":""},{"title":"Minimal features​","type":1,"pageTitle":"Level 100","url":"/js-core-3/tv-show-dom-project/level-100#minimal-features","content":"All episodes must be shownFor each episode, AT LEAST following must be displayed: the episode's namethe season numberthe episode numberthe episode's medium-sized imagethe episode's summary text You should combine season number and episode number into an episode code: Each part should be zero-padded to two digits.Example: S02E07 would be the code for the 7th episode of the 2nd season. S2E7 would be incorrect. Your page should state somewhere that the data has (originally) come from TVMaze.com, and link back to that site (or the specific episode on that site). See tvmaze.com/api#licensing. "},{"title":"Screenshot of minimal version​","type":1,"pageTitle":"Level 100","url":"/js-core-3/tv-show-dom-project/level-100#screenshot-of-minimal-version","content":"Note: Provided your project meets the above requirements, it can look however you want. Here is one example layout.  top - level 200 &gt;&gt; "},{"title":"Level 200","type":0,"sectionRef":"#","url":"/js-core-3/tv-show-dom-project/level-200","content":"","keywords":""},{"title":"Add Search​","type":1,"pageTitle":"Level 200","url":"/js-core-3/tv-show-dom-project/level-200#add-search","content":"Complete all requirements from Level 100Add a &quot;live&quot; search input: Only episodes whose summary OR name contains the search term should be displayedThe search should be case-insensitiveThe display should update immediately after each keystroke changes the input.Display how many episodes match the current searchIf the search box is cleared, all episodes should be shown. If you have been fetching the episode data from the API, be careful not to cause many frequent requests with this search feature. The search should look through an in-memory copy of the episode list. Do not fetch the data again each time something is typed! "},{"title":"Example screenshot of search​","type":1,"pageTitle":"Level 200","url":"/js-core-3/tv-show-dom-project/level-200#example-screenshot-of-search","content":"Note: Provided your project meets the above requirements, it can look however you want. Here is one example layout.  &lt;&lt; level 100 - top - level 300 &gt;&gt; "},{"title":"Level 300","type":0,"sectionRef":"#","url":"/js-core-3/tv-show-dom-project/level-300","content":"","keywords":""},{"title":"Add an Episode Selector​","type":1,"pageTitle":"Level 300","url":"/js-core-3/tv-show-dom-project/level-300#add-an-episode-selector","content":"Complete all requirements from level 200Add a select input which allows you to jump quickly to an episode: The select input should list all episodes in the format: &quot;S01E01 - Winter is Coming&quot;When the user makes a selection, they should be taken directly to that episode in the listBonus: if you prefer, when the select is used, ONLY show the selected episode. If you do this, be sure to provide a way for the user to see all episodes again. "},{"title":"Example screenshot of Episode Selector​","type":1,"pageTitle":"Level 300","url":"/js-core-3/tv-show-dom-project/level-300#example-screenshot-of-episode-selector","content":"Note: Provided your project meets the above requirements, it can look however you want. Here is one example layout.  &lt;&lt; level 200 - top - level 350 &gt;&gt; "},{"title":"Level 350","type":0,"sectionRef":"#","url":"/js-core-3/tv-show-dom-project/level-350","content":"","keywords":""},{"title":"Switch to fetching live data!​","type":1,"pageTitle":"Level 350","url":"/js-core-3/tv-show-dom-project/level-350#switch-to-fetching-live-data","content":"(This is a short level to help you transition to using live data.) Pre-req: For this level you will have to have learned to use fetch() to GET JSON content from an API. "},{"title":"Requirements​","type":1,"pageTitle":"Level 350","url":"/js-core-3/tv-show-dom-project/level-350#requirements","content":"Complete all requirements from level 300When your page loads, it must load the episodes (for the SAME show) from TVMaze API, using fetch, NOT from the provided getAllEpisodes function. (See below for the API &quot;endpoint&quot; (URL) to fetch.)Your search and episode selector must continue to work as specified in level 300.Your page MUST NOT re-fetch the episodes every time the user types a character into your search field! "},{"title":"Note on fetching the list of episodes​","type":1,"pageTitle":"Level 350","url":"/js-core-3/tv-show-dom-project/level-350#note-on-fetching-the-list-of-episodes","content":"To get the episodes for the Game of Thrones TV show, you would make a GET request for this URL: https://api.tvmaze.com/shows/82/episodes, using fetch. Try that link in the browser. It just returns a plain text file, containing JSON. Notice the structure. Is the top level an array? An object? You should notice that the JSON returned is exactly what was originally provided for you by the function in episodes.js. Now you are seeing where we originally obtained the data from! "},{"title":"Learn about the API from its documentation​","type":1,"pageTitle":"Level 350","url":"/js-core-3/tv-show-dom-project/level-350#learn-about-the-api-from-its-documentation","content":"You can see that this endpoint has been documented here: https://www.tvmaze.com/api#show-episode-list "},{"title":"Loading a different show - just for fun​","type":1,"pageTitle":"Level 350","url":"/js-core-3/tv-show-dom-project/level-350#loading-a-different-show---just-for-fun","content":"From the documentation above you can see that the show id is mentioned in the URL. Try changing that number and obtaining an episode list for other tv shows. Examples: https://api.tvmaze.com/shows/82/episodes - Game Of Throneshttps://api.tvmaze.com/shows/527/episodes - The Sopranoshttps://api.tvmaze.com/shows/22036/episodes - Planet Earth IIhttps://api.tvmaze.com/shows/5/episodes - True Detectivehttps://api.tvmaze.com/shows/582/episodes - Fresh Princehttps://api.tvmaze.com/shows/179/episodes - The Wirehttps://api.tvmaze.com/shows/379/episodes - Mythbustershttps://api.tvmaze.com/shows/4729/episodes - Scrapheap Challenge &lt;&lt; level 300 - top - level 400 &gt;&gt; "},{"title":"Level 500","type":0,"sectionRef":"#","url":"/js-core-3/tv-show-dom-project/level-500","content":"","keywords":""},{"title":"Add a shows list and search​","type":1,"pageTitle":"Level 500","url":"/js-core-3/tv-show-dom-project/level-500#add-a-shows-list-and-search","content":"Complete all requirements from level 400When your app starts, present a listing of all shows (&quot;shows listing&quot;) For each show, you must display at least name, image, summary, genres, status, rating, and runtime. When a show name is clicked, your app should: fetch and present episodes from that show (enabling episode search and selection as before)hide the &quot;shows listing&quot; view. Add a navigation link to enable the user to return to the &quot;shows listing&quot; When this is clicked, the episodes listing should be hidden Provide a free-text show search through show names, genres, and summary texts.Ensure that your episode search and episode selector controls still work correctly when you switch from shows listing to episodes listing and back. Continue to get the list of shows the same way you did in level 400. (You do not need to fetch it.) "},{"title":"Example screenshots of Shows Listing​","type":1,"pageTitle":"Level 500","url":"/js-core-3/tv-show-dom-project/level-500#example-screenshots-of-shows-listing","content":"Note: Provided your project meets the above requirements, it can look however you want. Here is one example layout.  &lt;&lt; level 400 - top - level 999 &gt;&gt; "},{"title":"Level 400","type":0,"sectionRef":"#","url":"/js-core-3/tv-show-dom-project/level-400","content":"","keywords":""},{"title":"Add a Show Selector​","type":1,"pageTitle":"Level 400","url":"/js-core-3/tv-show-dom-project/level-400#add-a-show-selector","content":"Pre-req: For this level you will have to have learned to use fetch() to GET JSON content from an API. Complete all requirements from level 300Add a select input which allows you to choose which show you are interested in When a show is selected, your app should display the episodes for that show as per the earlier levels of this challenge, except that it should first fetch the episode list from the API - see belowYou can get the list of shows by loading shows.js in your index.html and using the provided function: getAllShows()Ensure that your search and episode selector controls still work correctly when you switch shows.This show select must list shows in alphabetical order, case-insensitive. "},{"title":"Note on fetching episode lists​","type":1,"pageTitle":"Level 400","url":"/js-core-3/tv-show-dom-project/level-400#note-on-fetching-episode-lists","content":"Once the user selects a show you should fetch the episodes list using URLs of the following pattern: https://api.tvmaze.com/shows/SHOW_ID/episodes where SHOW_ID should be replaced with the numeric id of the selected show. For example, https://api.tvmaze.com/shows/82/episodes will return the episodes for show 82 (&quot;Game of Thrones&quot;). "},{"title":"Example screenshots of Show Selector​","type":1,"pageTitle":"Level 400","url":"/js-core-3/tv-show-dom-project/level-400#example-screenshots-of-show-selector","content":"Note: Provided your project meets the above requirements, it can look however you want. Here is one example layout.   "},{"title":"Play nice - a note on using fetch during development​","type":1,"pageTitle":"Level 400","url":"/js-core-3/tv-show-dom-project/level-400#play-nice---a-note-on-using-fetch-during-development","content":"Be careful when developing with fetch. By default, every time you make a small change to your app it will be restarted by live server - if you are fetching JSON on page load, the JSON will be downloaded again and again. These frequent HTTP requests may lead to the API permanently banning your IP address from further requests, or &quot;throttling&quot; it for some time. Worse, if they don't, they may cause performance issues for the API service we are using. &lt;&lt; level 350 - top - level 500 &gt;&gt; "},{"title":"Level 999","type":0,"sectionRef":"#","url":"/js-core-3/tv-show-dom-project/level-999","content":"","keywords":""},{"title":"Ideas for further work​","type":1,"pageTitle":"Level 999","url":"/js-core-3/tv-show-dom-project/level-999#ideas-for-further-work","content":"Here are some ideas for consideration for further work Add cast listing to your show listing, http://api.tvmaze.com/shows/1?embed=castAdd cast listing to your episode listing, http://api.tvmaze.com/shows/1?embed=castAllow clicking a cast member to present a view of all shows the person has appeared in http://api.tvmaze.com/people/1/castcredits linking those back into your episodes view of each show. Truncate long summaries and provide a &quot;... read more...&quot; control to reveal more.Allow the user to choose to have the show list sorted by rating (highest rated shows first)Have your search support start-of-word search, or other search types.Make the browser's back and forward buttons navigate through your changed views (see History.pushState()).Allow user to mark &quot;favourite&quot; showsAllow user to store notes on each episodeUse local storage to cache the above, and perhaps also to cache episode listsPaginate through results with a &quot;load more&quot; button - don't load 100s of episodes at a time.Experiment with infinite scrollHandle errors from fetchResponsive designSemantic HTMLAccessibilityStyle your page to fit the theme of the show (colours, typography, background images, etc). Commit to one show to do this.Season selector (see screenshot) Screenshot of example season selector layout - you would click to load episodes for the season.  &lt;&lt; level 500 - top "},{"title":"Debugging My Book Library","type":0,"sectionRef":"#","url":"/js-core-3/week-1/debugging-code/","content":"","keywords":""},{"title":"Task​","type":1,"pageTitle":"Debugging My Book Library","url":"/js-core-3/week-1/debugging-code/#task","content":"This purposefully broken website should use the tools we talked about in the lesson. You can find a working version of this here:https://arodrigues92.github.io/library/ "},{"title":"Github​","type":1,"pageTitle":"Debugging My Book Library","url":"/js-core-3/week-1/debugging-code/#github","content":"You can copy this code from here https://github.com/CodeYourFuture/Debugging-Library-Code "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/js-core-3/week-1/homework","content":"","keywords":""},{"title":"1) Install ESLint (20 minutes)​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-1/homework#1-install-eslint-20-minutes","content":"ESLint is what is called an static analysis tool. It checks your code for common mistakes that can impact code quality and styling. If you haven't already you should install it now. https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint "},{"title":"2) Thinking like a Programmer (2 hours)​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-1/homework#2-thinking-like-a-programmer-2-hours","content":"During these past weeks you have gotten a taste of what programming is: the various concepts, what it looks like in code and the way it's used. However, having written some code doesn't make you a programmer. Thinking like a programmer makes you into a programmer. But what does that mean, 'thinking like a programmer'? Thinking like a programmer is very similar to thinking like a construction worker: You have to build something and it's up to you to know all the necessary tools and techniques to make that happen, andYou have to solve every problem that comes up along the way (such as things that go wrong, knowing how to choose the right tools for the job and striving to achieve the right goal) The second skill, problem solving, is the most important one. If you get good at that, you'll automatically get good at the first. Take a look at the following resources to learn more about problem solving as applied to programming: How to THINK like a programmer https://www.youtube.com/watch?v=NNazO2tMHno Lessons in problem solving https://www.freecodecamp.org/news/how-to-think-like-a-programmer-lessons-in-problem-solving-d1d8bf1de7d2/ Computational thinking https://www.youtube.com/watch?v=qbnTZCj0ugI After you've watched these videos I'd like you to answer these questions What do you think the most important quality for a programmer is?When trying to solve a challenge, what should you do first?What should you do if you get stuck? "},{"title":"3) JavaScript Exercises (4 hours)​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-1/homework#3-javascript-exercises-4-hours","content":"Here are a set of exercise that will help you to solidify your knowledge of JavaScript. For this step, open the &quot;Mandatory&quot; folder and complete all of the challenges. https://github.com/CodeYourFuture/JavaScript-Core-3-Coursework-Week1 Before you start, make sure you fork the repository to your Github account. "},{"title":"4) TV Show Project - Part 1/3 (12 hours) 🔑​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-1/homework#4-tv-show-project---part-13-12-hours-","content":"In this weeks project we will be using the knowledge we learnt from JS1 &amp; JS2 to build the first version of our website "},{"title":"Project Details​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-1/homework#project-details","content":"All of the details for this project can be found here: https://syllabus.codeyourfuture.io/js-core-3/index You should complete up to and including Level 300 "},{"title":"Project Setup​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-1/homework#project-setup","content":"It is very important that you make sure you project is setup correctly. You should follow all of the setup steps here: https://syllabus.codeyourfuture.io/js-core-3/tv-show-dom-project/getting-started "},{"title":"5) Give feedback on your colleague's coursework (1 hour)​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-1/homework#5-give-feedback-on-your-colleagues-coursework-1-hour","content":"Use what you learned in this lesson to give feedback to other trainees who have submitted their coursework. Helping to give feedback on other peoples coursework doesn't only help them, it also helps you by reading a variety of different code. You must View the open Pull Requests here https://github.com/CodeYourFuture/JavaScript-Core-3-Coursework-Week1/pulls Find two pull requests from people in your class that have no, or few, comments on themLeave comments on the two pull requests with improvements or suggestionsLeave a comment saying that you have reviewed it and a nice comment about something you liked (always remember to be nice!) Make sure you mark at least two other pull requests. It's important that you see a variety of different answers! Remember, you should use the Code Style Guide to help you https://syllabus.codeyourfuture.io/guides/code-style-guide "},{"title":"6) CodeWars (1 hour)​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-1/homework#6-codewars-1-hour","content":"https://docs.codeyourfuture.io/course-processes/running-the-course/codewars#codeyourfuture-collections Every week you need to complete at least three kata. Spend at least 20 minutes, three times a week, on your kata workout. Find the Collection for JS-3 Week 1 on the CodeYourFuture account: https://www.codewars.com/users/CodeYourFuture/authored_collections 6a) Start mentoring others in the #cyf-codewars channel.​ Remember to follow the channel rules. We don't give solutions in Codewars. "},{"title":"7) Plan the TV Show Project (PD - 1 hr)​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-1/homework#7-plan-the-tv-show-project-pd---1-hr","content":"Come together with your buddy group and draft an initial project plan for the TV Show Project referring to the user stories produced during the class. "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/js-core-3/week-1/instructors","content":"","keywords":""},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-1/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-js3 For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Resources​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-1/instructors#resources","content":"Quiz - JS3 Week 1 - 27/05/2020 Created by London Volunteers and Louise Chow "},{"title":"Lesson Aims​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-1/instructors#lesson-aims","content":"The aim of this lesson is to teach the trainees the key skills they need to be able to debug their work. Each section of the lesson has a Vocabulary section where you should elicit answers from the class there appropriate. "},{"title":"Why is Debugging Important?​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-1/instructors#why-is-debugging-important","content":"The aim of this section is to frame some of the more disastrous bugs that have happened in history. The idea is to give debugging a greater importance that just &quot;making my code work&quot; and that good and thorough debugging is of vital importance. You should play the videos to the trainees and have a short discussion around the questions posed. "},{"title":"The Debugging Mindset​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-1/instructors#the-debugging-mindset","content":"To bring the lesson back more to the trainees day to day lives - the trainees should have short groups discussions around the bugs that they've experienced in the past. Try to keep the discussion focussed around the bugs that the trainees have had and not the solutions to the bugs. This will come later! Framing their answers in the context of the type of error they are is a good way to engage the trainees with the next part of the class. Encouraging the trainees to open up about the problems they have faced is part of a theme of 'normalising' bugs in code - it is important to reinforce that bugs are a part of life, they don't mean you suck! "},{"title":"Types of Errors​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-1/instructors#types-of-errors","content":"By outlining some of the most common errors that trainees see, we aim to give them answers to the errors they see most often. Take the time to the run code if necessary for the more complex issues and see if you can fix them in the class. "},{"title":"Tools​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-1/instructors#tools","content":"This section can be quite lecture heavy so make sure to demonstrate the tools that you're using as much as possible in a browers and using live coding. Try to elicit answers from the trainees about when these tools might be useful for solving different kinds of bugs. If any of the trainees have used these tools before then elicit answers around when they've used them in the past. "},{"title":"Exercise 1​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-1/instructors#exercise-1","content":"These are the errors: • Homer string syntax: apostrophe not escaped (syntax) • for loop: off-by-one error on check (logical) • Incorrect calling of the function (other) • Typo (typerror on k) (other) "},{"title":"Project Setup​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-1/instructors#project-setup","content":"Please take some time to fully explore the project and what the trainees are trying to achieve over three weeks. The most important message to send is that the trainees should move at their own pace and only continue to the next level when they understand the current one. You should walk the trainees through the setup guide and use the rest of the lesson to make a start on the project in groups. "},{"title":"Quiz​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-1/instructors#quiz","content":"You should reserve 10-15 minutes at the end of the lesson to run through the following summative assessment with the trainees. Have the trainees answer all the questions in the quiz and submit their answers before leaving for the day. Solutions​ Question 1​ To prevent bugs being released into production and having negative consequences on users - such as with Therac-25.Because finding bugs is harder the more complex the code gets. It is better to test little and often. Question 2​ A - False: A bug is when the program is not behaving as expected. This can be due to logic problems rather than compile or runtime errors. B - False: Rubber ducking is a common method to debug problems and can involve talking through the problem with another person. C - True: When your program is not working as expected, start by asking yourself the questions in the debugging framework. D - True: Breakpoints are used to pause the execution of code. Question 3​ To Step through the code means to go line-by-line through the code and check what the state of the program is by looking at the values of variables or expressions on that line. We use this method when debugging, so that we can pinpoint on which line our program begins to behave unexpectedly. Question 4​ A - True (Some at least, though not all) B - True C - False D - True Question 5​ Add the word debugger into the line of code where you want to pause.Click on the line you want to pause on in the debugger tool Question 6​ Line 4 This would be the accompanying code: function foo2() { return 1; } console.log(foo);  Question 7​ What did I expect to happen?Is it actually broken?What happened instead?What have I tried so far? Question 8​ Line 9 Correct code: var testArray = [&quot;Test&quot;]; function testFunction(testArray) { for (var i = 0; i &lt; testArray.length; i++) { console.log(testArray[i]); } } testFunction(testArray);  Question 9​ If you input a negative amount then your balance with credit. E.g. 100 - (-10) = 110 Solution: let accountBalance = 100; function withdrawl(amount) { if (amount &lt;= 0) { console.log(&quot;Please enter a number greater than zero.&quot;); } else { accountBalance = accountBalance - amount; } console.log(&quot;You have &quot; + accountBalance + &quot; in your bank account.&quot;); } // Change the input value below input = -10; withdrawl(input);  Question 10​ A syntactical error is an error that is caused when your code does not follow the rules of the language. Examples are Unexpected token, Illegal character, Missing parenthesis "},{"title":"To Be Improved​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-1/instructors#to-be-improved","content":""},{"title":"From London Class 6​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-1/instructors#from-london-class-6","content":"Could we make exercises that are even harder to enable them to use the tools moreBuild in some more checking for understandingWe didn't think about warnings at all. &quot;Don't ignore errors and warnings&quot;&quot;Start from the first warning&quot; "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/js-core-3/week-2/homework","content":"","keywords":""},{"title":"1) Practice the concepts (2 hours)​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-2/homework#1-practice-the-concepts-2-hours","content":"This week's concepts can be challenging, therefore let's get an easy introduction using some interactive exercises! Check the following resources out and start practicing. You can ignore anything to do with XMLHttpRequest FreeCodeCamp https://www.freecodecamp.org/news/javascript-es6-promises-for-beginners-resolve-reject-and-chaining-explained/https://www.freecodecamp.org/news/a-practical-es6-guide-on-how-to-perform-http-requests-using-the-fetch-api-594c3d91a547/ "},{"title":"2) Code along (1 hour)​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-2/homework#2-code-along-1-hour","content":"Now that you've learned about APIs and how to connect with them, let's apply it in the context of a complete application. In the following application you'll be watching somebody make an API call to an external, public API. You are welcome to code along as you watch - this will help you to understand what exactly the presenter is doing. Enjoy! Vanilla JS Numbers Facts App - AJAX &amp; Fetch https://www.youtube.com/watch?v=tUE2Nic21BA "},{"title":"3) JavaScript Exercises (2 hours)​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-2/homework#3-javascript-exercises-2-hours","content":"Here are a set of exercise that will help you to solidify your knowledge of JavaScript. For this step, open the &quot;Exercises&quot; folder and complete all of the challenges. https://github.com/CodeYourFuture/JavaScript-Core-3-Coursework-Week2 Before you start, make sure you fork the repository to your Github account. "},{"title":"4) JavaScript Challenges (6 hours)​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-2/homework#4-javascript-challenges-6-hours","content":"Next, in the same repository complete all of the exercises in the &quot;Challenges&quot; folder. https://github.com/CodeYourFuture/JavaScript-Core-3-Coursework-Week2 "},{"title":"5) TV Show Project - Part 2/3 (8 hours) 🔑​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-2/homework#5-tv-show-project---part-23-8-hours-","content":"Continue working on your TV Show Project and so as much as you can. This could include DOM ManipulationWorking with an APIGet &amp; Post Requests "},{"title":"Project Details​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-2/homework#project-details","content":"All of the details for this project can be found here https://syllabus.codeyourfuture.io/js-core-3/tv-show-dom-project/readme "},{"title":"6) Give feedback on your colleague's coursework (1 hour)​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-2/homework#6-give-feedback-on-your-colleagues-coursework-1-hour","content":"Use what you learned in this lesson to give feedback to other trainees who have submitted their coursework. Helping to give feedback on other peoples coursework doesn't only help them, it also helps you by reading a variety of different code. View the open Pull Requests here https://github.com/CodeYourFuture/JavaScript-Core-3-Coursework-Week2/pulls Find two pull requests from people in your class that have no, or few, comments on themLeave comments on the two pull requests with improvements or suggestionsLeave a comment saying that you have reviewed it and a nice comment about something you liked (always remember to be nice!) Make sure you mark at least two other pull requests. It's important that you see a variety of different answers! Remember, you should use the Code Style Guide to help you https://syllabus.codeyourfuture.io/guides/code-style-guide "},{"title":"7) CodeWars (1 hour)​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-2/homework#7-codewars-1-hour","content":"https://docs.codeyourfuture.io/course-processes/running-the-course/codewars#codeyourfuture-collections Every week you need to complete at least three kata. Spend at least 20 minutes, three times a week, on your kata workout. Find the Collection for JS-3 Week 2 on the CodeYourFuture account: https://www.codewars.com/users/CodeYourFuture/authored_collections Upcoming milestone: Check your levels. Before you are accepted on to a Final Project on the developer track, you need to complete the Final Projects collection and reach a Level 5 kyu in Codewars. Are you on track to reach this standard? Have you run a study group to work on kata? Have you reached out on the #cyf-codewars channel? What is your plan to meet this goal? "},{"title":"8) Talk about your time management (PD - 30 min)​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-2/homework#8-talk-about-your-time-management--pd---30-min","content":"Book a 121 session with your PD buddy about how you are managing your time; what is working and not working; what your time-management barriers are in your personal and professional life. "},{"title":"JavaScript Core III - 1","type":0,"sectionRef":"#","url":"/js-core-3/week-1/lesson","content":"","keywords":""},{"title":"Learning Objectives​","type":1,"pageTitle":"JavaScript Core III - 1","url":"/js-core-3/week-1/lesson#learning-objectives","content":"The learner should understand the value of thorough and comprehensive debuggingThe learner should be able to use error messages to debug simple logical or syntactical errors in their codeThe learner should be able to logically step through their code to find bugs and errorsThe learner should be able to modify an existing program to solve errors "},{"title":"Agenda​","type":1,"pageTitle":"JavaScript Core III - 1","url":"/js-core-3/week-1/lesson#agenda","content":"The purpose of this class is to introduce to the trainee: Debugging your codeConsolidate learning for the project workPD (Agile: Gathering requirements) "},{"title":"1. Debugging​","type":1,"pageTitle":"JavaScript Core III - 1","url":"/js-core-3/week-1/lesson#1-debugging","content":""},{"title":"Vocabulary​","type":1,"pageTitle":"JavaScript Core III - 1","url":"/js-core-3/week-1/lesson#vocabulary","content":"Syntax &amp; SyntacticalBugError "},{"title":"Why is Debugging Important?​","type":1,"pageTitle":"JavaScript Core III - 1","url":"/js-core-3/week-1/lesson#why-is-debugging-important","content":"When our projects are very small it's easy to see the problems and when something does break it's not to much of an issue. This isn't true when we start working on larger projects. The code that we write has real world uses and real world effects. Y2K Bug​ In 1999 the world faced a possibly very serious bug in the way that computer stored time. When computers stored the year they would only store the last two digits (e.g. 1999 is stored as just 99). This means that when the year 2000 happened lots of people were afraid that computer would think the year was the year 1900 instead of the year 2000. Check out this very scary video here Fortunately, a lot people put in a lot of work to stop the bug before it happened and averted catastrophe. Discuss: Why did the Y2K bug happen? What oversights did the developers have? Therac-25​ Therac-25 was a machine used to administer radiation to cancer patients which malfunctioned because of a programmer error. Watch: You can watch a quick video about the bug here Discuss: Why did the Therac-25 bug happen? What oversights did the developers have? "},{"title":"The Debugging Mindset​","type":1,"pageTitle":"JavaScript Core III - 1","url":"/js-core-3/week-1/lesson#the-debugging-mindset","content":"Debugging is a fact of life! Not everything will work the first time you do it and even when it does there will often be times when even if you feel like you've covered everything another bug may occur! Task (5 Minutes)In teams, the trainees should have quick discussion about the bugs that have occurred to them in the past. When they finish the class should regroup and gather together all the different types of bugs that have happened to them. "},{"title":"Types of Errors​","type":1,"pageTitle":"JavaScript Core III - 1","url":"/js-core-3/week-1/lesson#types-of-errors","content":"Syntax Errors​ These errors are usually quite simple to fix and happen when you've typed some code wrong or missed a character. These will normally happen as soon as you run your code. Examples of Syntax Errors​ Exercise How would we fix these syntax errors? Post your answers in Slack! SyntaxError: missing ) after condition if (3 &gt; Math.PI { console.log(&quot;wait what?&quot;); } SyntaxError: missing variable name var = 1; SyntaxError: missing } after function body var charge = function() { if (sunny) { useSolarCells(); } else { promptBikeRide(); };  Reference Errors​ These errors most commonly happen when you try to access variable that has not been defined anywhere. Examples of Reference Errors​ How would we fix these reference errors? Post your answers in Slack! Exercise ReferenceError: &quot;word&quot; is not defined var ward = &quot;hello&quot;; word.substring(1);  Type Errors​ Type errors usually occur when you are trying to access a method or variable from an object that doesn't have that in it. Examples of Type Errors​ Exercise How would we fix these reference errors? Post your answers in Slack! TypeError: document.getElByID is not a function var submit = document.getElById(&quot;button&quot;); TypeError: numbers.map is not a function Hint: what type is the number variable var numbers = { a: 13, b: 37, c: 42 }; numbers.map(function (num) { return num * 2; }); TypeError: Cannot read property 'substring' of undefined var name; name.substring(1);  "},{"title":"The Debugging Framework​","type":1,"pageTitle":"JavaScript Core III - 1","url":"/js-core-3/week-1/lesson#the-debugging-framework","content":"When debugging you should always ask yourself a few key questions What did I expect to happen? You should very clearly be able to say exactly what you expected to happen when you run your code. If you cannot do this, then you do not understand the problem well enough. Is it actually broken? Sometimes what you think is broken is actually working fine but not executing what you thought was going to happen. You should confirm with what the program is trying to do. What happened instead? You should be able to quickly state what you were expecting to happen. Just saying &quot;It Didn't Work&quot; isn't enough! The more carefully you dissect the problem the more easily you'll be able to fix it. What have I tried so far? Debugging is a process of loops and iteration. Think about what you've done so far and work out other ways that the code could have broken. Tools​ Task (5 Minutes) In teams, the trainees should have quick discussion about the ways that they have solved bugs or errors they've had in the past. When they finish the discussion we should regroup and gather together all the ways that they have solved bugs in the past. Thinking like a computer​ The most important skill you can develop is thinking analytically and logically - exactly the same as a computer. In the exercises soon we will be using our logical skills to slowly step through a program to see what is going wrong. Remember that the computer will run your program line-by-line, from top to bottom, and that loops and functions may jump to a new location. If in doubt, try going through the program one line at a time - don't jump ahead, or guess what you want your program to do, make sure you're reading what it actually does do. When debugging, it can often be useful to write down what values variables have, either on paper, in comments, or by using console.log - this is particularly true in loops and functions, where variable values may change from iteration to iteration, or between calls! Test Often​ It is important when working on your code to test each part of your code separately and carefully. Make sure everything is working before you move on to the next part otherwise problems become harder to debug. Stack Overflow​ Stack Overflow is a crucial tool for lots of new developers in finding answers to their programming problems. While a lot of the information is very good there are several points to keep in mind. Information goes out of date very quickly You have to make sure that what your looking at is new Don't copy and paste code If you don't understand what your code does then there is no pointing using it since soon you won't be able to debug it The Chosen Answer isn't always the right answer for you Always read all the responses to questions to find the correct answer for you Talking It Through (a.k.a Rubber Ducking)​ When you're stuck on a problem one of the key techniques you can use is talking through your problem with somebody else. Being forced to slow down and think is important and you'll often realise your problem whilst trying to explain it so somebody else. Nobody else around to ask? Still tell it to somebody! The act of talking helps you work through the problem. Traditionally, programmers use a rubber duck. Using console.log() and the Console​ By this point you will have seen console.log() quite a lot when we see what is happening in our programs - this tool can also be one of the key tools in debugging our programs! When we're working on websites you can view the Console tool in Chrome by Right ClickInspectClick the Console tab Here you'll see all of the messages that have been printed by the website when it was loading and running. Using the Chrome Debugger​ We know that JavaScript executes code line by line. How great would it be if we had a tool that allowed us to stop code execution on any line and inspect the values of our variables. Fortunately such a tool exists and it's called a debugger. Here we will use the Chrome debugger for JavaScript, however similar tools exist of all other popular browsers. To view the debugger go to the Sources tab of Chrome developer tools which we opened above. To tell the debugger to stop we need to create a breakpoint, it's an instruction to the debugger to stop execution and await instruction from us. We can place a debugger in one of two ways. We can either insert a line into our called saying debugger;  or we can click on the line number in the debugger tool itself. Let's say we have a simple piece of code below and we want to inspect the values of x and y before adding them. var x = 10; var y = 20; var z = x * y;  To use debugger on above code we will save it in a file called temp.js and import it into an html file called temp.html. We can either use the debugger statement to pause the code var x = 10; var y = 20; debugger; var z = x * y;  or by opening the file in the debugger using the file navigation on the right hand side and clicking on line 4. Note you can pause on line with code not empty lines.  Once we have paused code execution, we can mouse over the the variables to see their values.  Once we have finished inspecting the values, we can use the controls in the top right corner to tell the debugger what to do.  We can click the button with the blue triangle to tell the debugger to continue executing code until it hits the next breakpoint. Or if we want to execute code line by line ourselves, we can press the button with the curved arrow that will instruct the debugger to execute the current line and stop on the next line. To remove a breakpoint you either remove the debugger statement or if you placed a breakpoint from the debugger itself, you can click that line number again to remove it. Exercise In groups, spend ten minutes experimenting with the debugger in a previous piece of your coursework. Make sure that every member of your group has been able to use the debugger. Comparing console.log and debugger​ As a developer you will likely use both tools to understand what your code is doing and help you find and fix bugs. console.log can be a quick and easy way to check a value, but it can also be a bit inflexible since you can only inspect the value you log out in that one place. Using the debug tool to inspect values can be a bit slower than console logging out values. However, it is also more flexible since you can inspect any value and move execution yourself line by line. Try using both methods in your exercises and homeworks to get more familiar with them. ESLint in VSCode​ Often you will have code that is perfectly valid JavaScript, but it may possibly not do what you want it to do. For example, you might have misspelled a variable name and as a result the variable you wanted to using is now unused and the variable you using does not exist. To catch such problems, we can use a static code analysis tool or commonly known as a linter. The most common one in use today is ESLint and it allows us to configure different rules to look out for and alert us when one of them is broken by our code. You can use the ESLint extension for VSCode which you can download here. We have created a sample ESLint configuration to help you get started. You can download it here. The file should be renamed to .eslintrc. { &quot;parserOptions&quot;: { &quot;ecmaVersion&quot;: 11 }, &quot;env&quot;: { &quot;browser&quot;: true, &quot;node&quot;: true }, &quot;rules&quot;: { &quot;semi&quot;: [&quot;warn&quot;, &quot;always&quot;], &quot;quotes&quot;: [&quot;warn&quot;, &quot;double&quot;], &quot;eqeqeq&quot;: [&quot;warn&quot;, &quot;always&quot;], &quot;no-unused-vars&quot;: [&quot;warn&quot;], &quot;no-redeclare&quot;: [&quot;warn&quot;], &quot;no-undef&quot;: [&quot;warn&quot;] } }  semi warns you if you did not use a semi colon at the end of the linequotes ensures consistency by warning you if you did not use double quote markseqeqeq ensures you use === and !== rather than == and != since the latter can lead to errorsno-unused-vars will warn you if you have unused variables in your codeno-redeclare will warn you if you redeclare an existing variableno-undef will warn you if you try to use an undeclared variable or function You can see all rules and their explanations at https://eslint.org/docs/rules/. Many of them may not make sense to you (they don't to me), but it can be a handy reference and over time your use and understanding of them will improve and increase. Exercise Make sure that you've got ESLint enabled and configured correctly in Visual Studio Code Before continuing make sure that everyone in your group has it working. Summary​ Bugs are a fact of life. No one produces bug free code.Test regularly to find bugs early.Having multiple bugs in code can make them harder to deal with. See previous rule.Use tools such a linters spot and prevent bugs early.Error messages might look scary, but they are your friend.Use tools such as console.log and debugger to find root of bugs. "},{"title":"Exercise 1​","type":1,"pageTitle":"JavaScript Core III - 1","url":"/js-core-3/week-1/lesson#exercise-1","content":"Exercise As a class we should step through solving all of the issues in this small piece of code. You should copy it into a code editor (e.g. VS Code) in a .js file so you can debug and run it easily. Be sure to use The Debugging Framework that we discussed earlier let printValuesOf = (jsObject, keys) =&gt; { for (let i = 0; i &lt;= keys.length; i++) { let key = keys[i]; console.log(jsObject[k]); } } let simpsonsCatchphrases = { lisa: 'BAAAAAART!', bart: 'Eat My Shorts!', marge: 'Mmm~mmmmm', homer: 'd'oh!', maggie: '(Pacifier Suck)', }; printValuesOf(simpsonsCatchphrases, 'lisa', 'bart', 'homer'); // Expected console output: // BAAAAAART! // Eat My Shorts! // d'oh! // Returns undefined Try to categorise the bugs found under: LogicalSyntacticalOther (programmer/user error) "},{"title":"Exercise 2​","type":1,"pageTitle":"JavaScript Core III - 1","url":"/js-core-3/week-1/lesson#exercise-2","content":"Exercise In your groups we want you to go through this program and find all of the bugs that are happening in this code. You can find the project here "},{"title":"Quiz (10 - 15 minutes)​","type":1,"pageTitle":"JavaScript Core III - 1","url":"/js-core-3/week-1/lesson#quiz-10---15-minutes","content":"You can complete this quiz on Google Forms here "},{"title":"2. Project Work​","type":1,"pageTitle":"JavaScript Core III - 1","url":"/js-core-3/week-1/lesson#2-project-work","content":"The project work should take between 60 and 90 minutes to give an overview and get everyone setup. "},{"title":"Explanation​","type":1,"pageTitle":"JavaScript Core III - 1","url":"/js-core-3/week-1/lesson#explanation","content":"Over the next three weeks we're going to be building a website that will consolidate all of your knowledge so far in the course. The project is called TV Show "},{"title":"Getting Setup​","type":1,"pageTitle":"JavaScript Core III - 1","url":"/js-core-3/week-1/lesson#getting-setup","content":"In your groups you should get the project setup using the exact instructions found here. Make sure you use your Teaching Assistants to help you! "},{"title":"PD (Agile: Gathering requirements)​","type":1,"pageTitle":"JavaScript Core III - 1","url":"/js-core-3/week-1/lesson#pd-agile-gathering-requirements","content":"During JS3 tech education, you will make a TV Show app. The PD module will focus on Agile methodology through classroom discussions and exercises directly related to this TV Show Project. Session objective: This session explains how to understand the job ahead, and the processes to identify requirements. Agile: Gathering requirements  Exercise (10 minutes) Exercise objective: To draft user stories describing the task in general terms Review Level 100 in your TV Show Project and make as many user stories as you can. Do not work on any of the details for these stories, we will do that later. Remember to follow this format: &quot;As a [stakeholder] I want to [achieve something] so I can [desired result]&quot;. Once finished, we will share some of those stories as a group. Exercise (10 minutes) Exercise objective: To develop user story drafts with detail and tasks Review the stories you have created for Level 100 in your TV Show Project but this time put some details on those stories and break that work down into tasks. Once finished, we will share some of those stories and their tasks as a group. "},{"title":"Coursework​","type":1,"pageTitle":"JavaScript Core III - 1","url":"/js-core-3/week-1/lesson#coursework","content":"Click here to view the homework for this lesson. "},{"title":"Feedback​","type":1,"pageTitle":"JavaScript Core III - 1","url":"/js-core-3/week-1/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/js-core-3/week-2/instructors","content":"","keywords":""},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-2/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-js3 For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Lesson Aims​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-2/instructors#lesson-aims","content":"This is the first time that trainees have been introduced to network programming and so can be a hard lesson since we fit a lot in We made a very conscious decision to not include the teaching of Promises in this lesson and simply teach fetch as a recipe. The aim is to have the trainees creating interesting projects to keep them engaged rather than overload them with theory. The overarching plan for this lesson is repetition. By the end of the week they should be getting very used to the flow of Use fetch to get some dataParse the resultUse DOM manipulation to do something on the screen with the data "},{"title":"Lesson Overview​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-2/instructors#lesson-overview","content":""},{"title":"Debugging Quiz Answers​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-2/instructors#debugging-quiz-answers","content":"What are the four questions we ask ourselves in the Debugging Framework? What did I expect to happen?Is it actually broken?What happened instead?What have I tried so far? What are three of the tools we could use to debug our programs? See here What is a syntax error? See here What is a reference error? See here What is a type error? See here "},{"title":"How the web works​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-2/instructors#how-the-web-works","content":"We felt it was important to give a recap of how the internet works in particular Status Codes and Methods since they will be using them in the lesson. We tried to keep it to the most minimal selection of codes and methods so that we don't overload the trainees with too much new information. "},{"title":"What are APIs and how to interact with them​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-2/instructors#what-are-apis-and-how-to-interact-with-them","content":"A short overview of what an API is and how it works. When showing examples of APIs it's important to show it working in a browser so the trainees can see the JSON response. They should be fairly good at reading JSON at this point since it's very similar to a JavaScript Object. "},{"title":"Fetch​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-2/instructors#fetch","content":"The most important points to impart when teaching this section are The general flow of a Promise i.e. first you use fetch(). and then .then() Whatever is returned from a .then() is returned in the next sectionHow to use .json() to get the JSON from the request Live Coding from scratch is really important here since the trainees will be doing an exercise later on to Exercise 1​ A completed example of this exercise can be found here "},{"title":"To Be Improved​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-2/instructors#to-be-improved","content":""},{"title":"Coursework","type":0,"sectionRef":"#","url":"/js-core-3/week-3/homework","content":"","keywords":""},{"title":"1) Code Along (1 hour)​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-3/homework#1-code-along-1-hour","content":"In the following &quot;code along&quot; you'll be building a complete Weather App that makes use of the Darksky API. You are welcome to code along as you watch - this will help you to understand what exactly the presenter is doing. Enjoy! Build a Weather App with Vanilla JavaScript Tutorial https://www.youtube.com/watch?v=wPElVpR1rwA "},{"title":"2) Array Destructuring Resources (1 hour)​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-3/homework#2-array-destructuring-resources-1-hour","content":"Here are some useful resources to help you understand this homework FreeCodeCamp's Intro To Array Destructuring https://www.freecodecamp.org/news/array-destructuring-in-es6-30e398f21d10/ Why Is Array/Object Destructuring So Useful And How To Use It (Video) https://www.youtube.com/watch?v=NIq3qLaHCIs The Most In-Depth Yet Understandable ES6 Destructuring Tutorial https://untangled.io/in-depth-es6-destructuring-with-assembled-avengers "},{"title":"3) JavaScript Exercises (2 hours)​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-3/homework#3-javascript-exercises-2-hours","content":"Here are a set of exercise that will help you to solidify your knowledge of JavaScript. For this step, open the &quot;Exercises&quot; folder and complete all of the challenges. https://github.com/CodeYourFuture/JavaScript-Core-3-Coursework-Week3 Before you start, make sure you fork the repository to your Github account. "},{"title":"4) Project - Part 3/3 🔑​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-3/homework#4-project---part-33-","content":"This project should consolidate knowledge from JS2 and push you to learn more about JavaScript. You should complete as much of the project as you can. Project Details​ All of the details for this project can be found: https://syllabus.codeyourfuture.io/js-core-3/tv-show-dom-project/readme "},{"title":"5) Getting Feedback On Your Project (2 hours)​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-3/homework#5-getting-feedback-on-your-project-2-hours","content":"Follow the instructions in the Code Review section of the project https://syllabus.codeyourfuture.io/js-core-3/tv-show-dom-project/code-review On Slack, find the usernames of two of your fellow trainees and atleast one volunteer (this could be your teacher, TA or your buddy) and add them to your project for a review. Before next week, make sure you have implemented all of the feedback that they have given you. Acting of feedback is essential to becoming a better programmer. "},{"title":"5) Giving Feedback to Other People (2 hours)​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-3/homework#5-giving-feedback-to-other-people-2-hours","content":"Hopefully by now other people have already asked you to review thier work - if not - post on Slack and see if anyone needs their work reviewing. Follow the feedback guide here to give good feedback for this project https://syllabus.codeyourfuture.io/js-core-3/tv-show-dom-project/giving-feedback As always - you should use use the code style guide to recommend better coding practices to your colleagues https://syllabus.codeyourfuture.io/guides/code-style-guide "},{"title":"6) CodeWars (1 hour)​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-3/homework#6-codewars-1-hour","content":"https://docs.codeyourfuture.io/course-processes/running-the-course/codewars#codeyourfuture-collections Every week you need to complete at least three kata. Spend at least 20 minutes, three times a week, on your kata workout. This week you must reach Level 6 kyu or below. Find the Collection for JS-3 Week 3 on the CodeYourFuture account: https://www.codewars.com/users/CodeYourFuture/authored_collections "},{"title":"7) TV Show Project Presentation (PD - 1 hr)​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-3/homework#7-tv-show-project-presentation-pd---1-hr","content":"Prepare a 3-min presentation about your TV Show Project. Remember to mention the challenges, tips and tricks and results you came across. "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/js-core-3/week-3/instructors","content":"","keywords":""},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-3/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-js3 For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Delivery Resources​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-3/instructors#delivery-resources","content":""},{"title":"To Be Improved​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-3/instructors#to-be-improved","content":""},{"title":"Other Notes​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-3/instructors#other-notes","content":""},{"title":"JavaScript Core III - 2","type":0,"sectionRef":"#","url":"/js-core-3/week-2/lesson","content":"","keywords":""},{"title":"Learning Objectives​","type":1,"pageTitle":"JavaScript Core III - 2","url":"/js-core-3/week-2/lesson#learning-objectives","content":"The learner should understand what the acronym API meansThe learner can define what an API's purpose is and why it is usefulThe learner should be able to edit the structure of a API URL and to change the data retrieved from the serverThe learner should be able to define what a Promise isThe learner should understand what fetch is and what it is used forThe learner should be able to use fetch to retrieve JSON from an APIThe learner should be able to parse the JSON and extract data from itThe learner should be able to use DOM manipulation to add content to the DOMThe learner should understand window.onload and document.onload and should be able to assign functions to run at specific life cycle events "},{"title":"Agenda​","type":1,"pageTitle":"JavaScript Core III - 2","url":"/js-core-3/week-2/lesson#agenda","content":"The purpose of this class is to introduce to the trainee: Debugging QuizHow the web worksWhat are APIs and how to interact with themHow to use the fetch API to do AJAX callsPD (Agile: Planning and preparation) "},{"title":"1. Debugging Quiz​","type":1,"pageTitle":"JavaScript Core III - 2","url":"/js-core-3/week-2/lesson#1-debugging-quiz","content":"Quiz Let's see what you remember from last week! You should answer in a thread on Slack What are the four questions we ask ourselves in the Debugging Framework?What are three of the tools we could use to debug our programs?What is a syntax error?What is a reference error?What is a type error? "},{"title":"2. How the web works - quick recap​","type":1,"pageTitle":"JavaScript Core III - 2","url":"/js-core-3/week-2/lesson#2-how-the-web-works---quick-recap","content":"In this session we will look at how computer talk to each other using the web. At the core of the web is the URL, which stands for Uniform Resource Locator. We use the term resource to mean anything that a server might return such as webpage, CSS, JavaScript, image, data etc. A good way to think of a URL is as an address. It allows us to refer to webpages, images, data etc that is stored on servers elsewhere. "},{"title":"Methods​","type":1,"pageTitle":"JavaScript Core III - 2","url":"/js-core-3/week-2/lesson#methods","content":"The main methods used to send requests on the web are GET and POST. However, later in the course when we look at building APIs using Node we will also look at other methods such as PUT, PATCH and DELETE. A GET method is a way of asking a server for a webpage, resource or a piece of data. For example, when we type a URL into a browser and submit it. The browser will send a GET request. A POST method is used to send data to a server. The main difference between GET and POST is that a POST method has a body, that is it can contain some data that we are sending. Whereas a GET does not have a body since we use it to request data. "},{"title":"Headers​","type":1,"pageTitle":"JavaScript Core III - 2","url":"/js-core-3/week-2/lesson#headers","content":"Each request and response sent has meta data, information about the data, at the beginning called a header. The header contains information such as a status code indicating whether a request was successfulcontent type which indicates what the request or response contains as well as lots of other things we won't cover here "},{"title":"Status codes​","type":1,"pageTitle":"JavaScript Core III - 2","url":"/js-core-3/week-2/lesson#status-codes","content":"Each response returned needs to contain a status code which tells the client whether the request was successful. If the request succeeded the response code will be 200. If the resource you tried to access was not found the response code used is 404. Some status codes you may have come across before are: 200 ok. Request was successful301 moved permanently. Used to redirect request when moved permanently401 Unauthorised. User credentials were not supplied404 Not found500 Internal server error The response codes can be grouped into categories 1xx: Informational2xx: Success3xx: Redirection4xx: Client Error5xx: Server Error If you want a fun look at HTTP codes, take a look at https://httpstatusdogs.com/ or https://http.cat/ if you are cat person. For a technical perspective take a look at https://en.wikipedia.org/wiki/List_of_HTTP_status_codes. "},{"title":"Content type​","type":1,"pageTitle":"JavaScript Core III - 2","url":"/js-core-3/week-2/lesson#content-type","content":"When sending data across the web, we need to specify in the header what the request or response contains. To do that, the content-type header is used. That way the receiver knows what to do with the data received. Common content types include text/html - HTML web pagetext/css - CSSimage/jpeg - JPEG imageapplication/javascript - JavaScript codeapplication/json - JSON data "},{"title":"Exercise​","type":1,"pageTitle":"JavaScript Core III - 2","url":"/js-core-3/week-2/lesson#exercise","content":"Exercise In Slack post answers to the following What can HTTP headers contain?What is the purpose of status codes?What can an HTTP message contain? "},{"title":"3. What are APIs and how to interact with them​","type":1,"pageTitle":"JavaScript Core III - 2","url":"/js-core-3/week-2/lesson#3-what-are-apis-and-how-to-interact-with-them","content":""},{"title":"Explanation​","type":1,"pageTitle":"JavaScript Core III - 2","url":"/js-core-3/week-2/lesson#explanation","content":"API stands for Application Programming InterfaceAPIs are created by providers and used by consumersIt is a specific part of a larger system that can be contacted by other systems, for example from the internet.When we connect to an API we say that we are connecting to an EndpointSome well-known APIs are Facebook APIs, Twitter APIs, Maps APIs and many many moreIn particular, an API doesn't care what language or technology is used in the consumer or the provider An API is a set of rules that allow programs to talk to each other. The developer creates the API on the server and allows the client to talk to it. An example of a server is the application on a computer hosting a website and an example of a client is the browser on the phone trying to access the website. Why do we need APIs?​ Imagine that I am a big social network and I want to give developers all over the world access to the data on the people on my website. What are some problems that I would have with sharing my data with everyone? Some of the information that I have is public (for example, peoples names) whilst other information I have is private (for example, email addresses). I want to make sure that I only ever give developers access to peoples names but never to their email addresses - otherwise they could send them spam email.I want to make sure that when developers ask for my data I can control who has access to it. I like that my users data is being used to make their lives better but I don't like it when companies try to sell them new stuff they don't need.Some developers might want to change some of the users details on my social network and this would get very messy quickly if people where allowed to change whatever they wanted An API is a special type of program what acts as a gatekeeper to all of this information. Having an API means that I can control which information is shared about my users and who it is shared with. Perfect! Types of APIs​ Private: for employees only under a company network for internal use.Semi-private: for clients who paid for the API.Public: for everyone on the web (but may or may not need an account to use). Examples​ Here is the API endpoint for Transport For London https://api.tfl.gov.uk The data from this endpoint will be used by many apps that you use every day - Google Maps and Citymapper to name two. This endpoint will get location of all of the Bikepoints in London. https://api.tfl.gov.uk/BikePoint That's a lot of Bikes! It would be better if we could search for a location. Luckily this API let's us search for places. https://api.tfl.gov.uk/BikePoint/Search?query=Clerkenwell This API also has lots of other endpoints that we can use to get other data. For example, lets find the Air Quality of London. https://api.tfl.gov.uk/AirQuality As you can see the URL changes the data that we get from the API. This can be broken down like this  "},{"title":"Exercise (5 mins)​","type":1,"pageTitle":"JavaScript Core III - 2","url":"/js-core-3/week-2/lesson#exercise-5-mins","content":"Exercise The purpose of the exercise is to get used to interpreting API documentation. Let's use the Numbers API. The documentation can be found at http://numbersapi.com/. Read the &quot;URL Structure&quot; section and try each endpoint in the browser.Retrieve a fact about today's date via the date endpoint. Recap​ Recap Question​ Which of the following statements below about APIs is false? A) Public APIs can be accessed by anyone on the Internet. B) You must use Javascript to access an API. C) APIs can control access to data or features of an application. D) You can change data via an API. Question​ Give an example of a company that uses an API to allow access to their data. Question​ What is the myapi/ part of a url called in this url? http://www.google.com/**myapi**/ "},{"title":"4. How to use fetch to do network requests​","type":1,"pageTitle":"JavaScript Core III - 2","url":"/js-core-3/week-2/lesson#4-how-to-use-fetch-to-do-network-requests","content":""},{"title":"Explanation​","type":1,"pageTitle":"JavaScript Core III - 2","url":"/js-core-3/week-2/lesson#explanation-1","content":"Fetch is a function to request from other places on the webFetch is defined in the browser which means it can be used without using an external library (window.fetch)Fetch is available in nearly all browser but it's good to check which ones it won't work in We can use this website to help us - caniuse.com) Fetch API documentations by Mozilla link "},{"title":"Using fetch​","type":1,"pageTitle":"JavaScript Core III - 2","url":"/js-core-3/week-2/lesson#using-fetch","content":"Fetch uses a JavaScript pattern called &quot;Promises&quot; which has a very specific structure. You can think of a Promise as you would think of a promise you make to another person - you make a promise that something will happen in the future. For example - I promise to call you later, I promise to go to the shops and buy milk later. Using Promises allows us to schedule functions to be called after some asynchronous code finishes running. We can specify different functions depending on whether the asynchronous code was successful or ran into an error. Promises can make it easier to split our code into small functions and make code easier to read. They also make it easier to handle errors. In this example we Get the Promise that we will get the milk from the shops (this could take a long time so it's good that it's a Promise!)When the milk has arrived from the shop then I should drink it and return the bottle so I can do something else with itWhen I've drank the milk then I should recycle the bottleIf anything goes wrong with those steps I should catch the error and warn everyone what happened Here is an example of this code: getMilkFromShops .then((milk) =&gt; { console.log(`I've got the milk`); milk.drink(); return milk.bottle; }) .then((bottle) =&gt; { console.log(`I'm going to recycle the bottle`); bottle.recycle(); }) .catch((error) =&gt; console.warn(&quot;Oh no, I dropped the milk&quot;));  Note: This is &quot;Pseudo Code&quot;- meaning it doesn't work! This is just to demonstrate how it might work "},{"title":"Live Coded Examples​","type":1,"pageTitle":"JavaScript Core III - 2","url":"/js-core-3/week-2/lesson#live-coded-examples","content":"Example 1​ Teacher-Led Live Coding Example Let's step through how the Fetch function is used and what it is comprised of //Retrieve the JSON fetch(&quot;https://cat-fact.herokuapp.com/facts&quot;) // Get the response and extract the JSON .then(function (response) { return response.json(); }) // Do something with the JSON .then((headlines) =&gt; { console.log(headlines); }) // If something goes wrong .catch((error) =&gt; console.log(error));  Example 2​ Teacher-Led Live Coding Example Wouldn't it be cool to make a new friend with just the click of a button? Write a function that makes an API call using fetch to https://www.randomuser.me/api The function should make an API call to the given endpoint: https://www.randomuser.me/apiLog the received data to the consoleIncorporate error handlingShow how you can build a profile page for the user using the DOM Add a nameAdd a profile pictureAdd some styling using CSS "},{"title":"Error Handling​","type":1,"pageTitle":"JavaScript Core III - 2","url":"/js-core-3/week-2/lesson#error-handling","content":"We saw earlier that each HTTP response contains an status code which indicates if our request was successful or not. If the our request failed we usually want to handle it appropriately. We can handle these errors gracefully in your code by checking the status and statusText value of the response: fetch(&quot;https://httpstat.us/500&quot;) .then((response) =&gt; { if (response.status &gt;= 200 &amp;&amp; response.status &lt;= 299) { return response.json(); } else { throw new Error( `Encountered something unexpected: ${response.status} ${response.statusText}` ); } }) .then((jsonResponse) =&gt; { // do whatever you want with the JSON response }) .catch((error) =&gt; { // Handle the error console.log(error); });  "},{"title":"Group Exercise​","type":1,"pageTitle":"JavaScript Core III - 2","url":"/js-core-3/week-2/lesson#group-exercise","content":"Group Exercise In groups the trainees should create a page of details about the United Kingdom. The API endpoint can be found here The website should include The name of the countryThe country's capital cityAn unordered list of the country's name in other all of the other returned languages Getting Started​ Go to this Glitch ProjectClick Remix to Start to being working Steps​ Example html and javascript files can be found in the section below Create a HTML, CSS and JavaScript file to hold different types of codeIn your HTML file, write a simple basis for your website (e.g. this) Make sure all of your HTML, CSS and JavaScript files are linked together! Write a function using fetch that retrieves the JSON from the Country API To make sure it's working print the JSON to the console using console.log() Create a h1 tag on the website using DOM manipulation and add the country's name inside it Go back to Week 5 if you need a reminder Create a h2 tag on the website using DOM manipulation and add the capital city's name inside itCreate a ul tag on the website using DOM manipulation For each of the translated names in the JSON, add a li tag Uncomment the lines inside onLoad() to load other countries details! Finished Example​ You can find the finished example of this website here. Extra Exercise Load the country's flag into an img tagAdd CSS to make your website look really niceAdd other information from the JSON to your Country Details Recap​ Question (5 mins): Question Complete the following sentence: Fetch is a web API that allows you to _ from _. Task (5 mins): Question Complete the rest of this code to connect to the following API: https://dog.ceo/api/breeds/image/random fetch(_____) .then(_____) .then((body) =&gt; console.log(body)) .catch((error) =&gt; console.log(error)); Post your code on SlackPost the image you retrieved on Slack "},{"title":"PD (Agile: Planning and preparation)​","type":1,"pageTitle":"JavaScript Core III - 2","url":"/js-core-3/week-2/lesson#pd-agile-planning-and-preparation","content":"Session objective: In this session we will talk about refining a user story backlog, planning the sprint and estimating effort. Warm-up (10 minutes) Write a mission statement for the TV show project: What's the purpose of the project?What would be the mission of the sprints? Agile: Planning and preparation Exercise (30 minutes) Exercise objective: To practice estimating effort for user stories Work in small groups. For this sizing example, you have 5 stories. The first one is already t-shirt sized as a Medium. To size story #2, the team must compare it against story #1 - just as you’d compare t-shirts to find their size - Is it bigger or smaller? As a team, you ask yourselves “is story #2 bigger or smaller than #1?” If you decide it takes less effort, then you decide how much smaller it is. Enough to be a S, or much smaller to be a XS? You do the same for each of the following stories. &quot;Is story #3 bigger or smaller than story #1?” If it’s bigger, by how much? Is it double the size? (XL) or just slightly bigger? (L). Continue this estimation activity, refer to the user stories you created last week and follow the following steps: Decide the size of the first story. The first size won’t be accurate, since there is nothing to compare with.Go through every other user story you created last week, and compare it against the first one, asking yourselves “is this bigger or smaller?” to decide the size. Share your reflections with the rest of the class. "},{"title":"Coursework​","type":1,"pageTitle":"JavaScript Core III - 2","url":"/js-core-3/week-2/lesson#coursework","content":"Click here to view the homework for this lesson. "},{"title":"Feedback​","type":1,"pageTitle":"JavaScript Core III - 2","url":"/js-core-3/week-2/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/js-core-3/week-4/homework","content":"","keywords":""},{"title":"1) Create 3 SMART goals (PD - 1 hr)​","type":1,"pageTitle":"Coursework","url":"/js-core-3/week-4/homework#1-create-3-smart-goals-pd---1-hr","content":"Create 2 or 3 goals for yourself to improve your PD competencies. Refer to your SDOT analysis. Focus on what you want to improve. You can use the attached template to identify your goals. When ready, submit your goals here and share them with your PD buddies. PD competencies list SMART Goals Template "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/js-core-3/week-4/instructors","content":"","keywords":""},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-4/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-js3 For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Delivery Resources​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-4/instructors#delivery-resources","content":""},{"title":"To Be Improved​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-4/instructors#to-be-improved","content":""},{"title":"Other Notes​","type":1,"pageTitle":"Instructor Notes","url":"/js-core-3/week-4/instructors#other-notes","content":""},{"title":"JavaScript Core III - 3","type":0,"sectionRef":"#","url":"/js-core-3/week-4/lesson","content":"","keywords":""},{"title":"Agenda​","type":1,"pageTitle":"JavaScript Core III - 3","url":"/js-core-3/week-4/lesson#agenda","content":"PD (presentations) "},{"title":"PD (Presentations)​","type":1,"pageTitle":"JavaScript Core III - 3","url":"/js-core-3/week-4/lesson#pd-presentations","content":"Session objective: To practice public speaking skills It's time to reflect on what you have learned and share it with each other. Present the 3-min presentation about your TV Show Project. Try to identify the common challenges, tips and tricks, and results while listening to the other presentations. Exercise (15 minutes) Exercise objective: To reflect on learning and identify improvement points Spend some time on a class retrospective for the this module. Discuss the following points: What we covered over this moduleWhat parts we enjoyedWhat we will do differently in the next moduleWhat tips and tricks we can share with each otherWhat advice we would give to the next class  "},{"title":"Coursework​","type":1,"pageTitle":"JavaScript Core III - 3","url":"/js-core-3/week-4/lesson#coursework","content":"Click here to view the homework for this lesson. "},{"title":"Feedback​","type":1,"pageTitle":"JavaScript Core III - 3","url":"/js-core-3/week-4/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"MongoDB","type":0,"sectionRef":"#","url":"/mongodb/","content":"","keywords":""},{"title":"Preparation​","type":1,"pageTitle":"MongoDB","url":"/mongodb/#preparation","content":"Before starting this module there is some preparation work to get you setup. Make sure you complete it before attending class. "},{"title":"Content​","type":1,"pageTitle":"MongoDB","url":"/mongodb/#content","content":"Week\tContentWeek 1\tIntro to Mongo Week 2\tMore Mongo Week 3\tAdvanced Mongo "},{"title":"Coordination​","type":1,"pageTitle":"MongoDB","url":"/mongodb/#coordination","content":"Coordination details for this module can be found on the Module Coordinator's page "},{"title":"Module Coordinator","type":0,"sectionRef":"#","url":"/mongodb/coordinator","content":"","keywords":""},{"title":"1) Preparation​","type":1,"pageTitle":"Module Coordinator","url":"/mongodb/coordinator#1-preparation","content":"This module has some preparation work that should be set as coursework before the module starts You can find the preparation work here "},{"title":"JavaScript Core III - 3","type":0,"sectionRef":"#","url":"/js-core-3/week-3/lesson","content":"","keywords":""},{"title":"Learning Objectives​","type":1,"pageTitle":"JavaScript Core III - 3","url":"/js-core-3/week-3/lesson#learning-objectives","content":"The learner should understand the concept of variable scope and be able to define them in global, local and block scopeThe learner should be able to use destructuring to extract data from arraysThe learner can describe why you would want to use array destructuring "},{"title":"Agenda​","type":1,"pageTitle":"JavaScript Core III - 3","url":"/js-core-3/week-3/lesson#agenda","content":"The purpose of this class is to introduce to the trainee: The scoping of variables, specifically in reference to: GlobalLocalBlock Array DestructuringProject WorkPD (Agile: Scrum planning) "},{"title":"1. Variable Scope​","type":1,"pageTitle":"JavaScript Core III - 3","url":"/js-core-3/week-3/lesson#1-variable-scope","content":""},{"title":"The Problem​","type":1,"pageTitle":"JavaScript Core III - 3","url":"/js-core-3/week-3/lesson#the-problem","content":"Variables are amazing! Variables let us store data and reuse it many times rather than writing the same data over and over again, also if the variables are well named then it makes it much easier to think about what our code is doing. As we know, after we declare or define a new variable we can refer to it later in our code using the variable name. let name = &quot;mo&quot;; let age = 42; let favouriteFoods = [&quot;pizza&quot;, &quot;apples&quot;, &quot;tofu&quot;]; // lots of code here // later console.log(&quot;My name is &quot; + name);  Now, imagine what would happen when our code gets really long. Every time we want to define a new variable we have to check that it hasn't already been used for something else. If that variable is already being used and we redefine it, bad things can happen. We could overwrite something important. Imagine a banking app being built by two developers. Developer 1 uses the variable name money to store the total amount of cash a single customer has in the bank, Developer 2 uses the variable name money to store the total amount of cash that ALL customers have in the bank added together, the total money in the bank's vaults. This could be really good news for a customer who accidentally receives the entire bank's money in their account, but really BAD news for us as the owners of a bank. "},{"title":"The Solution​","type":1,"pageTitle":"JavaScript Core III - 3","url":"/js-core-3/week-3/lesson#the-solution","content":"One solution might be that every time we want to create a new variable, we call around all of the other developers on the project and ask them if it's safe to use the variable name money. We can quickly see a problem with this, some codebases are millions of lines long! No single person knows what is contained in every file. It would be impossible to know what variables are safe to use and which are not. Instead, we need to find a way to make variables safer. We need a way to use the best variable name to describe our data, without worrying that we will be causing problems in a different part of the codebase. We call this scope. "},{"title":"What is Scope?​","type":1,"pageTitle":"JavaScript Core III - 3","url":"/js-core-3/week-3/lesson#what-is-scope","content":"Think about the way that laws are set in different countries. Most laws are set by the government of that country and are local to that country. However, some laws are international, laws like 'no slavery' apply across all countries, these are global laws. In some countries, different regions inside the country can set their own laws too. In America you must be 21 to drink (national law), but in the state of Massachusetts all bars must be closed by 2AM (state law). These are two levels of local laws.  In Massachusetts, a citizen must follow all 3: International Law, National Law and State Law. But a pirate 🏴‍☠️ in the middle of the ocean only needs to follow International Law (and perhaps the law of the Ship). In the same way we think about which laws apply to which parts of a country we must also think about which variables apply to which parts of your code. Variables, like laws, only apply to a certain area. When we try to access a variable that does not exist or has gone out of scope, JavaScript will throw a ReferenceError telling us that a variable is not defined. let globalLaw = &quot;no slavery&quot;; // only 1 law applies here function usa() { let nationalLaw = &quot;drinking age is 21&quot;; // 2 laws apply here function massachusetts() { let stateLaw = &quot;bars closed at 2am&quot;; // all 3 laws apply here } } console.log(stateLaw); // Error: 'stateLaw' is not defined  In the example above, the State Law only applies to Massachusetts. When we try to console.log the stateLaw variable at the end, it is not defined. This part of your code does not even know this variable exists! "},{"title":"Global scope​","type":1,"pageTitle":"JavaScript Core III - 3","url":"/js-core-3/week-3/lesson#global-scope","content":"Variables declared outside of any function or code block are available throughout an application. They are referred to as global variables and exist in global scope. We can see in the previous example that globalLaw is a global variable. Because global variables are visible by throughout the application, data stored in them can be read and updated by any part of your code. At first this might seem convenient, but in practice this is likely to cause problems in longer term as your code base grows. It may not be obvious where in your code global variables are used, which can make refactoring hardOther part of your code may accidentally overwrite values in global variables and lead to bugs. Because of above it is good engineering practice to only use global variables when absolutely necessary. Note that you can also declare a global variable by assigning to a variable without declaring it with a var, let or const keyword. function accidentallyGlobal() { oops = &quot;I am global&quot;; } accidentallyGlobal(); console.log(oops);  Be sure to keep an eye out for above problem and avoid it. "},{"title":"Local Variables​","type":1,"pageTitle":"JavaScript Core III - 3","url":"/js-core-3/week-3/lesson#local-variables","content":"Let's rewind and look at this in detail. We know that variables are declared using the var, let or const keyword. let greeting = &quot;Hi &quot;;  If we define a variable inside a function, it becomes local to that function. If we want to use a fancy word, we can also say it becomes scoped to that function. function greetUser(name) { let greeting = &quot;Hi &quot;; // This variable only exists here console.log(greeting + name); } greetUser(&quot;Naima&quot;); console.log(greeting); // It doesn't exist here  The console.log(greeting) on the last line throws an error, it tells us that &quot;greeting is not not defined&quot;. Why is this? Because the variable greeting was defined in the greetUser function, it does not exist outside the function. This lets us do new things with variables. You cannot usually create two variables with the same name. For example: function greetUser(name) { let greeting = &quot;Hi&quot;; let greeting = &quot;Shalom&quot;; // Error: 'greeting' has already been declared }  But in the same way countries have own laws, functions have own scopes! And so it becomes possible to use the same variable name for different situations. function greetOnce(name) { let greeting = &quot;Hi &quot;; console.log(greeting + name); } function greetAgain(name) { let greeting = &quot;Shalom &quot;; console.log(greeting + name); }  We have used the variable name greeting twice but it's very important to remember that these are not the same variable! The two variables called 'greeting' do not even know each other exist. "},{"title":"Nesting​","type":1,"pageTitle":"JavaScript Core III - 3","url":"/js-core-3/week-3/lesson#nesting","content":"It is important to note that scope is nested. That means when you have one function inside another function, you can access variables defined in outer function from the inner function. However you cannot access variables defined in inner function from outer function. function grandfather() { let name = &quot;Hammad&quot;; // likes is not accessible here function parent() { // name is accessible here // likes is not accessible here function child() { // Innermost level of the scope chain // name is also accessible here let likes = &quot;Coding&quot;; } child(); } parent(); } grandfather();  "},{"title":"Block scope​","type":1,"pageTitle":"JavaScript Core III - 3","url":"/js-core-3/week-3/lesson#block-scope","content":"Code block​ A block is piece of code inside by curly brackets, for example following if statements and for or while loops. if (age &gt; 18) { // code block }  var vs let and const​ In addition to previous scope rules, JavaScript uses different scope methods for variables depending how they are defined. Variables declared using var keyword use function scope. That means variables defined using var exist within function they are defined in.Variables declared using let or const keyword use block scope. Variables defined using let or const keywords exist within the block they are defined in. function getBook() { if (true) { var bookOne = &quot;JavaScript: The Good Parts&quot;; let bookTwo = &quot;Eloquent JavaScript&quot;; const bookThree = &quot;The JS Way&quot;; } console.log(bookOne); // JavaScript: The Good Parts console.log(bookTwo); // ReferenceError: bookTwo is not defined console.log(bookThree); // ReferenceError: bookThree is not defined }  Any time you define a variable inside a block, that variable cannot escape that block. We say the variable is scoped to that block. Scope allows us to control where our variables can be accessed from. We want to ensure that variables are available where they are needed and ideally as little as possible elsewhere to prevent naming collisions or accidental updates. As a result using let or const is preferrable to using var since they has stricter scope definition. "},{"title":"Exercise​","type":1,"pageTitle":"JavaScript Core III - 3","url":"/js-core-3/week-3/lesson#exercise","content":"Exercise In small groups answer the following the questions. Try to solve each exercise before running code to verify answer. Try to explain your answer using what you learned above about scope. Think about the order JavaScript will execute each piece of code and what the values will be at each stage. // 1. function one() { var a = 10; } one(); console.log(a); // what is the value of a // 2. function two() { let b = 10; let b = 20; } two(); console.log(b); // what is the value of b and why // 3. let c; function three() { c = 25; } three(); console.log(c); // what is the value of c and why // 4. function four() { d = 25; } four(); console.log(d); // what is the value of d and why // 5. let e; function five() { const greeting = &quot;Hello&quot;; function greet() { let name = &quot;Eddie&quot;; e = `${greeting} ${name}`; } greet(); } five(); console.log(e); // what is the value of e and why // 6. function six() { if (true) { let f = 50; } console.log(f); // what is the value of f and why } six();  "},{"title":"2. Array Destructuring​","type":1,"pageTitle":"JavaScript Core III - 3","url":"/js-core-3/week-3/lesson#2-array-destructuring","content":""},{"title":"The Problem​","type":1,"pageTitle":"JavaScript Core III - 3","url":"/js-core-3/week-3/lesson#the-problem-1","content":"In Javascript 1 - Lesson 2, you learnt how to store multiple values in one variable using an array. let fruits = [&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;];  You also learnt that you can retrieve a value from an Array by using the index of the value to access it. let firstFruit = fruits[0]; console.log(firstFruit); // This will print 'apple' let secondFruit = fruits[1]; console.log(secondFruit); // This will print 'orange' let thirdFruit = fruits[2]; console.log(thirdFruit); // This will print 'banana' console.log( `My fruits array contains: ${firstFruit}, ${secondFruit} and ${thirdFruit}.` );  Exercise (1)​ Exercise We have the names of the Simpsons family stored in an array called familyMembers. Create variables to store the names of the family members so that the console.log will print out the following message:In the Simpsons family, Homer and Marge are the parents. Bart is the son, Lisa is the daughter, and Maggie is the baby. let familyMembers = [&quot;Homer&quot;, &quot;Marge&quot;, &quot;Bart&quot;, &quot;Lisa&quot;, &quot;Maggie&quot;]; // Create variables to store the values here console.log( `In the Simpsons family, ${dad} and ${mum} are the parents. ${son} is the son, ${daughter} is the daughter, and ${baby} is the baby.` ); Question: How many lines of code did you add? "},{"title":"Destructuring syntax​","type":1,"pageTitle":"JavaScript Core III - 3","url":"/js-core-3/week-3/lesson#destructuring-syntax","content":"There is a way to extract all the values of an array into variable in just one line of code. This technique is called destructuring and it has a special syntax. Here is the code we used in the last exercise with array destructuring. let familyMembers = [&quot;Homer&quot;, &quot;Marge&quot;, &quot;Bart&quot;, &quot;Lisa&quot;, &quot;Maggie&quot;]; let [dad, mum, son, daughter, baby] = familyMembers; console.log( `In the Simpsons family, ${dad} and ${mum} are the parents. ${son} is the son, ${daughter} is the daughter, and ${baby} is the baby.` );  With array destructuring you were able to reduce this code down from 7 lines of code to just 3 lines of code. This means your code is shorter and there is less chance for you to have a bug in your code. Exercise (2)​ ExerciseSolution Exercise Rewrite the code below to use array destructuring instead of assigning each value to a variable. let sentence = [&quot;Hello&quot;, &quot;Code&quot;, &quot;Your&quot;, &quot;Future&quot;]; let firstWord = item[0]; let secondWord = item[1]; let thirdWord = item[2]; let fourthWord = item[3]; console.log( `FirstWord: ${firstWord}, SecondWord: ${secondWord}, ThirdWord: ${thirdWord}, FourthWord: ${fourthWord},` );  Exercise (3)​ ExerciseSolution Exercise We have a function called sumAndMultiply. It will take two numbers and then return an array where the first number is the sum of the two numbers, and the second number is the multiplication of the two numbers. function sumAndMultiply(a, b) { return [a + b, a * b]; } // Assign variables using array destructuring on this line console.log( `The sum of the two numbers is ${sum}, the multiplication of the two numbers is ${multiply}` ); Which of the following lines of code can be used above? A) let sum, multiply = sumAndMultiply(2, 3);B) let [sumAndMultiply] = sumAndMultiply(2, 3);C) let [sum, multiply] = sumAndMultiply(a, b);D) let [sum, multiply] = sumAndMultiply(2, 3); Exercise (4)​ ExerciseSolution Exercise When you do array destructuring, the array can be of any data type. Try destructuring with the next array, which contains objects. let citiesByPopulation = [ { name: &quot;London&quot;, population: 8000000 }, { name: &quot;Birmingham&quot;, population: 1000000 }, { name: &quot;Glasgow&quot;, population: 600000 }, { name: &quot;Manchester&quot;, population: 500000 }, ]; // Assign variables using array destructuring on this line console.log(`${london.name} population is ${london.population}`); console.log(`${birmingham.name} population is ${birmingam.population}`); console.log(`${glasgow.name} population is ${glasgow.population}`); console.log(`${manchester.name} population is ${manchester.population}`);  Exercise (5)​ Exercise Complete all of the exercises found here "},{"title":"Resources​","type":1,"pageTitle":"JavaScript Core III - 3","url":"/js-core-3/week-3/lesson#resources","content":"Here are some useful resources to help you understand this material FreeCodeCamp's Intro To Array DestructuringWhy Is Array/Object Destructuring So Useful And How To Use It (Video)The Most In-Depth Yet Understandable ES6 Destructuring Tutorial "},{"title":"3. Project Work​","type":1,"pageTitle":"JavaScript Core III - 3","url":"/js-core-3/week-3/lesson#3-project-work","content":""},{"title":"Explanation​","type":1,"pageTitle":"JavaScript Core III - 3","url":"/js-core-3/week-3/lesson#explanation","content":"For the rest of the day we'll be working together on our group projects The project is called TV Show Trainees should group into teams based on the Level that they are working on currently. "},{"title":"PD (Agile: Scrum planning)​","type":1,"pageTitle":"JavaScript Core III - 3","url":"/js-core-3/week-3/lesson#pd-agile-scrum-planning","content":"Session objective: This session introduces roles, processes and ceremonies in a scrum team. Exercise (10 minutes) Exercise objective: To use Gitprojects for planning Use the Gitprojects board to plan your homework. Step 1: Click on the projects tab in your repository and select create a project. Step 2: Name your project CYF Homework-Your name Step 3: Choose from any of the templates that breaks task down into three separate stages. (To do, in progress, done) Step 4: Review your Tech Edu and PD homework, create a new card for each piece of homework and organise them into the three different categories (To do, in progress, done) Remember, each card should have some detail about the task and what you need to do to complete your homework. Agile: Scrum planning Exercise (30 minutes) Exercise objective: To use Gitprojects for planning In small groups, plan your TV show project. Step 1: Click on the projects tab in your repository and select create a project. Step 2: Name your project TV-Show-Project-Planning Step 3: Work together and review all of the tasks you need to do to complete your individual projects (please note that you might be at different stages of completion). Organise your tasks in four categories (Backlog, To do, In progress, Done). Step 4: It’s time to have your first stand up. In your groups discuss your progress and your blockers. "},{"title":"Coursework​","type":1,"pageTitle":"JavaScript Core III - 3","url":"/js-core-3/week-3/lesson#coursework","content":"Click here to view the homework for this lesson. "},{"title":"Feedback​","type":1,"pageTitle":"JavaScript Core III - 3","url":"/js-core-3/week-3/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Preparation","type":0,"sectionRef":"#","url":"/mongodb/preparation","content":"","keywords":""},{"title":"1) Create an Account on MongoDB Atlas​","type":1,"pageTitle":"Preparation","url":"/mongodb/preparation#1-create-an-account-on-mongodb-atlas","content":"Create an account for yourself on MongoDB's &quot;Atlas&quot; service. You'll be using this service a lot over this module. https://www.mongodb.com/cloud/atlas Later we will look at making your own database on this cloud-hosted service "},{"title":"2) Install MongoDB Compass​","type":1,"pageTitle":"Preparation","url":"/mongodb/preparation#2-install-mongodb-compass","content":"Install the &quot;Compass&quot; software for MongoDB from https://www.mongodb.com/try/download/compass Download the full version (this will be the default) "},{"title":"Note for Mac Users​","type":1,"pageTitle":"Preparation","url":"/mongodb/preparation#note-for-mac-users","content":"Once downloaded, you cannot simply double-click the download to run it. Instead: Open finderNavigate to the folder containing the downloaded appRight-click or control-click on itChoose &quot;open&quot; from the pop-up menu "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/mongodb/week-1/homework","content":"","keywords":""},{"title":"1) Finish in-class exercises​","type":1,"pageTitle":"Coursework","url":"/mongodb/week-1/homework#1-finish-in-class-exercises","content":"Before continuing with the coursework you should make sure you have completed all of the exercises from our class. You can find the exercises here: https://syllabus.codeyourfuture.io/mongodb/week-1/lesson "},{"title":"2) Readwell Project (8 Hours)​","type":1,"pageTitle":"Coursework","url":"/mongodb/week-1/homework#2-readwell-project-8-hours","content":"Your job is to write some API endpoints in the Express server code to correctly return books from the MongoDB collection. You can find the full description for this task here: https://github.com/CodeYourFuture/MongoDB-Coursework-Week1-2 You should complete all of the tasks in WEEK-1.md "},{"title":"3) Full Stack Project - Week 1 (8 hours)​","type":1,"pageTitle":"Coursework","url":"/mongodb/week-1/homework#3-full-stack-project---week-1-8-hours","content":"Over the next three weeks, you'll be bringing everything you've learnt together into a Full Stack project. This week, you'll only be building the Front End of your website. You can find all of the details for this project here https://github.com/CodeYourFuture/Full-Stack-Project-Assessment For this week, you should complete Level 100 If you finish all of Level 100, continue to Level 199 "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/mongodb/week-1/instructors","content":"","keywords":""},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/mongodb/week-1/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-mongodb For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Before you teach this lesson​","type":1,"pageTitle":"Instructor Notes","url":"/mongodb/week-1/instructors#before-you-teach-this-lesson","content":"If you are teaching this class in the coming weeks you must instruct your trainees to complete the instructions below. MongoDB Preparation If you trainees do not arrive with these steps completed then you will lose a lot of time on your first lesson. You should consider running short mid-week sessions the week before to help trainees get set up. "},{"title":"Presentations​","type":1,"pageTitle":"Instructor Notes","url":"/mongodb/week-1/instructors#presentations","content":""},{"title":"Quiz​","type":1,"pageTitle":"Instructor Notes","url":"/mongodb/week-1/instructors#quiz","content":""},{"title":"Notes​","type":1,"pageTitle":"Instructor Notes","url":"/mongodb/week-1/instructors#notes","content":""},{"title":"Coursework","type":0,"sectionRef":"#","url":"/mongodb/week-2/homework","content":"","keywords":""},{"title":"1) Finish in-class exercises​","type":1,"pageTitle":"Coursework","url":"/mongodb/week-2/homework#1-finish-in-class-exercises","content":"Before continuing with the coursework you should make sure you have completed all of the exercises from our class. You can find the exercises here: https://syllabus.codeyourfuture.io/mongodb/week-2/lesson "},{"title":"2) Readwell Project - Part 2(8 Hours)​","type":1,"pageTitle":"Coursework","url":"/mongodb/week-2/homework#2-readwell-project---part-28-hours","content":"Your job is to write some API endpoints in the Express server code to correctly return books from the MongoDB collection. You can find the full description for this task here: https://github.com/CodeYourFuture/MongoDB-Coursework-Week1-2 You should complete all of the tasks in WEEK-2.md "},{"title":"3) Full Stack Project - Week 2 (5 hours)​","type":1,"pageTitle":"Coursework","url":"/mongodb/week-2/homework#3-full-stack-project---week-2-5-hours","content":"Continuing on your project from last week, this week you'll be building the Backend of your Full Stack website. You can find all of the details for this project here https://github.com/CodeYourFuture/Full-Stack-Project-Assessment For this week, you should complete Level 200 &amp; Level 250 If you finish all of Level 200 and 250, continue to Level 299 "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/mongodb/week-2/instructors","content":"","keywords":""},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/mongodb/week-2/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-mongodb For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Presentations​","type":1,"pageTitle":"Instructor Notes","url":"/mongodb/week-2/instructors#presentations","content":""},{"title":"Quiz​","type":1,"pageTitle":"Instructor Notes","url":"/mongodb/week-2/instructors#quiz","content":""},{"title":"Notes​","type":1,"pageTitle":"Instructor Notes","url":"/mongodb/week-2/instructors#notes","content":""},{"title":"MongoDB - 2","type":0,"sectionRef":"#","url":"/mongodb/week-2/lesson","content":"","keywords":""},{"title":"Outline:​","type":1,"pageTitle":"MongoDB - 2","url":"/mongodb/week-2/lesson#outline","content":"ReviewSigning up for MongoDB AtlasMaking a local Express serverConnecting to a MongoDB server from a local Node serverCreating and dropping databases and collections in AtlasReading documentationBSON typesCreating documentsCreating a document in AtlasCreating a document with the MongoDB Node DriverUpdating a documentDeleting a document "},{"title":"Review​","type":1,"pageTitle":"MongoDB - 2","url":"/mongodb/week-2/lesson#review","content":"In the last lesson, we learned what a database is,what a DBMS is,what MongoDB is,what a callback function is,how to connect to a MongoDB server from a Node server,how to get all documents in a collection,how to search for documents in a collection, andhow to get a single document in a collection using its ID. Now that we know how to read databases, collections, and documents, let's learn how to create, update, and delete them. "},{"title":"Signing up for MongoDB Atlas​","type":1,"pageTitle":"MongoDB - 2","url":"/mongodb/week-2/lesson#signing-up-for-mongodb-atlas","content":"MongoDB Atlas is an online service for hosting a MongoDB database server. Luckily, there is a free version for simple projects like ours. Let's sign up for an account so we can create our own database. Go to the MongoDB Atlas website.Click the &quot;Try Free&quot; button at the top of the page.Enter your email address, your name, and a new password, then agree to the terms and click &quot;Get started free&quot;.When you see a popup, click the &quot;Build my first cluster&quot; button. It might ask you some questions and give you some tips, but you can skip those.Click the &quot;Create Cluster&quot; button at the bottom of the page. This actually creates a group of servers called a &quot;cluster&quot;. However, it might take a few minutes for the cluster to be ready. While it is being prepared, let's make an Express server to connect to one of the servers in the cluster. "},{"title":"Making a local Express server​","type":1,"pageTitle":"MongoDB - 2","url":"/mongodb/week-2/lesson#making-a-local-express-server","content":"In the last lesson, we made an Express server on Glitch. In this lesson, however, we will make one on our own computer -- in other words, we will make a &quot;local&quot; server. Running a local server is the way most professional developers work, so it is important for you to learn. Follow these instructions for making a node app and installing Express.js. When prompted, set the &quot;entry point&quot; to be server.js. If you miss the chance, you can edit package.json to fix this. Now that we have Express ready, let's start writing our JavaScript. Open your favourite code editor (for example, Visual Studio Code) and create a new file with this: const express = require(&quot;express&quot;); const app = express(); app.use(express.json()); app.get(&quot;/&quot;, function (request, response) { response.send(&quot;Hello, world!&quot;); }); app.listen(3000);  Save this as server.js in your project directory. The code should look a bit familiar from previous lessons. It imports Express, creates a new Express app, tells Express to return &quot;Hello, world!&quot; when you go to the / endpoint, and starts listening for requests on port 3000. Let's run it. Back in your shell, enter this: node server.js  This starts the Node server that we wrote in server.js. When you run a server on your computer, you can usually get to it by going to localhost in your browser. However, because we told it to listen to port 3000, we need to go to localhost:3000. When you go here in your browser, you should see &quot;Hello, world!&quot; "},{"title":"Connecting to a MongoDB server from a local Node server​","type":1,"pageTitle":"MongoDB - 2","url":"/mongodb/week-2/lesson#connecting-to-a-mongodb-server-from-a-local-node-server","content":"We now have a working Node server that uses the Express package. Let's connect it to a server in our new MongoDB cluster. Add the MongoDB Node Driver package to your project. To do this, stop your server by pressing ctrl+c, and run this in the terminal: npm install mongodb  To use the driver to connect to our MongoDB server, we need to finish some more tasks on Atlas. Go back to the Atlas website in your browser, and you should see a &quot;CONNECT&quot; button. Click that, and you should see a new window with two steps: (1) whitelisting IP addresses and (2) creating a MongoDB user. In step 1, click a button to add a new IP address. A form should appear. Use the IP address 0.0.0.0, which lets you use the database anywhere, and click the button to add it. In step 2, enter a new username (for example, cyf) and new password that you will not forget (for example, LetsLearnMongoDB2019). You will put these in your code, so if you want people to look at your code, do not use a password you use somewhere else! Click the button to create the user, and then click the &quot;Choose a connection method&quot; button. You should now see three options. Click the second option: &quot;Connect Your Application&quot;. This should show you a database URI that you can use to connect to a server in your MongoDB cluster. Note: you only need to use the part of the URI up to mongodb.net (not the /test?... part). Now, let's write some code. Open your server.js file again, and add a new line at the top to import the MongoDB driver: const mongodb = require(&quot;mongodb&quot;);  Also add a line before your endpoints to define the database URI from Atlas, without the /test?... part: const uri = &quot;mongodb+srv://xxxx:xxxx@cluster0-xxxx.mongodb.net&quot;;  Make sure that you use the real username, password, and address in this string. In the previous lesson, we were using public code on Glitch, so we put this in an environment variable. However, because this is local code and not public, we can put the password in the code for now. Warning: do not put this code on Glitch or in a Git repository! If you do that, your password will become public, and then anyone can edit your database! (If you really want to make the code public, look into using environment variables.) With the URI, we can now connect to a database. Let's do that in the endpoint callback function: app.get(&quot;/&quot;, function (request, response) { const client = new mongodb.MongoClient(uri); client.connect(function () { response.send(&quot;It worked!&quot;); client.close(); }); });  Let's try to run this. Back in the shell, if you are still running your Node server, stop it by pressing ctrl+c. You need to run it again to run your new code: node server.js  Once you run this, try reloading localhost:3000 in your browser, and you should see &quot;It worked!&quot; "},{"title":"Creating and dropping databases and collections in Atlas​","type":1,"pageTitle":"MongoDB - 2","url":"/mongodb/week-2/lesson#creating-and-dropping-databases-and-collections-in-atlas","content":"To make our Express server useful, we need some data in our database. Let's learn how to add a database and a collection. To add a database, click the &quot;COLLECTIONS&quot; button on Atlas. Let's add our own data, so click the &quot;Add my own data&quot; button. Now, you can enter the names of your first database and collection. Enter whatever you want, but you cannot use spaces or some special characters. Then click the Create button. After that, you should see your collection (but it does not have any documents yet). If you ever want to delete a collection, hover over the the name of the collection in the database list, and click the rubbish bin icon to the right. A modal appears, and you just need to type in the name of the collection and click the Drop button to confirm. When you drop a collection, if your database has nothing in it, the database will just disappear. If you want to drop a whole database and all its collections and documents at the same time, just follow the same steps for the database: click the rubbish bin next to it, enter the name, and click the Drop button. Now that we can create collections, we can create some documents. However, before we do that, let's look at a great way to help us understand the details. "},{"title":"Reading documentation​","type":1,"pageTitle":"MongoDB - 2","url":"/mongodb/week-2/lesson#reading-documentation","content":"When you use tech like Node, Express, or MongoDB, you can usually find official notes online that tell you details about how to use it. These are called the &quot;documentation&quot; or &quot;docs&quot;. Usually, you can find them on the official website. For MongoDB, you can find the documentation at docs.mongodb.com. Let's see what it has. If you go to the MongoDB docs, you can find basic introductions like Getting Started and deeper explanations like the MongoDB Manual. If you want to search for something specific, you can use the search field at the top of the page. Warning: be careful when reading code in the MongoDB docs, because it is usually not for the MongoDB Node Driver! Typically, when you see code, it will be for what is called the &quot;Mongo Shell&quot;, which is another way to access a database. It looks similar to the kind of code we have been writing, but if you use it on a Node server, you might get confusing errors. Let's find the docs just for the MongoDB Node Driver. On the left side bar, click &quot;MongoDB Drivers&quot;. This takes you to a page with drivers for different coding languages. Click &quot;Node.js&quot;, which will take you to the MongoDB Node Driver page. A very helpful link here is &quot;Usage Guide&quot;. Another very helpful link is &quot;API Reference&quot;. Open this in a new tab. We will come back to it later. In the next section, we will learn about BSON, the JSON-like format used for MongoDB documents. Before we start, click the &quot;Server&quot; tab at the top of the page, try searching for &quot;BSON&quot; in the docs, and then open the BSON Types page. "},{"title":"BSON Types​","type":1,"pageTitle":"MongoDB - 2","url":"/mongodb/week-2/lesson#bson-types","content":"Many coding languages have a list of data types. For example, in JavaScript, there is Number,String,Boolean (true or false),null,undefined, andObject. In BSON (which stands for &quot;Binary JSON&quot;), the data types are different and a bit more complicated. Here are some of them: 32-bit integer -- for whole numbers with no decimal points (examples: 0, 1, 183941, -42)Double -- for number with decimal points (examples: 0.1, 1.0, -31.39585)StringBooleanNullObjectArrayObjectId -- the ObjectIds you learned about in the last lessonDate -- like JavaScript Dates You can find all of them and more information about them on that MongoDB docs page. We will use some of these BSON types when we create our first documents. "},{"title":"Creating documents​","type":1,"pageTitle":"MongoDB - 2","url":"/mongodb/week-2/lesson#creating-documents","content":"Let's learn a couple of ways to create MongoDB documents. "},{"title":"Creating a document in Atlas​","type":1,"pageTitle":"MongoDB - 2","url":"/mongodb/week-2/lesson#creating-a-document-in-atlas","content":"Now, we are finally ready to make our first database documents! Let's open Atlas again and create a new database: cinema. Let's also create a new collection called films. To create a document in Atlas, click the &quot;INSERT DOCUMENT&quot; button on the right side of the page. A popup will appear with an ObjectId already made for us. Now, we can add the rest of the fields. To start, let's add a field called title for our film names. To the right of the field, you can see that there is already a data type selected: String. This is perfect for a title, so let's just type the name of a film as the field value. Use one of your favourite films! Then, press Enter. Let's try another field with another data type. Add a field named year, and select the type &quot;Int32&quot; (for 32-bit integer) so we can add numbers without decimal points. As the value, put the year the film was released. (Don't know the year? Use IMDb to find out.) Now, let's try adding a new data type: Array. Select Array from the drop-down list, and give it the name actors. You should see the index 0 appear below it. Here, you can enter the name of an actor in the film. When you press Enter, you can add even more. When you have entered a few actors, click the Insert button to add the document. Now, you can see it inside of your collection. That is how you can add a document easily with MongoDB Atlas. Exercise 1​ Exercise Try adding two new films to your database, using the Atlas web interface. Give each of them a title, year, and a few actors. "},{"title":"Creating a document with the MongoDB Node Driver​","type":1,"pageTitle":"MongoDB - 2","url":"/mongodb/week-2/lesson#creating-a-document-with-the-mongodb-node-driver","content":"When you build an app, you might also want to add documents from your server. This is how you can add a single document: const doc = { // ... }; collection.insertOne(doc, function (error, result) { // ... });  Here, you can just make a normal object that will convert to JSON, and MongoDB will automatically convert the data types to BSON. Also, if you do not include the _id field, MongoDB will automatically add one for you. Notice that the callback function for insertOne has a result argument. This is an object that has some useful information about what you inserted into the collection. One useful property is result.ops, which is an array with all the documents you just created, including the automatic _id. Let's try adding an endpoint for creating a film to our code. Open up your code editor again, and add this new endpoint: app.post(&quot;/films&quot;, function (request, response) { const client = new mongodb.MongoClient(uri); client.connect(function () { const db = client.db(&quot;cinema&quot;); const collection = db.collection(&quot;films&quot;); const film = { title: &quot;Princess Mononoke&quot;, year: 1997, actors: [&quot;Billy Crudup&quot;, &quot;Billy Bob Thorton&quot;, &quot;Claire Danes&quot;], }; collection.insertOne(film, function (error, result) { response.send(error || result.ops[0]); client.close(); }); }); });  Here, when the user sends a POST request to /films, the server creates a new film document with the title &quot;Princess Mononoke&quot; and responds with the inserted document, including the new _id field. To try it, restart your server first: go to your terminal shell, press ctrl+c to stop the server, press the up key to go to your previous command, and then press enter. Now, try sending a POST request to localhost:3000/films with Postman, and then check your collection on Atlas. Exercise 2​ Exercise Update the new endpoint to take query parameters title, year, and actors and create and return a new film with those fields and values. Make sure that only those fields are added. If a query parameter is missing, return a 400 error. Make sure that the year is a number in the database (not a string). Let the actors be separated by commas. For example, sending a POST request to /films?title=Ex Machina&amp;year=2014&amp;actors=Domhnall Gleeson,Oscar Isaac,Alicia Vikander should create a new film document in the database like this: { &quot;_id&quot;: &quot;5d057f95243295255b98b6a0&quot;, &quot;title&quot;: &quot;Ex Machina&quot;, &quot;year&quot;: 2014, &quot;actors&quot;: [&quot;Domhnall Gleeson&quot;, &quot;Oscar Isaac&quot;, &quot;Alicia Vikander&quot;] } (Hint: you can turn a string like a,b,c into an array like ['a', 'b', 'c'] with 'a,b,c'.split(',').) "},{"title":"Updating a document​","type":1,"pageTitle":"MongoDB - 2","url":"/mongodb/week-2/lesson#updating-a-document","content":"To update a single document, you can use findOneAndUpdate with a $set operator like this: const searchObject = { // ... }; const updateObject = { $set: { // ... }, }; const options = { // ... }; collection.findOneAndUpdate( searchObject, updateObject, options, function (error, result) { // ... } );  This will update the first document that matches searchObject with the fields in updateObject using some options. There are several options you can use. The one that we will use in this lesson is returnOriginal. If your options include returnOriginal: false, then you can get the updated document (not the original one) from result. However, result here is different than the one for insertOne. Let's investigate. Updating a document - investigating findOneAndUpdate's result in the documentation​ To see what this is, let's go to the API Reference tab we opened earlier. On this page, on the left side bar, we can see many objects we can use from the mongodb package. We want to find information about the findOneAndUpdate function, which is on a Collection, so let's click the &quot;Collection&quot; link. This opens many properties that a Collection has, including its methods (functions). Find and click the link for findOneAndUpdate. Here, we can see description of the function and its arguments. For example, you can see a list of options we can use. We can also see a column with the arguments types. We want to see what we can do with the result argument of the callback function, so click the type for callback: &quot;Collection~findAndModifyCallback&quot;. Now, we can see the description of what our callback function and its arguments should be. Click on the type of result so we can find out more about it: &quot;Collection~findAndModifyWriteOpResult&quot;. Finally, we can see the properties of result. Notice the first property, value, which will be our updated document. We can use this to return the updated document to the user. Note: at the time of writing this lesson, the docs have some problems. For example, the description of the value property says that it is from the findAndModify command, but it is really from the findAndUpdateOne command for us. Mistakes like these are not uncommon in documentation. (If you are stuck on something, and docs do not help, a good place to ask for help is Stack Overflow.) Updating a document - back to the code...​ Now, we know how to use result. For example, we can do this: const searchObject = { title: &quot;Princess Mononoke&quot; }; const updateObject = { $set: { year: 2000, }, }; const options = { returnOriginal: false }; collection.findOneAndUpdate( searchObject, updateObject, options, function (error, result) { response.send(error || result.value); client.close(); } );  Here, we make a search object for a film whose title is &quot;Princess Mononoke&quot;. We also make an update object to set the film's year to 2000. We also set some options to include the updated film in result (not the original film, whose year was 1997). We then pass these to collection.findOneAndUpdate with a callback function. After the Node Driver finds the first film with that matches the search object and updates it with the update object, it runs the callback function, which responds with the new film document (or an error) and closes the client. Let's try it in our code. Add a new endpoint like this: app.put(&quot;/films&quot;, function (request, response) { const client = new mongodb.MongoClient(uri); client.connect(function () { const db = client.db(&quot;cinema&quot;); const collection = db.collection(&quot;films&quot;); const searchObject = { title: &quot;Princess Mononoke&quot; }; const updateObject = { $set: { year: 2000, }, }; const options = { returnOriginal: false }; collection.findOneAndUpdate( searchObject, updateObject, options, function (error, result) { response.send(error || result.value); client.close(); } ); }); });  Now, when we make a PUT request to /films, the server changes the year of Princess Mononoke to 2000, and it returns the film. To try it, restart your server again (in the terminal: ctrl+c, up, enter) and make a PUT request to localhost:3000/films in Postman. Exercise 3​ Exercise Change the new endpoint to /films/:id, and make it take a JSON object body and replace the document that has that id. If the id is not a valid ObjectId string, return a 400 status code. Allow only the properties _id, title, year, and actors. Do not allow objects with missing properties. Only allow the correct data type for each property. Do not allow the _id to be changed. If the JSON body is not allowed, return a 422 status code. If no film has that id, return a 404 status code. If the update is successful, return the updated document. For example, if there is a film with _id: ObjectId(&quot;5d057f95243295255b98b6a0&quot;), then sending a PUT request to /films/5d057f95243295255b98b6a0 should update that film with the JSON body. Hint: use this function to check if the request body is allowed. /** Given `request.params` and `request.body`, check if the `PUT` request body is allowed. */ function getPutBodyIsAllowed(requestParams, requestBody) { const fieldNames = Object.keys(requestBody); const allowedFieldNames = [&quot;_id&quot;, &quot;title&quot;, &quot;year&quot;, &quot;actors&quot;]; return ( fieldNames.length === allowedFieldNames.length &amp;&amp; fieldNames.every((name) =&gt; allowedFieldNames.includes(name)) &amp;&amp; requestParams.id === requestBody._id &amp;&amp; typeof requestBody.title === &quot;string&quot; &amp;&amp; typeof requestBody.year === &quot;number&quot; &amp;&amp; Array.isArray(requestBody.actors) &amp;&amp; requestBody.actors.every((actor) =&gt; typeof actor === &quot;string&quot;) ); }  "},{"title":"Deleting a document​","type":1,"pageTitle":"MongoDB - 2","url":"/mongodb/week-2/lesson#deleting-a-document","content":"To delete a single document, you can use collection.deleteOne like this: const searchObject = { // ... }; collection.deleteOne(searchObject, function (error, result) { // ... });  This will delete the first object that matches the fields in searchObject. Here, result is also different than before. One property we will use is result.deletedCount, which should be 1 if a document was deleted. Question: what status code should we give if we delete something successfully? When we call response.send(), the code will be 200 by default. However, 200 actually means that the response will should have some data. When we delete a film, though, we are removing the data for that film, so we do not need to return it. The status code for success but no data is 204. (You can learn more about HTTP status codes here.) Let's see an example of deleteOne and a 204 response: const searchObject = { title: &quot;Princess Mononoke&quot; }; collection.deleteOne(searchObject, function (error, result) { if (error) { response.status(500).send(error); } else if (result.deletedCount) { response.sendStatus(204); } else { response.sendStatus(404); } });  This tries to delete the first document with the title &quot;Princess Mononoke&quot;. If an error happens, it returns a 500 status code and the error in the response body. Otherwise, if something was deleted, it returns an empty 204 response. If something was not deleted, that means that MongoDB could not find any match, so it returns an empty 404 response. Let's put this in a new endpoint of our code: app.delete(&quot;/films/:title&quot;, function (request, response) { const client = new mongodb.MongoClient(uri); client.connect(function () { const db = client.db(&quot;cinema&quot;); const collection = db.collection(&quot;films&quot;); const searchObject = { title: request.params.title }; collection.deleteOne(searchObject, function (error, result) { if (error) { response.status(500).send(error); } else if (result.deletedCount) { response.sendStatus(204); } else { response.sendStatus(404); } client.close(); }); }); });  When a user sends a DELETE request to /films/Princess Mononoke, for example, it should either (1) delete the first film called &quot;Princess Mononoke&quot; if it exists and return 204 (2) just return 404 if it does not exist. To try it, restart your server, find a film title in your database, and send a DELETE request to /films/&lt;put the film title here&gt; in Postman. Exercise 4​ Exercise Change the new endpoint to /films/:id. Make it delete only the object with the given id. "},{"title":"Feedback​","type":1,"pageTitle":"MongoDB - 2","url":"/mongodb/week-2/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"MongoDB - 1","type":0,"sectionRef":"#","url":"/mongodb/week-1/lesson","content":"","keywords":""},{"title":"Outline​","type":1,"pageTitle":"MongoDB - 1","url":"/mongodb/week-1/lesson#outline","content":"Before you startWhat is a database?Database management systemsMongoDBReview of callback functionsConnecting to a database from an Express serverGetting all documents in a collectionSearching for documents in a collection Getting documents with a field valueGetting documents with multiple field values IDsGetting one document in a collectionOptional: search operations $or$ne, $gt, $gte, $lt, $lte "},{"title":"Before you start​","type":1,"pageTitle":"MongoDB - 1","url":"/mongodb/week-1/lesson#before-you-start","content":"Before you arrive at class you must have completed the following setup work. Node Preparation If you are a teacher reading this, please check the Instructor Notes "},{"title":"What is a database?​","type":1,"pageTitle":"MongoDB - 1","url":"/mongodb/week-1/lesson#what-is-a-database","content":"A database is an organised collection of data. Example: the Internet Movie Database (IMDb) is an organised collection of information about films. You can even say that a few simple files are a kind of database. However, when people people talk about website databases, they are often really talking about database management systems. "},{"title":"Database management systems​","type":1,"pageTitle":"MongoDB - 1","url":"/mongodb/week-1/lesson#database-management-systems","content":"A database management system (DBMS) is a kind of software for creating, managing, and using databases. DBMSs are good for keeping data even if you restart the server. They are extra helpful for large amounts of data, because they can let us get and change data quickly,use a database from many computers at the same time,and more. "},{"title":"MongoDB​","type":1,"pageTitle":"MongoDB - 1","url":"/mongodb/week-1/lesson#mongodb","content":"In this module, you will learn to use a DBMS named &quot;MongoDB Server&quot; -- usually just called &quot;MongoDB&quot; (or &quot;Mongo&quot;). MongoDB stores data in a format similar to JSON (but not exactly the same). It also lets you use JavaScript to access the data. MongoDB is fairly popular, but it is not the most popular DBMS. More popular DBMSs use a coding language called &quot;SQL&quot; and store data in tables. You will learn MongoDB, though, so that you do not need to learn a new language or data format. With MongoDB, the JSON-like objects are called &quot;documents&quot;. These documents are put in named groups called &quot;collections&quot;. Each database in MongoDB is a named group of collections.  For example, in this lesson, we will use a database called music. In this database, there is one collection: tracks. The collection has documents like this: { &quot;_id&quot;: ObjectId(&quot;5cf2eb7d1c9d4400006fca92&quot;), &quot;title&quot;: &quot;Genesis&quot;, &quot;artist&quot;: &quot;Justice&quot;, &quot;album&quot;: &quot;Cross&quot;, &quot;year&quot;: 2007 }  (You might notice the _id field has &quot;ObjectId&quot;, which does not work in JSON. We will learn about this later.) "},{"title":"Review of callback functions​","type":1,"pageTitle":"MongoDB - 1","url":"/mongodb/week-1/lesson#review-of-callback-functions","content":"The typical way to use MongoDB with a Node server uses JavaScript functions called &quot;callback functions&quot;. A callback function is a function that (1) you give to another function and (2) the other function can run. For example, there is a built-in function called setTimeout. This function takes two arguments: (1) a callback function and (2) a number of milliseconds. It then runs the callback function after it waits that number of milliseconds. function sayHello() { console.log(&quot;Hello!&quot;); } setTimeout(sayHello, 1000);  Here, the callback function is sayHello. This code will show the message Hello! in the console after one second (1000 milliseconds). Another way to write it is like this: setTimeout(function () { console.log(&quot;Hello!&quot;); }, 1000);  Here, we give an unnamed callback function to setTimeout. It will do the same thing: show Hello! after one second. If we want, we can also put callback functions inside of other callback functions: setTimeout(function () { console.log(&quot;Hello!&quot;); setTimeout(function () { console.log(&quot;Goodbye!&quot;); }, 1000); }, 1000);  This will show Hello! after one second and then show Goodbye! after another second. We can even put another callback function inside of that callback function: setTimeout(function () { console.log(&quot;Hello!&quot;); setTimeout(function () { console.log(&quot;Goodbye!&quot;); setTimeout(function () { console.log(&quot;Hello again!&quot;); }, 1000); }, 1000); }, 1000);  This will show Hello! after one second, Goodbye! after another second, and then Hello again! after another second. These nested callback functions can be confusing, but they are important to understand before continuing. Exercise 1​ Exercise Look at this code: function getString() { return &quot;foobar&quot;; } function showString() { const string = getString(); console.log(string); } setTimeout(showString, 1000); This should print the string 'foobar' after one second. Which is the callback function? (a) getString(b) showString(c) setTimeout Exercise 2​ Exercise Rewrite the code in the previous exercise so that there are no new function names. Exercise 3​ Exercise Write a new function sayHiAndRun(callback) that takes a callback function, prints Hi!, and then runs the callback function. Exercise 4​ Exercise Which other functions that you learned in CYF lessons take a callback function as an argument? "},{"title":"Connecting to a database from an Express server​","type":1,"pageTitle":"MongoDB - 1","url":"/mongodb/week-1/lesson#connecting-to-a-database-from-an-express-server","content":"In the rest of this lesson, we will use an Express server on Glitch that connects to a MongoDB server. Let's start by remixing this Glitch web app: https://glitch.com/~cyf-db-lesson-1 After you do that, take a look at the file server.js. Some of this should look familiar to you from previous lessons. However, there is some new code, such as this line near the top: const mongodb = require(&quot;mongodb&quot;);  This imports what is called the &quot;MongoDB Node Driver&quot;, which is just some JavaScript that lets you use MongoDB in a Node server. Here is another new line: const uri = process.env.DATABASE_URI;  In Node, process.env holds what are called &quot;environment variables&quot;. These are variables that are usually stored outside of the code. They are often used for secret values, such as passwords. On Glitch, you put them in the .env file. Here, other people can see your environment variable names, but only you can see the values. Click on the .env file to see it for yourself. In this case, the variable is a Uniform Resource Identifier (URI). A URI is like a URL, but instead of http:// or https://, it can have other things. It can also include a user name and password. For this lesson, put this in your .env file: DATABASE_URI=mongodb+srv://cyf:LetsLearnMongoDB2019@cluster0-cxacx.mongodb.net  Here, we use mongodb+srv instead of http to connect to a MongoDB server. We also add a user name, cyf, and a password, LetsLearnMongoDB2019. Finally, we have the address of the server, which is already hosted somewhere online. If you go back to server.js, you can also see these lines: app.get(&quot;/&quot;, function (request, response) { const client = new mongodb.MongoClient(uri); client.connect(function () { response.send(&quot;Hello, world!&quot;); client.close(); }); });  Here, we see some callback functions. We give one callback function to app.get, and it runs when the user goes to the / endpoint. Next, we see how to make what is called a Mongo &quot;client&quot;: a JavaScript object that we use to connect to the database server using the URI. To connect, we call client.connect and give it another callback function that runs after it finishes connecting. Here, we then give the response Hello, world! and then close the client. Right now, our code connects to the database server, but it does not do anything with any database. Let's instead start using the database called music. We can get the database like this: const db = client.db(&quot;music&quot;);  Let's put this inside of our endpoint and see if it works: app.get(&quot;/&quot;, function (request, response) { const client = new mongodb.MongoClient(uri); client.connect(function () { const db = client.db(&quot;music&quot;); response.send(&quot;It worked!&quot;); client.close(); }); });  If you click &quot;Show&quot; on Glitch and pick an option, you should now see &quot;It worked!&quot; Next, let's get documents from the database. "},{"title":"Getting all documents in a collection​","type":1,"pageTitle":"MongoDB - 1","url":"/mongodb/week-1/lesson#getting-all-documents-in-a-collection","content":"To get the documents, we must first get a collection. Remember that a collection is just a bunch of documents. In our database, there is already a collection called tracks, which has documents for musical recordings. We can get it like this: const collection = db.collection(&quot;tracks&quot;);  Now, we can use the collection to get the documents. We can do this with the collection.find function, which searches for documents. Let's just get all documents, so we do not need to give any search arguments to find: collection.find();  This code does not actually give us the tracks yet. Instead, it gives us what is called a &quot;cursor&quot;: an object that points to results in the database. To get the track documents, we can call toArray on the cursor like this: collection.find().toArray(function (error, tracks) { // You can do something with the tracks here. });  Notice that we give another callback function, which runs when the cursor finishes making an array. Notice also that the first argument in the callback function is error: if there is a problem getting the array, this will have an error object. Otherwise, it will be null, and then can use tracks. Let's add this to our code and tell the server to respond with either the error (if there is one) or the tracks: app.get(&quot;/&quot;, function (request, response) { const client = new mongodb.MongoClient(uri); client.connect(function () { const db = client.db(&quot;music&quot;); const collection = db.collection(&quot;tracks&quot;); collection.find().toArray(function (error, tracks) { response.send(error || tracks); client.close(); }); }); });  When the page refreshes, you should see JSON text for some tracks like this (without the spaces): [ { _id: &quot;5cf2eb7d1c9d4400006fca92&quot;, title: &quot;Genesis&quot;, artist: &quot;Justice&quot;, album: &quot;Cross&quot;, year: 2007, }, { _id: &quot;5cf6d1bf1c9d4400007568a2&quot;, title: &quot;Head/Off&quot;, artist: &quot;Sebastian&quot;, album: &quot;Ross Ross Ross&quot;, year: 2006, }, { _id: &quot;5cf972f71c9d4400007dc0a4&quot;, title: &quot;Flat Beat&quot;, artist: &quot;Mr Oizo&quot;, album: &quot;Flat Beat&quot;, year: 1999, }, { _id: &quot;5cf973571c9d4400007dc0a5&quot;, title: &quot;Safe and Sound&quot;, artist: &quot;Justice&quot;, album: &quot;Woman&quot;, year: 2016, }, { _id: &quot;5cf973bf1c9d44000067167c&quot;, title: &quot;Greel&quot;, artist: &quot;Sebastian&quot;, album: &quot;Ed Rec Vol. 2&quot;, year: 2007, }, ];  We told Express to respond with an array, and Express automatically turned it into JSON text. Notice that the value for _id is a string, but remember from earlier that it was something like ObjectId(&quot;5cf2eb7d1c9d4400006fca92&quot;). What happened? The ObjectId object gets translated into a string whenever you turn it into JSON text. Exercise 5​ Exercise Make a new Express endpoint on the server for /books. There is another database on the MongoDB server named literature and a collection named books. Connect to that collection on this endpoint and return all the documents. How many of them are there? "},{"title":"Searching for documents in a collection​","type":1,"pageTitle":"MongoDB - 1","url":"/mongodb/week-1/lesson#searching-for-documents-in-a-collection","content":"Let's now learn how to get only documents that match some details. "},{"title":"Getting documents with a field value​","type":1,"pageTitle":"MongoDB - 1","url":"/mongodb/week-1/lesson#getting-documents-with-a-field-value","content":"To get all documents with a field that has a certain value, you can use the same collection.find function, but you give an object with the field and value you want. For example, if we want all tracks with &quot;artist&quot;: &quot;Justice&quot;, we can do this: const searchObject = { artist: &quot;Justice&quot; }; collection.find(searchObject);  Let's put this in our code: app.get(&quot;/&quot;, function (request, response) { const client = new mongodb.MongoClient(uri); client.connect(function () { const db = client.db(&quot;music&quot;); const collection = db.collection(&quot;tracks&quot;); const searchObject = { artist: &quot;Justice&quot; }; collection.find(searchObject).toArray(function (error, tracks) { response.send(error || tracks); client.close(); }); }); });  Now, when the user goes to /, they will get only the tracks by Justice. Exercise 6​ Exercise Make a new endpoint for /tracks/search. When a user requests it with the query parameter artist, return only the tracks with that query parameter's value. For example, if you go to /tracks/search?artist=Sebastian, it should show only the tracks by Sebastian. "},{"title":"Getting documents with multiple field values​","type":1,"pageTitle":"MongoDB - 1","url":"/mongodb/week-1/lesson#getting-documents-with-multiple-field-values","content":"To get all document with multiple field values, you can just add each field and value to your search object. For example, if we want all tracks with both &quot;artist&quot;: &quot;Justice&quot; and &quot;year&quot;: 2007, we can just do this: const searchObject = { artist: &quot;Justice&quot;, year: 2007 }; collection.find(searchObject);  Let's put this in our code: app.get(&quot;/&quot;, function (request, response) { const client = new mongodb.MongoClient(uri); client.connect(function () { const db = client.db(&quot;music&quot;); const collection = db.collection(&quot;tracks&quot;); const searchObject = { artist: &quot;Justice&quot;, year: 2007 }; collection.find(searchObject).toArray(function (error, tracks) { response.send(error || tracks); client.close(); }); }); });  Now, the user will only get only the tracks by Justice from the year 2007. Exercise 7​ Exercise Update your endpoint /tracks/search so that it works with the query parameter year, too. For example, if you go to /tracks/search?artist=Sebastian&amp;year=2006, it should show only the tracks by Sebastian from the year 2006. Exercise 8​ Exercise Update the /tracks/search endpoint so that it works with any combination of the query parameters title, artist, album, and year. For example, if you go to /tracks/search?artist=Sebastian&amp;album=Total, it should show only the track by Sebastian on the album Total. "},{"title":"IDs​","type":1,"pageTitle":"MongoDB - 1","url":"/mongodb/week-1/lesson#ids","content":"An ID is an identifier: something that is different for every item in a group. From the last module, you might remember seeing ID properties like id: 0, id: 1, id: 2, and so on. However, by default, MongoDB uses fields called _id with special IDs called ObjectIds, which you saw above. ObjectIds have a value made with a number system called &quot;hexadecimal&quot;. Hexadecimal can be represented by a string of the numbers zero to nine and the letters &quot;a&quot; to &quot;f&quot;. For ObjectIds, these strings all have 24 characters. (If you are curious, you can learn more about hexadecimal here and ObjectIds here.) To make an object ID, you can type new mongodb.ObjectID(string) where string is the 24-character hexadecimal string. For example, if we want to make an ObjectId with the string '5cf2eb7d1c9d4400006fca92', we can do this: const string = &quot;5cf2eb7d1c9d4400006fca92&quot;; const id = new mongodb.ObjectID(string);  Here, we assign the ObjectId to id. "},{"title":"Getting one document in a collection​","type":1,"pageTitle":"MongoDB - 1","url":"/mongodb/week-1/lesson#getting-one-document-in-a-collection","content":"To get only one document in a collection, you can pass a search object to collection.findOne. For example, if you want to get only one track with the artist Justice, you can do this: const searchObject = { artist: &quot;Justice&quot; }; collection.findOne(searchObject, function (error, track) { // You can do something with the track here. });  Notice that you give a callback function as the second argument to findOne. If you want to get the document with the ObjectId with the string '5cf2eb7d1c9d4400006fca92', you can do this: const string = &quot;5cf2eb7d1c9d4400006fca92&quot;; const id = new mongodb.ObjectID(string); const searchObject = { _id: id }; collection.findOne(searchObject, function (error, track) { // ... });  Let's try this in our code: app.get(&quot;/&quot;, function (request, response) { const client = new mongodb.MongoClient(uri); client.connect(function () { const db = client.db(&quot;music&quot;); const collection = db.collection(&quot;tracks&quot;); const string = &quot;5cf2eb7d1c9d4400006fca92&quot;; const id = new mongodb.ObjectID(string); const searchObject = { _id: id }; collection.findOne(searchObject, function (error, track) { response.send(error || track); client.close(); }); }); });  Now, we should only get the one track with that ID (not an array). Exercise 9​ Exercise Add an endpoint /tracks/:id that returns only the track with the given ID. For example, if you go to /tracks/5cf2eb7d1c9d4400006fca92, you should get only the track with the ID 5cf2eb7d1c9d4400006fca92. Make sure that it does not return an array. Make sure that /tracks/search still works. Exercise 10​ Exercise What happens when you give a 24-character ID that does not exist in the database? For example, try going to /tracks/0123456789abcdef01234567. Update the endpoint so that it returns a 404 status when this happens. Exercise 11​ Exercise What happens when you try to give an ID that is not 24 characters long or has non-hexadecimal characters? For example, try going to /tracks/foobar. Update the /tracks/:id endpoint so that it returns a 400 status when there is that kind of error. "},{"title":"Optional: search operations​","type":1,"pageTitle":"MongoDB - 1","url":"/mongodb/week-1/lesson#optional-search-operations","content":""},{"title":"$or​","type":1,"pageTitle":"MongoDB - 1","url":"/mongodb/week-1/lesson#or","content":"What if we want to get tracks with the artist Justice or Sebastian? We have to check for either &quot;artist&quot;: &quot;Justice&quot; or &quot;artist&quot;: &quot;Sebastian&quot;. To get all documents with any of multiple field values, you can use the special $or key in your search object with an array value of other search objects. If we want all tracks by Justice or Sebastian, we can do this: const searchObject = { $or: [{ artist: &quot;Justice&quot; }, { artist: &quot;Sebastian&quot; }], }; collection.find(searchObject);  Let's put this in our code: app.get(&quot;/&quot;, function (request, response) { const client = new mongodb.MongoClient(uri); client.connect(function () { const db = client.db(&quot;music&quot;); const collection = db.collection(&quot;tracks&quot;); const searchObject = { $or: [{ artist: &quot;Justice&quot; }, { artist: &quot;Sebastian&quot; }], }; collection.find(searchObject).toArray(function (error, tracks) { response.send(error || tracks); client.close(); }); }); });  Now, when the user goes to /, they should only tracks by Justice and tracks by Sebastian. What if we want tracks by Justice from 2007 andtracks by Sebastian from 2006? Here, we can just update our search objects like this: const searchObject = { $or: [ { artist: &quot;Justice&quot;, year: 2007 }, { artist: &quot;Sebastian&quot;, year: 2006 }, ], }; collection.find(searchObject);  Let's put this in our code: app.get(&quot;/&quot;, function (request, response) { const client = new mongodb.MongoClient(uri); client.connect(function () { const db = client.db(&quot;music&quot;); const collection = db.collection(&quot;tracks&quot;); const searchObject = { $or: [ { artist: &quot;Justice&quot;, year: 2007 }, { artist: &quot;Sebastian&quot;, year: 2006 }, ], }; collection.find(searchObject).toArray(function (error, tracks) { response.send(error || tracks); client.close(); }); }); });  Now, the user will get all tracks whose artists is either Justice or Sebastian. "},{"title":"$ne, $gt, $gte, $lt, $lte​","type":1,"pageTitle":"MongoDB - 1","url":"/mongodb/week-1/lesson#negtgteltlte","content":"So far, we have searched for documents with field values equal to something. However, we also have more options. If you want to get documents with field values not equal to something, you can a special field value object with the $ne key and the value that you do not want. For example, if you want to get all tracks whose artist is not Justice, you can do this: const searchObject = { artist: { $ne: &quot;Justice&quot;, }, }; collection.find(searchObject);  Let's try this in our code: app.get(&quot;/&quot;, function (request, response) { const client = new mongodb.MongoClient(uri); client.connect(function () { const db = client.db(&quot;music&quot;); const collection = db.collection(&quot;tracks&quot;); const searchObject = { artist: { $ne: &quot;Justice&quot;, }, }; collection.find(searchObject).toArray(function (error, tracks) { response.send(error || tracks); client.close(); }); }); });  Now, when you visit the page, you should see all tracks whose artist is not Justice. You can also search for documents with a field value greater than something. To do this, you can do the same thing, except you use the $gt key. For example, to get tracks released after 2006, you can do this: const searchObject = { year: { $gt: 2006, }, }; collection.find(searchObject);  Let's try this in our code, too: app.get(&quot;/&quot;, function (request, response) { const client = new mongodb.MongoClient(uri); client.connect(function () { const db = client.db(&quot;music&quot;); const collection = db.collection(&quot;tracks&quot;); const searchObject = { year: { $gt: 2006, }, }; collection.find(searchObject).toArray(function (error, tracks) { response.send(error || tracks); client.close(); }); }); });  Now, we should only get tracks from 2007 or later. If you want to also include tracks from 2006, you could use $gte instead: const searchObject = { year: { $gte: 2006, }, }; collection.find(searchObject);  This would get tracks from a year greater than or equal to 2006. Following this pattern, you can also use $lt for field values less than something, and you can use $lte for field values less than or equal to something. Exercise 12​ Exercise Add an endpoint /tracks/new that returns only the tracks released after 2010. Exercise 13​ Exercise Add an endpoint /tracks/old that returns only the tracks released before 2000. "},{"title":"Feedback​","type":1,"pageTitle":"MongoDB - 1","url":"/mongodb/week-1/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/mongodb/week-3/homework","content":"","keywords":""},{"title":"1) Finish in-class exercises​","type":1,"pageTitle":"Coursework","url":"/mongodb/week-3/homework#1-finish-in-class-exercises","content":"Before continuing with the coursework you should make sure you have completed all of the exercises from our class. The only exercise in the class was to write an API server in Express (backed by MongoDB) with routes for the following: Create a filmGet a list of filmsGet one film by IDdelete a film by ID Optional extras: 5. Get a list of films matching a search term in the title (substring matching, case-insensitive) 6. Update a film "},{"title":"Optional App​","type":1,"pageTitle":"Coursework","url":"/mongodb/week-3/homework#optional-app","content":"Write a react app to test your API (don't forget you'll need to install and use the cors library) "},{"title":"2) Create a diagram of the core actions in a full-stack app (2 hours)​","type":1,"pageTitle":"Coursework","url":"/mongodb/week-3/homework#2-create-a-diagram-of-the-core-actions-in-a-full-stack-app-2-hours","content":"Create a diagram (or diagrams) of the core actions for a full stack app, for the basic CRUD use cases we discussed in class. Your diagram(s) should include AT LEAST numbers #1, #2 &amp; #3. (I recommend detailing them ALL): Create. User fills out and submits a form to register a new film in the systemRead. User requests and gets shown a list of filmsRead. User requests and gets shown the details of one film by idRead. (optional) User requests and gets list of films matching a search termUpdate. (optional) User makes and submits changes to the details of an existing film using a form. Optional because we didn't spend long on PUT.Delete. User clicks a button to delete a specific film "},{"title":"You should try to capture ALL of the following:​","type":1,"pageTitle":"Coursework","url":"/mongodb/week-3/homework#you-should-try-to-capture-all-of-the-following","content":"The order of eventsWhat the user seesWhat actions the user takesWhat key bits of code execute in reactWhat key bits of code execute in express... ... to handle the API request... to communicate with mongodb... to handle the API response What critical data is passed at each point There's no one right way to do this, so be creative and find a way that works for you. I recommend you avoid looking at what your classmates have done until you have chosen your OWN way. "},{"title":"What tool should I use?​","type":1,"pageTitle":"Coursework","url":"/mongodb/week-3/homework#what-tool-should-i-use","content":"Use whatever tool you know best! Pen and paper is absolutely fine. "},{"title":"3) AirBnB Project (10 Hours+)​","type":1,"pageTitle":"Coursework","url":"/mongodb/week-3/homework#3-airbnb-project-10-hours","content":"In this repository you will find exercises and projects for you to complete. https://github.com/CodeYourFuture/MongoDB-Coursework-Week3 "},{"title":"4) Full Stack Project - Week 3 (3 hours)​","type":1,"pageTitle":"Coursework","url":"/mongodb/week-3/homework#4-full-stack-project---week-3-3-hours","content":"Continuing on your project from the past two weeks, this week you'll be adding a database and connecting it to your Back End. You can find all of the details for this project here https://github.com/CodeYourFuture/Full-Stack-Project-Assessment For this week, you should complete Level 300. If you finish all of Level 300, continue to Level 399 "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/mongodb/week-3/instructors","content":"","keywords":""},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/mongodb/week-3/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-mongodb For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Presentations​","type":1,"pageTitle":"Instructor Notes","url":"/mongodb/week-3/instructors#presentations","content":""},{"title":"Resources​","type":1,"pageTitle":"Instructor Notes","url":"/mongodb/week-3/instructors#resources","content":""},{"title":"Notes​","type":1,"pageTitle":"Instructor Notes","url":"/mongodb/week-3/instructors#notes","content":""},{"title":"Overview","type":0,"sectionRef":"#","url":"/node/","content":"","keywords":""},{"title":"Preparation​","type":1,"pageTitle":"Overview","url":"/node/#preparation","content":"Before starting this module there is some preparation work to get you setup. Make sure you complete it before attending class. "},{"title":"Content​","type":1,"pageTitle":"Overview","url":"/node/#content","content":"Week\tContentWeek 1\tNode, Express workshop Week 2\tTemplating Week 3\tNode Best Practices "},{"title":"Coordination​","type":1,"pageTitle":"Overview","url":"/node/#coordination","content":"Coordination details for this module can be found on the Module Coordinator's page "},{"title":"Module Coordinator","type":0,"sectionRef":"#","url":"/node/coordinator","content":"","keywords":""},{"title":"1) Preparation​","type":1,"pageTitle":"Module Coordinator","url":"/node/coordinator#1-preparation","content":"This module has some preparation work that should be set as coursework before the module starts You can find the preparation work here "},{"title":"MongoDB - 3","type":0,"sectionRef":"#","url":"/mongodb/week-3/lesson","content":"","keywords":""},{"title":"Outline​","type":1,"pageTitle":"MongoDB - 3","url":"/mongodb/week-3/lesson#outline","content":"Lesson 2 reviewIndexing indexing a collectionindexing a collection using a collated indeximplementing full text search in MongoDB Role based authentication cluster based rolesbackup and restoration roles AggregationReplicationTransactionsA project in MongoDBNext steps "},{"title":"Review​","type":1,"pageTitle":"MongoDB - 3","url":"/mongodb/week-3/lesson#review","content":"In the last lesson, we learned Signing up for MongoDB AtlasMaking a local Express serverConnecting to a MongoDB server from a local Node serverCreating and dropping databases and collections in AtlasReading documentationBSON typesCreating documentsCreating a document in AtlasCreating a document with the MongoDB Node DriverUpdating a documentDeleting a document Now that we know how to read databases, collections, and documents, we are ready to move on to more advanced tasks. "},{"title":"Use the sample database in MongoDB Atlas​","type":1,"pageTitle":"MongoDB - 3","url":"/mongodb/week-3/lesson#use-the-sample-database-in-mongodb-atlas","content":"We are going to use the sample cluster that we have already connected to in MongoDB Atlas. Let's use the Atlas GUI to: Create a new databaseCreate a new collectionImport sample data (we are interested in the AirBnB listings and reviews sample database) We now have a pretty extensive dataset that we will use for the rest of the class. "},{"title":"Insert a document with accent​","type":1,"pageTitle":"MongoDB - 3","url":"/mongodb/week-3/lesson#insert-a-document-with-accent","content":"The first task here is to insert a document in sample_airbnb.listingsAndReviews with the following fields found here. You can use the code that we developed in lesson 2, or the GUI Hint: you can use clone in GUI This document is useful for the next tasks. "},{"title":"Indexing​","type":1,"pageTitle":"MongoDB - 3","url":"/mongodb/week-3/lesson#indexing","content":"Let's start by visiting the official documentation: https://docs.mongodb.com/manual/indexes/ The most interesting index properties are: Default id indexLet's take a look in the indexes that we have in Atlas GUI sample database.Index TypesIndex PropertiesCollationCovered queries "},{"title":"Create an index​","type":1,"pageTitle":"MongoDB - 3","url":"/mongodb/week-3/lesson#create-an-index","content":"Let's create a new index using the Atlas GUI. Index prefixing and how it affects querying "},{"title":"Create a collated index​","type":1,"pageTitle":"MongoDB - 3","url":"/mongodb/week-3/lesson#create-a-collated-index","content":"From the documentation: &quot;Collation allows users to specify language-specific rules for string comparison, such as rules for lettercase and accent marks.&quot; In our case, we have inserted a document with french accents, so we want to create an index that will take it into account. To create a collated index supporting the French language in the shell we would: db.listingsAndReviews.createIndex( { name: 1 }, { collation: { locale: &quot;fr&quot; } } ) Now, let's do the same using the Atlas GUI. "},{"title":"Implementing full text search using MongoDB​","type":1,"pageTitle":"MongoDB - 3","url":"/mongodb/week-3/lesson#implementing-full-text-search-using-mongodb","content":"One of the special types of indexes is the text index. To create a text index in the shell: db.listingsAndReviews.createIndex( { name: &quot;text&quot;, summary: &quot;text&quot; } ) Now, let's do the same using the Atlas GUI. Exercise 1​ Exercise Search for the document using the index. How can we be sure that we use the index? Can we create a covered query? Hint: db.collection.find().explain() "},{"title":"Role based authentication​","type":1,"pageTitle":"MongoDB - 3","url":"/mongodb/week-3/lesson#role-based-authentication","content":"Built in roles: read readWrite dbAdmin dbOwner * userAdmin "},{"title":"Cluster based roles​","type":1,"pageTitle":"MongoDB - 3","url":"/mongodb/week-3/lesson#cluster-based-roles","content":"clusterAdminclusterManagerclusterMonitor "},{"title":"Backup and restoration roles​","type":1,"pageTitle":"MongoDB - 3","url":"/mongodb/week-3/lesson#backup-and-restoration-roles","content":"backuprestore ... many more Let's update our MongoDB Atlas database to use roles. First, we are going to add a built in role using the MongoDB Atlas. Now, let's add a custom, read only in AirBnB DB role using the MongoDB Atlas. "},{"title":"Aggregation​","type":1,"pageTitle":"MongoDB - 3","url":"/mongodb/week-3/lesson#aggregation","content":"Why aggregation framework? Aggregation framework in MongoDB is modelled after the familiar concept of data processing pipelines. Documents enter the pipeline with the MongoDB structure and exit the other end transformed into BSON documents with calculated fields. Commands in a pipeline are executed sequentially and in the order that they appear in the array []. There are 3 ways to perform aggregation in MongoDB: 1. Aggregation pipeline 2. Map-reduce function 3. Single purpose aggregation methods In this module, we will focus on the aggregation pipeline. Some of the most important operators and how they relate with Structured Query Language (SQL): SQL\tAggregation frameworkWHERE / HAVING\t\\$match GROUP BY\t\\$group SELECT\t\\$project ORDER BY\t\\$sort LIMIT\t\\$limit sum() / count()\t\\$sum average()\t\\$avg join\t\\$lookup db.listingsAndReviews.aggregate([ { $match: { name: { $regex: /^aA/ } } }, { $group: { _id: &quot;$name&quot;, average: { $avg: &quot;$price&quot; } } }, { $sort: { average: -1 } }, { $project: { name: 1, average: 1 } }, ]);  What does the pipeline above do? matches all documents with a name starting from aAgroups them by average pricesorts them by average priceprojects(selects) name and average price in the output What's the output like? {_id: .., name: .., average: ..}  More information: https://docs.mongodb.com/manual/aggregation/ Exercise 2​ Exercise Now, let's do the same using the Atlas GUI. "},{"title":"Replication​","type":1,"pageTitle":"MongoDB - 3","url":"/mongodb/week-3/lesson#replication","content":"Replication in MongoDB is used to increase redundancy and data availability. In its essence it's a way for 3 or more (or even 2 with some caveats..) servers to keep the same copy of data.  Writes always go to the primary and get propagated asynchronously to the secondaries. Reads can go to the primary or any of the secondaries. Election process: Replica sets implement by default automatic failover. If a primary server fails, the remaining secondaries will elect the new primary. This will by default be the secondary that is most &quot;up to date&quot; with the primary but we can affect (rig) the election process by assigning different votes to each server. More information: https://docs.mongodb.com/manual/core/replica-set-elections/ Using replication we can perform a few interesting tasks: delayed replica for backup. Delay backups by an hour, enabling us to recover from dropping a database in productionhidden replicas for reporting. These replicas will never become primaries so we can safely apply read load to them for reporting purposesreplicas in different location for disaster recoveryreplicas in different location to be closer to our users "},{"title":"Transactions​","type":1,"pageTitle":"MongoDB - 3","url":"/mongodb/week-3/lesson#transactions","content":"MongoDB introduced multi-document ACID transactions in version 4.0 which was released on July 2018. Transactions are an integral part of relational databases. Every RDBMS from the very early days relied on transactions to achieve Atomicity, Consistency, Isolation and Durability. Getting these in a non-relational database is a breakthrough that can fundamentally change the way developers and database architects design software systems. "},{"title":"ACID​","type":1,"pageTitle":"MongoDB - 3","url":"/mongodb/week-3/lesson#acid","content":"Atomicity refers to the concept that a transactions needs to be atomic. It either successes and its results are visible to every subsequent user reading them or it fails and every change is rolled back to the point it was right before it started. It's either that all actions in a transaction occur or nothing at all. Consistency refers to the database always being in a consistent state. Every database operation may complete successfully, fail or abort but in any case in the end our database must be in a state that its data is consistent. Isolation refers to the visibility of transaction operations to other operations happening in parallel. Durability in relational database systems refers to the property that every transaction that has successfully committed will survive in the face of failure. This usually refers to writing the contents of the committed transaction in persistent storage (hard disk or SDD). Let's create a new database mongo_bank with a collection accounts: {&quot;collection&quot;: &quot;accounts&quot;, &quot;account_id&quot;: &quot;1&quot;, &quot;account_name&quot;: &quot;Alex&quot;, &quot;account_balance&quot;:100} {&quot;collection&quot;: &quot;accounts&quot;, &quot;account_id&quot;: &quot;2&quot;, &quot;account_name&quot;: &quot;Mary&quot;, &quot;account_balance&quot;:50} This way, we have 2 users with accounts in our bank. We can now transfer money between th accounts. We will do this using the Mongo shell: session = db.getMongo().startSession({ readPreference: { mode: &quot;primary&quot; } }); accountsCollection = session.getDatabase(&quot;mongo_bank&quot;).accounts; session.startTransaction({ readConcern: { level: &quot;snapshot&quot; }, writeConcern: { w: &quot;majority&quot; }, }); try { accountsCollection.update( { account_id: &quot;1&quot; }, { $inc: { account_balance: -70 } } ); accountsCollection.update( { account_id: &quot;2&quot; }, { $inc: { account_balance: 70 } } ); } catch (error) { print(&quot;error:&quot;, error); } source_balance = accountsCollection.findOne({ account_id: &quot;1&quot; }) .account_balance; target_balance = accountsCollection.findOne({ account_id: &quot;2&quot; }) .account_balance; if (source_balance &lt; 0 || target_balance &lt; 0) { session.abortTransaction(); } session.commitTransaction(); session.endSession();  To which the output should be similar to: WriteCommandError({ errorLabels: [&quot;TransientTransactionError&quot;], operationTime: Timestamp(1561207870, 4), ok: 0, errmsg: &quot;Transaction 0 has been aborted.&quot;, code: 251, codeName: &quot;NoSuchTransaction&quot;, $clusterTime: { clusterTime: Timestamp(1561207870, 4), signature: { hash: BinData(0, &quot;1x7oLuNzWehAWylVA/E9tdXLuFA=&quot;), keyId: NumberLong(&quot;6655324027294318593&quot;), }, }, });  Database operations need to be inside our session if we want to benefit from transactions Exercise 3​ Exercise Transfer 40 monads from account 1 to account 2. Observe how it works perfectly fine. "},{"title":"MongoDB Project​","type":1,"pageTitle":"MongoDB - 3","url":"/mongodb/week-3/lesson#mongodb-project","content":"Exercise Based on the data from the AirBnB listings and reviews collection, we want to create a front end for it. Functions: Search for rooms by name or summaryFilter by priceShow the top superhosts in the page. On click through, show a list of their apartments You can use Node/Express and the Aggregation framework if you see fit. Please use this index.html file as a starting point: https://github.com/agiamas/cyf-mongodb-2019/blob/master/index.html "},{"title":"Next Steps​","type":1,"pageTitle":"MongoDB - 3","url":"/mongodb/week-3/lesson#next-steps","content":"If you have time and interest, please register to either of these classes or any other class in MongoDB university. All classes are free and on average require 6-10 hours of time per week. https://university.mongodb.com/courses/M220JS/about https://university.mongodb.com/courses/M220P/about "},{"title":"Feedback​","type":1,"pageTitle":"MongoDB - 3","url":"/mongodb/week-3/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Preparation","type":0,"sectionRef":"#","url":"/node/preparation","content":"","keywords":""},{"title":"1) Install Postman​","type":1,"pageTitle":"Preparation","url":"/node/preparation#1-install-postman","content":"Install the software &quot;Postman&quot; for your OS. https://www.getpostman.com/downloads/ "},{"title":"Issues​","type":1,"pageTitle":"Preparation","url":"/node/preparation#issues","content":"If you get &quot;error while loading shared libraries: libgconf-2.so.4: cannot open shared object file: No such file or directory&quot; You may first need to run this in the terminal: sudo apt-get install -y libgconf-2-4 "},{"title":"Alternatives​","type":1,"pageTitle":"Preparation","url":"/node/preparation#alternatives","content":"If you have an old computer you might find Postman being very slow or becoming unresponsive. In this case you can try the following alternatives: Thunder Client: a VS Code extension with very similar user interface to Postman’sHoppscotch: a web app with somewhat similar user interface to Postman’s, runs in the browser "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/node/week-1/homework","content":"","keywords":""},{"title":"0) Flipped Classroom Practice (3h)​","type":1,"pageTitle":"Coursework","url":"/node/week-1/homework#0-flipped-classroom-practice-3h","content":""},{"title":"Exercise 1.1​","type":1,"pageTitle":"Coursework","url":"/node/week-1/homework#exercise-11","content":"Think carefully and try to answer the following questions: ⏰ Don't spend longer than 30 minutes on this exercise 📝 Make a note of any questions you've struggled to answer - raise these on Slack before Saturday's session a) Define an interface? (Think about the answer in multiple contexts, including programming ) b) Explain why do we need to use an interface in programming? (Advanced) c) i) List 3 things that are part of the NodeJS API ii) List 3 things that are part of the Jest API iii) List 3 things that are part of the Spotify API iv) Explain why Jest is not a web-based API and why Spotify is a web-based API. Submit your responses by responding on the Google Classroom assignment entitled &quot;Prepare for Saturday's class&quot;. Verify your answers using discussions on Slack if you're struggling to answer these questions. "},{"title":"Exercise 1.2​","type":1,"pageTitle":"Coursework","url":"/node/week-1/homework#exercise-12","content":"⏰ Don't spend longer than 20 minutes on this exercise 📝 Make a note of any questions you've struggled to answer - raise these on Slack before Saturday's session Pick a couple of the APIs below and experiment with them, modify the requests, report your findings. http://www.tvmaze.com/api e.g. http://api.tvmaze.com/shows/82/episodes Sunrise/Sunset times: https://sunrise-sunset.org/api e.g. Sunset in Bethnal Green: https://api.sunrise-sunset.org/json?lat=51.5311&amp;lng=0.0481 Google Books API: https://www.googleapis.com/books/v1/volumes?q=isbn:0747532699Star Wars API: https://swapi.co/ e.g.https://swapi.co/api/people/1/ UK Police Data. https://data.police.uk/docs/ e.g. street-level crimes, Old Street, London: https://data.police.uk/api/crimes-street/all-crime?lat=51.5268&amp;lng=0.0866 iTunes Search API: https://affiliate.itunes.apple.com/resources/documentation/itunes-store-web-service-search-api/ e.g. All Beyonce's music videos: https://itunes.apple.com/search?term=beyonce&amp;entity=musicVideo CYF resource-library https://resource-library.codeyourfuture.io/api/resources(Difficult) Wikipedia API: https://en.wikipedia.org/w/api.php? ::: "},{"title":"Exercise 2.1​","type":1,"pageTitle":"Coursework","url":"/node/week-1/homework#exercise-21","content":"⏰ Aim to spend around 1 hour on this exercise 📝 Remember to get support/guidance on Slack if you're blocked with this activity a) Complete steps 3.1, 3.2 and 3.3 from the 3) Make a Node API section of the syllabus notes found here 👉 https://syllabus.codeyourfuture.io/node/week-1/lesson b) Once you've set up your server in part a), then complete read and complete the steps in section 3.4 from the syllabus notes found here 👉 https://syllabus.codeyourfuture.io/node/week-1/lesson ::: "},{"title":"Exercise 3.1​","type":1,"pageTitle":"Coursework","url":"/node/week-1/homework#exercise-31","content":"⏰ Aim to spend around 1 hour on this exercise 📝 Remember to get support/guidance on Slack if you're blocked with this activity Read and complete sections 3.4) and 3.5) from the syllabus notes 👉 https://syllabus.codeyourfuture.io/node/week-1/lesson "},{"title":"1) Reading (2 Hours)​","type":1,"pageTitle":"Coursework","url":"/node/week-1/homework#1-reading-2-hours","content":""},{"title":"Read about HTTP messages​","type":1,"pageTitle":"Coursework","url":"/node/week-1/homework#read-about-http-messages","content":"https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview#HTTP_Messages "},{"title":"Express \"Getting Started\" Documentation:​","type":1,"pageTitle":"Coursework","url":"/node/week-1/homework#express-getting-started-documentation","content":"Read these two pages from the Express &quot;Getting Started&quot; documentation: Hello World https://expressjs.com/en/starter/hello-world.html [Basic Routing https://expressjs.com/en/starter/basic-routing.html If you want some more reading Routing https://expressjs.com/en/guide/routing.html "},{"title":"2) Chrome Dev Tools (2 Hours)​","type":1,"pageTitle":"Coursework","url":"/node/week-1/homework#2-chrome-dev-tools-2-hours","content":"Look at a request in Chrome Dev Tools In Google Chrome, open dev tools network tab and enter this URL into the browser: http://api.tvmaze.com/shows/82/episodes Answer the following questions: What's the status code the server sent back? What HTTP method did the browser use to make the request? What is the request path? What is the first line of the response body? What is the value of the response header called &quot;Content-Type&quot; ? What is the value of the request header called &quot;User-Agent&quot;  "},{"title":"Submission​","type":1,"pageTitle":"Coursework","url":"/node/week-1/homework#submission","content":"Share your answers with the other trainees in your Buddy Group or on your Slack class channel. Did you get different answers to other people? Ask them how they worked them out! "},{"title":"3) Quote Server API Project (10 hours) 🔑​","type":1,"pageTitle":"Coursework","url":"/node/week-1/homework#3-quote-server-api-project-10-hours-","content":"Take a look at this repository: https://github.com/CodeYourFuture/node-challenge-quote-server In that folder you will find a task to create a Quote Server. To complete the coursework you should: Fork the repositoryComplete the tasksCreate a pull request back to the original repository "},{"title":"4) Prepare a Presentation (1 hour)​","type":1,"pageTitle":"Coursework","url":"/node/week-1/homework#4-prepare-a-presentation-1-hour","content":"Prepare a VERY simple recap of what we did and what we learned in today's class in Node Week 1. The presentation should last between 60 and 120 seconds Time yourselves - that is NOT much time! Next class we will be presenting a few of them in small groups to each other to recap what we learnt. NOTE: Slides (or presenting from computer) are NOT allowed. "},{"title":"5) CodeWars (1 hour)​","type":1,"pageTitle":"Coursework","url":"/node/week-1/homework#5-codewars-1-hour","content":"https://docs.codeyourfuture.io/course-processes/running-the-course/codewars#codeyourfuture-collections Every week you need to complete at least three kata. Spend at least 20 minutes, three times a week, on your kata workout. Find the collection on the CodeYourFuture account: https://www.codewars.com/users/CodeYourFuture/authored_collections "},{"title":"6) Challenges (Stretch)​","type":1,"pageTitle":"Coursework","url":"/node/week-1/homework#6-challenges-stretch","content":"https://github.com/CodeYourFuture/cyf-node-challenges "},{"title":"7) Brag Diary (PD - 30 min)​","type":1,"pageTitle":"Coursework","url":"/node/week-1/homework#7-brag-diary-pd---30-min","content":"Write your first entry for your Brag Diary. This will be the record of your achievements, the moments you feel proud about yourself. Think positively, you might find more to write than you think. Take turns to present your diary entries in your group meetings with your PD buddy. "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/node/week-1/instructors","content":"","keywords":""},{"title":"Before you teach this lesson​","type":1,"pageTitle":"Instructor Notes","url":"/node/week-1/instructors#before-you-teach-this-lesson","content":"If you are teaching this class in the coming weeks you must instruct your trainees to complete the instructions below. Node Preparation If you trainees do not arrive with these steps completed then you will lose a lot of time on your first lesson. You should consider running short mid-week sessions the week before to help trainees get set up. "},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/node/week-1/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-node For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Presentations​","type":1,"pageTitle":"Instructor Notes","url":"/node/week-1/instructors#presentations","content":"Week 1 - Node [Self-Hosted Slides] - 21/06/2020 Created by London and Jim "},{"title":"Notes​","type":1,"pageTitle":"Instructor Notes","url":"/node/week-1/instructors#notes","content":""},{"title":"London (24/06/2020)​","type":1,"pageTitle":"Instructor Notes","url":"/node/week-1/instructors#london-24062020","content":"Glitch and Codesandbox had issues Possible non starters.Didn't have reload button (code sandbox).Groups tended to just rely on the one trainee whose setup was working. or work locally. Last exercise needs rework Don't just return the data sent by user&quot;Why would you do this?&quot; Breakout room exercises could have been more difficult "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/node/week-2/homework","content":"","keywords":""},{"title":"1) Debugging Practice (3 hours)​","type":1,"pageTitle":"Coursework","url":"/node/week-2/homework#1-debugging-practice-3-hours","content":"We've hosted some Servers on Glitch but they're not quite working properly. Could you fix them for us? https://glitch.com/~debugging-practice1https://glitch.com/~debugging-practice2https://glitch.com/~debugging-practice3https://glitch.com/~debugging-practice4 "},{"title":"Start by remixing our example server​","type":1,"pageTitle":"Coursework","url":"/node/week-2/homework#start-by-remixing-our-example-server","content":" Make sure you're logged in to https://glitch.com/ Remix each example Name your new server yourname + NAME_OF_EXERCISE Check that it is working by making a request to / Fix the code on your version of the server "},{"title":"2) Chat Server API Project (12 Hours+) 🔑​","type":1,"pageTitle":"Coursework","url":"/node/week-2/homework#2-chat-server-api-project-12-hours-","content":"Take a look at this repository: https://github.com/CodeYourFuture/node-challenge-chat-server In that repository you will find a task to create a Chat Server. To complete the coursework you should: Fork the repositoryComplete the tasksCreate a pull request back to the original repository "},{"title":"3) Prepare a Presentation (1 Hour)​","type":1,"pageTitle":"Coursework","url":"/node/week-2/homework#3-prepare-a-presentation-1-hour","content":"Prepare a VERY simple recap of what we did and what we learned in today's class in Node Week 1. The presentation should last between 60 and 120 seconds Time yourselves - that is NOT much time! Next class we will be presenting to each other to share what we have learnt. NOTE: Slides (or presenting from computer) is NOT allowed. "},{"title":"4) CodeWars (1 hour)​","type":1,"pageTitle":"Coursework","url":"/node/week-2/homework#4-codewars-1-hour","content":"https://docs.codeyourfuture.io/course-processes/running-the-course/codewars#codeyourfuture-collections Every week you need to complete at least three kata. Spend at least 20 minutes, three times a week, on your kata workout. Find the collection on the CodeYourFuture account: https://www.codewars.com/users/CodeYourFuture/authored_collections "},{"title":"5) Challenges (Stretch)​","type":1,"pageTitle":"Coursework","url":"/node/week-2/homework#5-challenges-stretch","content":"https://github.com/CodeYourFuture/cyf-node-challenges "},{"title":"6) Reflect about your own biases (PD - 1 hr)​","type":1,"pageTitle":"Coursework","url":"/node/week-2/homework#6-reflect-about-your-own-biases-pd---1-hr","content":"Think of when you are stressed, feeling tired, rushed, as these situations tend to activate our biases. How may these feelings influence your behavior when working with a group? Reflect in a 250 word essay. "},{"title":"7) Challenge yourself (PD - 15 min)​","type":1,"pageTitle":"Coursework","url":"/node/week-2/homework#7-challenge-yourself-pd---15-min","content":"Take an Implicit Association Test (IAT) here to identify what your unconscious biases are. There are multiple topics to choose from: Age, Gender, Sexuality, Skin-tone, Ethnicity, etc. Remember: Awareness is the first step to combatting bias. "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/node/week-2/instructors","content":"","keywords":""},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/node/week-2/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-node For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Presentations​","type":1,"pageTitle":"Instructor Notes","url":"/node/week-2/instructors#presentations","content":"Week 1 - Node [Self-Hosted Slides] - 21/06/2020 Created by London and Jim Client Server Communication - 25/10/2020 Created by Birmingham &amp; Mark Farmiloe "},{"title":"Notes​","type":1,"pageTitle":"Instructor Notes","url":"/node/week-2/instructors#notes","content":""},{"title":"Node - 1","type":0,"sectionRef":"#","url":"/node/week-1/lesson","content":"","keywords":""},{"title":"Learning Objectives​","type":1,"pageTitle":"Node - 1","url":"/node/week-1/lesson#learning-objectives","content":"By the end of this lesson trainees should be able to: Define what an API is used forUse Glitch to deploy and edit express serversUse npm to start a node serverExplain what express is and what it is used forUse express to create an API that will accept a GET request that returns JSONImplement routing to return different resources depending on URLImplement query params to return different content (?query=ses)  "},{"title":"Before you start​","type":1,"pageTitle":"Node - 1","url":"/node/week-1/lesson#before-you-start","content":"Before you arrive at class you must have completed the following setup work. Node Preparation If you are a teacher reading this, please check the Instructor Notes "},{"title":"1) API Refresh​","type":1,"pageTitle":"Node - 1","url":"/node/week-1/lesson#1-api-refresh","content":"Exercise Exercise: Discuss known APIs Groups discuss any APIs they know about.What might you do with it?Announce answers to class. Before we make our own API, let's look at and use some other APIs. Here's an example API that shows us the Sunrise and Sunset times of everywhere in the world. Root https://sunrise-sunset.org/api Example: Sunset time in Bethnal Green https://api.sunrise-sunset.org/json?lat=51.5311&amp;lng=0.0481 Next let's try an exercise Group Exercise (5 minutes)​ Exercise Pick a couple of these and experiment with them, modify the requests, report your findings. http://www.tvmaze.com/api e.g. http://api.tvmaze.com/shows/82/episodes Sunrise/Sunset times: https://sunrise-sunset.org/api e.g. Sunset in Bethnal Green: https://api.sunrise-sunset.org/json?lat=51.5311&amp;lng=0.0481 Google Books API: https://www.googleapis.com/books/v1/volumes?q=isbn:0747532699Star Wars API: https://swapi.co/ e.g.https://swapi.co/api/people/1/ UK Police Data. https://data.police.uk/docs/ e.g. street-level crimes, Old Street, London: https://data.police.uk/api/crimes-street/all-crime?lat=51.5268&amp;lng=0.0866 iTunes Search API: https://affiliate.itunes.apple.com/resources/documentation/itunes-store-web-service-search-api/ e.g. All Beyonce's music videos: https://itunes.apple.com/search?term=beyonce&amp;entity=musicVideo CYF resource-library https://resource-library.codeyourfuture.io/api/resources(Difficult) Wikipedia API: https://en.wikipedia.org/w/api.php? So what's the big deal? I can see this information on web sites already! What's an API and how is it different from a web site? "},{"title":"2) Intro to Node on Glitch​","type":1,"pageTitle":"Node - 1","url":"/node/week-1/lesson#2-intro-to-node-on-glitch","content":""},{"title":"2.1) Running a Simple Server​","type":1,"pageTitle":"Node - 1","url":"/node/week-1/lesson#21-running-a-simple-server","content":"Run the simplest web server code. We've made a really simple server about cats. You can check it out here: SourceLive Teacher-Led Live Coding Example Let's inspect the different parts of the Node App and how Express works. Let's discuss require on Line 1express() on Line 2app.get() on Line 10app.listen() on Line 15response.sendFile() on Line 6 and Line 7 Can we work out what each those lines are doing? Teacher-Led Live Coding Example As a class - try to make a simple express server. You can pick any theme you like but maybe try The class' favorite foodsThe class' favorite songsor get ideas from the class! The server should have one endpoint. When you request the data from that endpoint it should give you the whole list of items that are stored in your node server. Now let's make a server ourselves from scratch... Exercise: Make your own node server on glitch All trainees should &quot;remix&quot; this one for a simple start: https://glitch.com/~cyf-simple-expressHave them it read and modify it to do something different. Login to Glitch and ‘remix’ this project and rename to be yourse.g. say &quot;Hello Miles&quot;, instead of &quot;Hello Kash&quot;Make it return an array of strings as json.Make it return the current timeAdvanced: make it return whatever you want! 3 minutes. "},{"title":"3) Make a Node API​","type":1,"pageTitle":"Node - 1","url":"/node/week-1/lesson#3-make-a-node-api","content":"The rest of today's lesson is a workshop. In small groups complete each of the steps below. At different points, the teacher will introduce new concepts. "},{"title":"3.1) Get Started​","type":1,"pageTitle":"Node - 1","url":"/node/week-1/lesson#31-get-started","content":"Fork and clone the repo https://github.com/CodeYourFuture/Node-Starter-Kit. It is an empty project that includes all the details you need to get started building your first Node App. "},{"title":"3.2) Installing The Project​","type":1,"pageTitle":"Node - 1","url":"/node/week-1/lesson#32-installing-the-project","content":"We're going to use the Node Package Manager (npm) to setup the project using the npm install command. NPM is the place to go to download other Node code written by other people. There are thousands of open-source, 3rd-party Node modules (also known aspackages) written by other people that you can download and use in your own projects. Run the following command in your terminal: npm install  "},{"title":"3.3) Building the server​","type":1,"pageTitle":"Node - 1","url":"/node/week-1/lesson#33-building-the-server","content":"The first thing we need to do is build our server. You will always need to build a server when writing back-end code. A server can be built in pure Node.js, but Express is simpler to work with. 1. Create a server.js file​ Let's build our server! Before we do anything, let's create a new file calledserver.js. This is where all our server code is going to live. 2. require the express library​ We already installed Express in Step 2, but we need to make sure it is included in this file specifically so we can use its methods. In Node.js, when you want to use a package in another file, you must require it. To require Express, write the following inside server.js: const express = require(&quot;express&quot;);  Let us get used to ES6 syntax - so use const and let instead ofvar, arrow methods instead of functions, etc... 3. Initialise the server​ To initialise our server, we need to call the express() function. This will create an Express application for us to work with. Add the second line of code to your server.js file: const express = require(&quot;express&quot;); const app = express();  4. Start 'listening' for potential requests​ One more step left, we need to set a port for our server to listen to. Think of a port as a door number; any requests that come to the server will come via that door. Setting a port will allow us to find where our server is running. We use the app.listen method to do this. This method takes two arguments: a port and a callback function telling it what to do once the server is running. Need clarification? Read more about the app.listen method in the Express documentation. We're going to run our server on port 3000, and add a simple console.log in the callback function. Update your server.js file, calling the app.listen method: const express = require(&quot;express&quot;); const app = express(); app.listen(3000, function () { console.log(&quot;Server is listening on port 3000. Ready to accept requests!&quot;); });  Task Try to use ES6 arrow functions instead of function. 5. Switch the server on!​ You've built your server, but it isn't running yet. We need to run a command in the terminal to do this. We are going to use the node keyword to run the server file. Type the following command in your terminal: node server.js  If you see this, congratulations! You have built yourself a server!  6. npm script​ To exit the running the server, type crtl + c. Instead of running the server with node server.js everytime, we can create an alias for it in package.json. Under the scripts property, add start: node server.js. We can now run our server using npm start which will be an alias (a shortcut) to node server.js. Go to the terminal and type npm start and make sure that the server still runs. "},{"title":"3.4) Communicating with the server​","type":1,"pageTitle":"Node - 1","url":"/node/week-1/lesson#34-communicating-with-the-server","content":"Now that we've built the server, we need to communicate with it. We are going to control the server with handler functions. What is a handler function?​ When a request reaches the server, we need a way of responding to it. In comes the handler function. The handler function is just a function which receives requests and handles them, hence the name. The handler function is always called with a request and response object. The response object is what gets sent back to the client. It contains the information that gets displayed in the web page. You can decide what to send back in your response. What does a handler function look like in Express?​ The get() method is one of the methods used to define a handler function in Express. It takes two parameters: the endpointat which to trigger an action (we'll explain more about this in the next step), and the handler function that tells it exactly what to do. Here's a simple &quot;Hello World!&quot; example: // req is the Request object, res is the Response object // (these are just variable names, they can be anything but it's a convention to call them req and res) app.get(&quot;/&quot;, function (req, res) { res.send(&quot;Hello World!&quot;); });  Here, we are telling our server to respond with &quot;Hello World!&quot; when someone tries to access the webpage. 1. Create your own handler function​ Let us add a handler handler function to send back a message to the client. To do that, we're going to use the Express send()method. This will update the response object with the message. Update your handler function like so: const express = require(&quot;express&quot;); const app = express(); app.get(&quot;/&quot;, function (req, res) { res.send(&quot;Yay Node!&quot;); }); app.listen(3000, function () { console.log(&quot;Server is listening on port 3000. Ready to accept requests!&quot;); });  ::: Break Exercise Try to console.log the request object inside the handler function. Restart your server, send the request again with Postman, then go to your terminal to see what it looks like. You should see a lot of data come through. ::: 2. Check it out in Postman​ Quit your server in the terminal with ctrl + c. Then restart it to run your new changes. node server.js  Now, open Postman, and send a GET request tohttp://localhost:3000. If you see your message in Postman, congratulations! You just sent your first response from the server. Checkpoint Do you understand all these terms? You should be able to see examples of them in Postman Client Server Front-end Back-end Full stack developer Request Response HTTP HTTP Response Codes HTTP Request Methods (or Verbs) "},{"title":"3.4) Routing​","type":1,"pageTitle":"Node - 1","url":"/node/week-1/lesson#34-routing","content":"At the moment our server only does one thing. When it receives a request from the / endpoint, it sends back the same response: &quot;Yay Node!&quot;. Exercise Try typing http://localhost:3000/node and see what happens. However by making use of endpoints, we can make the server send different responses for different requests. This concept is called routing. What is an endpoint?​ An endpoint is the part of the URL which comes after /. For example:/chocolate is the &quot;chocolate&quot; endpoint. It's the URL to which you send a request. What is URL?​  Create your own endpoints and send different responses​ We're going to try sending different responses at different endpoints. Remember the app.get() method? To set up routing in your server, we just need to repeat this method with different endpoints. For example: app.get(&quot;/&quot;, function (req, res) { res.send(&quot;Hello World!&quot;); }); app.get(&quot;/chocolate&quot;, function (req, res) { res.send(&quot;Mm chocolate :O&quot;); });  Exercise Add some code so that your server sends one message when the endpoint is /node and another one when it's /codeyourfuture. "},{"title":"3.5) Query Parameters​","type":1,"pageTitle":"Node - 1","url":"/node/week-1/lesson#35-query-parameters","content":"So, what is a query parameter? In simple terms, a query string is the part of a URL (Uniform Resource Locater) after the question mark (?). It is meant to send small amounts of information to the server via the url. This information is usually used as parameters to query a database, or maybe to filter results. It's really up to you what they're used for. Here is an example of a URL with query strings attached: https://stackabuse.com/?page=2&amp;limit=3 1. Detect Query Parameters​ We're going to try sending different responses at different endpoints. Remember the app.get() method? To set up routing in your server, we just need to repeat this method with different endpoints. For example: app.get(&quot;/&quot;, function (req, res) { let searchQuery = req.query.search; res.send(&quot;Hello World! You searched for &quot; + searchQuery); });  Here is an example of how we would use this endpoint with query parameters: http://localhost:3000?search=hello Now your turn! Exercise Add some code so that your server returns the amount of chocolate that you want from /chocolate endpoint. For example http://localhost:3000/chocolate?amount=3 "},{"title":"2. Multiple Query Parameters​","type":1,"pageTitle":"Node - 1","url":"/node/week-1/lesson#2-multiple-query-parameters","content":"What if we want to detect and read multiple parameters? If we use a URL from earlier as an example, here is how we would send multiple query parameters: https://api.sunrise-sunset.org/json?lat=51.5311&amp;lng=0.0481 Here we have one parameter called &quot;lat&quot; and another &quot;lng&quot;. Here is how we would do that in Node: app.get(&quot;/json&quot;, function (req, res) { let lat = req.query.lat; let lng = req.query.lng; res.send(`You searched for Lat: ${lat} and Lng: ${lng}`); });  Exercise Add some code so that your server takes 2 values that we will multiply together and return the value For example http://localhost:3000/multiply?value1=2&amp;value2=10 This should return value of 20 "},{"title":"PD (Professionalism)​","type":1,"pageTitle":"Node - 1","url":"/node/week-1/lesson#pd-professionalism","content":"Adapted from Tectonica workshop Session objective: This session explores the professional conduct, behaviour and attitude required in the work place. We will talk about the accepted standards of professionalism and the myths about behaving professionally. Professionalism slides Exercise (10 min) Exercise objective: To communicate with colleagues with a professional attitude On your own write a Slack message to a team member saying you're running late to a meeting. Volunteer to share your message with the class.On your own write an email to a manager notifying them that you'll be out of the office on some future date. Volunteer to share your message with the class. Exercise (10 min) Exercise objective: To role-play a conversation between a team member and manager about project deadline Pair with another trainee. Take turns role-playing the following scenario: One of you is a team member and you need to tell your manager in person that your project is likely not going to be finished by the agreed deadline. The other person is the manager and should express unhappiness about this, but also work together to come up with a new, reasonable deadline or some other alternative (e.g. reduce the scope of the project or get help from a team member). Be sure to switch roles. "},{"title":"Feedback​","type":1,"pageTitle":"Node - 1","url":"/node/week-1/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/node/week-3/homework","content":"","keywords":""},{"title":"1) FreeCodeCamp (6 Hours)​","type":1,"pageTitle":"Coursework","url":"/node/week-3/homework#1-freecodecamp-6-hours","content":"Now that we've reached Week 3 it's a great time to consolidate everything we've learnt - complete this FreeCodeCamp course on &quot;Basic Node and Express&quot; https://learn.freecodecamp.org/apis-and-microservices/basic-node-and-express/ "},{"title":"2) Hotel Server (12 Hours+) 🔑​","type":1,"pageTitle":"Coursework","url":"/node/week-3/homework#2-hotel-server-12-hours-","content":"Remember your Hotel project from React? Let's build an API to make that work! Take a look at the project here: https://github.com/CodeYourFuture/node-challenge-hotel-server To complete the coursework you should: Fork the repositoryComplete the tasksCreate a pull request back to the original repository "},{"title":"3) CodeWars (1 hour)​","type":1,"pageTitle":"Coursework","url":"/node/week-3/homework#3-codewars-1-hour","content":"https://docs.codeyourfuture.io/course-processes/running-the-course/codewars#codeyourfuture-collections Every week you need to complete at least three kata. Spend at least 20 minutes, three times a week, on your kata workout. Find the collection on the CodeYourFuture account: https://www.codewars.com/users/CodeYourFuture/authored_collections "},{"title":"4) Challenges (Stretch)​","type":1,"pageTitle":"Coursework","url":"/node/week-3/homework#4-challenges-stretch","content":"https://github.com/CodeYourFuture/cyf-node-challenges "},{"title":"Node - 2","type":0,"sectionRef":"#","url":"/node/week-2/lesson","content":"","keywords":""},{"title":"Learning Objectives​","type":1,"pageTitle":"Node - 2","url":"/node/week-2/lesson#learning-objectives","content":"By the end of this lesson trainees should be able to: Define what each part of CRUD is and what it doesProcess a GET request using Express and Node to retrieve data from memoryProcess a POST request using Express and Node and store data in memoryProcess a DELETE request using Express and Node to remove data from memoryInstall a third party library using npm  "},{"title":"1) Presentations​","type":1,"pageTitle":"Node - 2","url":"/node/week-2/lesson#1-presentations","content":"As part of last weeks homework we asked you to prepare a very short presentation on what you learnt last week. Split into groups of 2-4 people and present what you have learnt. Remember, your whole presentation should be no more than 120 seconds! "},{"title":"2) CRUD Continued​","type":1,"pageTitle":"Node - 2","url":"/node/week-2/lesson#2-crud-continued","content":"So what will we build? we will build a CRUD API. CRUD stands for Create, Retrieve, Update, Delete. If you think about it, this is what most applications do: Create some &quot;resources&quot;Retrieve them (GET them)Update themDelete them Below are three in-class exercises which can be used to demonstrate parts of the API workshop below. "},{"title":"3) Workshop​","type":1,"pageTitle":"Node - 2","url":"/node/week-2/lesson#3-workshop","content":"You can use this Express Cheatsheet to help you. API stands for Application Programming Interface. Read this description of what an API from How To Geek. Think of an API like a menu in a restaurant. The menu provides a list of dishes you can order, along with a description of each dish. When you specify what menu items you want, the restaurant’s kitchen does the work and provides you with some finished dishes. You don’t know exactly how the restaurant prepares that food, and you don’t really need to. Similarly, an API lists a bunch of operations that developers can use, along with a description of what they do. The developer doesn’t necessarily need to know how, for example, an operating system builds and presents a “Save As” dialog box. They just need to know that it’s available for use in their app. An API does not have to be web-based. But in our work, since we are doing web development, we will work only with web based APIs, so you might as well hear the word Web Service, and we will communicate with those services using the protocol for Web: HTTP. Checkpoint Recap what we know about HTTP before continuing. "},{"title":"Workshop Objective​","type":1,"pageTitle":"Node - 2","url":"/node/week-2/lesson#workshop-objective","content":"Our API will manage Beyoncé albums: Create a new album,Retrieve a list of albums or a single album,Update an existing album's informationDelete an album We will build these endpoints: GET /albums should return all the albumsGET /albums/:albumId should return a single album (that matches the passed albumId)POST /albums should save a new albumPUT /albums/:albumId should update the album (that matches the passed albumId)DELETE /albums/:albumId should delete the album (that matches the passed albumId) "},{"title":"3.1) Get All Albums​","type":1,"pageTitle":"Node - 2","url":"/node/week-2/lesson#31-get-all-albums","content":"To get started, let's setup our server so that we can retrieve all of the albums at once Exercise In server.js Add the endpoint for GET /albums. const albumsData = [ { albumId: &quot;10&quot;, artistName: &quot;Beyoncé&quot;, collectionName: &quot;Lemonade&quot;, artworkUrl100: &quot;http://is1.mzstatic.com/image/thumb/Music20/v4/23/c1/9e/23c19e53-783f-ae47-7212-03cc9998bd84/source/100x100bb.jpg&quot;, releaseDate: &quot;2016-04-25T07:00:00Z&quot;, primaryGenreName: &quot;Pop&quot;, url: &quot;https://www.youtube.com/embed/PeonBmeFR8o?rel=0&amp;amp;controls=0&amp;amp;showinfo=0&quot;, }, { albumId: &quot;11&quot;, artistName: &quot;Beyoncé&quot;, collectionName: &quot;Dangerously In Love&quot;, artworkUrl100: &quot;http://is1.mzstatic.com/image/thumb/Music/v4/18/93/6d/18936d85-8f6b-7597-87ef-62c4c5211298/source/100x100bb.jpg&quot;, releaseDate: &quot;2003-06-24T07:00:00Z&quot;, primaryGenreName: &quot;Pop&quot;, url: &quot;https://www.youtube.com/embed/ViwtNLUqkMY?rel=0&amp;amp;controls=0&amp;amp;showinfo=0&quot;, }, ]; app.get(&quot;/albums&quot;, function (req, res) { res.send(albumsData); }); Test the endpoint with Postman. GET /albums should return a JSON reply with the array we specified. Add another item to the array and test that the GET /albums returns three items. (Remember you need to close the server ctrl+c and run it again node server.js) "},{"title":"3.2) Get Album by ID​","type":1,"pageTitle":"Node - 2","url":"/node/week-2/lesson#32-get-album-by-id","content":""},{"title":"3.2.1) Live Coding​","type":1,"pageTitle":"Node - 2","url":"/node/week-2/lesson#321-live-coding","content":"This is an Teacher led exercise which can be used to show how we might retrieve an element by ID using a GET request. Teacher Led Live Coding Objective​ Change a quote API server to allow GETting a quote according to the given ID. The id should be given in the URL structure like this: /quotes/242342 You should use the starting project: cyf-quotes-id-start. This is because this project has quotes with IDs. When you remix the starting project, immediately rename it as your own. "},{"title":"3.2.2) Workshop​","type":1,"pageTitle":"Node - 2","url":"/node/week-2/lesson#322-workshop","content":"Sometimes, we do not want to list all the information in one request, maybe we only want to get the information related to a single album. Imagine if we have a page to display the details of one album, we could call the server and get all albums then filter the one we need client-side, but would it not be more effective to tell the server to just return the one album we are interested in? Let us add a new endpoint to return only a single album GET /albums/:albumId. In this case, albumId will tell us what album we can return so the call will be something like GET /albums/242342 and that will return the album with that has albumId 242342. This endpoint has something different. The endpoint /albums/:albumId has a dynamic part, the albumId will vary depending on what the client send. If we call /albums/424252 then albumId is 424252, if we call /albums/242342 then we will return the album with albumId 242342 and so on. How can we achieve that using express - req.params will have the value of app.get(&quot;/albums/:albumId&quot;, function (req, res) { // req.params.albumId will match the value in the url after /albums/ console.log(req.params.albumId); // now we can use the value for req.params.albumId to find the album requested // how do we &quot;find&quot; something in an array // finish the code yourself - it should end with res.send(album) where album is the single album you found based on the id });  "},{"title":"3.3) Install Nodemon​","type":1,"pageTitle":"Node - 2","url":"/node/week-2/lesson#33-install-nodemon","content":"It is a bit annoying that we have to kill and restart our server every time we want to test our changes. There is a handy npm package that can help us with that task. npm install --save-dev nodemon Make sure the package is added to your package.json, add this line to the script: &quot;scripts&quot;: { &quot;start&quot;: &quot;node server.js&quot;, &quot;dev&quot;: &quot;nodemon server.js&quot; },  now from your terminal, use the command npm run dev and that will run the server with nodemon which is a package that makes the server listen to code changes and automatically restart. "},{"title":"3.4) Add a New Album​","type":1,"pageTitle":"Node - 2","url":"/node/week-2/lesson#34-add-a-new-album","content":"3.4.1) Live Coding​ This is an Teacher led exercise which can be used to show how we might add an element using an API Teacher Led Live Coding Objective​ Change a quote API server to allow POSTs of new quotes. The new quotes should be added to your quotes list, which is an array in memory. You can assume the POSTed quotes are all in the correct JSON format. The route should use the HTTP method POST and should use the URL: /quotes You should use the starting project: cyf-quotes-post-start, NOT your own existing quote server. This is because our project has an HTML form for creating new quotes. When you remix our starting project, immediately rename it. Then you can visit / and submit the form there, when you are ready to try to submit new quotes! 3.4.2) Workshop​ Our analogy with the Restaurant menu is somewhat incomplete. In a restaurant, we only GET items from the menu. In the world of APIs, we also have the possibility to create items, we can provide ingredients to create a new dish. In this case, we provide some data (a payload) and we use a different verb POST (Create) as opposed to GET. POST /albums should save a new album and return 200 with JSON { success: true } to the user. // notice .post (not .get) app.post(&quot;/albums&quot;, function (req, res) { console.log(&quot;POST /albums route&quot;); });  Let's start by testing using Postman. Do a POST request to the endpoint and make sure it prints the console.log message we have added. Tip In Postman, change the request method to POST instead of GET and test our endpoint. It should log the message to the terminal but the request will hang because we did not end it, i.e. we did not say res.send(something) So what format does the client send the data with? It is up to us, but since we already are familiar with json, let us use it. In order for our server-side to receive and use the data sent by the client, we will need to install and use a middleware. Middleware: We will cover middleware in more details in the next class. For now, imagine pieces of code that process a request and pass it to the next middleware until one of them returns a response (with res.send for example). The JSON middleware makes it easy for our route handlers to read JSON data from the request. If the Content-Type request header indicates that the request body contains JSON data then the middleware calls JSON.parse to convert the request body into a JavaScript data structure. To register the JSON middleware, add the following to the server code: app.use(express.json()); // before our routes definition  Now we will receive the data as req.body. app.post(&quot;/albums&quot;, function (req, res) { console.log(&quot;POST /albums route&quot;); console.log(req.body); });  Exercise Use Postman to POST this data to /albums endpoint. { &quot;albumId&quot;: &quot;13&quot;, &quot;artistName&quot;: &quot;Beyoncé&quot;, &quot;collectionName&quot;: &quot;B'Day (Deluxe Edition)&quot;, &quot;artworkUrl100&quot;: &quot;http://is5.mzstatic.com/image/thumb/Music/v4/6c/fc/6a/6cfc6a13-0633-f96b-9d72-cf56774beb4b/source/100x100bb.jpg&quot;, &quot;releaseDate&quot;: &quot;2007-05-29T07:00:00Z&quot;, &quot;primaryGenreName&quot;: &quot;Pop&quot;, &quot;url&quot;: &quot;https://www.youtube.com/embed/RQ9BWndKEgs?rel=0&amp;amp;controls=0&amp;amp;showinfo=0&quot; }  Exercise Finish the code for the route POST /albums to add the album data to the albums list (how to amend to an array?) "},{"title":"3.5) Delete an album​","type":1,"pageTitle":"Node - 2","url":"/node/week-2/lesson#35-delete-an-album","content":"3.5.1) Delete Exercise​ This is an Teacher led exercise which can be used to show how we might remove an element using an API Teacher Led Live Coding Objective​ Change a quote API server to allow updating a quote according to the given ID. The id should be given in the URL structure like this: /quotes/2 You should use the delete HTTP method You should use this starting project: cyf-quotes-id-start, NOT your own existing quote server. This is because this project has quotes with IDs. When you remix the starting project, immediately rename it as your own. 3.5.2) Workshop​ Lets look back at our original objectives. DELETE /albums/:albumId should delete the album (that matches the passed albumId) This means that DELETE /albums/2 should delete an album with the id 2 and return 200 with JSON { success: true } to the user. The code will look like this // notice .delete app.delete(&quot;/albums/:albumID&quot;, function (req, res) { console.log(&quot;DELETE /albums route&quot;); });  Can you work out how to remove an album using this code? "},{"title":"PD (Diversity and inclusion)​","type":1,"pageTitle":"Node - 2","url":"/node/week-2/lesson#pd-diversity-and-inclusion","content":"Session objective: How to recognise systemic problems and to contribute to a more diverse and inclusive community Diversity and inclusion slides Exercise (10 min) Exercise objective: To identify feelings associated with being included in and excluded from a group Think about a time when you have experienced: Being part of a group Being excluded by a group Discuss as a class how it feels to be included and excluded. Exercise (15 min) Exercise objective: To think about the existing privileges and discrimination experiences Discuss as a class: Some ways you have privilegeSome ways you have faced oppression or discrimination "},{"title":"Feedback​","type":1,"pageTitle":"Node - 2","url":"/node/week-2/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/node/week-3/instructors","content":"","keywords":""},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/node/week-3/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-node For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Presentations​","type":1,"pageTitle":"Instructor Notes","url":"/node/week-3/instructors#presentations","content":"Week 1 - Node [Self-Hosted Slides] - 21/06/2020 Created by London and Jim "},{"title":"Assessments​","type":1,"pageTitle":"Instructor Notes","url":"/node/week-3/instructors#assessments","content":"To-Do List Assessment - 24/07/2020 Created by London and Neill "},{"title":"Notes​","type":1,"pageTitle":"Instructor Notes","url":"/node/week-3/instructors#notes","content":""},{"title":"CYF Hotel Workshop","type":0,"sectionRef":"#","url":"/node/workshops/cyf-hotel","content":"","keywords":""},{"title":"Contents​","type":1,"pageTitle":"CYF Hotel Workshop","url":"/node/workshops/cyf-hotel#contents","content":"IntroductionProblem StatementUser JourneysTeam WorkLearning Outcomes "},{"title":"Introduction​","type":1,"pageTitle":"CYF Hotel Workshop","url":"/node/workshops/cyf-hotel#introduction","content":"Brief: Designing a hotel website Client: CYF Hotels Ltd Date: 28 January 2018 Facilitators: CYF Mentors Now that you are almost a full-stack developer, we would like you to make us a website for our imaginary hotel. Since you have a limited time, there is already an empty boilerplate project for you to take and build on top of. In keeping with times, we are using the Lean model and only developing features that we see necessary for the Minimum Viable Product (MVP). "},{"title":"Problem Statement​","type":1,"pageTitle":"CYF Hotel Workshop","url":"/node/workshops/cyf-hotel#problem-statement","content":"Currently hotel website is a little empty. Although some raw data is available from recording things on a computer, Hotel Manager and Receptionists do not have ways to view them in a useful way. Similarly the hotel Customers cannnot get a link to their invoices online to view or pint them, so they are also unhappy. "},{"title":"User Journeys​","type":1,"pageTitle":"CYF Hotel Workshop","url":"/node/workshops/cyf-hotel#user-journeys","content":" We are looking at three personas today: Hotel CustomerHotel ReceptionistHotel Manager As a &lt; type of user &gt;, I want &lt; some goal &gt; so that &lt; some reason &gt;. As a Hotel Manager, I want to view a list of all customers As a Hotel Manager, I want to view a customers details by their customer account ID As a Hotel Manager, I want to view a list of all invoice As a Hotel Manager, I want to view a an invoice by its Invoice ID As a Hotel Receptionist, I want to list of all reservations AS a Hotel Receptionist, I want to view a reservation by its reservation ID As a Hotel Customer, I want to view my invoice page "},{"title":"Team Work​","type":1,"pageTitle":"CYF Hotel Workshop","url":"/node/workshops/cyf-hotel#team-work","content":"We need you to work in a team by dividing up the work Role\tResponsibilityBackend\tAPI, data Frontend\tHTML/CSS/Templates (Handlebars) PM/User Experience\tUser journeys, tickets As a trainee you can have multiple roles. Get a mentor to help provide direction/focus for your team. The PM creates tickets on Trello and assigns them between the team members "},{"title":"Learning Outcomes​","type":1,"pageTitle":"CYF Hotel Workshop","url":"/node/workshops/cyf-hotel#learning-outcomes","content":"The important concepts for this workshop is learning how to: Work in a teamPlanConsider user journeyConsider your data structuresDeliver a solution, no matter how minimal it may bePresent your experience: your challenges Also see deliverables in the repository README.md. "},{"title":"Node - 3","type":0,"sectionRef":"#","url":"/node/week-3/lesson","content":"","keywords":""},{"title":"Learning Objectives​","type":1,"pageTitle":"Node - 3","url":"/node/week-3/lesson#learning-objectives","content":"By the end of this lesson trainees should be able to: Process a PUT request using Express and Node to update data in memoryUpload their node app to the internet so it can be accessed anywhere using Heroku  "},{"title":"1) Presentations​","type":1,"pageTitle":"Node - 3","url":"/node/week-3/lesson#1-presentations","content":"As part of last week's homework we asked you to prepare a very short presentation on what you learnt last week. Split into groups of 2-4 people and present what you have learnt. Remember, your whole presentation should be no more than 120 seconds! "},{"title":"2) CRUD Review​","type":1,"pageTitle":"Node - 3","url":"/node/week-3/lesson#2-crud-review","content":"So what will we build? We will build a CRUD API. CRUD stands for Create, Retrieve, Update, Delete. If you think about it, this is what most applications do: Create some &quot;resources&quot;Retrieve them (GET them)Update themDelete them Which of these have we learnt so far? "},{"title":"2.1) Using Update​","type":1,"pageTitle":"Node - 3","url":"/node/week-3/lesson#21-using-update","content":"This is a teacher led exercise which can be used to remind students how to update resources by making a PUT request. Teacher-Led Live Coding Objective​ Change a quote API server to allow updating a quote according to the given ID. The route should use the HTTP method PUT and should use the URL: /quotes You should use the starting project: cyf-quotes-id-start. This is because this project has quotes with IDs. When you remix the starting project, immediately rename it as your own. 2.2 Workshop: Updating Data​ Let's look back at our original objectives using the albums project from previous lessons. Try to apply what you learned about PUT routes to this project. Glitch Albums Project If you don't have your albums project in available, you can practice creating a PUT route using the cyf-albums-start project. PUT /albums/:albumId should update the album (that matches the passed albumId) This means that PUT /albums/2 should update an album with the id 2 and return 200 with JSON { success: true } to the user. The code should look something like this: // notice .put app.put(&quot;/albums/:albumID&quot;, function (req, res) { console.log(&quot;PUT /albums route&quot;); });  Remember, you have got to update the album, not add it to the list. Test that your API works by updating one of the albums. Extra Challenges To challenge yourself even further, try to complete these challenges: CHALLENGE 1: return the old version of the object you updated as well as the new value in the responseCHALLENGE 2: validate the request body to make sure the ID can't be updated and that users can't add additional fieldsCHALLENGE 3: persist your changes to file so that you are able to return your updated values even after you make code changes in Glitch "},{"title":"3) Heroku​","type":1,"pageTitle":"Node - 3","url":"/node/week-3/lesson#3-heroku","content":"We can use Heroku to host our APIs online (similar in the way you might have used Netlify in the past). This can be a little tricky. caution If you're using WSL, Snap may not work immediately. If you see errors using Snap, run the following command in WSL instead. You can ask a TA for help: curl https://cli-assets.heroku.com/install-ubuntu.sh | sh  Exercise Work in pairs and with Teaching Assistants to get your homework from the previous two weeks working online by following this Heroku walkthrough. If you don't have your albums project available, you can follow Heroku's guide and deploy one of their provide apps. You should complete all of the following sections: IntroductionSet upDeploy the appView logsDefine a ProcfileRun the app locally Now when you use # This is an interesting command - Heroku deploys your app by requiring that you push your code to their remote git repository. If you're using the Heroku docs, this remote repo will already be set up, but you will need to add Heroku's git remote repository if you want to use this method on your own private codebase. git push heroku main your updated website will be made available online! Note that heroku ps:scale web=1 may look like a confusing command, but it's actually broken down as follows: heroku # the Heroku client you installed through the guide/video ps:scale # telling Heroku that you want to perform a scale operation on a process web=1 # in your procfile, you defined a process called web - you're just telling Heroku to scale this process to 1 here  "},{"title":"4) City Guide and Paired Programming​","type":1,"pageTitle":"Node - 3","url":"/node/week-3/lesson#4-city-guide-and-paired-programming","content":"Exercise For this exercises you should split into groups of two or three people. Focus on just completing level 100 if you can! This exercise is designed to test your pair programming skills and to get you thinking about how to design a full stack application! :) You're not expected to get everything completed. You're encouraged to collaborate on either React or Node at any one time (i.e. both of you working on React or Node at one time - recommendation is to start on the side that at least one of you are not comfortable with!) - one of you should &quot;drive&quot; (i.e. code) while the other &quot;navigates&quot; (i.e. provide suggestions). Make sure to switch roles every so often to share the experience! You can find the challenge here. Remember to use create-react-app! It is very important that you do not move onto the next level of the challenge until both of you have completed the level. e.g. Both of you have to finish Level 100 before continuing onto Level 200.If one of you gets stuck - help each other! "},{"title":"PD (5 Whys Problem Solving)​","type":1,"pageTitle":"Node - 3","url":"/node/week-3/lesson#pd-5-whys-problem-solving","content":"Session objective: In this session we will talk about how the 5 Whys technique is a proven and effective problem-solving technique. 5 whys problem solving slides Exercise (30 min) Exercise objective: To practice 5 Whys problem solving technique Pair with another trainee that has a different work style to yours. Talk to each other in turns about a recent problem you faced, what action you have taken so far and what help you still need. Use active listening skills and apply the 5 Whys technique to discover the root cause of the problem. Repeat this exercise in 3 different pairs. "},{"title":"Feedback​","type":1,"pageTitle":"Node - 3","url":"/node/week-3/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Overview","type":0,"sectionRef":"#","url":"/react/","content":"","keywords":""},{"title":"Overall Learning Objectives - React module​","type":1,"pageTitle":"Overview","url":"/react/#overall-learning-objectives---react-module","content":"By the end of the three lessons &amp; homework, trainees should be able to build a React application: Written with components Appropriately composed/nestedSplit across multiple files Uses props to pass values between components Data like numbers/strings/objects/arraysFunctions as event handlers Uses state to react to user interaction E.g. a button can be clicked to increment a counter That fetches data from an API Loading, success and error states are shown Containing a form Form inputs that can be filled out by the userCan be submitted, triggering an update in the app For advanced trainees, some further objectives would be: Use class components instead of function components/HooksExplain why React state is used over plain old JavaScript variables "},{"title":"Out of scope​","type":1,"pageTitle":"Overview","url":"/react/#out-of-scope","content":"These topics are considered out-of-scope: Redux Want to focus on learning and practising the basics of React, before introducing new conceptsLearning Redux will be easier once confident with React CSS-in-JSIn depth functional programming "},{"title":"Coordination​","type":1,"pageTitle":"Overview","url":"/react/#coordination","content":"Coordination details for this module can be found on the Module Coordinator's page. "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/react/class-components/instructors","content":"Instructor Notes Class components section Trainees often get tripped on converting between functional &amp; class componentsCommon problem - render(props) instead of using this.props Uses the state = {} class property pattern This avoids having to use a constructor and calling super(props) Trainees won't have encountered class inheritance, so this can cause confusion Uses the foo = () =&gt; {} method style For non-React-provided methods (e.g. lifecycle methods)Avoids issues with this. Which is a huge pain to explain/understand, so we avoid itThis syntax isn't part of the spec yet, but CRA has babel plugin for itEnsure that you cover the exception (lifecycle methods) Unmounting Open dev tools and show how DOM updates - shows that the DOM is changing in response to React Lifecycle The lifecycle diagram has been edited to simplify to just the lifecycle methods that we're interested in Clock exercise Make sure they copy/paste the example code - post in SlackDemonstrates the need to tear down subscriptions set upMight need to touch on memory leaks this is hard for them to grasp as &quot;just a console.log&quot; seems like it wouldn't take much memory Data fetching Touch on .then(res =&gt; res.json()) - turns response into JSONAPI is from Nasa - fetches Curiosity rover image from the given dateError handling code to get fetch to throw an error on a non-200 response: .then((res) =&gt; { if (res.ok) { return res } else { throw new Error('HTTP error') } }) ","keywords":""},{"title":"Express Workshop","type":0,"sectionRef":"#","url":"/node/workshops/workshop","content":"","keywords":""},{"title":"1. Make a package.json file​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#1-make-a-packagejson-file","content":"Let's start by creating the package.json file. We can add things to it as the project grows. The package.json file is easy to create from the command line. Type the following command into your terminal to get started: $ npm init  This command will initialise a step-by-step process for creating thepackage.json. You should see something like this:  It will ask you a bunch of questions. You can skip most of the questions but change the entry point from(index.js) to server.js. The wizard asks you for the following information: name, version,description, main, test, repository, keywords, author, license - do you understand all of them? At the endo of the wizard, you should see a new file called package.json in your project's folder. Here is an example package.json file for a project calledPassport. What is JSON? JSON is a type of file for structuring data in a readable way. It is also a really popular format for sending data across the web. JSON is a string representation of a Javascript object. JSON objects convert really easily to Javascript objects, and vice versa, with JSON.parse() and JSON.stringify(). { &quot;firstName&quot;: &quot;John&quot;, &quot;lastName&quot;: &quot;Smith&quot;, &quot;isAlive&quot;: true, &quot;age&quot;: 25, &quot;address&quot;: { &quot;streetAddress&quot;: &quot;21 2nd Street&quot;, &quot;city&quot;: &quot;New York&quot;, &quot;state&quot;: &quot;NY&quot;, &quot;postalCode&quot;: &quot;10021-3100&quot; }, &quot;phoneNumbers&quot;: [ { &quot;type&quot;: &quot;home&quot;, &quot;number&quot;: &quot;212 555-1234&quot; }, { &quot;type&quot;: &quot;office&quot;, &quot;number&quot;: &quot;646 555-4567&quot; }, { &quot;type&quot;: &quot;mobile&quot;, &quot;number&quot;: &quot;123 456-7890&quot; } ], &quot;children&quot;: [], &quot;spouse&quot;: null }  Step 2 - Installing Express Before we write any code, you'll need to install the Express library. We're going to use the Node Package Manager (npm) to download it using the npm install command. NPM is the place to go to download other Node code written by other people. There are thousands of open-source, 3rd-party Node modules (also known as &quot;packages&quot;) by other people that you can download and use in your own projects. As we install Express, we'll need to update the package.json to add Express as a dependency. We do this so that other people working on the project will know to install Express before running any of the code. This can be done by adding--save to the end of your command. Run the following command in your terminal: npm install express --save  Express should now be installed. Check your package.json file to make sure it has been added as a dependency. It will look like this:  Step 3 - Building the server The first thing we need to do is build our server. You will always need to build a server when writing back-end code. A server can be built in pure Node.js, but Express gives us simpler syntax to work with. "},{"title":"1. Create a server.js file​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#1-create-a-serverjs-file","content":"Let's build our server! Before we do anything, let's create a new file calledserver.js. This is where all our server code is going to live. "},{"title":"2. require the express library​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#2-require-the-express-library","content":"We already installed Express in Step 2, but we need to make sure it is included in this file specifically so we can make use of its methods. In Node.js, when you want to access the functionality of a library or module in another file, yourequire it. To import Express, write the following inside server.js: const express = require(&quot;express&quot;);  We will try and get used to ES6 syntax - so use const and let instead ofvar. "},{"title":"3. Initialise the server​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#3-initialise-the-server","content":"To initialise our server, we just need to call the express() function. This will create an Express application for us to work with. Add the second line of code to your server.js file: const express = require(&quot;express&quot;); const app = express();  "},{"title":"4. Start 'listening' for potential requests​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#4-start-listening-for-potential-requests","content":"One more step left, we need to set a port for our server to listen to. Think of a port as a door number; any requests that come to the server will come via that door. Setting a port will allow us to find where our server is running. We use the app.listen method to do this. This method takes two arguments: a port and a callback function telling it what to do once the server is running. Need clarification? Read more about the app.listen method in theExpress documentation. We're going to run our server on port 3000, and run a simple console.log as our callback function. Update your server.js file, calling the app.listenmethod: const express = require(&quot;express&quot;); const app = express(); app.listen(3000, function () { console.log(&quot;Server is listening on port 3000. Ready to accept requests!&quot;); });  Try to use ES6 arrow functions instead of function. "},{"title":"5. Switch the server on!​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#5-switch-the-server-on","content":"You've built your server, but it isn't running yet. We need to run a command in the terminal to do this. We are going to use the node keyword to run the server file. Type the following command in your terminal: node server.js  If you see this, congratulations! You have built yourself a server!  Step 4 - Communicating with the server Now that we've built the server, we need to communicate with it. We're going to control the server with handler functions. "},{"title":"What is a handler function?​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#what-is-a-handler-function","content":"When a request reaches the server, we need a way of responding to it. In comes the handler function. The handler function is just a function which receives requests and handles them, hence the name. The handler function always takes a request and response object, and sends the response back to the client along with some information. You can decide what to send back in your response. "},{"title":"What does a handler function look like in Express?​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#what-does-a-handler-function-look-like-in-express","content":"The get() method is used to define a handler function in Express. It takes two parameters: the endpointat which to trigger an action (we'll explain more about this in the next step), and the handler function that tells it exactly what to do. Here's a simple &quot;Hello World!&quot; example: // req is the Request object, res is the Response object // (these are just variable names, they can be anything but it's a convention to call them req and res) app.get(&quot;/&quot;, function (req, res) { res.send(&quot;Hello World!&quot;); });  Here, we are telling our server to respond with &quot;Hello World!&quot; when someone tries to access the webpage. "},{"title":"1. Create your own handler function.​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#1-create-your-own-handler-function","content":"We are now making a handler function with a custom message in our response. You can write any message you want. Update your server.js file with an empty app.get() function: const express = require(&quot;express&quot;); const app = express(); app.get(&quot;/&quot;, function (req, res) {}); app.listen(3000, function () { console.log(&quot;Server is listening on port 3000. Ready to accept requests!&quot;); });  Exercise: Try to console.log the request object inside the handler function. Restart your server, refresh the browser, then go to your terminal to see what it looks like. You should see a lot of data come through. "},{"title":"2. Tell your handler function what to do​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#2-tell-your-handler-function-what-to-do","content":"We want our handler function to send back a message to the client. To do that, we're going to use the Express send()method. This will update the response object with the message. Update your handler function like so: const express = require(&quot;express&quot;); const app = express(); app.get(&quot;/&quot;, function (req, res) { res.send(&quot;Yay Node Girls!&quot;); }); app.listen(3000, function () { console.log(&quot;Server is listening on port 3000. Ready to accept requests!&quot;); });  "},{"title":"3. Check it out in your browser​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#3-check-it-out-in-your-browser","content":"Quit your server in the terminal with ctrl + c. Then restart it to run your new changes. node server.js  Now, open your favourite browser (we like Chrome), and navigate tohttp://localhost:3000. If you see your message in the browser, congratulations! You just sent your first response from the server. Step 5 - Routing At the moment our server only does one thing. When it receives a request from the / endpoint, it sends back the same response: &quot;Yay Node Girls!&quot;. Try typing http://localhost:3000/nodegirls and see what happens. However by making use of endpoints, we can make the server send different responses for different requests. This concept is called routing. "},{"title":"What is an endpoint?​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#what-is-an-endpoint","content":"An endpoint is the part of the URL which comes after /. For example:/chocolate is the &quot;chocolate&quot; endpoint. It's the URL to which you send a request. "},{"title":"What is URL?​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#what-is-url","content":" "},{"title":"1. Create your own endpoints and send different responses​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#1-create-your-own-endpoints-and-send-different-responses","content":"We're going to try sending different responses at different endpoints. Remember the app.get() method? To set up routing in your server, we just need to repeat this method with different endpoints. For example: app.get(&quot;/&quot;, function (req, res) { res.send(&quot;Hello World!&quot;); }); app.get(&quot;/chocolate&quot;, function (req, res) { res.send(&quot;Mm chocolate :O&quot;); });  Exercise: Add some code so that your server sends one message when the endpoint is /node and another one when it's /girls. "},{"title":"Step 6 - Serving static files​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#step-6---serving-static-files","content":"So we know how to send back a simple message. But what if you want to send back a whole HTML page, or an image? Things like HTML files, images etc are known as static assets. If you want your server to &quot;serve&quot; static assets back to the browser, you need to do something different than just using the res.send() method. To be able to send any file from the server we need a special, built-inmiddleware function that comes with Express: express.static(). Read more about it here. Say we want to serve all the static assets in our &quot;public&quot; folder. Theexpress.static() function will look like this: app.use(express.static(&quot;public&quot;));  "},{"title":"1. Serve static files from your server​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#1-serve-static-files-from-your-server","content":"Delete all your app.get endpoint functions, and replace them with the line of code above. Restart your server, refresh your browser and see what happens! If you see a Node Girls CMS, then your static assets have been successfully served. "},{"title":"HTTP request methods​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#http-request-methods","content":"All requests use one of the HTTP methods. The main ones are: GET, POST, PUT, DELETE. app.get deals with requests that use the GET HTTP method. We will go into these Methods into more details, but for now, think of GETas a method for Getting data. POST is for POSTing/inserting new data. PUTis for updating. DELETE is for deleting data. "},{"title":"The POST http request method​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#the-post-http-request-method","content":"When sending data to the server, we use the POST http request method, instead of GET. Let's try POSTing some text to the server. We're going to add a form to the index.html page, so that you can write your blogposts from there. Open up the index.html file in your text editor. If you have a look, you should see this: &lt;div class=&quot;entry-container&quot;&gt; &lt;!--PASTE YOUR CODE HERE!! --&gt; &lt;/div&gt;  Replace the greyed-out comment with this code snippet: &lt;h3&gt;Create a blog post&lt;/h3&gt; &lt;form action=&quot;/create-post&quot; method=&quot;POST&quot;&gt; &lt;textarea name=&quot;blogpost&quot; rows=&quot;10&quot; cols=&quot;14&quot;&gt;&lt;/textarea&gt; &lt;button type=&quot;submit&quot;&gt;Send&lt;/button&gt; &lt;/form&gt;  This form has a text area and a Send button.The action attribute is the endpoint form data will be sent to.The name attribute will be used later to reference the data. When you hit Send, the form will send a POST request to the server, using whatever is in the action attribute as the endpoint. In our case it's/create-post. Exercise: Open Chrome Developers tool, click the button and see what happens. "},{"title":"Receiving the blog post on the server​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#receiving-the-blog-post-on-the-server","content":"Data doesn't come through the server in one go; it flows to the server in astream. Think of a stream as water flowing from a tap into a bucket. Your job is to collect this water in the server. If we were writing a pure Node server, we would have to think about how to collect the stream of data properly. But luckily for us, Express handles all of that stuff under the hood. All you need to do is define a route to deal with requests that come through on the /create-post endpoint. Let's remind ourselves of a simple GET route in Express: app.get(&quot;/hello-world&quot;, function (req, res) { res.send(&quot;Hello there!&quot;); });  Exercise: This time we want to define a route to deal with a POSTrequest not a GET. What do you think you would need to do differently? Experiment and see if you can define a route for the /create-post endpoint! For now, make your /create-post handler simply do this: console.log('I am /create-post endpoint').  "},{"title":"Extracting the blog post​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#extracting-the-blog-post","content":"Now the contents of your blogpost is hidden in your req object somewhere. Normally you would extract it using req.body. Try to console.log req.bodynow. Getting undefined? Not to worry, that's normal. When data has been POSTed to the server as FormData, we need to do things slightly differently to access the data that's come through in the request. We need another middleware function. Something that can get extract the contents out of the special FormData object. For this we will use express-formidable.express-formidable is another Express middleware. It will extract the form data from the request and make it available to you when you do req.fields. This time though, express-formidable is not built-in, we need to explicitly install it. In your terminal, install express-formidable npm install express-formidable --save  require express-formidable so you can use it in your code. You can't use dashes in JavaScript variable names, so just call it const formidable. const formidable = require(&quot;express-formidable&quot;);  Now add this towards the top of your server, after your requires andapp.use(express.static('public')), but before your /create-post endpoint: app.use(formidable());  Now inside your /create-post function, add: console.log(req.fields);  Refresh your server and have another go at writing a blogpost. You should now see an object in the console. The key should be blogpost, just like the name attribute in the form on the HTML page. The value of blogpostwill be your message! Exercise: Try putting app.use(formidable()); at the end of the file (after the create-post but before starting the server) What is a middleware in Express? Middleware functions are functions that have access to the request object (req), the response object (res), and the next function in the application’s request-response cycle. The next function is a function in the Express router which, when invoked, executes the middleware succeeding the current middleware. Read more onthe Express documentation "},{"title":"Step 8 - Saving your blog post​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#step-8---saving-your-blog-post","content":"Right now, your precious blog posts aren't being saved anywhere, which is a bit of a shame. Let's do something about that. You'll note that in the data folder there's a new file called posts.json. If you look at posts.json will see there's already one blog post there. The format is: { [timestamp]: [blog post message] }  We've used a timestamp as the key so that the blog posts are listed in chronological order. Also, it's a record of when the blog post was created. "},{"title":"Writing to your hard drive​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#writing-to-your-hard-drive","content":"Anytime a blog post comes through to the server, we want to save the data on your computer's hard drive. To do this, we need to use a built-in Node module:fs, which stands for 'file-system'. Built-in Node modules - core Node modules - are rather like the built-in Express middleware functions. Only difference is that where you need to have installed Express to use Express middleware functions, the core Node modules come automatically with Node itself. To use fs, you'll need to require it at the top of your server file: const fs = require(&quot;fs&quot;);  The method we need to write to your hard drive is fs.writeFile. fs.writeFile(&quot;path/to/file&quot;, yourData, function (error) { // do something });  Argument 1: the location of the file you want to write toArgument 2: the data you want to writeArgument 3: the callback function The 'path/to/file' will be replaced with the actual path to the file you want to write to. If it doesn't exist, fs.writeFile cleverly creates one for you. But we already have posts.json, so not to worry. "},{"title":"Reading from your hard drive​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#reading-from-your-hard-drive","content":"To read data that's already there, you would use fs.readFile. The way to usefs.readFile is very similar to fs.writeFile: fs.readFile(&quot;path/to/file&quot;, function (error, file) { // do something });  Argument 1: the location of the file you want to read fromArgument 2: the callback function You'll notice that fs.readFile's callback function takes a second argument. That argument would be the file you're reading. Let's read the data from the posts.json file. Make sure you've required thefs core Node module at the top of your server file somewhere. Add this code to your server (put it anywhere after the requires for now): fs.readFile(__dirname + &quot;/data/posts.json&quot;, function (error, file) { console.log(file); });  (__dirname is a Node global object that gives you a path to current working directory. It's handy if we want to avoid writing the whole path out in full.) If you restart the server, you'll probably see something like this: &lt;Buffer 7b 0a 20 20 20 20 22 31 34 36 37 33 39 30 33 35 36 32 39 31 22 3a 20 22 54 68 69 73 20 69 73 20 6d 79 20 76 65 72 79 20 66 69 72 73 74 20 62 6c 6f 67 ... &gt;  This is actually the contents of your posts.json file, but in a format called a buffer. To make it a bit more human-readable, you can console.log the file to a string, like this: console.log(file.toString());  file is in JSON format right now. If we want to access the blog post message inside file, we need to parse it from JSON back to a JavaScipt object. Add this next bit of code to your fs.readFile's callback function: const parsedFile = JSON.parse(file);  Now parsedFile is a normal JavaScript object, and we can access the data inside it. Ok, so we've talked about JSON and we've talked about reading and writing files. You now have the power to save new blog post data to your hard drive! Work with your partner and your mentor to see if you can figure the next steps out on your own. Here's a breakdown of what you want to achieve: When new blog post data comes through, read from posts.json to access its contentsAdd your new blog post data to the old ones.Write your new combined data back to the posts.json file. "},{"title":"Things to remember​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#things-to-remember","content":"fs.writeFile() normally overwrites the target file you've given it. Chances are you don't want to lose all your old blog posts every time you get a new one, so think about how you can combine fs.readFile() and fs.writeFile()to prevent overwriting. You will need to convert between JSON and a JavaScript object several times.JSON.parse() and JSON.stringify() are what you need. Oh by the way, if you want to get the current timestamp, use the JavaScriptDate.now() method. "},{"title":"Step 9 - Displaying your blog posts​","type":1,"pageTitle":"Express Workshop","url":"/node/workshops/workshop#step-9---displaying-your-blog-posts","content":"So now we're saving the blog posts to the server. Time to get them and display them on the page! If you look inside public/script.js, there's a whole bunch of JavaScript code in there. Don't worry about what all the code means, just know that it's responsible for sending a request to GET old blog posts and display them on the page underneath &quot;Recent Posts&quot;. script.js is trying to load existing posts by making a GET request. Look inside script.js and see if you can find any useful endpoints. Your script.js file will want to receive the JSON containing your blog posts. Your job is to make that happen! Express has a handy method called res.sendFile() that makes it easy to send files back to the client. Feel free to use this with your JSON. If all goes well, you should have a fully functional CMS! "},{"title":"Module Coordinator","type":0,"sectionRef":"#","url":"/react/coordinator","content":"","keywords":""},{"title":"1) Preparation​","type":1,"pageTitle":"Module Coordinator","url":"/react/coordinator#1-preparation","content":"This module has some preparation work that should be set as coursework before the module starts, so that you do not waste time in the lesson. You can find the preparation work here. "},{"title":"2) Assessment​","type":1,"pageTitle":"Module Coordinator","url":"/react/coordinator#2-assessment","content":"After the final week of this module there are assessment that should be completed by all trainees. 🔒 https://github.com/CodeYourFuture/React-Assessment These assessments should be conducted one-on-one with a volunteer (possibly the trainee's buddy). Each of the assessments has a rubric that should be followed. After completion, the trainees score should be shared with the City Coordinator The aim of these assessments is to Work out how well each trainee is doing in the classHighlight trainees who are falling behind and require helpGet oversight of any common misconceptions in the class "},{"title":"React Preparation","type":0,"sectionRef":"#","url":"/react/prep","content":"","keywords":""},{"title":"1) Node & NPM (15 minutes)​","type":1,"pageTitle":"React Preparation","url":"/react/prep#1-node--npm-15-minutes","content":"You should already have these tools installed. To check if Node is installed open Command Prompt or Terminal or Git Bash and type. node -v  Running this command should print out a version number. If this does not work, you should install Node. "},{"title":"2) Create React App (1 hour)​","type":1,"pageTitle":"React Preparation","url":"/react/prep#2-create-react-app-1-hour","content":"Please follow this setup guide to get a new piece of software installed. Installing Create React App It is critical that this is installed correctly before you arrive at class. If you have problems installing Create React App then you must post on your Slack channel to get help. "},{"title":"3) What is React? (30 minutes)​","type":1,"pageTitle":"React Preparation","url":"/react/prep#3-what-is-react-30-minutes","content":"Watch this video You can stop watching at 11:06 (the rest is unnecessary) Answer these questions about the video A. What does he say the &quot;best description of React is&quot;?B. What does he say &quot;could be a component&quot;?C. What does he say is the benefit of using JSX?D. What makes React fast? Once you have answered the questions, submit your answers on Slack. This will help your teachers see what level you're at before you start the module. "},{"title":"Class Components","type":0,"sectionRef":"#","url":"/react/class-components/lesson","content":"","keywords":""},{"title":"Class Components​","type":1,"pageTitle":"Class Components","url":"/react/class-components/lesson#class-components","content":"So far we have looked at components which are just functions (which are called function components), but there is another way of creating React components using the class keyword. Let's look at an example (interactive example): import React, { Component } from &quot;react&quot;; // Class component class Greeting extends Component { render() { return &lt;div&gt;Hello&lt;/div&gt;; } } // Function component const Greeting = () =&gt; { return &lt;div&gt;Hello&lt;/div&gt;; };  Instead of getting props through the first argument of the component function, the class component gets props from this.props (interactive example): class Mentor extends Component { render() { return &lt;div&gt;{this.props.name}&lt;/div&gt;; } }  Here are the steps to follow to convert from a function component into a class component: Import the Component variable by changing the React import to: import React, { Component } from 'react';Create a new class that extends the component: class MyComponentName extends Component {}Inside the class, create a render method: render() {}Copy and paste the contents of the function component into the render methodReplace any references to props with this.propsDelete the old function component Exercise1. Open the pokedex React application that you created last week. 2. Convert the Logo component from a function component into a class component. 3. Convert the CaughtPokemon component into a class component. 4. Convert the BestPokemon component into a class component. "},{"title":"When you should use function components or class components?​","type":1,"pageTitle":"Class Components","url":"/react/class-components/lesson#when-you-should-use-function-components-or-class-components","content":"Classes are an older method for creating components in React. Even though they are older, they will still continue to work for a long time. Because of this, there are many React components written using classes. You will likely still encounter them when developing with React. Before Hooks were released classes were the only way to access state and lifecycle (similar to effects). The rule of thumb now is that new components should be written using function components with Hooks, but class components don't need to be updated. "},{"title":"Class Methods​","type":1,"pageTitle":"Class Components","url":"/react/class-components/lesson#class-methods","content":"Class methods are similar to nested &quot;handler&quot; functions inside function components. Let's take a look at an example (interactive example): import React, { Component } from &quot;react&quot;; class Hello extends Component { sayHello = () =&gt; { console.log(&quot;Hello from Hello component!&quot;); }; render() { return &lt;button onClick={this.sayHello}&gt;Say hello&lt;/button&gt;; } }  Unlike nested functions, we can't use just the name of the function in the onClick prop. We have to use this first, because the method is attached to the class. Notice how we use a slightly different syntax for the sayHello method than the render method? There is a reason for this, but it is quite complicated and mostly irrelevant. The rule of thumb is to always use this syntax: methodName = () =&gt; { // ... };  Except for the render method (and a handful of others which we'll talk about later). Exercise B1. Open the pokedex React application and open the Logo.js file. 2. Add a method named logWhenClicked to the Logo component (hint: remember to use the correct syntax). 3. Within the logWhenClicked method, console.log a message (it doesn't matter what the message is). 4. Add a onClick handler to the &lt;img&gt; that will call this.logWhenClicked (hint: look at the Hello component above). 5. In your web browser, try clicking on the image. What do you see in the JavaScript console? "},{"title":"State in Class Components​","type":1,"pageTitle":"Class Components","url":"/react/class-components/lesson#state-in-class-components","content":"Accessing state in class components is a bit different than with function components. We're going to use the Counter component we looked at previously: import React, { useState } from &quot;react&quot;; function Counter() { const [count, setCount] = useState(0); function increment() { setCount(count + 1); } return ( &lt;div&gt; Count: {count} &lt;button onClick={increment}&gt;Click me!&lt;/button&gt; &lt;/div&gt; ); }  Now let's look at the equivalent version in a class (interactive example): class Counter extends Component { state = { count: 0, }; increment = () =&gt; { this.setState({ count: 1, }); }; render() { return ( &lt;div&gt; Count: {this.state.count} &lt;button onClick={this.increment}&gt;Click me!&lt;/button&gt; &lt;/div&gt; ); } }  There's a lot going on here! Let's break it down into pieces. "},{"title":"State initialisation​","type":1,"pageTitle":"Class Components","url":"/react/class-components/lesson#state-initialisation","content":"Unfortunately, React prevents us from using useState inside class components and we have to use alternatives. To initialise state we have to assign a class property called state: class Counter extends Component { state = { count: 0, }; }  This creates a new state variable called count. Any value you assign will be the initial value of the state variable, so here we initialise to 0. Unlike useState, you can initialise multiple state variables at once, like this: class Counter extends Component { state = { count: 0, isCountingDown: false } ... }  "},{"title":"Defining the increment handler function​","type":1,"pageTitle":"Class Components","url":"/react/class-components/lesson#defining-the-increment-handler-function","content":"Another difference in the class is that we don't define a &quot;normal&quot; function as the increment handler function. We also don't define it inside the render method, as you might expect. Instead we define increment as a class method (see above for a reminder): class Counter extends Component { ... increment = () =&gt; { ... } ... }  This also means that we have to change how we use the handler function in our JSX: class Counter extends Component { ... render() { return ( &lt;div&gt; ... &lt;button onClick={this.increment}&gt;Click me!&lt;/button&gt; &lt;/div&gt; ); } }  "},{"title":"Accessing state variables​","type":1,"pageTitle":"Class Components","url":"/react/class-components/lesson#accessing-state-variables","content":"Since we can't use useState, it also means that we don't have access to the count variable. Instead our count state lives inside this.state: class Counter extends Component { ... render() { return ( &lt;div&gt; Count: {this.state.count} ... &lt;/div&gt; ); } }  We have just swapped count with this.state.count. Otherwise it works exactly the same. "},{"title":"Updating state with this.setState​","type":1,"pageTitle":"Class Components","url":"/react/class-components/lesson#updating-state-with-thissetstate","content":"The final piece is how we update state variables. Again, because we can't use useState, we don't have access to setCount. Instead we use a special function called this.setState: class Counter extends Component { ... increment = () =&gt; { this.setState({ state: 1 }) } ... }  This function is similar to setCount because it does two things: Updates the state variableTriggers a re-render One difference is that this.setState can update multiple state variables at once: this.setState({ state: 1, isCountingDown: true, });  "},{"title":"Updating state based on previous state​","type":1,"pageTitle":"Class Components","url":"/react/class-components/lesson#updating-state-based-on-previous-state","content":"You may have noticed that our Counter app isn't very useful. It can only count to 1! This is because this.setState has one more difference: if you need to update some state based on the previous state, then we need to pass a callback instead of an object (interactive example): class Counter extends Component { state = { count: 0, }; increment = () =&gt; { this.setState((previousState) =&gt; { return { count: previousState.count + 1, }; }); }; render() { return ( &lt;div&gt; Count: {this.state.count} &lt;button onClick={this.increment}&gt;Click me!&lt;/button&gt; &lt;/div&gt; ); } }  Now we can count up as much as we like! This is because React can &quot;delay&quot; this.setState executing for performance reasons. By using a callback function, we ensure that we are computing the new state with the correct version of the old state and not an outdated one. This problem is one of the reasons why useState was created. "},{"title":"Recap​","type":1,"pageTitle":"Class Components","url":"/react/class-components/lesson#recap","content":"Let's recap what we've learnt about React state: We initialise state by assigning a state class property to an object with whatever initial state we want (e.g. { something: 'hello' })We can read or render state by using the this.state variable (e.g. this.state.something)We can change state using the this.setState() method and by passing the piece of state we want to update (e.g. this.setState({ something: 'hi' }))If we need to read the previous state to be able to calculate the new state, then we must use a callback function with this.setState() (e.g. this.setState((previousState) =&gt; { return { something: previousState.something + 1 } })) Exercise1. Open the pokedex React application and open the CaughtPokemon.js file. 2. Set the initial state by assigning the state class property to an object. Then make the initial state have 0 caughtPokemon. 3. Change the CaughtPokemon component to render this.state.caughtPokemon instead of hard-coding 0. Do you expect anything to have changed in your web browser? 4. Add a &lt;button&gt; with the text &quot;Catch Pokemon&quot; to the CaughtPokemon component. 5. Create an catchPokemon method within the CaughtPokemon class. 6. Add a onClick handler to the &lt;button&gt; we just created that will call the catchPokemon method. 7. Within the catchPokemon method, use this.setState() to change caughtPokemon to 1. 8. Update the catchPokemon method to increase the number of caughtPokemon by 1 every time the button is clicked (hint: we need to use the previous state to calculate the new state). "},{"title":"Unmounting​","type":1,"pageTitle":"Class Components","url":"/react/class-components/lesson#unmounting","content":"So far we've looked at components that are always rendered in the browser. However (and this is often the case in large applications), we might want to control whether components are shown or not. Let's look at a Toggle component (interactive example): const Message = () =&gt; &lt;p&gt;I'm shown when this.state.isShown is true ✅&lt;/p&gt;; class Toggle extends Component { state = { isShown: false, }; toggle = () =&gt; { this.setState((previousState) =&gt; { return { isShown: !previousState.isShown }; }); }; render() { return ( &lt;div&gt; {this.state.isShown ? &lt;Message /&gt; : null} &lt;button onClick={this.toggle}&gt;Toggle&lt;/button&gt; &lt;/div&gt; ); } }  If you open up dev tools, you will see that the element changes based on the isShown state. The hidden element is not hidden with CSS, it is actually removed from the DOM. This is because this.state.isShown is false which means the Toggle component returns null for that part of the JSX. If you return null in JSX then React will render nothing at all. "},{"title":"Class Component Lifecycle​","type":1,"pageTitle":"Class Components","url":"/react/class-components/lesson#class-component-lifecycle","content":"When a class component is within the DOM, we call it mounted. When a component is removed from the DOM, we call it unmounted. When we change state like in the unmounting example above, we can switch between these statuses. This gives us a clue that components go through a lifecycle of different statuses. We have seen 2 of the statuses: mounting and unmounting, there is also a third called updating. We can hook into this lifecycle through special component methods that are added by React's Component class. They are run at different points of the lifecycle, often before and after they change to a different status. The method names contain will or did based on whether they run before or after a status change. This diagram shows the React component lifecycle:  Let's look at how we can use one of the lifecycle methods (interactive example): class Lifecycle extends Component { componentDidMount() { console.log(&quot;componentDidMount&quot;); } render() { return &lt;div&gt;Hello World&lt;/div&gt;; } }  Exercise1. Open the pokedex application that we have been working on for the last 2 weeks and open the CaughtPokemon.js file. 2. Add a componentDidMount method to the CaughtPokemon component. Within this method add a console.log('componentDidMount'). You don't need to return anything from this method. 3. Repeat the same step above with the componentDidUpdate and componentWillUnmount methods. 4. Try interacting with the CaughtPokemon component in your web browser (clicking the button) while looking at the JavaScript console. What order do the logs appear? 5. The componentWillUnmount method will never be called. Can you explain why? We'll now focus on a few of the lifecycle hooks and see how they are used. "},{"title":"componentDidMount and componentWillUnmount​","type":1,"pageTitle":"Class Components","url":"/react/class-components/lesson#componentdidmount-and-componentwillunmount","content":"The componentDidMount method runs after a component has finished rendering to the DOM. The component is now waiting for a props change or input from the user. It is called only once. We use this lifecycle hook to make changes outside of the component (sometimes these are called side effects). The componentWillUnmount method runs when a component has been unmounted from the DOM. It is used to &quot;clean up&quot; the component as it is no longer being shown. Often we need to close down or cancel the changes we made in componentDidMount. To look at these in more detail, we'll create a Clock component in an exercise. Exercise1. Open this CodeSandbox. 2. Now change the Time component (notice that there are 2 components defined in this file) add a componentDidMount method. 3. Within the componentDidMount method use setInterval to call this.tick every 1000 milliseconds (hint: setInterval(this.tick, 1000)). 4. Now open the JavaScript console your web browser. What is happening? Can you explain why? 5. Keep looking at the JavaScript console and try clicking the &quot;Toggle time&quot; button. What do you think the problem is here? How can we fix it? 6. Change the componentDidMount method to assign this.timer to the output of setInterval (hint: this.timer = setInterval(this.tick, 1000)) 7. Add a componentWillUnmount method to the Time component 8. In the componentWillUnmount method, remove the timer by calling clearInterval(this.timer) 9. Try clicking the &quot;Toggle time&quot; button again, like in step 5. How have we solved the problem? "},{"title":"Fetching Data with Class Components​","type":1,"pageTitle":"Class Components","url":"/react/class-components/lesson#fetching-data-with-class-components","content":"Data fetching with class components is also a bit different than with Hooks. The problem is similar to accessing state, because we can't use useEffect inside our class components. Instead we can use the class component lifecycle. The component lifecycle is very important - we don't want to be calling our API at the wrong time, or multiple times with the same data! If we tried to fetch data in our render method, it would make a request every time props or state changed. This would create lots of unnecessary requests. A similar problem is solved when using useEffect by the dependencies array. As we saw above, componentDidMount is called only once when the component is first rendered and so it is an ideal place for making requests. Let's look at an example (interactive example): class MartianPhotoFetcher extends Component { componentDidMount() { fetch( `https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?earth_date=${this.props.date}` ); } render() { // We don't don't what the img src is when we render :( return &lt;img src={src} /&gt;; } }  This example isn't very useful! We can't use the data returned from the server in render because the request is asynchronous :( We need React to re-render once the request is resolved - a perfect use for state! Let's look at an example (interactive example) class MartianPhotoFetcher extends Component { state = { imgSrc: null, }; componentDidMount() { fetch( `https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?earth_date=${this.props.date}` ) .then((res) =&gt; res.json()) .then((data) =&gt; { this.setState({ imgSrc: data.photos[0].img_src, }); }); } render() { return &lt;img src={this.state.imgSrc} /&gt;; } }  Now we can see the Martian photo that we fetched from the server! However we have a bit of a problem - when we first render the component, we don't have the photo src yet. We first have to initialise it to null. This shows us that we're missing something from our UI - a loading status. Let's look at showing a different UI when the request is loading (interactive example): class MartianPhotoFetcher extends Component { state = { isLoading: true, imgSrc: null, }; componentDidMount() { fetch( `https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?earth_date=${this.props.date}&amp;api_key=gnesiqnKCJMm8UTYZYi86ZA5RAnrO4TAR9gDstVb` ) .then((res) =&gt; res.json()) .then((data) =&gt; { this.setState({ isLoading: false, imgSrc: data.photos[0].img_src, }); }); } render() { if (this.state.isLoading) { return &lt;span&gt;Loading... 👽&lt;/span&gt;; } else { return &lt;img src={this.state.imgSrc} /&gt;; } } }  Here are the steps that the component takes: Initialise isLoading to trueIn render, show a loading message because isLoading is trueOnce rendered, componentDidMount will trigger the API requestWhen the request resolves, we set the isLoading state to false and set the data that we wantChanging state triggers a re-render, and because isLoading is false we render the Martian photo We can still improve our component! What happens if we make a request that fails? Our request will error, but we won't show the error in the browser. Let's see how we can fix it (interactive example). First we have to deal with annoying quirk of fetch. You may remember that it doesn't reject the promise on HTTP errors. The fix is to add another .then before we convert to JSON: .then((res) =&gt; { if (res.ok) { return res; } else { throw new Error('HTTP error'); } })  Now we can add our solution - a .catch on the fetch call. Here we reset the loading state and add the error to state. .catch((err) =&gt; { this.setState({ isLoading: false, err: err }); })  Now we can check if there's an error in state and render out an error message: render() { if (this.state.isLoading) { return &lt;span&gt;Loading... 👽&lt;/span&gt;; } else if (this.state.error) { return &lt;span&gt;Something went wrong 😭&lt;/span&gt;; } else { return &lt;img src={this.state.imgSrc} /&gt;; } }  Exercise1. Open the pokedex React application again and open the src/BestPokemon.js file. 1. If you haven't already, convert the BestPokemon component to a class component. 2. Set the initial state to have a key named pokemonNames that is assigned to an empty array []. 3. Add a componentDidMount method to the component. 4. Within the componentDidMount method call the fetch() function with this URL: https://pokeapi.co/api/v2/pokedex/1/. What will this do? 5. Add a .then() handler into the fetch function (hint: remember this needs to come immediately after the fetch() call) which converts the response from JSON (hint: .then(res =&gt; res.json())) 6. Add a second .then() handler after the one we just added, where the callback function will receive an argument called data. 7. Within the second .then() callback function, log out the data that we just received (hint: console.log(data.pokemon_entries[0].pokemon_species.name)). 8. Now change the console.log() to log out an array instead, with the first, fourth and seventh Pokemon (hint: console.log([data.pokemon_entries[0].pokemon_species.name, data.pokemon_entries[3].pokemon_species.name, data.pokemon_entries[6].pokemon_species.name])). 9. Now again within the .then() callback function, call this.setState() to set the pokemonNames key and assign it to the array that we just logged out (you can copy/paste it). 10. Inside the render method, remove the old pokemonNames variable and replace it with this.state.pokemonNames. What do you see in your web browser?. 11. Add an isLoading piece of state, which is initialised to true. 12. When calling this.setState() inside the .then() handler, also set isLoading to false. 13. In the render method check if this.state.isLoading is true and return a loading message (e.g. &lt;span&gt;Loading...&lt;/span&gt;). Otherwise if this.state.isLoading is false then render the loop as we did before. 14. (STRETCH GOAL) Add some error handling which renders an error message. 15. (STRETCH GOAL) Explore the data returned from the API. See if you can show some more interesting Pokemon information in your app (hint: try console.logging different data returned from the API). "},{"title":"Further Reading​","type":1,"pageTitle":"Class Components","url":"/react/class-components/lesson#further-reading","content":"Converting a class component to a function component with Hooks "},{"title":"React Router","type":0,"sectionRef":"#","url":"/react/react-router/lesson","content":"","keywords":""},{"title":"Introduction to React Router​","type":1,"pageTitle":"React Router","url":"/react/react-router/lesson#introduction-to-react-router","content":"In the past few weeks, you've learned how to build applications with React and the different applications and examples were all built on a single page. However, what if you wanted to have different pages with each page having its own URL (so you can bookmark it for example)? You will need to introduce a router in your application. In JavaScript, a router is the piece of code which is in charge of switching between views of your application and keep each view in sync with a specific URL. For example, you could imagine having a homepage reachable from the root path / and a users page with the path /users. In React, a popular library to help you achieve this is React Router. Let's look at a first example (interactive example): const Index = () =&gt; { return &lt;h2&gt;Home&lt;/h2&gt;; }; const About = () =&gt; { return &lt;h2&gt;About&lt;/h2&gt;; }; const Users = ({ names }) =&gt; { return ( &lt;div&gt; &lt;h2&gt;Users&lt;/h2&gt; &lt;ul&gt; {names.map((name, index) =&gt; ( &lt;li key={index}&gt;{name}&lt;/li&gt; ))} &lt;/ul&gt; &lt;/div&gt; ); }; const AppRouter = () =&gt; { return ( &lt;BrowserRouter&gt; &lt;div&gt; &lt;nav&gt; &lt;ul&gt; &lt;li&gt; &lt;Link to=&quot;/&quot;&gt;Home&lt;/Link&gt; &lt;/li&gt; &lt;li&gt; &lt;Link to=&quot;/about/&quot;&gt;About&lt;/Link&gt; &lt;/li&gt; &lt;li&gt; &lt;Link to=&quot;/users/&quot;&gt;Users&lt;/Link&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;Routes&gt; &lt;Route path=&quot;/&quot; element={&lt;Index /&gt;} /&gt; &lt;Route path=&quot;/about/&quot; element={&lt;About /&gt;} /&gt; &lt;Route path=&quot;/users/&quot; element={&lt;Users names={[&quot;Raresh&quot;, &quot;Nate&quot;]} /&gt;} /&gt; &lt;/Routes&gt; &lt;/div&gt; &lt;/BrowserRouter&gt; ); };  React Router provides some default React components that you can use to enable routing in your application. First, notice the top level &lt;BrowserRouter&gt; component which wraps everything else. Then, the &lt;Routes&gt; component which will choose one &lt;Route&gt; based on the current path. Each route is defined with the &lt;Route&gt; component which maps a path (defined with the path props) to a React component. You can pass an entire component including its properties to the element={...} prop. Finally, the Link component can be used to create links to navigate to different routes. Exercise AOpen the pokedex React application. In this exercise, React Router will be introduced. Instead of displaying all your components in the same page, we will use React Router to define different pages in the pokedex application. In the terminal, install React Router with npm install --save react-router-dom.Open src/App.js and import BrowserRouter, Route, Routes and Link components from React Router (hint: import { BrowserRouter, Routes, Route, Link } from &quot;react-router-dom&quot;;)Wrap all the components in the render method in the &lt;BrowserRouter&gt; component.In the following, we will have CaughtPokemon and BestPokemon displayed with different route. But first, let's create some links to navigate to different pages. Still in the &lt;BrowserRouter&gt; in the render method of src/App.js, use the Link component to create 2 links: one to navigate to the URL /best-pokemon and another one to navigate to /caught-pokemon (hint: &lt;Link to=&quot;/best-pokemon&quot;&gt;Best Pokemon&lt;/Link&gt;).Open the pokedex in your browser and verify that you can see 2 links on the page. When clicking on each of these links, the URL in your browser address bar should change (but nothing will change on the screen yet!).Create a &lt;Routes&gt; &lt;/Routes&gt; component inside your &lt;BrowserRouter&gt;. This is where we will nest our &lt;Route&gt; components. It will display one of them at a time depending on the current URL path.Now let's define the routes to map a path to a React component. First, create a route to map /best-pokemon to the BestPokemon component. Then, use another route to map /caught-pokemon to the CaughtPokemon component (Hint: move the component inside the element key, as in &lt;Route element={...} path=&quot;/my-path&quot; /&gt;).Open the pokedex in your browser and verify that when clicking on each link, BestPokemon and CaughtPokemon are rendered accordingly. "},{"title":"URL parameters​","type":1,"pageTitle":"React Router","url":"/react/react-router/lesson#url-parameters","content":"Sometimes, parameters can be passed from the URL to a React component directly via its props. In this case, different URLs can be mapped to one single React component. For example, in an online shopping application, a React component Product may be responsible to display a specific product on the page. By using URL parameters, the name or ID of the requested product can be specific in the URL and React Router will pass it a props of the Product component (interactive example): const Product = () =&gt; { let { name } = useParams(); return &lt;h2&gt;Product: {name}&lt;/h2&gt;; }; const AppRouter = () =&gt; { return ( &lt;BrowserRouter&gt; &lt;div&gt; &lt;nav&gt; &lt;h2&gt;Product List&lt;/h2&gt; &lt;ul&gt; &lt;li&gt; &lt;Link to=&quot;/products/laptop&quot;&gt;Laptop&lt;/Link&gt; &lt;/li&gt; &lt;li&gt; &lt;Link to=&quot;/products/tv&quot;&gt;TV&lt;/Link&gt; &lt;/li&gt; &lt;li&gt; &lt;Link to=&quot;/products/teddy-bear&quot;&gt;Teddy Bear&lt;/Link&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;Routes&gt; &lt;Route path=&quot;/products/:name&quot; element={&lt;Product /&gt;} /&gt; &lt;/Routes&gt; &lt;/div&gt; &lt;/BrowserRouter&gt; ); };  In the route definition above, a specific syntax is used to define the URL parameter: :name. Then in the Product component, the value of name can be accessed through useParams(). Exercise BIn the following, we will create a new component to display a Pokemon information. The Pokemon name will be passed through the URL and displayed on the screen. Create a new component PokemonInfo.In src/App.js, create a new route which maps the path /pokemon/:name to the previously created component PokemonInfo (hint: &lt;Route path=&quot;/pokemon/:name&quot; element={&lt;PokemonInfo /&gt;} /&gt;).In the render method of PokemonInfo component, display the name of the Pokemon which is passed in the URL parameter (hint: use the hook useParams() and extract name from the object it returns ).Open the pokedex in your browser and try several URLs (such as http://localhost:3000/pokemon/Pikachu and see if the Pokemon name is displayed accordingly on your screen.(STRETCH GOAL) Instead of passing the name of the Pokemon in the URL parameter, now pass an ID. The ID passed correspond to the ID of the Pokemon in the Poke API. For example, the ID 1 corresponds to the Pokemon Bulbasaur (https://pokeapi.co/api/v2/pokemon-species/1/). In the PokemonInfo component, use the Pokemon ID from the URL to load the corresponding Pokemon data from the Poke API and display the following Pokemon information on the screen: name, color.name, shape.name, base_happiness and capture_rate. "},{"title":"Further Reading​","type":1,"pageTitle":"React Router","url":"/react/react-router/lesson#further-reading","content":"A lot of examples are available on the official React Router website. "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/react/week-1/homework","content":"","keywords":""},{"title":"1) Mid-Course Feedback​","type":1,"pageTitle":"Coursework","url":"/react/week-1/homework#1-mid-course-feedback","content":"We're now over half way through the Software Development Course! Your feedback is really important to us. We use your feedback to improve the course for all of the hundreds of trainees across CodeYourFuture now and in the future. This feedback is anonymous meaning we won't have an idea who you are after you submit. We really appreciate you being honest since this allows us to improve faster. https://docs.google.com/forms/d/e/1FAIpQLSfrAtvR5HonJZiqlPXocAz7d1l-Kn57X5xp3oH_NmVUL9xTQQ/viewform "},{"title":"2) Review Solutions for the TV Show Project​","type":1,"pageTitle":"Coursework","url":"/react/week-1/homework#2-review-solutions-for-the-tv-show-project","content":"At the end of this week, be sure to review the solutions for last weeks coursework https://github.com/CodeYourFuture/JavaScript-Core-3-Coursework-Week3-Solution and https://github.com/CodeYourFuture/TV-Show-DOM-Project-Solution Note: This is a private repository. Please speak to your Teacher, Buddy or Class Coordinator to get access. You should ask them to invite your whole class. "},{"title":"3) In Class Exercises​","type":1,"pageTitle":"Coursework","url":"/react/week-1/homework#3-in-class-exercises","content":"If you haven't already, complete the in-class exercises on your pokedex app. "},{"title":"4) CYF Hotel (7 hours)​","type":1,"pageTitle":"Coursework","url":"/react/week-1/homework#4-cyf-hotel-7-hours","content":""},{"title":"4.1) Complete the exercises​","type":1,"pageTitle":"Coursework","url":"/react/week-1/homework#41-complete-the-exercises","content":"Complete all of the Lesson 1 exercises in the cyf-hotel-react project: https://github.com/CodeYourFuture/cyf-hotel-react. Make sure that you read the installation instructions carefully. "},{"title":"4.2) Deploy your Hotel app​","type":1,"pageTitle":"Coursework","url":"/react/week-1/homework#42-deploy-your-hotel-app","content":"Once you have set up your React Hotel application, you should deploy it to Netlify. Follow the deployment instructions. Once it is deployed, follow these instructions to change your new site's name to cyf-USERNAME-hotel-react.netlify.app (where USERNAME is YOUR Github username) Check that your site is visible at: https://cyf-[[your-github-username]]-hotel-react.netlify.app/. Please also include this URL in your pull request. "},{"title":"5) FreeCodeCamp Practice (3 hours)​","type":1,"pageTitle":"Coursework","url":"/react/week-1/homework#5-freecodecamp-practice-3-hours","content":"You should complete the following exercises from this website: https://www.freecodecamp.org/learn/front-end-libraries/react/ Create a Simple JSX ElementCreate a Complex JSX ElementAdd Comments in JSXRender HTML Elements to the DOMDefine an HTML Class in JSXLearn About Self-Closing JSX TagsCreate a Stateless Functional Component "},{"title":"6) Challenges (10 hours+)​","type":1,"pageTitle":"Coursework","url":"/react/week-1/homework#6-challenges-10-hours","content":"The best way to get better at React is to practice by building small projects. To help you with project ideas, we have provided several challenges. You can see a full list of the challenges here. Some you can complete now, but some require knowledge of later weeks - look out for the &quot;Prerequisites&quot; section in the instructions. We recommend that you attempt the following challenge: High Score Table - Level 1 Stretch Goals: Some other suitable projects for you to work on right now are: Baby Names Picker - Level 1Countries - Level 1Job Listing - Level 1 You should complete these challenges in the order they are in above. "},{"title":"7) Codewars (1 hour)​","type":1,"pageTitle":"Coursework","url":"/react/week-1/homework#7-codewars-1-hour","content":"Do your usual three kata and then... Find the pinned suggestions thread in the #cyf-codewars Slack channelSuggest a kata, or upvote one, to add to the syllabus "},{"title":"8) IronHack Labs Practice (Stretch)​","type":1,"pageTitle":"Coursework","url":"/react/week-1/homework#8-ironhack-labs-practice-stretch","content":"If you want more practice with the basics of making React components and passing props, You should completed exercises 1-7 of https://github.com/ironhack-labs/lab-react-training Notes: Do NOT make a pull request although the repo readme says so. We don't want the staff at the other school getting your PRs!Skip or simplify &quot;Iteration 3&quot; if you have problems with the maths. E.g. just pass a max number &lt;RandomNumber max={100} /&gt; and multiply that by Math.random(). Or pass no props. In &quot;Iteration 6&quot; just pass the prop as normal: &lt;Rating rating={4.5} /&gt;. To do it as specified in the exercise would require you to use something new: &quot;props.children&quot;. "},{"title":"9) Prepare for the next class (1 hour)​","type":1,"pageTitle":"Coursework","url":"/react/week-1/homework#9-prepare-for-the-next-class-1-hour","content":"In our next class we'll be exploring the difference between Props vs State. Spend some time reading about the difference between the two. Here are some resources to get you started Read Props vs State https://kentcdodds.com/blog/props-vs-state "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/react/week-1/instructors","content":"","keywords":""},{"title":"IMPORTANT - Setup Needed For Trainees​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-1/instructors#important---setup-needed-for-trainees","content":"If you are teaching this class in the coming weeks you must instruct your trainees to complete the instructions below. React Preparation If your trainees do not arrive with these steps completed then you will lose a lot of time on your first lesson. You should consider running short mid-week sessions the week before to help trainees get set up. "},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-1/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-react For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Resources​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-1/instructors#resources","content":"Quiz - React Week 1 - 28/05/2020 Created by Chris Owen Video - Job Listing Homework Introduction - 29/05/2020 Created by Subhav Gautam "},{"title":"Solutions​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-1/instructors#solutions","content":"PokeDex In-Class - Exercise Solution - 05/06/2020 Created by London and Ali SmithThese are now embedded into the syllabus itself, see demos folder for source Hotel Homework - Solution - 24/07/2020 Created by Manchester and Dorota Sobkow "},{"title":"Notes for mentors​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-1/instructors#notes-for-mentors","content":"Components - talk about the conceptual idea components, not just React components E.g. bootstrap components Why React? Updating the DOM is potentially buggy, verbose, slowIn complex web apps (like Facebook), updating the DOM is commonReact solves a lot of those problems Thinking in React exercise - useful to print out the screenshot, so they can draw on itRendering in React section Build towards component usage from vanilla DOMThis hopefully reduces the &quot;magic&quot; that React isAlthough don't spend too much time on it - the trainee's don't know about other frameworks, and so don't really care about other approachesAlso useful to identify why the React api is improved over the vanilla DOM apis JSX section Open the Babel REPL - demonstrate that there isn't any magic in JSXJust React.createElement calls with syntax sugar Installing Create-React-App This should be set as homework ahead of the lesson Saves time waiting for everyone to installAlso saves CPU cycles on slower computers, which may affect video calls CRA can consume a lot of resources (especially on older laptops) so emphasize stopping/startingThis is the first time that trainees will have encountered a file watcher/daemon background process So take some time to demonstrate how to start and stop the appRecommend that trainees with slower computers stop the app when they are not using it Installing stop-runaway-react-effects A package to prevent accidental infinite useEffect loopsIt must be imported before the react import so that useEffect can be monkey-patchedPackage docs React components section Originally this was written with class components first However, trainees went home and googled and saw alternative syntaxesThis is a common theme in this first lesson - have to teach some stuff that is perhaps unnecessary just so that they're prepared when they see it at home Making an argument for props section - Relate to a situation in real life, something like: imagine what our boss might ask for with this small application. What could our boss ask for which would mean we would have to make changes to the code?Exercises Written to be quite step-by-step deliberately Some trainees were distracted by the wording and not getting to the useful part of the exerciseThis is a tricky balance though - now some trainees will be distracted by the wordy-ness of the exercises. Feedback welcome Exercises in lessons 2 &amp; 3 depend on the completing the exercises in lesson 1 So ensure trainees have completed most of them before moving onWe may want to introduce a way of &quot;catching them up&quot; - have tagged &quot;checkpoints&quot; on a git repo? Interactive examples All of the examples should have an associated CodeSandbox with identical codeThis is so that you can change the example to help demonstrate if necessary I have found this very useful in the past, especially when answering questions like &quot;what happens if you do X?&quot;You can type up exactly what they're asking about and demo it Props section Makes a common analogy of &quot;props as arguments&quot; to a functionTrainees often get tripped on up on the props argument to a functional component They tend to forget to add it to the function signatureOr they think that each prop is given as a separate argument The first class may be a little short. But not short enough to start getting into state If you have extra time, PropTypes/defaultProps might be worth coveringThere is a Further Reading section at the very end of lesson 2 about this "},{"title":"Interactive Example Index​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-1/instructors#interactive-example-index","content":"Vanilla DOM &quot;Hello World&quot;React.createElement &quot;Hello WorldJSX &quot;Hello World&quot;Component compositionInterpolation in JSXInterpolation with methods in JSXInterpolation with .map in JSXKey prop for lists in ReactImporting/Exporting React ComponentsIntro to Props "},{"title":"Exercise solutions​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-1/instructors#exercise-solutions","content":"Exercise G: BestPokemon finishing point "},{"title":"Learning Objectives","type":0,"sectionRef":"#","url":"/react/week-1/learning-objectives","content":"","keywords":""},{"title":"React Week 1​","type":1,"pageTitle":"Learning Objectives","url":"/react/week-1/learning-objectives#react-week-1","content":""},{"title":"Create-React-App​","type":1,"pageTitle":"Learning Objectives","url":"/react/week-1/learning-objectives#create-react-app","content":"Create a React application with create-react-appDeploy a React application to Netlify "},{"title":"Concept of a component​","type":1,"pageTitle":"Learning Objectives","url":"/react/week-1/learning-objectives#concept-of-a-component","content":"Describe why components are useful "},{"title":"Writing components​","type":1,"pageTitle":"Learning Objectives","url":"/react/week-1/learning-objectives#writing-components","content":"Write elements with JSX syntaxCreate a React function component (both function definition and arrow function styles)Nest components within other componentsUse interpolation ({}) to insert JavaScript expressions into JSX And be able to distinguish between them when reading Import/export components between filesRender a list using the .map method "},{"title":"Passing props​","type":1,"pageTitle":"Learning Objectives","url":"/react/week-1/learning-objectives#passing-props","content":"Pass values to components as React props Receive props in a function componentPass functions as props and call them in child components "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/react/week-2/homework","content":"","keywords":""},{"title":"1) In Class Exercises​","type":1,"pageTitle":"Coursework","url":"/react/week-2/homework#1-in-class-exercises","content":"If you haven't already, complete the in-class exercises on your pokedex app. "},{"title":"2) CYF Hotel (3 hours)​","type":1,"pageTitle":"Coursework","url":"/react/week-2/homework#2-cyf-hotel-3-hours","content":"Complete all of the Lesson 2 exercises in the cyf-hotel-react project: https://github.com/CodeYourFuture/cyf-hotel-react#lesson-2. "},{"title":"3) Codewars (1 hour)​","type":1,"pageTitle":"Coursework","url":"/react/week-2/homework#3-codewars-1-hour","content":"https://www.codewars.com/users/$YOURNAME/completed Go to your completed view, scroll down to the bottom and redo the fifth, tenth, and fifteenth in the list. How will you approach these kata differently now you have more experience? "},{"title":"4) Challenges (10 hours+)​","type":1,"pageTitle":"Coursework","url":"/react/week-2/homework#4-challenges-10-hours","content":"The best way to get better at React is to practice by building small projects. Continue to work on the challenge projects from the previous week. You should now be able to complete more levels of the challenge We recommend that you complete the following challenge: High Score Table - all remaining levels Some other suitable projects for you to work on right now are: Baby Names Picker - Level 2Countries - Level 2Job Listing - Level 2 "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/react/week-2/instructors","content":"","keywords":""},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-2/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-react For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Resources​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-2/instructors#resources","content":"Quiz - React Week 2 - 28/05/2020 Created by Chris Owen "},{"title":"Solutions​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-2/instructors#solutions","content":"PokeDex In-Class - Exercise Solution - 05/06/2020 Created by London and Ali SmithThese are now embedded into the syllabus itself, see demos folder for source Hotel Homework - Solution - 24/07/2020 Created by Manchester and Dorota Sobkow "},{"title":"Notes for Mentors​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-2/instructors#notes-for-mentors","content":""},{"title":"Handling Events​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-2/instructors#handling-events","content":"Function references vs function calls is a very common source of confusion It is worth recapping again to ensure that trainees really do understand it Passing event handler function references The concept trips up a lot of trainees - will try to immediately call the function when passing to an event handler (e.g. onClick={this.foo()}) Passing functions as props This concept isn't really that much different from the section above, but passing across components does often confuse trainees "},{"title":"Re-Rendering Components​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-2/instructors#re-rendering-components","content":"The goal of this section is to demonstrate React re-rendering but without using state i.e. showing that React will call component functions again to get updated JSX after props/state changesTeaching separately allows us to emphasise that setting state has 2 jobs: updating the state and triggering React to re-renderIt is also convenient to (briefly) discuss how the virtual DOM is efficient Re-rendering demo Focus on the Counter component primarily, in particular the console.logThe code in index.js is just a way of forcing a re-render without using state. But we don't really want trainees to learn the bad habits here (we want them to ultimately learn state), so they are hidden away. "},{"title":"State​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-2/instructors#state","content":"This section takes a bit of a risk - it deliberately shows the wrong way trying to do state, then refactors to fix itBefore fixing the problem, something to emphasise is the moment when we start using the virtual DOM for the first time When we trigger a manual re-render to ReactDOM.render()But we are updating the DOM here - we mentioned in lesson 1 that this was hard, and now we've got an easy way of updating it. This is the true power of ReactThe demo is not very impressive, so it's easy for the trainees to miss We cover the problems with using a global variable, so hopefully that is enough to prevent the trainees copy/pasting the wrong way Ensure that you emphasise this is the wrong way to do state Demonstrate the app with multiple counters Shows that each components remembers their own state separate to other components When to use props or state? My rule of thumb: use props until you need it to change over time, then switch to state Container components To be honest I kept this in here as a hold over from previous lessonsArguably it's less relevant recently in ReactIf you're short on time then it can be skipped "},{"title":"Interactive Example Index​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-2/instructors#interactive-example-index","content":"RecapFunction reference vs function call recapEvent HandlersPassing Functions as PropsRe-Rendering ComponentsComponent variables resetting on re-renderImporting useState HookInitialising and rendering useState variablesUsing array index syntaxUsing array destructuringUpdating stateDon't Mutate StateMultiple state variablesWhen to Use Props or State "},{"title":"Exercise solutions​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-2/instructors#exercise-solutions","content":"BestPokemonFetcher exercise (completed) "},{"title":"Learning Objectives","type":0,"sectionRef":"#","url":"/react/week-2/learning-objectives","content":"","keywords":""},{"title":"React Week 2​","type":1,"pageTitle":"Learning Objectives","url":"/react/week-2/learning-objectives#react-week-2","content":""},{"title":"Event Handlers​","type":1,"pageTitle":"Learning Objectives","url":"/react/week-2/learning-objectives#event-handlers","content":"Able to handle user interaction via events. Explain why calling event handlers in JSX (e.g. onClick={handleClick()}) is incorrectAble to pass functions to event handlers Able to log to the console when a button is clickedAble to pass as props "},{"title":"Re-rendering components​","type":1,"pageTitle":"Learning Objectives","url":"/react/week-2/learning-objectives#re-rendering-components","content":"Explain that React handles updating the DOM when components are re-rendered. Explain that this makes code more understandable, as we don't need to worry about managing the DOM "},{"title":"State​","type":1,"pageTitle":"Learning Objectives","url":"/react/week-2/learning-objectives#state","content":"Create a simple counter component, demonstrating knowledge of React state. Able to import useState from the React packageAble to use state variables Initialise with a value with useState(initialValue)Destructure state variable into [stateValue, setStateValue]Render state variables to the viewUpdate with a new value with setStateValue(newValue) Identify when to use props or state "},{"title":"React - Week 1","type":0,"sectionRef":"#","url":"/react/week-1/lesson","content":"","keywords":""},{"title":"Before you start​","type":1,"pageTitle":"React - Week 1","url":"/react/week-1/lesson#before-you-start","content":"Before you arrive at class you must have completed the following setup work. React Preparation If you are a teacher reading this, please check the Instructor Notes "},{"title":"What is React?​","type":1,"pageTitle":"React - Week 1","url":"/react/week-1/lesson#what-is-react","content":"React is a JavaScript library created by Facebook. It is used for making complex, interactive user interfaces. It has become very popular in the last 5 years. Why has it become so popular? It is fast and efficientIt is easy to understand &amp; less verbose than the &quot;vanilla&quot; JS APIIt helps separate functionality into small, understandable pieces "},{"title":"What is a component?​","type":1,"pageTitle":"React - Week 1","url":"/react/week-1/lesson#what-is-a-component","content":"React heavily relies on a concept called &quot;components&quot;. Components are like small Lego blocks for designing and developing user interfaces (UI). They can be stuck together in different ways to create new UI. Let's have a look at an example: the GitHub header. What are the logical &quot;pieces&quot; of UI? What could be a component?  Here we've highlighted some elements that could be components:  "},{"title":"Component tips​","type":1,"pageTitle":"React - Week 1","url":"/react/week-1/lesson#component-tips","content":"There are no hard &amp; fast rules for making components. UIs can be split up into components in many different ways, requiring judgement based on your context. Components should follow the Single Responsibility Principle Each component should only have 1 &quot;responsibility&quot;Should only do 1 thing Components should have good, explicit names This helps you to remember what the component's job is Exercise A (estimate: 15 min)​ Exercise Look at the user interface below: Draw boxes around the components and give them names. Compare with the example components shown in the second image. "},{"title":"Rendering with React​","type":1,"pageTitle":"React - Week 1","url":"/react/week-1/lesson#rendering-with-react","content":"Remember how annoying it was to manage the DOM yourself in our previous lesson? The &quot;vanilla&quot; JavaScript APIs for updating the DOM are quite long and difficult to remember. React makes this easier by manipulating each DOM element itself, instead of you doing it manually. You give React a &quot;description&quot; of the DOM that you want and it will update the DOM for you. React abstracts away the management of the DOM. Let's take a look at an example. We are going to walk through how to render a &lt;div&gt; with the text &quot;Hello World&quot; within it. How we could do this using &quot;vanilla&quot; JS? (interactive version): let divNode = document.createElement(&quot;div&quot;); divNode.innerText = &quot;Hello World&quot;;  Now convert to using React (interactive version): const element = React.createElement(&quot;div&quot;, { children: &quot;Hello World&quot;, });  "},{"title":"JSX​","type":1,"pageTitle":"React - Week 1","url":"/react/week-1/lesson#jsx","content":"React is already helping us a bit by cleaning up some of the verbose vanilla JS APIs. However in a typical React application you would still use a lot of the React.createElement function. To improve the developer experience the React team developed JSX. JSX is a syntax sugar that looks like HTML, but is actually converts to the React.createElement function when you run it. Using JSX (interactive version): const element = &lt;div&gt;Hello World&lt;/div&gt;;  This is much easier to read than both the straight React.createElement API and the vanilla JS API. Most people using React use JSX to write their components. Exercise B (estimate: 5 min)​ Exercise Change the JSX example from above to instead render a h1 tag with the text &quot;Hello Code Your Future&quot;. "},{"title":"Let's create a React app​","type":1,"pageTitle":"React - Week 1","url":"/react/week-1/lesson#lets-create-a-react-app","content":"Exercise C (should be completed in prep)​ Exercise If you haven't already, follow the instructions to create a React app called pokedex. "},{"title":"What got created?​","type":1,"pageTitle":"React - Week 1","url":"/react/week-1/lesson#what-got-created","content":"Diagram of folder layout created by create-react-app.  "},{"title":"React Components​","type":1,"pageTitle":"React - Week 1","url":"/react/week-1/lesson#react-components","content":"We looked at the beginning of the lesson at the concept of components. Now look at how components are made in React. import React from &quot;react&quot;; import ReactDOM from &quot;react-dom&quot;; function HelloWorld() { return &lt;div&gt;Hello World&lt;/div&gt;; } ReactDOM.render(&lt;HelloWorld /&gt;, document.querySelector(&quot;#root&quot;));  There are 3 important parts in this code: First we import React. This is important because JSX is converted to React.createElement calls. If the React variable is undefined then this will fail.We create a React component called HelloWorld.We render the HelloWorld component into the element with the id of root. Definition The process of rendering is turning the JSX elements returned by the component function into DOM elements on the screen. This is done by React for you. Exercise D (estimate: 20 min)​ Exercise In this exercise we replace the placeholder React app with our own. It should look like this: Welcome to the Pokedex Complete the following steps: First off, head to the root of your pokedex repo and start the app using npm start.In the pokedex React app that you just created, open the src/App.js file.Delete everything in the file except the line containing export default App. You should see an error in your terminal and in your web browser - don't panic! We're going to remake the App component ourselves.Import the React variable from the React package.Create a function named App, which will be our component.Within the App function, return a &lt;h1&gt; element with the text &quot;Welcome to the Pokedex&quot;. What do you see in your web browser?Create a &lt;div&gt; element that wraps around the &lt;h1&gt; you just created.Below the &lt;h1&gt; element (but within the &lt;div&gt;), create an &lt;img&gt; element. Then make its src attribute equal to https://assets.pokemon.com/assets/cms2/img/pokedex/full/016.png. What do you expect to see in your web browser?Now create a &lt;header&gt; element to wrap both the &lt;h1&gt; element and the &lt;img&gt; element. Component Composition​ You can combine a component with another component to render both. This is called composition (interactive example): function Greeting() { return &lt;span&gt;Hello&lt;/span&gt;; } function Mentor() { return &lt;span&gt;Ali&lt;/span&gt;; } function HelloWorld() { return ( &lt;div&gt; &lt;Greeting /&gt; &lt;Mentor /&gt; &lt;/div&gt; ); }  In the HelloWorld component we are using a reference to the Greeting and Mentor components. React reads these references when rendering HelloWorld and so it renders the Greeting and Mentor child components. We are also using some shorter syntax within the HelloWorld component. &lt;Greeting /&gt; is a shorter way of writing &lt;Greeting&gt;&lt;/Greeting&gt;, which is useful if we don't need to put anything inside the Greeting component. Notice how the components that we write (HelloWorld, Greeting, Mentor) are written using a camel case convention and always start with an uppercase letter. And &quot;regular DOM&quot; components (div, span) are always lowercase? This is a convention to let you know whether you are using a &quot;regular DOM component&quot; or a component that you have written. When you're making your own components, you should always start them with an uppercase letter. Exercise E (estimate: 10 min)​ Exercise In this exercise, we will split out a new Logo component from the App component. And then we'll add a new BestPokemon component: Welcome to the Pokedex My favourite Pokemon is Squirtle You should complete the following steps: In your pokedex React app, open the src/App.js file.Create a new function named Logo.Copy the &lt;header&gt; element and its contents and paste it into the Logo component.Replace the &lt;header&gt; element in the App component with the new Logo component.Create a new component function named BestPokemon and return a &lt;p&gt; element with some text saying which is your favorite Pokemon (e.g. &quot;My favorite Pokemon is Squirtle&quot;).Render your new BestPokemon component below the Logo component within the App component. Arrow Functions for shorter syntax​ Because a React component is a function, we can also use the arrow function syntax: const HelloWorld = () =&gt; { return ( &lt;div&gt; &lt;h1&gt;Hello World&lt;/h1&gt; &lt;/div&gt; ); };  This can be even shorter again if we use parentheses and implicit return: const HelloWorld = () =&gt; ( &lt;div&gt; &lt;h1&gt;Hello World&lt;/h1&gt; &lt;/div&gt; );  Although this is shorter, it is less flexible as we cannot insert code that is not JSX. Like for example, a console.log: // THIS DOES NOT WORK! const HelloWorld = () =&gt; ( console.log('Hello!'); &lt;div&gt; &lt;h1&gt;Hello World&lt;/h1&gt; &lt;/div&gt; );  So we will use arrow functions but we should not use the implicit return for now.. Exercise F (estimate: 10 min)​ Exercise In this exercise, we'll convert the Pokedex app to use arrow functions. It should still look the same in your browser as Exercise E. Using the pokedex React app that you created earlier, open the src/App.js file.Convert the Logo and BestPokemon functions into arrow functions. "},{"title":"Embedding JavaScript into JSX​","type":1,"pageTitle":"React - Week 1","url":"/react/week-1/lesson#embedding-javascript-into-jsx","content":"So far all of the components we have looked at haven't been able to change - they are hard-coded. But this doesn't make very interesting websites. We want to use variables with different data. We can insert variables (and some other things) into our React components. Anything in the JSX that is inside curly braces {} is interpreted as a regular JavaScript expression. That means you can use every object or function from JavaScript that we have learned so far. Let's look at an example (interactive example): function Greeting() { const greetingWord = &quot;Hello&quot;; return &lt;span&gt;{greetingWord}&lt;/span&gt;; }  Now instead of hard-coding the greeting in the Greeting component, we are using a variable. Remember that everything between the curly braces is just regular JavaScript. So we can use more than just variables (interactive example): function Mentor() { const mentors = [&quot;Ali&quot;, &quot;Kash&quot;, &quot;Davide&quot;, &quot;German&quot;, &quot;Gerald&quot;]; return &lt;span&gt;{mentors.join(&quot;, &quot;)}&lt;/span&gt;; }  Now we have modified the Mentor component to use the Array.join method so that it lists several mentors' names. This works with other JS types: function Addition() { return &lt;span&gt;{1 + 2 + 3}&lt;/span&gt;; }  function Weather() { const weatherData = { temperature: 5, location: &quot;London&quot;, }; return ( &lt;p&gt; The temperature in {weatherData.location} is {weatherData.temperature} &lt;/p&gt; ); }  function formatName(user) { return user.firstName + &quot; &quot; + user.lastName; } function Name() { const user = { firstName: &quot;Bob&quot;, lastName: &quot;Marley&quot;, }; return &lt;span&gt;{formatName(user)}&lt;/span&gt;; }  A common pattern in React is to use Array.map to loop through a list of items and render a component for each one (interactive example): const mentors = [&quot;Ali&quot;, &quot;Kash&quot;, &quot;Davide&quot;, &quot;German&quot;, &quot;Gerald&quot;]; function MentorsList() { return ( &lt;ul&gt; {mentors.map((name) =&gt; ( &lt;li&gt;{name}&lt;/li&gt; ))} &lt;/ul&gt; ); }  Here we are using Array.map to turn an array of strings into an array of components. Exercise G (estimate: 20 min)​ Exercise In this exercise, we'll change the Logo component to use a variable for the app name. Then we'll add a new component CaughtPokemon which displays today's date. And finally we'll make BestPokemon show a list of abilities: Welcome to CYF's Pokedex My favourite Pokemon is Squirtle AnticipationAdaptabilityRun-Away Caught 0 Pokemon on 3/22/2023 You should then complete the following steps Using the pokedex React app that you created earlier, open the src/App.js file.Inside the Logo component create a new variable called appName and assign it to &quot;[YOUR_NAME]'s Pokedex&quot;.Now replace the hard-coded app name with {appName}. What do you see in your web browser? What would you do if you wanted to change the app name?Create a new component named CaughtPokemon. Within this component return a &lt;p&gt; tag with the text &quot;Caught 0 Pokemon on&quot; (we're going to fill in today's date in the next step).Create a variable named date within the CaughtPokemon component, and assign it today's date (hint: new Date().toLocaleDateString()). Finally, render the date variable after the text &quot;Caught 0 Pokemon on&quot;.Render the CaughtPokemon component within the App component (below BestPokemon).Within the BestPokemon component, create a variable named abilities and assign it to an array with some Pokemon abilities (e.g. ['Anticipation', 'Adaptability', 'Run-Away']).Change the BestPokemon component to return a &lt;div&gt; element with the existing &lt;p&gt; element inside it. Then add a &lt;ul&gt; element underneath the &lt;p&gt; element.Now use the .map() method on the abilities variable to loop over each name and return a &lt;li&gt; element for each (hint: look at the mentors list example above) within the &lt;ul&gt; element. "},{"title":"Keys​","type":1,"pageTitle":"React - Week 1","url":"/react/week-1/lesson#keys","content":"You may have noticed that we are now seeing a red error message in the Dev Tools: Warning: Each child in a list should have a unique &quot;key&quot; prop.. This error happens when you use Array.map to return a list of elements (interactive example): const mentors = [&quot;Ali&quot;, &quot;Sub&quot;, &quot;Loic&quot;, &quot;Anthony&quot;, &quot;Lucy&quot;, &quot;Mozart&quot;]; function MentorsList() { return ( &lt;ul&gt; {mentors.map((name, index) =&gt; ( &lt;li key={index}&gt;{name}&lt;/li&gt; ))} &lt;/ul&gt; ); }  Here we have added a key prop to the li element. The key prop has a special meaning in React. React uses key to keep track of each element in the list. The React documentation and React learning book explain this in more depth. "},{"title":"Importing/Exporting Components​","type":1,"pageTitle":"React - Week 1","url":"/react/week-1/lesson#importingexporting-components","content":"Organise your code by importing and exporting components. This works in the same way as regular JavaScript import and exports. (interactive example): import Greeting from &quot;./Greeting&quot;; import Mentor from &quot;./Mentor&quot;; function HelloMentor() { return ( &lt;div&gt; &lt;Greeting /&gt; &lt;Mentor /&gt; &lt;/div&gt; ); }  We need to export our components to use them in other files: function Greeting() { return &lt;span&gt;Hello&lt;/span&gt;; } export default Greeting;  Name component files exactly the same as the component (including the capital letter). Do this every time. Exercise H (estimate: 10 min)​ Exercise In this exercise, we'll split the Pokedex app into separate files. It should still look the same in your browser as Exercise G. Open the pokedex React app that you created earlier.Create a new file within the src directory named Logo.js.Copy and paste the Logo component from App.js into Logo.js.Remember to add import React from 'react' at the top of Logo.js.Export the Logo component from Logo.js (hint: look at the Greeting example above).Delete the old Logo component from App.js.Import the Logo component into App.js (hint: look at the HelloMentor example above).Repeat this process with the BestPokemon and CaughtPokemon components. What do you think the files should be called? "},{"title":"Making an argument for Props​","type":1,"pageTitle":"React - Week 1","url":"/react/week-1/lesson#making-an-argument-for-props","content":"What's the problem with our HelloMentor component above? The component HelloMentor is static. What if we want to say hello to a different mentor? We would have to change the code too! This is easy in our tiny application but for &quot;real&quot; applications this might be more difficult. Instead, wouldn't it be good if we could change which mentor we are saying hello to every time we render the component? We could reuse the HelloMentor component for different mentor names. This is what props are for. "},{"title":"What are Props?​","type":1,"pageTitle":"React - Week 1","url":"/react/week-1/lesson#what-are-props","content":"Props are what we use in React to pass &quot;arguments&quot; to components. They are very similar to arguments in functions. You can &quot;pass&quot; props to components and you can use those props within a component. First let's look at passing props to your components (interactive example): &lt;Mentor name=&quot;Mozafar&quot; /&gt;  Props are key-value pairs. In this example, the key is name and the value is the string 'Mozafar'. We can pass as many props as we like to a component. We don't have to use strings; we can use any valid JavaScript data like numbers, arrays and objects. In JSX you can use curly braces {} to inject data that is not a string: &lt;Mentor age={30}&gt;  Now look at using props that we have passed to a component (interactive example): function Mentor(props) { console.log(props); return &lt;span&gt;{props.name}&lt;/span&gt;; }  React gives you access to props in the first argument to the component function. We can inject props into our component using curly braces. The props variable is a normal object with key-value pairs that match what was passed to the component. It is a variable and it can be used like any other variable. That includes injecting props into attributes: &lt;div id={&quot;mentor-id-&quot; + props.id}&gt;{props.name}&lt;/div&gt;  Or calculating new values: &lt;div&gt;{props.age + 1}&lt;/div&gt;  Exercise I (estimate: 20 min)​ Exercise In this exercise, we'll move the variables in Logo, BestPokemon and CaughtPokemon to the App component. Then we'll make App pass those variables as props to the sub-components. Your app should still look the same in your browser as Exercise H. Using the pokedex React app that you created earlier, open the App.js file.Pass a prop appName=&quot;Pokedex&quot; to the Logo component.Now open the Logo.js file.Delete the appName variable. What do you see in your web browser? Why?Change the Logo function to access the first argument and call it props. Use console.log to inspect the props variable.Change the usage of appName in the &lt;h1&gt; to be props.appName instead. Does this fix the problem? Why?Now open the BestPokemon.js file.Copy the abilities variable and then delete it from BestPokemon.js.Paste the abilities variable into App.js.Pass the abilities variable as a prop to BestPokemon from App.js.In the BestPokemon.js file replace the existing usage of abilities with the abilities prop. You should still see the Pokemon ability names in your web browser.(STRETCH GOAL) Repeat the process with the date variable in the CaughtPokemon.js file. "},{"title":"Credits​","type":1,"pageTitle":"React - Week 1","url":"/react/week-1/lesson#credits","content":"Inspiration &amp; examples for this module were taken from Kent C. Dodd's Beginner's Guide to ReactJS course. "},{"title":"Coursework​","type":1,"pageTitle":"React - Week 1","url":"/react/week-1/lesson#coursework","content":"Follow to view the coursework for this lesson. "},{"title":"Feedback​","type":1,"pageTitle":"React - Week 1","url":"/react/week-1/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"React Further Reading - Container Components","type":0,"sectionRef":"#","url":"/react/week-3/further-reading/container-components","content":"React Further Reading - Container Components In real world applications, the things we want to remember in state follow the business logic required by our users. So for example the number of caught Pokemon in the exercise increases when you click on the button Catch Pokemon. Most of the time, business logic is about figuring out when and how to change state. To help us cleanly split up code that performs business logic from code that shows the user interface, we split components into presentational and container components. Often we have components that don't do anything except manage state according to the business rules and render the right presentational components. On the other hand, we often have components that don't change any state, and just render using the provided props. Container components usually have some state and handler methods, while presentational components usually just receive props and render JSX using these props. This article by Dan Abramov has more details. Exercise A1. Take a look at the components in your Pokedex app - can you identify a good use case for a 'container' component? What about 'presentational' components? 2. Discuss this with another trainee.","keywords":""},{"title":"React Further Reading - Multiple Form Fields","type":0,"sectionRef":"#","url":"/react/week-3/further-reading/multiple-form-fields","content":"","keywords":""},{"title":"Updating an Object in State​","type":1,"pageTitle":"React Further Reading - Multiple Form Fields","url":"/react/week-3/further-reading/multiple-form-fields#updating-an-object-in-state","content":"Did you spot the strange syntax in handleChange? We are using two techniques that you may not have seen in JavaScript before. "},{"title":"Object Spread​","type":1,"pageTitle":"React Further Reading - Multiple Form Fields","url":"/react/week-3/further-reading/multiple-form-fields#object-spread","content":"We are using object spread syntax, which copies properties from one object to another. We are using this to update the state object but without mutating the original object. Let's break this down into 2 steps. Here we create a new object based on another object, and adding a new property (interactive example): const sherlock = { name: &quot;Sherlock Holmes&quot;, }; const sherlockAfterMoving = { ...sherlock, address: &quot;221b Baker Street&quot;, }; console.log(sherlock); console.log(sherlockAfterMoving);  We can also override a property if the keys are the same (interactive example): const watson = { name: &quot;John Watson&quot;, address: &quot;123 Fake Road&quot;, }; const watsonAfterMoving = { ...watson, address: &quot;221b Baker Street&quot;, }; console.log(watson); console.log(watsonAfterMoving);  Notice how Watson &quot;moves&quot; from &quot;123 Fake Road&quot; to &quot;221b Baker Street&quot;? Because the address key is in both objects, the second one &quot;wins&quot; and overrides the other key. "},{"title":"Computing Property Names​","type":1,"pageTitle":"React Further Reading - Multiple Form Fields","url":"/react/week-3/further-reading/multiple-form-fields#computing-property-names","content":"The second bit of new syntax ([event.target.name]) is called a computed property name. Inside a JavaScript object, you can use a variable wrapped in square brackets which acts as a dynamic key, such as (interactive example): const theKey = &quot;hat&quot;; const theValue = &quot;Deerstalker Cap&quot;; const sherlockClothes = { [theKey]: theValue, }; console.log(sherlockClothes); // =&gt; { hat: &quot;Deerstalker Cap&quot; }  We are combining all of the concepts above to make a new object, that has all the same properties as the userData object, except for the property that is computed from event.target.name for the key and event.target.value for the value. Exercise A1. Open the pokedex React application again and open the src/CaughtPokemon.js file. 2. Change your CaughtPokemon component to use an object for the pokemonNameInput state. Use the pattern above to update state in handleInputChange. 3. Add another &lt;input&gt; field to the component which the user can use to write a description of the Pokemon. "},{"title":"Coursework","type":0,"sectionRef":"#","url":"/react/week-3/homework","content":"","keywords":""},{"title":"1) In Class Exercises​","type":1,"pageTitle":"Coursework","url":"/react/week-3/homework#1-in-class-exercises","content":"If you haven't already, complete the in-class exercises on your pokedex app. "},{"title":"2) CYF Hotel (5 hours)​","type":1,"pageTitle":"Coursework","url":"/react/week-3/homework#2-cyf-hotel-5-hours","content":"Complete all of the Lesson 3 exercises in the cyf-hotel-react project: https://github.com/CodeYourFuture/cyf-hotel-react#lesson-3. You can also try to complete the Stretch Goal exercises in the cyf-hotel-react homework: https://github.com/CodeYourFuture/cyf-hotel-react#stretch-goals. "},{"title":"3) Challenges (15 hours+) (Recommended)​","type":1,"pageTitle":"Coursework","url":"/react/week-3/homework#3-challenges-15-hours-recommended","content":"The best way to get better at React is to practice by building small projects. Continue to work on your projects from previous weeks. Complete as many of the projects as you can before the next lesson. Baby Names Picker - All LevelsCountries - All levelsJob Listing - All levels If you want to work on a new project you could start working on: TFL Lines Challenge "},{"title":"4) Prepare for the next class​","type":1,"pageTitle":"Coursework","url":"/react/week-3/homework#4-prepare-for-the-next-class","content":"Next week we'll be starting Node which means we'll be be buildings APIs Watch all of the videos on this webpage https://shiffman.net/a2z/server-node/ This includes the following videos What is Node? https://www.youtube.com/watch?v=RF5_MPSNAtU What is NPM? https://www.youtube.com/watch?v=s70-Vsud9Vk Express Basics https://www.youtube.com/watch?v=6oiabY1xpBo Routes with Express https://www.youtube.com/watch?v=e4qKBkwwkNg Routes with Parameters https://www.youtube.com/watch?v=oMhAd864bBc "},{"title":"5) CodeWars (1 hour)​","type":1,"pageTitle":"Coursework","url":"/react/week-3/homework#5-codewars-1-hour","content":"https://docs.codeyourfuture.io/course-processes/running-the-course/codewars#codeyourfuture-collections Every week you need to complete at least three kata. Spend at least 20 minutes, three times a week, on your kata workout. This week you must choose your own kata, based on what you know you need to practice. Upcoming milestone: Check your levels. Before you are accepted on to a Final Project on the developer track, you need to complete the Final Projects collection and reach a Level 5 kyu in Codewars. Are you on track to reach this standard? Have you run a study group to work on kata? Have you reached out on the #cyf-codewars channel? What is your plan to meet this goal? "},{"title":"Instructor Notes","type":0,"sectionRef":"#","url":"/react/week-3/instructors","content":"","keywords":""},{"title":"Questions and Help​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-3/instructors#questions-and-help","content":"We highly recommend joining the relevant Slack Channel for this module. In this channel you can ask questions, get advice from previous teachers and discuss lesson content. cyf-module-react For general Syllabus feedback and help you can post in cyf-syllabus "},{"title":"Resources​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-3/instructors#resources","content":"Quiz - React Module - 28/04/2019 Created by London and Ali Smith "},{"title":"Solutions​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-3/instructors#solutions","content":"PokeDex In-Class - Exercise Solution - 05/06/2020 Created by London and Ali SmithThese are now embedded into the syllabus itself, see demos folder for source Hotel Homework - Solution - 24/07/2020 Created by Manchester and Dorota Sobkow "},{"title":"Notes for instructors​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-3/instructors#notes-for-instructors","content":""},{"title":"Updating data when props change​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-3/instructors#updating-data-when-props-change","content":""},{"title":"\"Lifecycle\" of a component​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-3/instructors#lifecycle-of-a-component","content":"With Hooks, we don't really talk about the &quot;lifecycle&quot; of a component any more, but this section is intended to show exactly what happens at each step in the code. Walking through the code like this is sometimes called &quot;playing computer&quot;. A step-by-step description has been provided in the syllabus, but this was intended as revision material. It is recommended to keep the code example on the screen and walk through each line together with the trainees. To keep trainees engaged, it can be useful to ask them to predict what the next step does. This also allows you to get feedback on whether a trainee is following or not. At the end of the &quot;playing computer&quot; ask whether the trainees have spotted the bug in the logic: the effect is not updating when the prop changes. Therefore the key point to emphasize is that useEffect is not queued when the component re-renders. "},{"title":"ESLint rule for React Hooks​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-3/instructors#eslint-rule-for-react-hooks","content":"Emphasize that the rule likely knows best, so if it suggests adding a dependency it is recommended to add it. "},{"title":"Interactive Example Index​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-3/instructors#interactive-example-index","content":"State recapData fetching recapEffects with prop updates (not working) (used in &quot;playing computer&quot; exercise)Effects with prop updates (working)Fetch with loading state (on initial load)Fetch with loading state (between prop changes)Controlled componentControlled component with multiple fieldsObject spread operatorObject spread operator with overridesComputed property names "},{"title":"Exercise solutions​","type":1,"pageTitle":"Instructor Notes","url":"/react/week-3/instructors#exercise-solutions","content":"BestPokemonSelector component for copying into dependencies array exerciseBestPokemonSelector exercise (starting point after copy/pasting)BestPokemonSelector exercise (completed)CaughtPokemon exercise (starting point)CaughtPokemon exercise (completed) "},{"title":"Learning Objectives","type":0,"sectionRef":"#","url":"/react/week-3/learning-objectives","content":"","keywords":""},{"title":"React Week 3​","type":1,"pageTitle":"Learning Objectives","url":"/react/week-3/learning-objectives#react-week-3","content":""},{"title":"Data fetching​","type":1,"pageTitle":"Learning Objectives","url":"/react/week-3/learning-objectives#data-fetching","content":"Show some data from an API in a component. Can explain why a loading state is necessary when fetching data as the result is not available on the initial renderBe able to trigger fetch() using the useEffect() callback, with an empty array ([]) as the 2nd dependencies argumentBe able to store data from a successful API call in stateAllow effects to update in response to prop changes Explain why a component with an effect dependent on props is broken with empty useEffect() dependencies ([])Be able to fix a component with an effect dependent on props using the useEffect() dependenciesCan describe the &quot;lifecycle&quot; of a component with useEffect() when props change "},{"title":"Forms​","type":1,"pageTitle":"Learning Objectives","url":"/react/week-3/learning-objectives#forms","content":"Create a simple form in React using the controlled component pattern Can initialise state with useState()Be able to set the input value to the state variableCan explain why the input does not change when typing if onChange is not setBe able to update the state using an onChange handler Use data from a submitted form to update the application Be able to handle an onSubmit event to the formBe able to collect the form state variables and use them (setting state, POST request) "},{"title":"React - Week 2","type":0,"sectionRef":"#","url":"/react/week-2/lesson","content":"","keywords":""},{"title":"Recap​","type":1,"pageTitle":"React - Week 2","url":"/react/week-2/lesson#recap","content":"Last week we looked at how to write a HelloMentor React component (interactive example): Greeting.js function Greeting() { return &lt;span&gt;Hello&lt;/span&gt;; }  Mentor.js function Mentor(props) { return &lt;span&gt;{props.name}&lt;/span&gt;; }  index.js import Greeting from &quot;./Greeting&quot;; import Mentor from &quot;./Mentor&quot;; function HelloMentor() { return ( &lt;div&gt; &lt;Greeting /&gt; &lt;Mentor name=&quot;Ali&quot; /&gt; &lt;/div&gt; ); }  "},{"title":"Handling events​","type":1,"pageTitle":"React - Week 2","url":"/react/week-2/lesson#handling-events","content":"So far we have only looked at React apps that are &quot;static&quot;: they don't respond to user input. This week we will look at making our apps dynamic. "},{"title":"Recap: First-class functions in JavaScript​","type":1,"pageTitle":"React - Week 2","url":"/react/week-2/lesson#recap-first-class-functions-in-javascript","content":"Before we look more at React we need to recap a concept in JavaScript. You may remember that functions in JavaScript are &quot;first class&quot; - that means we can pass a reference to a function (as a variable) and then call it elsewhere. Let's look at an example (interactive example): function hello() { return &quot;Hello!&quot;; } console.log(hello); // Logs: &quot;ƒ hello() {}&quot; console.log(hello()); // Logs: &quot;Hello!&quot;  In the example above hello is a reference to a function. In the first console.log we log out the whole function. The function is not called until we use parentheses (), so we only log the string &quot;Hello!&quot; in the second console.log. This is a really important and useful in React, as we can make a function and pass it to React so that it can call it when a user interacts with our app. "},{"title":"Event handlers in components​","type":1,"pageTitle":"React - Week 2","url":"/react/week-2/lesson#event-handlers-in-components","content":"In previous lessons we learned how to attach event listeners with addEventListener: // Create an event handler function logWhenClicked() { console.log(&quot;buttonElement was clicked!&quot;); } // Listen for events and call the event handler when triggered buttonElement.addEventListener(&quot;click&quot;, logWhenClicked);  We still need to listen to events in React, but event handlers are set up in a slightly different way (interactive example): function ClickLogger() { function logWhenClicked() { console.log(&quot;Button was clicked!&quot;); } return &lt;button onClick={logWhenClicked}&gt;Click me!&lt;/button&gt;; }  Every element in React has some special props that start with on that can be assigned to a function which will be called when the event is triggered. Here's a few examples (a full list is available here): onClick - the element was clickedonCopy - the clipboard is used to copy some textonKeyDown - a key is pressed downonBlur - the element loses &quot;focus&quot;onChange - only available for &lt;input&gt; &amp; &lt;select&gt; (and a few others), triggered when changedonDoubleClick - the element was double-clicked!onPlay - a video starts playingonSubmit - a form element is submitted Notice that just like with addEventListener above, we pass the function reference to onClick instead of calling the function. If we call the function, it will run the function when we render, not when the user clicks on the button. (Remember that rendering is the term in React for inserting into the DOM). note Think of it like this: we give the event handler to React, so that React can call our function when the element is clicked. Exercise A (estimate: 15 min)​ Exercise In this exercise we will extend our Logo component to log to the console when clicking on the image. Welcome to the Pokedex You should then complete the following steps: Open the pokedex React application from last week and open the Logo.js file.Add a function named logWhenClicked within the Logo component. (Hint: look at the example above).In the logWhenClicked function, console.log a message (it doesn't matter what the message is).Add an onClick handler to the &lt;img&gt; that will call logWhenClicked. (Hint: look at the ClickLogger component above).In your web browser, try clicking on the logo image. What do you see in the JavaScript console?In a group of 2 - 3 trainees, discuss what would happen if you changed your code to onClick={logWhenClicked()}. Can you explain why?Report your discussion back to the rest of the class. "},{"title":"Passing Functions as Props​","type":1,"pageTitle":"React - Week 2","url":"/react/week-2/lesson#passing-functions-as-props","content":"Sometimes we need to pass a function to another component as a prop, so that it can handle the event. A common example for this is a Button component. This component adds some styling to a normal &lt;button&gt;, but still needs to be able to pass an event handler function to onClick. Let's look at an example (interactive example): function ClickLoggerApp() { function logWhenClicked() { console.log(&quot;Button was clicked&quot;); } return ( &lt;div&gt; &lt;FancyButton handleClick={logWhenClicked} /&gt; &lt;p&gt;Then look in the console.&lt;/p&gt; &lt;/div&gt; ); } function FancyButton(props) { return ( &lt;button className=&quot;my-fancy-classname&quot; onClick={props.handleClick}&gt; Click Me! &lt;/button&gt; ); }  Notice how this is very similar to the example above where we created the handler and used it in the same component? The only difference here is that we are passing the function reference through a prop. We could even pass it through multiple components as props. Exercise B (estimate: 15 min)​ Exercise In this exercise, we'll move the logWhenClicked function in the Logo component to the App component. Then we'll make App pass those variables as props to the sub-components. Your app should still look the same in your browser as Exercise A. Open the pokedex React application and open the Logo.js file.Copy and paste the logWhenClicked function from the Logo component to the App component.Pass the logWhenClicked function reference as a prop to the Logo component. (Hint: look at the ClickLoggerApp component above for an example).In the Logo component change the onClick prop so that it passes props.handleClick. (Hint: look at the FancyButton component above for an example). |In a group of 2 - 3 trainees, discuss what you think will happen when you click the logo image now. Can you explain why?Report back to the rest of the class what you thought was going to happen and why. "},{"title":"Re-rendering components​","type":1,"pageTitle":"React - Week 2","url":"/react/week-2/lesson#re-rendering-components","content":"So far we've seen that when the page loads, React calls our function components. The JSX elements that are returned from the component functions are turned into the DOM for you by React. To be able to react to changes, we need to re-render our function components to get different JSX elements. React can then update the DOM based on the new JSX elements. Let's look at how a component is re-rendered (interactive version): function Counter(props) { console.log(`Rendering. props.likeCount is ${props.likeCount}`); return &lt;button id=&quot;like-button&quot;&gt;Likes: {props.likeCount}&lt;/button&gt;; }  If you look in the console, you'll see that the component is rendered once when the page loads. props.likeCount starts at 0, so React inserts &quot;Count: 0&quot; into the DOM. We won't look at how this works at the moment, but behind the scenes there is some code that will listen for clicks on the button and force React to update. That means when you click the button, the function component is called again (or re-rendered). Now props.likeCount is 1. React now updates the DOM to make sure it shows the correct number. Every time we click the button, the function component is called and React updates the DOM for us. We don't need to worry about changing the DOM ourselves! This is what makes React so powerful. Even better, React will figure out exactly the right bits of the DOM that need to be changed, a concept called the &quot;virtual DOM&quot;. This makes it extremely efficient and fast. "},{"title":"State​","type":1,"pageTitle":"React - Week 2","url":"/react/week-2/lesson#state","content":"State is a general concept in software engineering. It is used when a part of your app needs to &quot;remember&quot; something that changes when people interact with it.  This is a simple example, but if we had lots of bits of state, then we can make very complex apps. "},{"title":"React Hooks​","type":1,"pageTitle":"React - Week 2","url":"/react/week-2/lesson#react-hooks","content":"React has built-in functionality for initialising and updating state in our components. We will access state via a React Hook called useState. Hooks are a new-ish feature in React. You may find older tutorials that don't use Hooks, but don't panic. The concepts we learn here are the same whether or not you use Hooks. We are looking at Hooks first because they are simpler to learn for beginners. "},{"title":"Importing useState​","type":1,"pageTitle":"React - Week 2","url":"/react/week-2/lesson#importing-usestate","content":"To be able to access the useState Hook, we first need to import it from the React package. Let's look at an example (interactive example): import React, { useState } from &quot;react&quot;; console.log(useState);  If we look at the console, useState is just a function. It lives inside the React code that you installed when you created the app. To reference the useState function in our component, we need to import it from the React code. The curly braces around useState are a bit like writing: import React from &quot;react&quot;; let useState = React.useState;  In fact we can just write React.useState in our component if we want! But to type a bit less code, we import it (using the curly braces) once and then can just use useState. "},{"title":"Using useState​","type":1,"pageTitle":"React - Week 2","url":"/react/week-2/lesson#using-usestate","content":"Now let's look at how we can use the useState Hook (interactive example): function Counter() { const [count, setCount] = useState(0); return &lt;p&gt;You clicked {count} times&lt;/p&gt;; }  Let's break this down into small pieces. First, let's look at calling the useState function: useState(0);  This initialises the state variable to 0. Any parameter passed to useState will be used as the initial value. Next, let's look at how we render the state variable in our component: return &lt;p&gt;You clicked {count} times&lt;/p&gt;;  count is just a variable, so to insert it into our JSX we treat it like any other variable: we use curly braces. Finally, let's look at how we get hold of the count variable: const [count, setCount] = useState(0);  If you remember back to JS Core 3 Week 3, we covered destructuring. As a reminder, you can assign variables to parts of an array with destructuring: let [firstWord, secondWord, thirdWord, fourthWord] = [ &quot;Hello&quot;, &quot;Code&quot;, &quot;Your&quot;, &quot;Future&quot;, ]; console.log(firstWord); // Prints &quot;Hello&quot; console.log(secondWord); // Prints &quot;Code&quot; console.log(thirdWord); // Prints &quot;Your&quot; console.log(fourthWord); // Prints &quot;Future&quot;  In React, useState will always return an array with two items. The first item in the array is the current value of the count state. In our example it will be 0 on the first render. The second item in the array is a function that we will use to update our state. note Follow the useState naming convention. When we destructure an array, we can name the variables whatever we want, but there is a naming convention when destructuring the useState array. The first variable should be named whatever your state is called, and the second variable should be the same name but prefixed with set. Let's look at some examples: const [userIsLoggedIn, setUserIsLoggedIn] = useState(false); const [username, setUsername] = useState(&quot;chris&quot;); const [unreadMessages, setUnreadMessages] = useState(5);  Exercise C (estimate: 10 min)​ Exercise Open this CodeSandbox.Take a few minutes to read the code. Why do you think the app is broken?Initialise a new state variable with useState that will fix the app. Think carefully about how you should name the variables.Discuss with another trainee how you would create another state variable that represents the weather conditions (e.g. sunny, rain). "},{"title":"Updating State​","type":1,"pageTitle":"React - Week 2","url":"/react/week-2/lesson#updating-state","content":"Our Counter isn't very useful right now! Let's make it more useful by getting count to actually count up (interactive example): function Counter() { const [count, setCount] = useState(0); function incrementCount() { setCount(1); } return ( &lt;div&gt; &lt;button onClick={incrementCount}&gt;Click me&lt;/button&gt; &lt;p&gt;You clicked {count} times&lt;/p&gt; &lt;/div&gt; ); }  Our component now has a &lt;button&gt;, which will call the incrementCount function when clicked: &lt;button onClick={incrementCount}&gt;Click me&lt;/button&gt;  The incrementCount function calls setCount to set the new state to be 1: function incrementCount() { setCount(1); }  setCount does two things. First, it updates the state that our component is &quot;remembering&quot;. Whatever you pass as the argument to setCount will be remembered as the new state. It also tells React that the old state that is still shown in the DOM is outdated and so the DOM needs to change. Because of this, React will re-render all of our components to figure out what to change in the DOM. When re-rendering, React will call our Counter component again, but this time when we call useState it will give us the updated state of 1, instead of the initial state of 0: function Counter() { const [count, setCount] = useState(0); ... }  On the second render, count is now set to 1. If we wanted to set the state to a different value, then we pass a different value to setCount. Setting state based on previous state​ You might have noticed that our Counter app isn't very useful... It can only count to 1! You might think that we could do something like this (interactive example): danger This code has a bug! function incrementCount() { setCount(count + 1); }  However, this code has a bug. Let's see what happens if we put 2 setCount calls within incrementCount (interactive example): function incrementCount() { setCount(count + 1); setCount(count + 1); }  If you click the button, then the counter will only count up to 1. This is because the count variable does not actually update until the component re-renders and useState gives a new value of count. We can see this if we put a console.log(count) in-between the setCount calls. As you can see, count remains at 0, even after we try to update it to 1. This means that in the second setCount call we are actually still trying to update the state to 1! To fix this problem, there is another way we can call setCount if we always need to get the latest version of state when setting it (interactive example): function incrementCount() { setCount((c1) =&gt; { return c1 + 1; }); setCount((c2) =&gt; { return c2 + 1; }); }  When we pass a callback function to setCount, React will pass us the latest version of the count state. In this example, the variables are named c1 and c2 to make it clear that they are different from the count variable. Now if we add console.log(c1) and console.log(c2) then we can see that they get the correct values. Reminder: c1 and c2 are just arbitrary names we pick to be the name of the parameter to the function we're passing - we could have called them both c, and everything would still work - they're not related to each other, as they are defined in different scopes. tip If you need to calculate the new state based on the old state, then use the callback function to make sure the variable is up-to-date. Exercise D (estimate: 20 min)​ Exercise In this exercise, we'll add a button to the CaughtPokemon component which adds one to the number of Pokemon you have caught: Caught 0 Pokemon on 3/22/2023Catch Pokemon You should complete the following steps Open the pokedex React application and open the CaughtPokemon.js file.Create a new state variable with useState. It should be named caught and be initialised to 0Within the JSX, there should be a &quot;hard-coded&quot; number 0. Replace it with your new caught state.Add a button to the component with an onClick handler that calls a function called catchPokemon.Create the catchPokemon function and have it update the caught state so that it is increased by 1 on each click. Click here if you are stuck. You will need to call the set state function (the 2nd item in the useState array) with caught + 1. Write down the things that will happen when you click the button. Compare your list with another trainee and discuss. Click here for a hint. The state will be updated to be the current state + 1. React is notified that our state has changed, so it re-renders. When rendering, the current state will be different and so React updates the DOM. Don't mutate State​ As we just learned, setCount updates the state for us, but it also notifies React of changes. If you try to just change the count variable without using setState, nothing will happen, because React wouldn't be notified of the change. You can only modify (or mutate) state using the setter function (interactive example): function Counter() { let [count, setCount] = useState(0); function handleClick() { count = count + 1; } return ( &lt;div&gt; Count: {count} &lt;button onClick={handleClick}&gt;Click&lt;/button&gt; &lt;/div&gt; ); }  "},{"title":"Where does State live?​","type":1,"pageTitle":"React - Week 2","url":"/react/week-2/lesson#where-does-state-live","content":"We have talked about how a component &quot;remembers&quot; state. In fact, each component instance remembers separate state from other components. This means we can have multiple different Counters, each with a different state (interactive example): function App() { return ( &lt;div&gt; &lt;Counter /&gt; &lt;Counter /&gt; &lt;Counter /&gt; &lt;/div&gt; ); }  "},{"title":"More complex states​","type":1,"pageTitle":"React - Week 2","url":"/react/week-2/lesson#more-complex-states","content":"The examples we've looked at so far have used numbers, strings and booleans. You can also use arrays and objects in state too. Let's take a look at an example (interactive example). function ShoppingList() { const [list, setList] = useState([]); function addToList() { setList(list.concat(&quot;Bread&quot;)); } return ( &lt;p&gt; &lt;button onClick={addToList}&gt;Add item to list&lt;/button&gt; {list.map((item, index) =&gt; { return &lt;li key={index}&gt;{item}&lt;/li&gt;; })} &lt;/p&gt; ); }  In this shopping list example, we're initialising the list state to be an empty array. To display our list we loop through the array (like we learned last week) and render an &lt;li&gt; for each item in the list. When we want to add something to the list, we can use the list.concat method to make a new array with the new item. This new array is then set as the new state. Right now, our example is not very useful as it can only add Bread to the list! Next week, we'll look at how we can allow users to write their own items to the list. tip Don't use the array push method with state. Instead use the array concat method. The list.push method won't work here, as this method mutates the existing array. React requires a completely new array to be set as the new state, otherwise it doesn't realise that the value has changed. The concat method works because it copies the whole existing array to a brand new array before it adds the new item. Exercise E (estimate: 15 min)​ Exercise In this exercise, we'll change the CaughtPokemon component to show a list of Pokemon that we have caught instead of a number: Caught 0 Pokemon on 3/22/2023 Catch Pokemon Open the pokedex React application and open the CaughtPokemon.js file.Change the useState to be initialised to an empty array ([])There will now be a bug in your app! We don't see how many Pokemon we have caught. Discuss with another trainee what you think the problem is.Change the JSX to instead render caught.length. Does this fix the bug?Let's now show the names of the Pokemon we have caught. Render a &lt;ul&gt; element within the component. Then use the map method to loop through each item in the caught array and render it in an &lt;li&gt; element.Change the catchPokemon function to add a new Pokemon (it doesn't matter which one) onto the caught array. (Hint: use the concat method.)(STRETCH GOAL) Generate a random Pokemon each time you click the button Click here if you're stuck. This StackOverflow post may be helpful. "},{"title":"Setting multiple States​","type":1,"pageTitle":"React - Week 2","url":"/react/week-2/lesson#setting-multiple-states","content":"So far we've only seen an example with one state variable. But you can create multiple state variables if you want! Let's see an example (interactive example): function Weather() { const [temperature, setTemperature] = useState(15); const [conditions, setConditions] = useState(&quot;sunny&quot;); function makeItHotter() { setTemperature(temperature + 1); } function makeItColder() { setTemperature(temperature - 1); } function makeItSunny() { setConditions(&quot;sunny&quot;); } function makeItRainy() { setConditions(&quot;rainy&quot;); } return ( &lt;div&gt; &lt;h1&gt;Today's Weather&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;Temperature will be {temperature}°C&lt;/li&gt; &lt;li&gt;The conditions will be {conditions}&lt;/li&gt; &lt;/ul&gt; &lt;hr /&gt; &lt;button onClick={makeItHotter}&gt;+&lt;/button&gt; &lt;button onClick={makeItColder}&gt;-&lt;/button&gt; &lt;button onClick={makeItSunny}&gt;Make it sunny&lt;/button&gt; &lt;button onClick={makeItRainy}&gt;Make it rainy&lt;/button&gt; &lt;/div&gt; ); }  "},{"title":"When do you use Props or State?​","type":1,"pageTitle":"React - Week 2","url":"/react/week-2/lesson#when-do-you-use-props-or-state","content":"We've looked at the 2 main ways of managing data in our React components. But when should we use props and when should we use state? Remember that props are like &quot;arguments&quot; to a component. It's good practice to make sure that you don't modify arguments after you receive them. Just like state, React prevents you from mutating them. Let's have a look at an example (interactive example): function Greeting(props) { function handleThing() { props.name = &quot;Mozart&quot;; } return ( &lt;div&gt; &lt;p&gt;Hello {props.name}&lt;/p&gt; &lt;button onClick={handleThing}&gt;Click me&lt;/button&gt; &lt;/div&gt; ); }  When you click the button, you might expect the name prop to change to &quot;Mozart&quot;. But it doesn't! React has made props read-only, which is a reminder that we shouldn't change props. If we were allowed to change props, React doesn't have a way of telling that we've changed the data. Our UI is now stale - not up-to-date with the latest data - and has no way of knowing that it has to re-render. From this we can get a clue about when to use state. If data changes over time, then we need to use state. My rule of thumb is that I always use props until I know that it needs to change over time, then I convert it to state. Exercise F (estimate: 10 min)​ Exercise Open this CodeSandbox.Take a few minutes to read the code. Discuss with another trainee what you think will happen when you click on the highlighted word. |Now click on the highlighted word. Can you explain why this happened?Fix the app so that clicking on the highlighted word will change the highlight color to purple. "},{"title":"Further Reading​","type":1,"pageTitle":"React - Week 2","url":"/react/week-2/lesson#further-reading","content":"What happens if you forget to pass a prop to a component? Or if you pass the wrong type of data to a component? Sometimes React will just render an empty element but sometimes it could throw an error! This is why propTypes are useful. This page on the React documentation describes how to use propTypes in more detail. Exercise G (OPTIONAL)​ Exercise Complete the FreeCodeCamp exercise on propTypes: Use PropTypes to Define the Props You Expect. "},{"title":"Coursework​","type":1,"pageTitle":"React - Week 2","url":"/react/week-2/lesson#coursework","content":"Click here to view the coursework for this lesson. "},{"title":"Feedback​","type":1,"pageTitle":"React - Week 2","url":"/react/week-2/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Overview","type":0,"sectionRef":"#","url":"/workshops/accessibility/","content":"","keywords":""},{"title":"Content​","type":1,"pageTitle":"Overview","url":"/workshops/accessibility/#content","content":"Week1. Intro to Accessibility 2. Accessibility for Devs "},{"title":"Learning Objectives​","type":1,"pageTitle":"Overview","url":"/workshops/accessibility/#learning-objectives","content":"In this series of workshops we cover the following Learning Objectives "},{"title":"1. Intro to Accessibility​","type":1,"pageTitle":"Overview","url":"/workshops/accessibility/#1-intro-to-accessibility","content":"Participants will be able to: List the 4 main groups of disabilities (visual, hearing, motor, cognitive)Define what accessibility isRecall some specific conditions for each categoriesDefine what an invisible disability is and give some examplesDefine situations where you can experience an accessibility issue, for touch, see, hear and speak or a combination of more than one of them (could be done as coursework)List some reasons why accessibility is important to considerIllustrate what each letter in SCULPT meanApply advice to check colours and give good text links and alt textsCreate an alternative text when sharing photo on social media.Identify good and bad practice in social mediaList the 4 principles of WCAG and define them in their own wordsRecall the 3 conformance levels and which one to aim forIdentify situations where respecting the guidelines is not enough for a good user experience "},{"title":"2.Accessibility for Developers​","type":1,"pageTitle":"Overview","url":"/workshops/accessibility/#2accessibility-for-developers","content":"Identify accessibility issues when basic recommendations relative to text, colours, size and motion are not followedUse contrast checkers to make sure colour choices are accessibleApply simple testsIdentify accessibility issues for keyboard only users and those using magnifying toolsUse an html checker to make sure html tags are correctly nested and validCreate good page titlesCreate good alt textsIdentify alternative practice to provide content to screen reader users onlyIllustrate good and bad use of links vs buttonsIdentify accessibility issues like incorrect heading structure, bad tab order, undescriptive link text "},{"title":"Accessibility for Developers - Basic","type":0,"sectionRef":"#","url":"/workshops/accessibility/a11y-for-devs-basic","content":"","keywords":""},{"title":"Projected Time​","type":1,"pageTitle":"Accessibility for Developers - Basic","url":"/workshops/accessibility/a11y-for-devs-basic#projected-time","content":"Lesson: 100 minutesExercises: 80 minutes "},{"title":"Prior Knowledge​","type":1,"pageTitle":"Accessibility for Developers - Basic","url":"/workshops/accessibility/a11y-for-devs-basic#prior-knowledge","content":"Here are areas that you will need to have before starting this training. Trainees should have Need to know HTML, CSS and the DOM - ideally, should also be familiar with Chrome Devtools "},{"title":"Motivation​","type":1,"pageTitle":"Accessibility for Developers - Basic","url":"/workshops/accessibility/a11y-for-devs-basic#motivation","content":"It is important to learn about this because Trainees should understand why considering accessibility is important when they are workingMany employers will look for an understanding of common accessibility patternsWe should all endeavour to make websites that everyone can use "},{"title":"Learning Objectives​","type":1,"pageTitle":"Accessibility for Developers - Basic","url":"/workshops/accessibility/a11y-for-devs-basic#learning-objectives","content":"Participants will be able to: Identify accessibility issues when basic recommendations relative to text, colours, size and motion are not followedUse contrast checkers to make sure colour choices are accessibleApply simple testsIdentify accessibility issues for keyboard only users and those using magnifying toolsUse an html checker to make sure html tags are correctly nested and validCreate good page titlesCreate good alt textsIdentify alternative practice to provide content to screen reader users onlyIllustrate good and bad use of links vs buttonsIdentify accessibility issues like incorrect heading structure, bad tab order, undescriptive link text "},{"title":"Presentation​","type":1,"pageTitle":"Accessibility for Developers - Basic","url":"/workshops/accessibility/a11y-for-devs-basic#presentation","content":"You can find the slides for this presentation here.   "},{"title":"Coursework​","type":1,"pageTitle":"Accessibility for Developers - Basic","url":"/workshops/accessibility/a11y-for-devs-basic#coursework","content":"Try this website from the GOV.UK government and see if you can find most of the issues: record-a-goose-sighting.herokuapp.com This website was created for training purposes and great to reinforce all we’ve learned today. We’ve covered most of it, but not the labels and inputs of forms or the focus which are for next classes.  "},{"title":"Workshop​","type":1,"pageTitle":"Accessibility for Developers - Basic","url":"/workshops/accessibility/a11y-for-devs-basic#workshop","content":""},{"title":"Contents​","type":1,"pageTitle":"Accessibility for Developers - Basic","url":"/workshops/accessibility/a11y-for-devs-basic#contents","content":"IntroductionText, colours and sizeWays of hiding / adding content using HTML and CSSSimple tests to do every time you develop a new featureSemantic tagsImages and other mediaLinks vs buttonsWhat next?  "},{"title":"Introduction​","type":1,"pageTitle":"Accessibility for Developers - Basic","url":"/workshops/accessibility/a11y-for-devs-basic#introduction","content":"People might use your website or app in a way you did not expect For example: Someone with dyslexia might use a screen reader even though they can seeSomeone with a motor impairment might be using a switch or their voice to interact instead of a keyboard, or a mouseSome will change the colours of your website because clear text on dark background works better for them (dyslexia, migraine, light sensitivity for example)Scrolling or motion might make a person physically sick (vestibular issues)A person with a low vision might be zooming to see or use a large mouse pointer. They might need to scroll horizontally as well as vertically Don’t interfere with people’s adaptations Because people interact in different ways, you need to make sure your code won’t interfere with the adaptations they use to improve their digital experience. Reminder: Assistive technologies are not just screen readers  "},{"title":"Text, colours and size​","type":1,"pageTitle":"Accessibility for Developers - Basic","url":"/workshops/accessibility/a11y-for-devs-basic#text-colours-and-size","content":"Font size​ 16px is the usual default text size for desktops for browsers. In the CSS, use relative sizes like rem or em instead of explicit sizes in pixels px Some users will have changed their browsers preferences, using relative sizes is best for them. rem calculates size relative to the &lt;html&gt; element, where em is calculated by the sizing of its own element. Line length and height​ A line of text shouldn’t be longer than 80 characters. Some people with reading or visual impairments have trouble keeping their place when reading long lines of text. An easy way to do this is using max-width: 70em in the CSS Ideally, give at least 1.5 for line height. Text alignment​ Main body text should be aligned to one side of the page, usually left in left-to-right languages. This makes the text easier to discover for people using text resizing or zoom. Do not justify the text as it adds spaces and makes it harder to read for people with dyslexia for example. Avoid capitals letters and italic​ Even when you use:text-transform: uppercase; Some screen readers might read the text letter by letter, assuming it’s an acronym. Italic is harder to read for a lot of people, best to avoid it too. Colours​ Poor contrast between the text colour and the background can make the text extremely difficult or impossible to read. This applies to text on images, gradients, buttons and other elements. Ensure that the colours used offer a good contrast. Colours can be checked using tools such as Tanaguru contrast finder. (also offer alternatives) Another tool to get an accessible colour palette: toolness.github.io/accessible-color-matrix Make sure the colours contrast also work: In dark mode if you have one on your website/appFor buttons on ‘hover’, but also for ‘active’ and ‘visited’ linksFocus states should be contrasted enough tooSelected text (some people use it to follow what they read) Don’t convey something using colour only (error message for example) Buttons and Links​ Are they large enough to click or tap? Is there enough space between them? Imagine you have tremor, could you select the right component or link? Let the user make changes and scroll as they wish​ Allow scrolling horizontally and verticallyDon’t prevent scrolling by using: overflow: hidden Allow resizingDon’t put: maximum-scale or user-scalable= no in your header. For example: &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; /&gt;Would prevent a user from magnifying the screen.  Your users might have selected “reduced motion” in their browser or system settings. There is a media query you can use to check this @media (prefers-reduce-motion: reduce)  More on motion​ Designing safer web animation for motion sensitivity (Alisapart) Seizure disorders (By Mozilla.org for developers) Video from Manuel Matuzovic: Writing even more CSS with Accessibility in mind (screenshot above comes from that video):  Exercise 1: Need about 10 minutes for the exercice and 5 minutes to recap together. Check this website and look for the various accessibility problems you can spot: digitaloffice.scot Remember: Font size, line length and height, text alignment,Avoid capital letters and italic, colour contrast, buttons, links,Let the user make changes and scroll, avoid motionContrast checker: accessible-colors.com "},{"title":"Ways of hiding / adding content​","type":1,"pageTitle":"Accessibility for Developers - Basic","url":"/workshops/accessibility/a11y-for-devs-basic#ways-of-hiding--adding-content","content":"... using HTML and CSS Hiding content - Why?​ Sometimes, some content might be for screen reader users only and you may not want sighted users to see it. It’s worth thinking if this really is the case though; if the content is important enough for some users, why not for others? Beware: your extra content might actually be annoying for people using a screen readers. And some people using a screen reader can see your screen too - always test with real users! Bad solutions to hide content visually​ If you want screen readers to access it, never use Display: none or visibility : hidden These will remove the content from all “displays” including screen reader “displays”. Similarly, giving an element a height or width of 0 will remove it from the content flow and most screen readers will ignore it. Right way to hide content​ Create a CSS class for text to be read by screen readers only In your CSS: .sr-only { clip: rect(1px, 1px, 1px, 1px); height: 1px; width: 1px; overflow: hidden; position: absolute !important; }  In your HTML: &lt;span class=”sr-only”&gt;message just for screen reader users&lt;/span&gt; Avoid using the ‘title’ attribute to explain your content​ Title attributes are used as tool tip. &lt;a href=”#” title=”this is my title”&gt;My link text&lt;/a&gt; But in terms of accessibility, they are usually not very good because a lot of users will never see them: Keyboard only usersTouch devices userMight not be voiced by a screen readerOr might be announced twice if your screen reader do pick it up "},{"title":"Simple tests​","type":1,"pageTitle":"Accessibility for Developers - Basic","url":"/workshops/accessibility/a11y-for-devs-basic#simple-tests","content":"... to do every time you develop a new feature You would always test your code before you deploy a new feature. Add the following tests each time: No mouse, keyboard only, tabbing through - can you access everything? Does the order make sense?400% zoom - can you still use your website or app?Use on a small screen Can you still select a link, use all the componentsAre tables, images and graphics still visible? Just like automatic checkers, this is good but not enough. The best way to test is always with real people with diverse needs! Exercise 2: Need about 10 minutes for the exercice and 5 minutes to recap together. Try using LinkedIn without a mouse or zooming up to 400%Do you have a website or portfolio? Try these tests too.Note all the things that become harder to do, we will discuss after. "},{"title":"Semantic tags​","type":1,"pageTitle":"Accessibility for Developers - Basic","url":"/workshops/accessibility/a11y-for-devs-basic#semantic-tags","content":"HTML gives your content a structure and a meaning​ Native elements/tags have accessibility features built in. Your browser and other user agents (screen readers for example) will know what functionality and basic style is needed for them: Add the expected bullet points if you use &lt;ul&gt; and &lt;li&gt;&lt;a&gt; will be a linkText between &lt;p&gt; tags will be a paragraph of normal text&lt;h1&gt; will a bigger text for headingThe code between &lt;header&gt; tags will have the role of a banner How it works for a screen reader​ When we visit a webpage, the browser generates an AOM (Accessibility Object Model), like the DOM but for accessibility information. The browser can send this accessibility information to the Operating System's accessibility framework using the APIs. Assistive technologies like screen readers get that information and learn about each element, their current state, and how to interact with them. How a screen reader treats a link​ For example, this line of code: &lt;a href=&quot;https://tink.uk&quot;&gt;Tink UK&lt;/a&gt; The screen reader: Identifies the element’s role as “link”Uses the text content inside it to give the link an accessible nameMakes this information available in synthetic speech You hear: “Tink UK . Link.” Don’t make everything a &lt;div&gt;!​ Writing semantic code means choosing the most appropriate element to define the structure you want to create. Don’t use a &lt;div&gt; if there is a more appropriate tag with a well defined role attached to it. For example: &lt;div class=&quot;”row”&quot;&gt; &lt;div class=&quot;”item”&quot;&gt;&lt;span&gt;item 1&lt;/span&gt;&lt;/div&gt; &lt;div class=&quot;”item”&quot;&gt;&lt;span&gt;item 2&lt;/span&gt;&lt;/div&gt; &lt;/div&gt;  With some CSS styling it might end up looking like a bullet point list on screen, but it will make no sense to a screen reader. Just use the appropriate element: &lt;ul&gt; &lt;li&gt;item 1&lt;/li&gt; &lt;li&gt;item 2&lt;/li&gt; &lt;/ul&gt;  Main semantic tags​ Headings &lt;h1&gt; &lt;h2&gt; &lt;h3&gt; &lt;h4&gt; &lt;h5&gt; and &lt;h6&gt;Links &lt;a&gt; and buttons &lt;button&gt;Header: this container element will be commonly placed at the top of the page and it is used to place the logo, name, author information and main navigation of the siteMain: contains the main content of the web site. A document must not have only one and the content must be unique. Repeated elements like sidebars, footer, site logo,should not be in &lt;main&gt;Footer: this is the element that we use at the end of the page (navigation, copyright information, contact information)Nav: has the main navigation links that map the content of the websiteSection: contains a section of the document that groups content that is related one to othersArticle: should be used to contain standalone content. For example, inside a section element that lists blog posts, every single post would be enclosed by an article elementAside: container for a section of the document that is not directly related to the main content.Usually located on the right or left part of the webpage as sidebars or interesting notesMarks your list properly &lt;ol&gt; or &lt;ul&gt; and then &lt;li&gt; Mark your page structure with landmark roles​ Use role attribute with &lt;div&gt; or HTML5 elements to make sure assistive technology will work with them. Some don’t support HMTL5 elements like &lt;section&gt; or &lt;main&gt;  Content order must be logical​ Assistive technologies will usually interact with the content in the order it appears within the HTML, and recreate the path that visually impaired users will cross. Screen readers need all elements on the page to be correctly identified to provide a smooth user experience.→ most common problems for a person using screen reader. Be careful how you nest elements. Validate your HTML using tools like validator.w3.org for example. Proper header stepping​ Headings communicate the organisation of a page. Screen readers will pick up your structure and a lot of screen readers users are using this to create a mental image of your page. headings are ranked from &lt;h1&gt;, the most important, to &lt;h6&gt; the least.A &lt;h1&gt; tag on each page which contain the most important informationShort and meaningful heading text which describes what the section is about - will also improve your SEO (= Search Engine Optimisation)Headings should separate content into meaningful sectionsDon’t use bold, italicise, underline or bigger font only in your style to define sectionsDon’t skip headings, for example having an &lt;h4&gt; following an &lt;h2&gt; Skipping heading is confusing​ Using the Wave plugin on the homepage of Lush, you can see that they don’t respect the heading levels. They have skipped h2.  Language​ If the page is all in one language, mark this in your html tag:&lt;html lang=”en”&gt; Screen readers will be using the correct language this way, this will also informed browsers and search engines. If some parts of your page are in a different language, then use the lang attribute for this part: For example.&lt;span lang=”fr”&gt;Bonjour! Je m’appelle Stéphanie&lt;/span&gt; List of the codes for the languages Give good titles to your pages​ Use the &lt;title&gt; element. This will be displayed in the tab of your browser and is read first by a screen reader when the page loads. If your title is meaningful, people will know they are at the right place. Be brief and precise. Start with the most specific to the most general. If you are reloading a page where there is an error, start the title with ‘Error’ and then the rest of the title, so it’s the first thing a screen reader user will hear. Good example of title​  Bad example​  Exercise 3: Need about 10 minutes for the exercice and 10 minutes to recap together. From the page link below, check the title of the next 5 pages when applying for a provisional licence.To check the title, inspect the code in the &lt;head&gt;. If the title is not good, find a better one:Applying for a provisional driving licenceIf time, use this link validator.w3.orgto see if some errors are spotted (Do this on the same pages) "},{"title":"Images and other media​","type":1,"pageTitle":"Accessibility for Developers - Basic","url":"/workshops/accessibility/a11y-for-devs-basic#images-and-other-media","content":"Alternative (alt) text​ All images and diagrams must have alternative text (alt text) describing the information or function of the image. A simple trick: imagine you are reading the page to someone over the phone. What would you say to them about the image? You can also check:Axess Lab guidance about alt text or How to write alt text and image descriptions for photo journalism images Decorative vs informative images​ If the image isn’t important to understand the content, then it’s decorative. Give the alt text an empty string value alt=””Screen readers will ignore it. If you are unsure, the W3C Web Accessibility Tutorials have a useful alt decision tree to help you decide what alternative text you need to include. If the image is important, then the extra information you get visually must be given in the alt text. Keep it to 50 characters long max. Don’t say 'image' or ‘photo’. It’s also important for more effective SEO. Diagram, icons and logos​ For a diagram, you might want to have a textual alternative available and provide a link to it as well as a shorter description in the alternative text. More here: w3.org/WAI/tutorials/images/complex For icons and logos, depending on their use, you might want to just say what they do. For example: if the top left logo of a website takes the user back to the homepage, then your alt text could be: “go to homepage” instead of describing the logo. SVG need a description too​ This is a format that allows to scale images without losing the quality. They don’t become pixelated when magnified. This is still relatively new and browsers and assistive technologies are improving their level of support for SVG. SVG image (your_file_name.svg)​ It’s very similar to other formats, add an alt text: &lt;img src=”https://path/assets/images/your-image.svg” alt=”description of your image”&gt;  If your image is a logo that takes you back to the homepage: &lt;a href=”link-to-your-home-page” &lt;img src=”https://path/assets/images/your-image.svg” alt=”go to homepage”&gt; &lt;/a&gt;  Inline SVG​ Add a role attribute. You can use the title element: &lt;svg version=&quot;”1.1”&quot; width=&quot;”340”&quot; height=&quot;”150”&quot; role=&quot;”img”&quot;&gt; &lt;title&gt;your description of the svg image&lt;/title&gt; &lt;path d=&quot;”....”&quot;&gt;&lt;/path&gt; &lt;/svg&gt;  Some screen readers might still not work properly with this and it’s best to mark the relation between the svg tag and the title: &lt;svg version=&quot;”1.1”&quot; width=&quot;”340”&quot; height=&quot;”150”&quot; aria-labelledby=&quot;”title-text”&quot; role=&quot;”img”&quot; &gt; &lt;title id=&quot;”title-text”&quot;&gt;your description of the svg image&lt;/title&gt; &lt;path d=&quot;”....”&quot;&gt;&lt;/path&gt; &lt;/svg&gt;  Using &lt;title&gt; creates a tooltip effect to your image If you don’t want this to happen, you can use &lt;desc&gt; instead: &lt;svg version=&quot;”1.1”&quot; width=&quot;”340”&quot; height=&quot;”150”&quot; aria-labelledby=&quot;”desc-text”&quot; role=&quot;”img”&quot; &gt; &lt;desc id=&quot;”desc-text”&quot;&gt;your description of the svg image&lt;/desc&gt; &lt;path d=&quot;”.......”&quot;&gt;&lt;/path&gt; &lt;/svg&gt;  Inline SVG for decorative images​ You can add aria-hidden=&quot;true&quot; like you would use alt=””But you need to make sure that there are no child HTML elements under it as it would not be read by screen readers either. &lt;svg version=&quot;”1.1”&quot; width=&quot;”340”&quot; height=&quot;”150”&quot; role=&quot;”img”&quot; aria-hidden=&quot;true&quot; &gt; &lt;path d=&quot;”&quot; ......”&gt;&lt;/path&gt; &lt;/svg&gt;  We will learn more about aria next time. More on SVG​ Sara Soueidan - Implementing Accessible Data Chartscss-tricks.com/accessible-svgstink.uk/accessible-svg-line-graphssimplyaccessible.com/article/7-solutions-svgs Exercise 4: Need about 10 minutes for the exercice and 10 minutes to recap together. Check these pages, can you do better? For example: any image on this page: digitaloffice.scot &gt; &lt;img alt=”image” ….&gt; Good example: bbc.co.uk Bad example: theguardian.comCould not find alt text for images. Check how they dealt with the Guardian logo (inline svg at the top), and the weather icons at the top (look for &lt;span class=”u-h”&gt;) - Do you understand how this is used? metoffice.gov.ukEnter a place and then check the icons, logo and photos and see what you can find If you have time, check MorrisonsA lot of images won’t have an alt tag (image is a background CSS property) but look around and you might find some good and bad examples Videos or audio files​ Avoid using Autoplay, unless you have warned the user and they can control this. You need to provide an alternative for people who can’t hear or see it. This will also be used by many people who are not native speakers, or are in a noisy environment or don’t want others to hear what they are watching for example. Captions​ Videos with audio require captions synchronised with the audio track. Everything said in the video should be included in the captions. It should include names, sounds and descriptions. 2 types of captions: Open caption: is embedded into the video itself, and cannot be turned offClosed captioning: can be turned on and off Auto-generated captions are better than nothing but usually not great: Often inaccurate, especially if the speaker has an accent or when captioning names (people, brand, places etc...) Transcripts / audio description​ Ideally, provide a transcript of your media, so users can either read it or use a screen reader to hear it. Allow users to scan the content and see if they want to engage with itCan be searched by people and search engines so better for SEO Audio descriptions speak out what is happening in the video so that it’s accessible to people with low vision. There are two ways to create audio descriptions: A narrator describes all the visual informationAdd a separate audio track that describes the visual information Example of good practice​ A video, with closed captions and a transcript. On the day of the event you also had BSL interpreters you can see on the video as well. Accessibility Scotland Conference - one of the video pages where you can see this. "},{"title":"Links vs buttons​","type":1,"pageTitle":"Accessibility for Developers - Basic","url":"/workshops/accessibility/a11y-for-devs-basic#links-vs-buttons","content":"Don’t mix them!​ If it goes somewhere → use a linkIf it does something → use a button They should be easy to spot: A link should look like all the rest of the text around it, but underlined. Or different colour, but not ideal as some people don’t see colours well enough to spot them - prefer the underlined convention. A button usually has a different colour from the background, with or without rounded corners or have an outline that makes it stand out. Good practice for links​ They should be meaningful and describe the destination or what will happen when you follow that link. Warn users if the link will take them out of your website or open a new tab or window. If the link is to download a file, inform your user of the file type and the size of it. Example: Find out if you are eligible (opens in a new tab) Skip to main content link​ A link at the top of each page that takes users directly to the main content Must be one of the first items on the pageBecomes visible on focus (using the tab key)Benefits keyboard &amp; screen reader users to navigate quickly &amp; bypass repeated content &lt;body&gt; &lt;a href=&quot;#main-content&quot; class=&quot;govuk-skip-link&quot;&gt;Skip to main content&lt;/a&gt; &lt;/body&gt;  ... ... &lt;main id=&quot;main-content&quot; class=&quot;govuk-main-wrapper govuk-main-wrapper--auto-spacing&quot; role=&quot;main&quot; &gt;&lt;/main&gt;  Exercise 5: Need about 10 minutes Quiz: Good / bad examples of links and buttons: take the quiz Warning: Ironically, this quiz is not accessible as there is no way to add alt text to images. Sorry! Some of these images might be hard to read for some: there are screenshots of screens with the code for it in a Devtool window on the right. You can see for yourself instead, on the B&amp;Q homepage and on the Halford homepage. "},{"title":"What next?​","type":1,"pageTitle":"Accessibility for Developers - Basic","url":"/workshops/accessibility/a11y-for-devs-basic#what-next","content":"Don't just stop here​ Start applying what you have learned in everything you doOn twitter or other social media, connect or follow diverse people so you can learn from what they shareGo to accessibility meet-ups, we will post them on SlackThere will be two other courses, about making your code accessibleYou won’t get it right every time, but you learn and do better next time Where to learn more​ Follow disabled peopleon Twitter and / or bookmark these: a11y projectHeydonworksAdrian Roselli - blogScott O'Hara - blogLeonie Watson Good checklist with links to WCAG resources: wuhcag.com/wcag-checklist GOVUK gov.uk/service-manual/technology/accessibility-for-developers-an-introductiongov.uk/service-manual/technology/using-progressive-enhancement Udacity has a great course that lets you try some examples and tasks Screen readers NVDA (Windows - free)VoiceOver (Mac and iPhone - built in)Voice Assistant (Android devices - built in) More resources Writing CSSWriting even more CSS with accessibility in mindWriting HTML Guidelines for developers on mobile devices support.google.com/accessibility/android/answer/6376570developer.apple.com/accessibility/ios "},{"title":"React - Week 3","type":0,"sectionRef":"#","url":"/react/week-3/lesson","content":"","keywords":""},{"title":"Recap​","type":1,"pageTitle":"React - Week 3","url":"/react/week-3/lesson#recap","content":"Last week we looked at using props and state to create React components that change with user input (interactive example): import React, { useState } from &quot;react&quot;; function Counter() { const [count, setCount] = useState(0); function increment() { setCount(count + 1); } return ( &lt;div&gt; &lt;p&gt;You clicked {count} times&lt;/p&gt; &lt;button onClick={increment}&gt;Click me&lt;/button&gt; &lt;/div&gt; ); } export default Counter;  "},{"title":"Fetching Data in React​","type":1,"pageTitle":"React - Week 3","url":"/react/week-3/lesson#fetching-data-in-react","content":"Often when you create a React app, you will want to fetch data from an API and display it inside your components. How do we do this in React? You might think that we could just fetch the data in the component like this, but unfortunately it won't work (interactive example): danger This code won't work! function MartianPhotoFetcher() { let imgSrc = null; fetch( `https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?earth_date=2015-6-3&amp;api_key=DEMO_KEY` ) .then((res) =&gt; res.json()) .then((data) =&gt; { imgSrc = data.photos[0].img_src; }); console.log(`The image src is ${imgSrc}`); return &lt;img src={imgSrc} /&gt;; }  This is because React is synchronous, while fetch is asynchronous. If we look in the console, we'll see that the imgSrc will always be null when we try to render it. React will try to render before fetch has had time to get the data from the API.  We need a way of running the fetch call after we have rendered for the first time, so that it is not racing against React updating the DOM. Then once we have got the data back we can use state to tell React to re-render with the new data.  The way we do this is with another Hook, provided by React. This one is called useEffect. "},{"title":"Importing useEffect​","type":1,"pageTitle":"React - Week 3","url":"/react/week-3/lesson#importing-useeffect","content":"Just like useState, we will import useEffect into our file like this (interactive example): import React, { useEffect } from &quot;react&quot;; console.log(useEffect);  If we look in the console, we'll see that useEffect is also a function like useState. Often, we will need to use useState and useEffect together. They are imported together like this: import React, { useState, useEffect } from &quot;react&quot;;  "},{"title":"Using useEffect​","type":1,"pageTitle":"React - Week 3","url":"/react/week-3/lesson#using-useeffect","content":"Now let's look at how to use the useEffect Hook (interactive example): function MartianPhotoFetcher() { useEffect(() =&gt; { fetch( `https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?earth_date=2015-6-3&amp;api_key=DEMO_KEY` ) .then((res) =&gt; res.json()) .then((data) =&gt; { console.log(data); }); }, []); // Always remember to put an empty array here! return &lt;div&gt;Hello useEffect!&lt;/div&gt;; }  The useEffect Hook takes two arguments: A callback function, where we can put our fetch call. In this example, we're fetching some data from the NASA API! 🚀An array, which we'll look at later but is very important that you don't forget it! note When writing your useEffect, write the &quot;skeleton&quot; first, then fill in the callback function later. // Write this bit first! useEffect(() =&gt; { // Write this bit later! }, []);  You might have noticed that we still haven't rendered the data from the API. We now need to tell React to re-render once we get the data. This sounds like a job for state! Let's look an example of how we can use state and useEffect to do this (interactive example): function MartianPhotoFetcher() { const [marsPhotoData, setMarsPhotoData] = useState(null); useEffect(() =&gt; { console.log(&quot;Fetching data from NASA&quot;); fetch( `https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?earth_date=2015-6-3&amp;api_key=DEMO_KEY` ) .then((res) =&gt; res.json()) .then((data) =&gt; { setMarsPhotoData(data); }); }, []); if (marsPhotoData) { return &lt;img src={marsPhotoData.photos[0].img_src} alt=&quot;Martian surface&quot; /&gt;; } else { return null; } }  The timeline of this component is now what we wanted at the start: The component renders for the first time. Notice that we are returning null here: if a component returns null, then React will render nothing on-screenAfter rendering, the useEffect callback is run, so it fetches data from the NASA APIWhen the response is received, we update the stateThis causes a re-render so that we can show the data on-screen You might notice that even though we re-rendered, we did not run the useEffect a second time. The way we've set it up, useEffect will only run after the first time a component renders. We'll look at controlling this in more detail later. Exercise A (estimate: 20 min)​ Exercise In this exercise, we'll fetch some data about a Pokemon's moves from the Pokemon API and render it a component: You should complete the following steps: Open the pokedex React application again.Create a new file src/PokemonMoves.js, and copy/paste the code from this CodeSandbox.Render the PokemonMoves component inside the App component (underneath CaughtPokemon).Take a few minutes to read the code in the new PokemonMoves component. Discuss with another trainee why you think it doesn't work.Create a new state variable called pokemonData and initialise it to null. Click here if you are stuck. Check last week's lesson for a reminder on creating state variables. Now add a useEffect call, but leave the callback function empty for now. Make sure you remember to add the empty array after the callback function.Inside the useEffect callback, call the fetch function with this URL: https://pokeapi.co/api/v2/pokemon/1/.Add a .then handler into the fetch function (remember this needs to come immediately after the fetch call) which converts the response from JSON (hint: .then(res =&gt; res.json())).Add a second .then handler after the one we just added, where the callback function will receive an argument called data.Within the second .then callback function, log out the data that we just received (hint: console.log(data)). Inspect the data in the dev tools console. Is there any interesting data? (Hint: think about what the component is trying to render).Still within the second .then callback, set the pokemonData state to be the data object we received from the API.What happens in your browser? Do you understand why? If not, discuss it with another trainee. If you are both stuck, ask a Teaching Assistant. "},{"title":"Conditional rendering​","type":1,"pageTitle":"React - Week 3","url":"/react/week-3/lesson#conditional-rendering","content":"In the MartianPhotoFetcher component above, we wrapped our JSX inside an if / else statement. This is common practice in React, as it allows us to show something different depending on the situation (for example if there is no data to display, show the user something else instead). You may also see this done in 2 other ways: The ternary operator ? :​ The ternary operator follows this structure condition ? outputIfTrue : outputIfFalse (interactive example): return ( &lt;div&gt; {marsPhotoData ? ( &lt;img src={marsPhotoData.photos[0].img_src} alt=&quot;Martian surface&quot; /&gt; ) : ( &lt;span&gt;Loading...&lt;/span&gt; )} &lt;/div&gt; );  The double ampersand &amp;&amp;​ The double ampersand &amp;&amp; is used when you don't have an else. The implication is that when the condition is not fulfilled, nothing will render (interactive example): return ( &lt;div&gt; {marsPhotoData &amp;&amp; ( &lt;img src={marsPhotoData.photos[0].img_src} alt=&quot;Martian surface&quot; /&gt; )} &lt;/div&gt; );  You'll notice in the &amp;&amp; example above, we do not render a 'Loading...' message, because there is no alternative output (no else case). Exercise B (estimate: 10 min)​ Exercise In this exercise, we'll change the PokemonMoves component to use a ternary operator. Your app should still look the same in your browser as Exercise A. Open the pokedex application and the src/PokemonMoves.js file.Change the if / else statement in your JSX to use the ternary operator (condition ? outputIfTrue : outputIfFalse) instead. "},{"title":"The Circle of Life​","type":1,"pageTitle":"React - Week 3","url":"/react/week-3/lesson#the-circle-of-life","content":"We now know how to fetch data and render it in our React applications. However, there was a problem with the method that just learned. To understand this problem we first have to understand the lifecycle of a component. Let's take a look at an example: Exercise C (estimate: 10 min)​ Exercise Open this CodeSandbox.Take 5 minutes to read the code.Click the &quot;Fetch image for 2019&quot; button. If you're feeling confident: predict what is going to happen before you click the button.Now click the &quot;Fetch image for 2020&quot; button. What did you expect to happen? What actually happened? Can you explain why? Together let's &quot;play computer&quot; to break down exactly what is happening with these components: When the page loads, the App function component is calledIt doesn't have any date state already, so we initialise it to an empty string (&quot;&quot;) with useStateIt renders the 2 buttons, but because date is an empty string, it does not render the MartianImageFetcher component. Instead null is returned, which means that nothing is rendered  function App() { const [date, setDate] = useState(&quot;&quot;); ... return ( &lt;div&gt; &lt;button onClick={handle2019Click}&gt;Fetch image for 2019&lt;/button&gt; &lt;button onClick={handle2020Click}&gt;Fetch image for 2020&lt;/button&gt; {date ? &lt;MartianImageFetcher photoDate={date} /&gt; : null} &lt;/div&gt; ); }  When we click the &quot;Fetch image for 2019&quot; button, the handle2019Click click handler is calledThe state is set by setDate to be &quot;2019-01-01&quot;, and a re-render is triggeredThe App function component is called againThis time, useState remembers that we have date state and it is set to &quot;2019-01-01&quot;  function App() { ... function handle2019Click() { setDate(&quot;2019-01-01&quot;); } ... return ( ... &lt;button onClick={handle2019Click}&gt;Fetch image for 2019&lt;/button&gt; ... ); }  Now App does render MartianImageFetcher and passes the date state as a prop named photoDateThe MartianImageFetcher function component is called for the first timeuseState knows that we haven't got any imgSrc state so initialises it to nullWe queue an effect, which will run after we render for the first timeBecause the imgSrc state is set to null, we return null. This means that nothing is rendered  function MartianImageFetcher(props) { const [imgSrc, setImgSrc] = useState(null); useEffect(() =&gt; { ... }, []); if (!imgSrc) { return null; } else { return &lt;img src={imgSrc} /&gt;; } }  Now that the component has rendered for the first time, the effect is runA fetch request is made to the NASA APIWhen the request data comes back, we set the imgSrc state to a piece of the data, which triggers a re-render  function MartianImageFetcher(props) { ... useEffect(() =&gt; { fetch( `https://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?earth_date=${ props.date }&amp;api_key=gnesiqnKCJMm8UTYZYi86ZA5RAnrO4TAR9gDstVb` ) .then(res =&gt; res.json()) .then(data =&gt; { setImgSrc(data.photos[0].img_src); }); }, []); ... }  The MartianImageFetcher function component is called againuseState remembers that the imgSrc state is set to the data from the APIThis time, we do not queue an effect. We set up useEffect with an empty array ([]), which means that we only run after the first renderWe do have imgSrc state set, so we render the image using the data from the API 🎉  function MartianImageFetcher(props) { const [imgSrc, setImgSrc] = useState(null); ... if (!imgSrc) { return null; } else { return &lt;img src={imgSrc} /&gt;; } }  Phew! That was a lot of work just to render an image! But we're not quite done yet, we still need to find out what happens when we click the &quot;Fetch image for 2020&quot; button: In the App component, the handle2020Click click handler is calledThe date state is set to &quot;2020-01-01&quot; and a re-render is triggeredThe App function component is called again and the date state is set to &quot;2020-01-01&quot;The date prop that is passed to MartianImageFetcher is different which means that it has to re-render  function App() { ... function handle2020Click() { setDate(&quot;2020-01-01&quot;); } ... return ( ... &lt;div&gt; ... &lt;button onClick={handle2020Click}&gt;Fetch image for 2020&lt;/button&gt; ... {date ? &lt;MartianImageFetcher photoDate={date} /&gt; : null} ... &lt;/div&gt; ... ); }  In the MartianImageFetcher component useState remembers that we already had imgSrc state. It is set to the image from 2019Again, we do not queue the effect because this is a re-render and useEffect has been passed an empty array []Because imgSrc state has been set previously we render the image from 2019  function MartianImageFetcher(props) { const [imgSrc, setImgSrc] = useState(null); useEffect(() =&gt; { ... }, []); return &lt;img src={imgSrc} /&gt;; }  Exercise D (estimate: 10 min)​ Exercise Did you spot where the bug was? Discuss with a group of 2 - 3 trainees where you think the bug is.Report back to the rest of the class where you think the bug happened. Click here to reveal the answer! The key that the useEffect in MartianImageFetcher is only run once. This is because we told React that the queue should be queued on the first render only. However, as we saw, sometimes you need the effect to run again when some data changes. In this case the date prop, changed from &quot;2019-01-01&quot; to &quot;2020-01-01&quot;, meaning that we have to fetch data different data. We call this a dependency of the effect. Any variables which are used inside the useEffect callback function are dependencies. "},{"title":"useEffect dependencies array​","type":1,"pageTitle":"React - Week 3","url":"/react/week-3/lesson#useeffect-dependencies-array","content":"To solve this problem, we can tell React to queue the effect on the first render and when a dependency changes. We do this by adding the dependency variable to the array (interactive example): function MartianImageFetcher(props) { const [imgSrc, setImgSrc] = useState(null); useEffect(() =&gt; { ... }, [props.photoDate]); ... }  Now when the photoDate prop changes, React knows that the effect must be run again, this time with the 2020 date. Because of this behaviour, the second argument to useEffect is called the dependencies argument. We use it whenever we have something in our effect function that depends on a variable outside of the effect function. Here's a diagram showing when the useEffect callback will be run:  To help you understand this better, try &quot;playing computer&quot; again, but this time think about what happens when we use [props.photoDate] for the dependencies argument. Think carefully about what changes with step 6 after we click the 2020 button. Exercise E (estimate: 15 min)​ Exercise In this exercise, we'll add some buttons which allow you to select which Pokemon's moves we will fetch from the Pokemon API: Fetch BulbasaurFetch Charmander Open the pokedex React application.Create a new file src/PokemonMovesSelector.js. Copy/paste the code from this CodeSandbox into the new file.Open src/App.js and replace the PokemonMoves component with the PokemonMovesSelector component (remember to update the import too!)Take a few minutes to read what the PokemonMovesSelector component does. If you have questions, ask a Teaching Assistant to help. We won't need to make any more changes to this component.Open the PokemonMoves component again. Change the URL to use backticks (`...`) instead of double-quotes (&quot;...&quot;). Then replace the hard-coded number 1 with ${props.pokemonId}. What will this do? Click here if you don't know The URL will contain the pokemonId instead of always fetching the Pokemon with id of 1 Open your browser and find where the PokemonMovesSelector component is rendered. Before you click the buttons, think about what you expect will happen. Then click the &quot;Fetch Bulbasaur&quot; button to find out what actually happens.Refresh the page. What happens now if you click the &quot;Fetch Bulbasaur&quot; button, then click the &quot;Fetch Charmander&quot; button? Is this what you expected? Discuss with another trainee why this happens.Fix the bug by adding props.pokemonId to the useEffect dependencies array in PokemonMoves. Remember that you can test if the bug still happens by refreshing the page, clicking one of the buttons, then the other button. | "},{"title":"ESLint rules for React Hooks​","type":1,"pageTitle":"React - Week 3","url":"/react/week-3/lesson#eslint-rules-for-react-hooks","content":"As you may have noticed, VSCode highlighted the empty dependencies array when you changed the URL passed to fetch in PokemonMoves. This is because your React application is using the rules from eslint-plugin-react-hooks, a package created by the developers who make React. It helps you to find bugs in React Hooks code by highlighting places where you might be missing dependencies. If you see a red squiggly line underneath your useEffect dependencies array, you can hover your mouse over and it will tell you which variable is missing so you can add it to the dependencies array. Here's an example:  "},{"title":"Working with forms in React​","type":1,"pageTitle":"React - Week 3","url":"/react/week-3/lesson#working-with-forms-in-react","content":"Modern web applications often involve interacting with forms such as creating an account, adding a blog post or posting a comment. This would involve using inputs, buttons and various form elements and being able to get the values entered by users to do something with it (like display them on a page or send them in a POST request). So, how do we do this in React? "},{"title":"Controlled component pattern​","type":1,"pageTitle":"React - Week 3","url":"/react/week-3/lesson#controlled-component-pattern","content":"A popular pattern for building forms and collect user data is the controlled component pattern. A pattern is a repeated solution to a problem that is useful in multiple similar cases. Let's have a look at an example (interactive example): function SimpleReminder() { const [reminder, setReminder] = useState(&quot;&quot;); function handleChange(event) { setReminder(event.target.value); } return ( &lt;form&gt; &lt;input type=&quot;text&quot; placeholder=&quot;Some reminder&quot; value={reminder} onChange={handleChange} /&gt; &lt;p&gt;Today I need to remember to... {reminder}&lt;/p&gt; &lt;/form&gt; ); }  We're controlling the value of the input by using the value from the reminder state. This means that we can only change the value by updating the state. It is done using the onChange attribute and the handleChange function which is called every time the input value changes (typically when a new character is added or removed). If we didn't call setReminder in the handleChange function, then the input's value would never change and it would appear as if you couldn't type in the input! Finally, the value we keep in the reminder state is displayed on the screen as today's reminder. In addition, instead of just saving the value of the input in the state, we could have also transformed the string before we set it with setReminder, for example by calling toUpperCase() on the string. Exercise F (estimate: 15 min)​ Exercise In this exercise, we'll create a new component where you can type in the name of a Pokemon city and see it on screen. Welcome to the city of Open the pokedex React application.Create a new file src/PokemonCity.js. Copy/paste the code from this CodeSandbox into the new file.Open the src/App.js file and render the new PokemonCity component (underneath PokemonMovesSelector).Take a few minutes to understand what the PokemonCity component does.Add an &lt;input type=&quot;text&quot; /&gt; element above the &lt;p&gt; element.Set the value attribute of the &lt;input&gt; to the city state.Create a function within the component called updateCity. Pass this function to the onChange event handler.Change the updateCity component so that it has a parameter named event.Add a console.log to inspect the value of event.target.value. What happens when you type in the input?Using setCity, update the city state to what was typed in the input box. "},{"title":"Form with Multiple Fields​","type":1,"pageTitle":"React - Week 3","url":"/react/week-3/lesson#form-with-multiple-fields","content":"Let's have a look at a more complex example where we want to build a form to let users enter information to create a personal account (interactive example): function CreateAccountForm() { const [username, setUsername] = useState(&quot;&quot;); const [email, setEmail] = useState(&quot;&quot;); const [password, setPassword] = useState(&quot;&quot;); function handleUsernameChange(event) { setUsername(event.target.value); } function handleEmailChange(event) { setEmail(event.target.value); } function handlePasswordChange(event) { setPassword(event.target.value); } return ( &lt;form&gt; &lt;div&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot; placeholder=&quot;Username&quot; value={username} onChange={handleUsernameChange} /&gt; &lt;/div&gt; &lt;div&gt; &lt;input type=&quot;text&quot; name=&quot;email&quot; placeholder=&quot;Email&quot; value={email} onChange={handleEmailChange} /&gt; &lt;/div&gt; &lt;div&gt; &lt;input type=&quot;password&quot; name=&quot;password&quot; placeholder=&quot;Password&quot; value={password} onChange={handlePasswordChange} /&gt; &lt;/div&gt; &lt;/form&gt; ); }  We now have three different inputs named username, email and password. There is a corresponding state variable and change handler function for each value. Exercise G (estimate: 15 min)​ Exercise In this exercise, we will change the CaughtPokemon component so that you can type in the name of a Pokemon that you caught and it will show in the list: Caught 0 Pokemon on 3/22/2023 Catch Pokemon Open the pokedex React application again and open the src/CaughtPokemon.js file.Render an &lt;input&gt; before the &lt;button&gt; (hint: &lt;input type=&quot;text&quot; /&gt;).Create a new state variable called pokemonNameInput and initialise to an empty string (&quot;&quot;).Add a value attribute to the &lt;input&gt; which is set to the pokemonNameInput state variable. (Hint: value={pokemonNameInput})Create a new handleInputChange function within the component.Add a onChange handler to the &lt;input&gt; that will call handleInputChange.Add a parameter called event to the handleInputChange function. Set the pokemonNameInput state variable to event.target.value. Try typing in the &lt;input&gt; again. What happens now?Change the catchPokemon function to add the pokemonNameInput state to the caught array (hint: change the value that we are passing to the concat method)Open your browser, type a Pokemon name into the &lt;input&gt; and click on the &quot;Catch Pokemon&quot; button. Do you see your new Pokemon being added to the list?Empty the &lt;input&gt; after clicking on the button. To do this, set the state of pokemonNameInput to an empty string &quot;&quot; after we have added it to the caught array in the catchPokemon function. 11: (STRETCH GOAL) Make sure the user cannot add a Pokemon to the caught state if the value of pokemonNameInput state is empty. Inlining event handlers​ We could make our code a bit shorter if we inlined our event handlers (interactive example): &lt;input type=&quot;text&quot; name=&quot;username&quot; placeholder=&quot;Username&quot; value={username} onChange={(event) =&gt; setUsername(event.target.value)} /&gt;  Centralising event handlers​ Sometimes we need to put all of our update logic in one function, maybe because we need to validate the user's input before we set it in state. We can use a single handleChange function, that is reused to keep track of changes for all of the form fields. To be able to tell which &lt;input&gt; is being updated, we check the event.target.name field. This corresponds to the name attribute on the &lt;input&gt; (e.g. &lt;input name=&quot;username&quot;&gt;). Based on this value, we then decide which state to update (interactive example): function handleChange(event) { if (event.target.name === &quot;username&quot;) { setUsername(event.target.value); } else if (event.target.name === &quot;email&quot;) { setEmail(event.target.value); } else if (event.target.name === &quot;password&quot;) { setPassword(event.target.value); } }  "},{"title":"Form submission​","type":1,"pageTitle":"React - Week 3","url":"/react/week-3/lesson#form-submission","content":"So far, our form examples don't have a way of sending the user data back to the server, so that we can store it in the database. We will be using a special submit event triggered on the &lt;form&gt; element. This event is triggered when the user clicks a submit button or if they hit the Enter key. Let's take a look at an example (interactive example): function CreateAccountForm() { ... function handleSubmit(event) { event.preventDefault(); console.log(&quot;Sending data to server&quot;); fetch(&quot;https://httpstat.us/200&quot;, { method: &quot;POST&quot;, body: JSON.stringify({ username: username, email: email, password: password }), headers: { &quot;Content-Type&quot;: &quot;application/json&quot; } }); } return ( &lt;form onSubmit={handleSubmit}&gt; ... &lt;button&gt;Submit&lt;/button&gt; &lt;/form&gt; ); }  We set up our &lt;form&gt; to handle the event by passing the handleSubmit function to the onSubmit prop. If we click on the Submit button or hit Enter while focused on the form, the event is triggered and the handleSubmit function is called. The first thing we do inside the handler function is call event.preventDefault(). This is necessary because the browser has a default action when the submit event is triggered on the form to send a GET request to the server. We prevent the default action because we will handle the event ourselves. We can then do whatever we want with our user data! In this example, we're sending a POST request using the fetch method. "},{"title":"Further Reading​","type":1,"pageTitle":"React - Week 3","url":"/react/week-3/lesson#further-reading","content":""},{"title":"Container components​","type":1,"pageTitle":"React - Week 3","url":"/react/week-3/lesson#container-components","content":"There is a common pattern when loading data in React applications, called container components. Read more about it here. "},{"title":"Multiple fields as state pattern​","type":1,"pageTitle":"React - Week 3","url":"/react/week-3/lesson#multiple-fields-as-state-pattern","content":"There is another common pattern for handling multiple fields in a form, but it requires some JavaScript functionality that you may not have seen before. Read more about it here. "},{"title":"Coursework​","type":1,"pageTitle":"React - Week 3","url":"/react/week-3/lesson#coursework","content":"Click here to view the coursework for this lesson. "},{"title":"Feedback​","type":1,"pageTitle":"React - Week 3","url":"/react/week-3/lesson#feedback","content":"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers. Loading… Not loading? Form can be found here. Click here to get edit access. "},{"title":"Intro To Web Development Accessibility","type":0,"sectionRef":"#","url":"/workshops/accessibility/intro-to-accessibility","content":"","keywords":""},{"title":"Projected Time​","type":1,"pageTitle":"Intro To Web Development Accessibility","url":"/workshops/accessibility/intro-to-accessibility#projected-time","content":"Lesson: 80 minutesExercises: 40 minutes "},{"title":"Prior Knowledge​","type":1,"pageTitle":"Intro To Web Development Accessibility","url":"/workshops/accessibility/intro-to-accessibility#prior-knowledge","content":"Here are areas that you will need to have before starting this training. Trainees should have No prior knowledge needed "},{"title":"Motivation​","type":1,"pageTitle":"Intro To Web Development Accessibility","url":"/workshops/accessibility/intro-to-accessibility#motivation","content":"It is important to learn about this because Trainees should understand why considering accessibility is important when they are workingMany employers will look for an understanding of common accessibility patternsWe should all endeavour to make websites that everyone can use "},{"title":"Learning Objectives​","type":1,"pageTitle":"Intro To Web Development Accessibility","url":"/workshops/accessibility/intro-to-accessibility#learning-objectives","content":"Participants will be able to: List the 4 main groups of disabilities (visual, hearing, motor, cognitive)Define what accessibility isRecall some specific conditions for each categoriesDefine what an invisible disability is and give some examplesDefine situations where you can experience an accessibility issue, for touch, see, hear and speak or a combination of more than one of them (could be done as coursework)List some reasons why accessibility is important to considerIllustrate what each letter in SCULPT meanApply advice to check colours and give good text links and alt textsCreate an alternative text when sharing photo on social media.Identify good and bad practice in social mediaList the 4 principles of WCAG and define them in their own wordsRecall the 3 conformance levels and which one to aim forIdentify situations where respecting the guidelines is not enough for a good user experience "},{"title":"Video​","type":1,"pageTitle":"Intro To Web Development Accessibility","url":"/workshops/accessibility/intro-to-accessibility#video","content":" "},{"title":"Presentation​","type":1,"pageTitle":"Intro To Web Development Accessibility","url":"/workshops/accessibility/intro-to-accessibility#presentation","content":"You can find the slides for this presentation here.   "},{"title":"Coursework​","type":1,"pageTitle":"Intro To Web Development Accessibility","url":"/workshops/accessibility/intro-to-accessibility#coursework","content":""},{"title":"Quiz (5 minutes)​","type":1,"pageTitle":"Intro To Web Development Accessibility","url":"/workshops/accessibility/intro-to-accessibility#quiz-5-minutes","content":"Complete this short quiz to show your understanding "},{"title":"Screen Readers (20 minutes)​","type":1,"pageTitle":"Intro To Web Development Accessibility","url":"/workshops/accessibility/intro-to-accessibility#screen-readers-20-minutes","content":"Try using your phone with the screen reader function. How to use a screen reader on iOSHow to use a screen reader on an Android phone "},{"title":"How People Use Tech (20 minutes)​","type":1,"pageTitle":"Intro To Web Development Accessibility","url":"/workshops/accessibility/intro-to-accessibility#how-people-use-tech-20-minutes","content":"Read about using a switch 24a11y.com/2018/i-used-a-switch-control-for-a-day Watch some of the videos on this page to understand more about how people with disabilities use tech. axesslab.com/tech-youtubers  "},{"title":"Workshop​","type":1,"pageTitle":"Intro To Web Development Accessibility","url":"/workshops/accessibility/intro-to-accessibility#workshop","content":""},{"title":"Contents​","type":1,"pageTitle":"Intro To Web Development Accessibility","url":"/workshops/accessibility/intro-to-accessibility#contents","content":"Different aspects of accessibility Vision impairmentsHearing impairmentsMotor impairmentsAssistive devicesCognitive impairmentsInvisible disabilities Why it's important to considerHow to make your social media posts accessibleHow to make your documents accessibleWCAG (Web Content Accessibility Guidelines)  "},{"title":"Different aspects of accessibility​","type":1,"pageTitle":"Intro To Web Development Accessibility","url":"/workshops/accessibility/intro-to-accessibility#different-aspects-of-accessibility","content":"What is digital accessibility? &quot;Digital accessibility is the ability of a website, mobile application or electronic document to be easily navigated and understood by a wide range of users, including those users who have visual, auditory, motor or cognitive impairments.&quot; In the UK, 1 in 5 people are disabled The concept of accessibility doesn’t just apply to disabled people – all users will have different needs at different times and in different circumstances. Making things more accessible makes things better for all users. &quot;My needs are different from yours and my needs today might be different tomorrow” - Charles Hall Vision impairments​ In the UK: almost 2 million people living with sight loss. 360,000 are registered as blind or partially sighted. Blindness: there is a legal definition which doesn’t imply seeing nothing at all. Many can read from a screen, but can’t use a mouse. They often can’t see images, graphics or videos. If the layout of your page, the navigation or labels of your fields are not clear, they won’t be able to use your website or app. The main screen readers are: NVDA - it’s freeJAWS - need a licence but good and have been here for a long timeVoice Over 2 minutes video of a user (Kristy Viers) using an iPhone  People with low vision:​ Might need to magnify and miss some information if you don’t align your content on the left (for left to right languages, otherwise, align on the right)Might also miss some information if you don’t group related items togetherNeed to be able to scroll both vertically and horizontallyCan get lost in your pageMight need to change colour contrast on their device or browser Posters part of a set available here Colour blindness​ People with colour vision deficiency find it difficult to identify and distinguish between certain colours. Total colour blindness (an inability to see any colour) is very rare. There are various types: Deuteranomaly: reduce sensitivity to greenProtanopia: reduce sensitivity to redTritanopia: reduce sensitivity to blue For these people, information via colour alone won’t be understood or noticed. For example, an error message in red with no other marks that something is wrong.  Exercise 1: Need about 10 minutes Looking at this page: MorrisonsWhat do you think could be problematic for: A person with low vision magnifying their screen by 4 (ctlr + to 400%)A colour blind user Look at the pictures, the contrast, the colours Use Dev tool to emulate colour blindness: Go to console, then 3 dots menu, then rendering and then emulation at the bottom to see any page as a colour blind person would. Hearing impairments​ About 9 million people in the UK who are Deaf or hard of hearing Any audio without subtitles or a transcript can be problematicFeedback only provided by a sound (bip or alert) won’t doEnglish might not be their first language as they might be signing mostlyReading can be difficult for themWhen asked for a preferred contact method, they could be ok to receive text messages but not a phone call Posters part of a set available here Motor impairments​ It could be a missing limb, or a muscle control problem, spams, tremors or a lack of coordination. Some potential problems: Using a mouse might be difficultDrag and drop can be hard to doSelecting a link too close to anotherTapping a button if it’s too small of too close to another Assistive devices​ Some users might use a switch, a mouth-head stick keyboard or an assistive Joystick. You can use voice activated software instead of typing. Some special keyboards can help you type. All these assistive technologies can be expensive and create extra issues when used with other devices potentially.  Posters part of a set available here Cognitive impairments​ Wide range of issues, some mild, some more severe, some can be punctual, and others permanent. Dyslexia, autism, anxiety, dementia, Alzheimer, dyscalculia and dyspraxia for example. This can affect the way you process information, your memory, your comprehension, your attention and the way you make decisions. Posters part of a set available here Exercise 2: About 10 minutes Tab through a website (don’t use the mouse) and find the phone number to contact someone you can use ASDA for example. Tab key to move forward, shift + tab to move backward, Enter to select. You can also try to use one hand on your phone (if right handed, use the left and vice versa). Or simply try to start Applying for a provisional driving licence on a mobile phone (their website is not responsive…) Invisible disabilities​  An invisible disability is a physical, mental or neurological condition that is not visible from the outside, yet can limit or challenge a person’s movements, senses, or activities. Symptoms can be: debilitating pain, fatigue, dizziness, cognitive dysfunctions, learning differences, mental health disorders, or hearing and vision impairments for example. A wide range of conditions like Fibromyalgia, Crohn’s disease, Multiple Sclerosis (M.S.), Autism, Anxiety, Myalgic Encephalomyelitis (M.E. also known as Chronic Fatigue Syndrome), Lupus, and many more… In some cases, because it’s not obvious they have access needs, they can get questioned by people thinking they are abusing disabled parking places, use disabled toilets and more.  "},{"title":"Why it’s important to consider​","type":1,"pageTitle":"Intro To Web Development Accessibility","url":"/workshops/accessibility/intro-to-accessibility#why-its-important-to-consider","content":"It can, and it will, affect everyone at some point in life Legal requirements​ WCAG - Web Content Accessibility GuidelinesUN Convention on the Rights of Persons with DisabilitiesEqualities Act 2010: anti discrimination legislation for the UK, The Public Sector Bodies (Websites and Mobile Applications)Accessibility Regulations 2018 Technical​ It’s harder to ‘fix’ the accessibility after the development, so coding with accessibility in mind will reduce the development and maintenance time. Your apps and websites will usually be more performant, (faster loading pages for example) Financially​ Avoid legal costNo upgrade needed to add the accessibility issues after the release if you have been testing and considering accessibility all along Reputation​ As a company, it can be very damaging to neglect accessibility. A huge number of people could be excluded from your product and they will voice their opinions on social media. For example, a recent new feature on Twitter (short audio clip) didn’t consider hearing impaired people and visually impaired people.  Why it’s important as a developer or a tester​ As a future professional, it’s a good skill to have on your CV, employers are more and more aware of this. So if you have a portfolio, make sure it’s accessible. You will be part of project teams. Accessibility is everyone’s job. If during a project you realise there is a potential accessibility issue (even non code related): Speak up! Most of the accessibility problems will come from the way you coded a design, so you need to be aware of how you can avoid these. "},{"title":"Make your social media posts accessible​","type":1,"pageTitle":"Intro To Web Development Accessibility","url":"/workshops/accessibility/intro-to-accessibility#make-your-social-media-posts-accessible","content":"Alt text - Alternative text​ All your pictures (including diagrams) should have an Alt text which will be read by a screen reader for users who can’t see them. Here how to do this: on Twitteron Linkedinon Facebookon Instagram When you add a GIF, describe it [in square brackets] Capitalise your Hashtags​ Capitalising the 1st letter of each word on hashtags improves readability for screen readers. For example: #ThisIsHowtoFormatAnAccessibleHashtag Caption your videos and multimedia​  Emoji​ Try not to use them too much. They are read aloud by screen readers. For example: 😃 would become “smiley face emoji”. Don’t put them in your Twitter display name, they will be read each time. Hashtags and mentions go at the end​ The symbols # and @ are said aloud by screen readers, so it makes it harder to understand your post. Add them after your text. It will be clearer. Avoid all caps words and text​ It’s harder for everyone to read. The ‘shape’ of a word helps us to identify it and this is lost with capitals. It can be misinterpreted by screen readers as well. DON'T DO THIS, IT'S HARDER TO READ Exercise 3: About 10 minutes Post something on social media with a photo, add an alternative text. Scroll through your timeline and look for: Well formatted hashtagsImages with alt textVideos with subtitles More on the subject​ Guidance by the government to do a good social media campaign "},{"title":"Make your document accessible​","type":1,"pageTitle":"Intro To Web Development Accessibility","url":"/workshops/accessibility/intro-to-accessibility#make-your-document-accessible","content":"You never know who will read a document, so make it accessible. It’s better for everyone anyway.SCULPT is a framework with some basic advice created by Worcestershire Council  Structure​ Follow the heading styles in your document, don’t just use bold and bigger fonts as it won’t make any difference to a screen reader user. Align your text and components on the left and don’t justify your text, it’s easier to read and easier to find when magnified. Colour and contrast​ Consider the colours you use to make sure the contrast is good enough between the text and the background. You can use this tool for example to check: accessible-colors.com Remember to never use colour only to convey something. Use alternative text​ (alt) text on your images do describe them to people who might not see them. This will be read by the screen reader. Links​ Describe what the link does, where it takes you, never just use ‘click here’ . Don’t use ‘Click’ because it’s device specific, your user might be on a mobile and ‘tap’ instead. You can use ‘select’ or ‘follow’ for example. Plain language​ Use clear and uncomplicated language with no jargon, if you are using complex terms or acronyms, explain them first. Links​ Use simple tables without merged or split cells, they are easier to follow. Exercise 4: About 10 minutes Visit this page Write an alternative text (alt text for some pictures) on this pageCheck colours contrast on that page using the link mentioned above: accessible-colors.comCritic text links on this website: metoffice.gov.uk/weather/learn-about/weather/seasons/summer/10-facts-about-summerThink of a better text links where possible "},{"title":"WCAG (Web Content Accessibility Guidelines)​","type":1,"pageTitle":"Intro To Web Development Accessibility","url":"/workshops/accessibility/intro-to-accessibility#wcag-web-content-accessibility-guidelines","content":"Massive document, not easy to read​ WCAG is a long list of standards for web content accessibility: the WCAG guidelines Last version is version 2.1 (since 2018) 3 conformance levels: A , AA and AAA. A is the minimum, you need to aim for at least AA The last update focussed on improving the guidance for: Cognitive and learning disabilitiesLow visionUsing mobile devices 4 principles of accessibility: P.O.U.R.​ Perceivable - Information and user interface components must be presentable to users in ways they can perceive. Information being presented can't be invisible to all of the user’s senses. Operable - User interface components and navigation must be operable. The interface cannot require interaction that a user cannot perform. Understandable - Information and the operation of user interface must be understandable. The content or operation cannot be beyond the users’ understanding. Robust - Content must be robust enough that it can be interpreted reliably by a wide variety of user agents, including assistive technologies. As technologies evolve, the content should remain accessible to users, including those using assistive technologies. Like any standards and guidelines, remember it’s not just about meeting them from a legal point of view but also in a way that works for the people. Bad examples:​  Don’t just follow the guidelines, test with users​ The touch targets area are big enough and respect WCAG recommendations, but a user with tremor (Parkinson) was struggling.  Help to use your current location instead of having to type it. This is compliant with WCAG and helps users, but not screen readers users.  More on WCAG Guidelines​ WCAG2.1: w3.org/WAI/WCAG21/UnderstandingWebaim: webaim.org/standards/wcag/checklistW3C: w3.org/TR/WCAG21WCAG2.1, checklist from the GOV.UK "},{"title":"What next?​","type":1,"pageTitle":"Intro To Web Development Accessibility","url":"/workshops/accessibility/intro-to-accessibility#what-next","content":"Start applying them in everything you doOn twitter or other social media, connect or follow diverse people so you can learn from what they shareGo to accessibility meet-ups, we will post them on SlackThere will be another course, more specific about making your code accessible as a developerYou won’t get it right every time, but you learn and do better next time "},{"title":"AWS & DynamoDB Workshop","type":0,"sectionRef":"#","url":"/workshops/aws-dynamodb","content":"","keywords":""},{"title":"Before we start​","type":1,"pageTitle":"AWS & DynamoDB Workshop","url":"/workshops/aws-dynamodb#before-we-start","content":"Download and install MongoDb from https://www.mongodb.com/download-center#community. Follow the instructions for your platform (Windows, Linux or OS X). Also download and install RoboMongo from https://robomongo.org/download. Open two instances of terminal. Run mongod—this will start MongoDB then run mongo on the other window. In the mongo shell (terminal), run the command version() and you should get the version of Mongo printed on the terminal "},{"title":"Databases overview​","type":1,"pageTitle":"AWS & DynamoDB Workshop","url":"/workshops/aws-dynamodb#databases-overview","content":"Discussion: What is a database role?Why do we need a database? Why not just use the file system?What would make a good database? "},{"title":"Why a database​","type":1,"pageTitle":"AWS & DynamoDB Workshop","url":"/workshops/aws-dynamodb#why-a-database","content":"Databases can store very large numbers of records efficiently (they take up little space).You can have strucutre on your dataYou can query for data in a database, you can sort data, add/edit/delete dataYou can optimise a database to make searches (queries) quickerYou can relate pieces of data to each other to avoid duplication which makes your information more reliable and less prone to errorsACID In computer science, ACID (Atomicity, Consistency, Isolation, Durability) is a set of properties of database transactions intended to guarantee validity even in the event of errors, power failures, etc. Databases can handle very large data sets.Databases are concurrent; multiple users can use them at the same time without corrupting the data.Databases scale well "},{"title":"Relational and non-relational databases​","type":1,"pageTitle":"AWS & DynamoDB Workshop","url":"/workshops/aws-dynamodb#relational-and-non-relational-databases","content":"There are mainly two flavours of databases used commercially these days.Relational (SQL) and non-relational (NoSQL) databases. Relational databases include MySQL, Postgres, Microsoft SQL Server, Oracle Database and many others. They've been around for a long time and they're used for all kind of applications. Non-relational databases are relatively new and they include the likes of MongoDB, Casandra, Neo4j etc... "},{"title":"Mongo​","type":1,"pageTitle":"AWS & DynamoDB Workshop","url":"/workshops/aws-dynamodb#mongo","content":"MongoDB is a free and open-source cross-platform document-oriented database program. Classified as a NoSQL database program, MongoDB uses JSON-like documents. "},{"title":"BSON (JSON-like document)​","type":1,"pageTitle":"AWS & DynamoDB Workshop","url":"/workshops/aws-dynamodb#bson-json-like-document","content":"In a Relational database, information is organised in rows in tables with predefined columns. In a non-relational database, information is organised in documents. MongoDB stores data records in a format similar to JSON called BSON. BSON is a binary representation of JSON documents, though it contains more data types than JSON.  Let's look at this database table Students containing information about students participating in a course  Exercise: What are the columns, rows and tables?  Exercise: Open https://jsonlint.com/ and write a JSON representation of two rows in the Students table example. Click Validate JSON and make sure the document is valid. Are there any alternative representations you can think of? BSON is very similar to JSON. It contains more data types than JSON, it also allows the field names to not be quoted. Read more information about the format: https://docs.mongodb.com/manual/core/document/. "},{"title":"Mongo Shell​","type":1,"pageTitle":"AWS & DynamoDB Workshop","url":"/workshops/aws-dynamodb#mongo-shell","content":"Let's go to mongo shell and start interacting with our database system. "},{"title":"1. Create a database​","type":1,"pageTitle":"AWS & DynamoDB Workshop","url":"/workshops/aws-dynamodb#1-create-a-database","content":"On the shell, type the command use profile The shell should respond withswitched to db profile. At this stage, the database does not necessarily exist once we start adding information (collections) then the database will be created and the collection added to them. To check the current database, run db. "},{"title":"2. Create a collection​","type":1,"pageTitle":"AWS & DynamoDB Workshop","url":"/workshops/aws-dynamodb#2-create-a-collection","content":"Now let's create our first collection. Make sure you're using the profiledatabase. Run db and it should print profile on the terminal. We will insert a simple document representing a student. db.students.insertOne({ name: 'Habiiba', country: 'Somalia', assignedMentors: ['Ashleigh'] }) You should get a confirmation with the number of records inserted. You can also insert more than one document at a time. Run this command db.students.insertMany([{ name: 'Khalid', country: 'Yemen' }, { name: 'Yohannes', country: 'Ethiopia', assignedMentors: ['Michael'] }]) run the command db.students.count() and you should get that you have 3 documents. "},{"title":"3. Querying data​","type":1,"pageTitle":"AWS & DynamoDB Workshop","url":"/workshops/aws-dynamodb#3-querying-data","content":"Querying is one of the most important reasons that we use databases. SQL is the language used for querying relational databases, In MongoDB, we can use the method db.collection.find, passing a query in the form of a JSON object as a first parameter. Let's try few queries: Get all the students from Ethiopia. db.students.find({country: 'Ethiopia'}) We can also provide an extra parameter projection to define what fields we want back from the query. For example, if we're only interested in the name db.students.find({ country: &quot;Ethiopia&quot; }, { name: 1 }); // you can also use { name: true }  Let's add another two students to the collection db.students.insertOne({ name: 'Mohamed', country: 'Sudan', assignedMentors: ['Michael'] }) and db.students.insertOne({ name: 'Mohamed', country: 'Syria', assignedMentors: ['Michael', 'Ashleigh'] }) Now let's query for all the students that have Michael as mentor. db.students.find({ assignedMentors: [&quot;Michael&quot;] });  What if we want to find any student whose name is &quot;Mohamed&quot; AND whose country is &quot;Sudan&quot;. You can then use the logical query operator \\$and. db.students.find({ $and: [{ name: &quot;Mohamed&quot; }, { country: &quot;Sudan&quot; }], });  Notice that name and country are case-sensitive. "},{"title":"Exercise​","type":1,"pageTitle":"AWS & DynamoDB Workshop","url":"/workshops/aws-dynamodb#exercise","content":"Find all students for whom Ashleigh is an assigned mentor.Find all students that have Michael as their only mentorFind students whose name is Mohamed OR Michael is their only mentorRead about the\\$in operatorand use it to find students whose country is either Sudan or Ethiopia.Look at the otherComparison Query Operatorsand theLogical Query Operatorsand use few of them. "},{"title":"Key Concepts so far​","type":1,"pageTitle":"AWS & DynamoDB Workshop","url":"/workshops/aws-dynamodb#key-concepts-so-far","content":"In Mongo, a database contains collections that contain BSON documents. We can use the mongo shell to interact with our Mongo databases. The query documents are used to specify a selection filter usingquery operatorsto search for documents in the collections. Checkpoint: Do you understand all the words highlighed in the last paragraph? "},{"title":"Node with Mongo​","type":1,"pageTitle":"AWS & DynamoDB Workshop","url":"/workshops/aws-dynamodb#node-with-mongo","content":"So far we've been connecting to Mongo using the Mongo shell. Mongo has drivers for most major programming languages but it's especially popular with NodeJS applications as its API and Query model is very close to JavaScript syntax and patterns. Let's start wiring Node with MongoDB as a datastore. Fork and Clone the projecthttps://github.com/CodeYourFuture/mongo-node-workshop. run npm install then npm run dev to run the application with autoreload - Go to the browser and make sure it's up and running. Install the MongoDB Node.js Driver npm install mongodb --save Let's add an endpoint api/students that returns a json containing all the students that we've been saving to the database from the shell. Go to the file controllers/apiController, on top of the file, require the module const MongoClient = require(&quot;mongodb&quot;).MongoClient;  then add an endpoint for /students router.get(&quot;/students&quot;, (req, res) =&gt; { const mongoConnection = &quot;mongodb://localhost:27017/profile&quot;; MongoClient.connect(mongoConnection, (err, db) =&gt; { const cursor = db.collection(&quot;students&quot;).find({}); cursor.toArray((error, students) =&gt; { db.close(); res.json(students); }); }); });  Go to your browser /api/students and you should see a JSON containing the documents we've added to the students collection earlier. Exercise: Let's step through the previous code and understand it line by line. What is a Mongo conection string? The connection stringfollows this format:mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]. What parts do you have in our connection string right now? "},{"title":"Exercise part 1​","type":1,"pageTitle":"AWS & DynamoDB Workshop","url":"/workshops/aws-dynamodb#exercise-part-1","content":"Now let's change the api/posts to also use the mongo database instead of the json file under /data. First step is to save the posts in the database. Similar to what we did with students collection, use the Mongo shell to create a new collection called posts and use insertMany to insert all the documents. Change the endpoint /api/posts to read its contents from the database (very similar code to what we wrote in /api/students endpoint). Go tohttp://localhost:3000/api/posts and make sure you see the posts. Update a document in the database (either check the documentation forupdateor use RoboMongo) and see if it gets reflected. Once you have the endpoint running, delete the json data/posts.json. Now if you go to the root of your application http://localhost:3000, you will encounter an error as it will still try to read from the file system but we deleted the file. Update the / endpoint to also get the Posts from the database. "},{"title":"Exercise part 2: refactor the code​","type":1,"pageTitle":"AWS & DynamoDB Workshop","url":"/workshops/aws-dynamodb#exercise-part-2-refactor-the-code","content":"Even though our code does what's supposed to do, it has several issues. We have a lot of duplicate code—both endpoints GET /api/posts and GET / do the same call to the database and then do something with it. It's only thatsomething (the callback) that is different so let's refactor the code to eliminate duplication (DRY). The variable mongoConnection is declared multiple times, that means that if the connection string changes then we need to change multiple places causing possibilities of missing one instance and causing errors. Let's declare it once and use it in the rest of the app. Why is it bad to have duplicate code? Extract the Mongo calls to seperate functions. Extract the route for/api/students into a function named getStudents What will the function signature be?Remember the Single Responsibility Principle—the route handlers have multiple responsibilities right now: Connecting to Mongo, getting the data then sending it back as a response. Move the new function to a new file called helpers/db-client.js, export the functions and use them in the original file. Do you remember how we create modules and use them? module.exports andrequire. Do the same for the /posts "},{"title":"Exercise Part 3: Deploy our app​","type":1,"pageTitle":"AWS & DynamoDB Workshop","url":"/workshops/aws-dynamodb#exercise-part-3-deploy-our-app","content":"Let's deploy our Database-Driven Application to Heroku. If you don't remember the steps, refresh your memory froma previous lesson. Once you're finished, Go to your application on heroku and see if it is working properly. It should not be working. Can you have a guess on what went wrong? To see what's happening on the heroku server, run heroku logs from the terminal and check the logs. "},{"title":"Mongo on Heroku​","type":1,"pageTitle":"AWS & DynamoDB Workshop","url":"/workshops/aws-dynamodb#mongo-on-heroku","content":"Heroku, AWS and other cloud services allows us to use databases and other services on the cloud without having to maintain physical servers making it easy to scale, monitor costs and build good solutions in general. We've already used DynamoDB on AWS. This week, we'll do MongoDB. Go to Heroku dashboardhttps://dashboard.heroku.com Click on your app name in the dashboard. Go to Resources, under addons, search for mLab MongoDB and choose it. When you're prompted with this screen—click on Provision. The new MongoDB service will appear under Resources-you can click on it and it will take you to a web interface to administer your MongoDB instance. Go to the Settings and click on Reveal Config Vars. You should see the a variable called MongoDB_URI—that is the connection string for the MongoDB instance on Heroku (on mLab used by Heroku). So how can we use this connection string instead of our local one? "},{"title":"Environment variables​","type":1,"pageTitle":"AWS & DynamoDB Workshop","url":"/workshops/aws-dynamodb#environment-variables","content":"In NodeJS, The process.env property returns an object containing the user environment. Environment variables allow us to configure different aspects of our application based on the environment where it's running—so for instance, when we run our application locally, we want to connect to the local MongoDB but on Heroku, we want to connect to a different one. Connection strings are typically saved and used as Environment variables, other typical uses are with passwords, secrets, URLs of other services etc... Anything that is environment specific and that shouldn't live in the source code. Security tip: Never add passwords, connection strings or any sensitive information in your source code, always use an Environment variable. Services like Heroku and AWS can then use these environment variables to configure aspects of the application. We've already used one Environment variable for Heroku before—what was it? Exercise: Use the environment MongoDB_URI to connect to MongoDB on Heroku, but fallback to localhost connection string if there is no environment variable provided. Commit and push the changes to Heroku and see if it works. "},{"title":"Coursework​","type":1,"pageTitle":"AWS & DynamoDB Workshop","url":"/workshops/aws-dynamodb#coursework","content":"Refer to the MongoDB/Node workshop for the Homework tasks -https://github.com/CodeYourFuture/mongo-node-workshop Read https://www.upguard.com/articles/mysql-vs-mongodb "},{"title":"Resources​","type":1,"pageTitle":"AWS & DynamoDB Workshop","url":"/workshops/aws-dynamodb#resources","content":"Why use a database:https://softwareengineering.stackexchange.com/questions/190482/why-use-a-database-instead-of-just-saving-your-data-to-diskDatabases and Collections:https://docs.mongodb.com/manual/core/databases-and-collections/Documents in MongoDB:https://docs.mongodb.com/manual/core/document/Practice on a web Mongo shell:https://www.tutorialspoint.com/mongodb_terminal_online.phpEnvironment Variables:https://www.twilio.com/blog/2017/08/working-with-environment-variables-in-node-js.htmlMongoDB SQL comparison:https://docs.mongodb.com/manual/reference/sql-comparison/ "},{"title":"Interviews","type":0,"sectionRef":"#","url":"/workshops/interviews/","content":"Interviews There are many kinds of interview. We have workshops to help prepare you for some of them: Interview typeTechnical Interviews","keywords":""},{"title":"Sample questions for technical interviews","type":0,"sectionRef":"#","url":"/workshops/interviews/technical/sample-questions","content":"","keywords":""},{"title":"Roman numerals​","type":1,"pageTitle":"Sample questions for technical interviews","url":"/workshops/interviews/technical/sample-questions#roman-numerals","content":"The Romans used a different number-writing system than we do. They had some basic numbers: I is 1V is 5X is 10 And to write a number that doesn't have its own symbol, they wrote down numbers that add up to it, in descending order. For instance, to represent 12, they would write XII. However, to avoid writing down lots of numbers, they didn't write 4 as IIII, they wrote it as IV (as in, &quot;one less than five&quot;). Your task is to write a function which takes a Roman numeral, and returns the integer it represents. "},{"title":"Hints​","type":1,"pageTitle":"Sample questions for technical interviews","url":"/workshops/interviews/technical/sample-questions#hints","content":"Some interviewees don't realise that they only need to do a single character of look-ahead when determining whether a number is being subtracted from the following number or not. If they seem stuck on this, give them some examples to nudge them at the idea. "},{"title":"Longest common prefix​","type":1,"pageTitle":"Sample questions for technical interviews","url":"/workshops/interviews/technical/sample-questions#longest-common-prefix","content":"Given an array of strings, return the longest substring that all of the strings start with. "},{"title":"TODO: Write up more interview questions, and more guidance for asking them.​","type":1,"pageTitle":"Sample questions for technical interviews","url":"/workshops/interviews/technical/sample-questions#todo-write-up-more-interview-questions-and-more-guidance-for-asking-them","content":""},{"title":"JavaScript Testing Workshop","type":0,"sectionRef":"#","url":"/workshops/js-testing-workshop","content":"","keywords":""},{"title":"What will we learn today?​","type":1,"pageTitle":"JavaScript Testing Workshop","url":"/workshops/js-testing-workshop#what-will-we-learn-today","content":"Tracing CodeTestingUnit TestingUnit Testing Frameworks - JESTTest-driven DevelopmentMore on Testing Test coverageRefactoringModules Fork and Clone the js-exercises-tdd repo "},{"title":"Tracing Code​","type":1,"pageTitle":"JavaScript Testing Workshop","url":"/workshops/js-testing-workshop#tracing-code","content":"What is Code? Computer code is a set of rules or instructions. It is made up of words and numbers and when you put them in the right order it will tell your computer what you want it to do. Let's trace these code samples together: Sample 1 Sample 2 Sample 3 "},{"title":"Testing our code​","type":1,"pageTitle":"JavaScript Testing Workshop","url":"/workshops/js-testing-workshop#testing-our-code","content":"We have just traced the output of some code on paper, but how do ensure that the code actually does what it is supposed to do when we run it. Discussion: How have we been testing our code so far? How do ensure it is correct. What is &quot;correct&quot; anyhow? In many organisations, there are full teams dedicated to testing and ensuring that the code written behaves correctly, to report bugs and make sure that they are fixed on time. In general, Quality Assurance is a responsibility of everyone in a team starting from Project Manager, Scrum Masters, Developers and Testers. There are typically several levels of testing when working on a project: Unit testingIntegration testingFunctional, End to End testing and User Acceptance Testing (UAT) This answer from Stack Overflow has a good explanation of types of testing. The defintions for Functional, e2e and UAT are often mean different things in different teams, the responisibility for them also falls on different individuals depending on the team. Unit testing though is always the responsibility of the Developer, and it is a very important skill for any professional developer to be able to write tests, and also write code that is testable. Discussion: What is testable code? var result; function getMentorInfo(mentors, name) { var greeting = &quot;Hello &quot;; result = mentors.find(function (person) { return person.name === name; }); var mentorTitle = &quot;Junior Developer&quot;; if (result.yearsOfExp &gt; 10) { mentorTitle = &quot;Senior Developer&quot;; } else if (result.yearsOfExp &gt; 20) { mentorTitle = &quot;Very Senior Developer&quot;; } result.jobTitle = mentorTitle; result.fullName = result.title + &quot; &quot; + result.name; return result; } /* var mentors = [ { name: 'Irina', title: 'Dr.', yearsOfExperience: 10 }, { name: 'Ashleigh', title: 'Dame', yearsOfExperience: 20 }, { name: 'Etza', title: 'Professor', yearsOfExperience: 30 } ]; var result = getMentorInfo(mentors, 'Etza') Trace the value of &quot;result&quot; */  "},{"title":"Unit Testing​","type":1,"pageTitle":"JavaScript Testing Workshop","url":"/workshops/js-testing-workshop#unit-testing","content":"Testing is a key skill for any software programmer. We need to make sure our software is thoroughly tested, otherwise bad things happen. Testing makes sure our programs behave like we intend them to do - if we don't test, we can cause severe bugs. Bad software can make planes crash, companies bankrupt, and users of your software really frustrated. There are different levels on which we can test software, for example integration testing, end-to-end testing, and unit testing. Today we will deal with unit testing, which is probably the most universal testing discipline. A unit test is exactly that - it tests a unit of code. &quot;Unit&quot; can mean different things, but in JavaScript it usually refers to a single function. Remember when we talked about functions? Functions take input (as arguments), do something with it (in the function body), and return output (using thereturn statement). Ideally, a function should always return the same output if the same input is given. It makes it predictable and testable - and that's what we want!  |-----------------| input =&gt; | doing something | =&gt; output |-----------------|  So, when unit testing a function, we want to make sure that for a certain input, we get the expected output. For this we need to make sure that the output matches our expectations. In the simplest form that means we do an equality check: myFunction(input) === expectedOutput;  We can formalise this using another function that compares two values and complains when they do not match. Such a function is prepared inunit-testing/equals.js. We can use this function to simply compare to values: equals(1, 1); // This should pass equals(1, 2); // This should fail equals(&quot;Hello&quot;, &quot;Hello&quot;); // This should pass  Now we can use this equals() function to test our own code by comparing a function result to an expected value. Remember that one function can be used as an argument when a second function is called. In this instance, the function we are testing would represent our first function, and our equals() function would represent the second, like so... equals(myNewFunction(arg1, arg2, etc), expectedOutput);  As you can see in this example, instead of using a number as the first argument to the equals() function, we have used a function instead; the one we wish to test. Exercise: Write tests for the the exercises under I.write-tests "},{"title":"Unit testing frameworks​","type":1,"pageTitle":"JavaScript Testing Workshop","url":"/workshops/js-testing-workshop#unit-testing-frameworks","content":"There are lots of other things you might want to test for than two things being equal. You might want to test if a number is smaller or greater than another, if a function was called, if an error happened, or if one thing happened before another thing, or how long a function call took to execute. We don't have to build all these things ourselves. Instead there are unit testing frameworks that take all that work off our shoulders. All we need to do is provide the code and the tests. "},{"title":"Jest​","type":1,"pageTitle":"JavaScript Testing Workshop","url":"/workshops/js-testing-workshop#jest","content":"The unit testing framework we are trying to day is calledJest. It's created by Facebook and useful for all kinds of unit testing (especially testing React, which we will do in a later lesson). Look into your jest/ folder. You will find a file there, sum.test.js. The suffix .test.js tells Jest that this file contains tests it should execute. To execute the test, run the following command in your terminal: npm test  This command runs the test in sum.test.js, which tests the sum() function. You can see the test output and the fact that the test passed. Tests cases in Jest have the following structure: test(&quot;test description&quot;, function () { // Test instructions });  Jest provides a set of functions that you can use to write your actual tests. They are created in a way that imitates natural language, for example: _Expect_ sum of 1 and 2 _to be_ 3  becomes expect(sum(1, 2)).toBe(3);  You can add multiple test statements in the same test case (a test case is one call of the test function, but you can also create multiple test cases in one file. It is important that you give all your test cases meaningful descriptions. Exercise: Add another test case to sum.test.js. Is the sum of 10 and -10 really zero? Run the tests using Jest. Exercise: Take the findNeedle function you have tested previously, copy it into the jest/ folder and call it findNeedle.test.js. Then write a test to be used with Jest, similar to sum.test.js. Make sure you cover multiple inputs and give all tests meaningful descriptions! Run the tests using Jest. "},{"title":"Test Driven Development​","type":1,"pageTitle":"JavaScript Testing Workshop","url":"/workshops/js-testing-workshop#test-driven-development","content":"Test-driven development (TDD) is a software development process that relies on the repetition of a very short development cycle: requirements are turned into very specific test cases, then the software is improved to pass the new tests, only. This is opposed to software development that allows software to be added that is not proven to meet requirements. [Wikipedia] When developing following TDD, you normally follow this sequence: Add a testRun all tests and see if the new test fails (Red)Write the simplest code to make the test pass (Green)RefactorRepeat Read more on the Wikipedia article and the resources at the end. Red Green Refactor Exercise: Two mentors pair on a problem doing &quot;ping pong&quot; TDD. One writing the test, the other writing the implementation. "},{"title":"More on Testing​","type":1,"pageTitle":"JavaScript Testing Workshop","url":"/workshops/js-testing-workshop#more-on-testing","content":""},{"title":"Test coverage​","type":1,"pageTitle":"JavaScript Testing Workshop","url":"/workshops/js-testing-workshop#test-coverage","content":"Test coverage describes the extent to which a code base is tested. When Jest runs your tests, it generates a so-called coverage report. This report tells you how many of your lines of code are covered by tests, how many functions, statements, and branches. A branch is one of multiple ways a code control flow can go. For example, if you have an if() ... else ..., both the &quot;if&quot; and the &quot;else&quot; branch must be covered by tests. We want to keep our code coverage as high as possible. Jest allows us to generate a coverage report when we run the following command in the terminal: npm test -- --coverage  Exercise: Check your code coverage for the tests you wrote. Is any of the numbers below 100%? If so, try and bring it up to 100%! "},{"title":"Refactoring​","type":1,"pageTitle":"JavaScript Testing Workshop","url":"/workshops/js-testing-workshop#refactoring","content":"There are times when we want to make our code better without changing any functionality, for example because we just learnt about a better way to solve a certain problem (like, finding needles in haystacks). This is calledrefactoring. When previously GREEN code - working code! - suddenly does not work anymore, we call this a regression. Our existing tests can make sure that when we refactor, the functionality of our code actually stays the same, and does not regress. Exercise: Refactor some of the exercise we've written tests for. "},{"title":"Modules​","type":1,"pageTitle":"JavaScript Testing Workshop","url":"/workshops/js-testing-workshop#modules","content":"So far, all our programs have been in their own single files. But Node programs can become really large, and having all our code in only one file will not be maintainable. We can therefore split our code into so-called modules. A module is basically a JavaScript file that makes its functionality available to other modules and programs. "},{"title":"Creating modules, exporting code​","type":1,"pageTitle":"JavaScript Testing Workshop","url":"/workshops/js-testing-workshop#creating-modules-exporting-code","content":"It is really simple to take existing JavaScript code and turn it into a module by exporting its functionality: function printName(name) { console.log(&quot;My name is &quot; + name); } module.exports = printName;  The key here is the line containing module.exports. As you see, this is an assignment, and whatever is assigned to module.exports will be made available to other modules and program when this file is imported. "},{"title":"Using modules, importing code​","type":1,"pageTitle":"JavaScript Testing Workshop","url":"/workshops/js-testing-workshop#using-modules-importing-code","content":"But how do we make use of another module in our program? We need to import it, and this is done using a function called require(). There are different module formats for JavaScript. The one we are using here, which is natively supported by Node, is called CommonJS. var printName = require(&quot;./printName.js&quot;);  The string passed to the require() function is a path to the file you are importing. ./ signifies the current directory, so the above command will import a file called &quot;printName.js&quot; that is in the same directory as our program. Assuming our program is in the same folder as printName.js, we can use the above code to import the functionality provided by that module and store it in the printName variable. We can then continue to use the printName function as if it we defined it in our own program! var printName = require('./printName.js'); printName();  Modules can not only export functions, but all variable types you already learned about. Most commonly, they export a function or an object containing multiple functions. Together: Edit the file modules/main.js and follow the instructions. "},{"title":"Separating code and tests​","type":1,"pageTitle":"JavaScript Testing Workshop","url":"/workshops/js-testing-workshop#separating-code-and-tests","content":"Exporting and importing modules is really useful for testing, too. As a rule of thumb, we never want to mix our actual code with our tests. It is therefore common to put them in separate files. We are going to call the file containing the tests after the file containing the code to be tested, just appending .test at the end of the filename. Like so: main.js # Our main program main.test.js # Tests for our main program someOtherCode.js # A module called &quot;someOtherCode&quot; someOtherCode.test.js # Tests for the &quot;someOtherCode&quot; module  The naming is really up to convention - you can even put your tests in a different folder! However, for Jest it is important to call test files &quot;*.test.js&quot;. Glossary You should know these terms by the end of this class: Testing, Quality Assurance, Unit Tests, Integration Tests, Refactoring, Regression Tests .. any more? Resources MDN Objects basicsMDN OOP in JSTest-driven developmentJestModulesSetup VS Code for Debugging "},{"title":"Tracing code resources​","type":1,"pageTitle":"JavaScript Testing Workshop","url":"/workshops/js-testing-workshop#tracing-code-resources","content":"Check out these videos. They contain code that is not JavaScript being traced on paper. Hand Tracing - Intro to Java Programming Tracing code by hand Tracing a flowchart Java Tracing Arrays Worksheet 1 Nested loops "},{"title":"Coursework​","type":1,"pageTitle":"JavaScript Testing Workshop","url":"/workshops/js-testing-workshop#coursework","content":"Finish the Katas and exercises in the project we've worked on today Follow this tutorial about Debugging with Chrome Register yourself on the Marc Littlemore's free JavaScript Testing for Beginners course and work your way through the 7 lessons, which are delivered via a daily email. The course uses a Mocha/Chai framework, which is in common use within the web development industry. This will give you more TDD practice using a different approach to Jest, as well as more exposure to ES2015/ES6 JavaScript. "},{"title":"Research​","type":1,"pageTitle":"JavaScript Testing Workshop","url":"/workshops/js-testing-workshop#research","content":"Research other module formats than CommonJS. What is AMD? What are ES6 modules and how do their differ from CommonJS?What are other test frameworks for JavaScript?More parts of the Jest (Jasmine) DSL than just .toBe() "},{"title":"Technical Interviews","type":0,"sectionRef":"#","url":"/workshops/interviews/technical/workshop","content":"","keywords":""},{"title":"What is a technical interview?​","type":1,"pageTitle":"Technical Interviews","url":"/workshops/interviews/technical/workshop#what-is-a-technical-interview","content":"Companies use technical interviews to test your technical aptitude. Technical interviews focus on how you will approach problems in the future if you get the job. They tend to focus on a few areas: How do you think about tasks and how to solve them?How able are you to turn an idea for how to solve a problem into code?How well can you communicate your thoughts?Are you easy to help when you're stuck?How open are you to other ideas? Most other interview types expect you to have answers to most of the questions you're asked. Technical interviews are not there just to show that you know all of the answers. You are expected to ask questions, and it's fine if you don't know some things - that's part of the point of the interview, to see how you work when you don't already know all of the answers. "},{"title":"What is your goal in a technical interview?​","type":1,"pageTitle":"Technical Interviews","url":"/workshops/interviews/technical/workshop#what-is-your-goal-in-a-technical-interview","content":"Your goal in a technical interview is to show that you're going to be someone the interviewer wants to work with. Think about people you've enjoyed working with - what traits do they have? I'll suggest a few: Friendly - no one likes someone getting angry with them!Patient.Thoughtful - jumping straight into your first idea doesn't make it likely that you're doing the best thing.Open to feedback - if you have an idea that may help me, it's frustrating if I don't listen to it.Communicative - if I'm stuck, and you don't know what I'm thinking, it's hard for you to participate.Able to think through a problem.Able to write code that works. Notice that most of these are not technical traits. While you're solving technical problems in a technical interview, most of the point of the interview is to see how you interact with people, and how you think. "},{"title":"What structures do technical interviews have?​","type":1,"pageTitle":"Technical Interviews","url":"/workshops/interviews/technical/workshop#what-structures-do-technical-interviews-have","content":"Not all technical interviews are the same, but they tend to have similar elements: The interviewer describes a problem.You're expected to ask some questions about the problem (they may not tell you this, but it is always expected!)You solve the problem. Maybe this will be pair programming where you're at a keyboard together, maybe you'll be given a laptop or editor like CodeWars to write in online, maybe you'll be given a whiteboard to write on with a pen, or maybe you'll just talk.You are allowed to ask questions, and even if you're writing, you should always talk about what you're writing. The interviewer will ask you some questions about your solution.The interviewer may change the problem a bit, and ask you to solve it (again, either by writing it down, or just by talking about it). You may be asked to solve one problem, or more than one, but ordinarily you'll spend somewhere between 15 and 60 minutes on each problem you're asked. The interviewer probably doesn't care what programming language you use (so you should probably use Javascript!), and will say if they do. TODO: Work out how to advise trainees get this information: Some interviewers care a lot about details (like remembering every ;, and that you remember whether a function is called startsWith or beginsWith or hasPrefix). Others don't. It's worth asking how precise you need to be. Remember The goal is not to get to a solution as fast as possible. The goal is to show that you're going to be a good person to work with. Let's work through an example interview question to get a feel for how this works: Let's imagine an interviewer asked you: &quot;I want you to write a function which finds the longest word in a sentence&quot;. "},{"title":"Make sure you understand the problem, and state it back​","type":1,"pageTitle":"Technical Interviews","url":"/workshops/interviews/technical/workshop#make-sure-you-understand-the-problem-and-state-it-back","content":"The first thing you should do is: make sure you understand the problem. If you don't understand the problem, ask questions. If you do understand the problem, state the problem back to the interviewer, and state any assumptions you're making. Check that the assumptions are ok. For example, you may say back: &quot;Ok, you want me to write a function, which accepts one parameter which is a string, and returns a string back which is the longest word found in the parameter?&quot; Notice that there's more detail in this - we're talking about parameters, types, etc. The interviewer will probably say &quot;Yes, that's right&quot;, but you may be surprised! Maybe they will say &quot;actually, the parameter is an array of words, not a string&quot;. It's useful to make sure you agree on the problem - otherwise you may spend a lot of time solving a harder problem than the interviewer meant. Interviewers intentionally don't give you all of the information about a problem, to see how much you think about the gaps. Part of the test is to see what questions you ask, and what assumptions you make. tip You generally don't want to be making assumptions when solving problems - you always want to ask when things are underspecified, or say out loud what you're assuming and check with the interviewer that that's the right assumption to be making. "},{"title":"Think about the edge cases, and talk about them​","type":1,"pageTitle":"Technical Interviews","url":"/workshops/interviews/technical/workshop#think-about-the-edge-cases-and-talk-about-them","content":"Think about what the edge cases of the problem are, and talk about them. This is really important. It shows that you're going to be thoughtful, and write good software for the company. Think through every word in the problem statement, and work out which ones aren't completely clear. And think about examples that make those edge cases clear. For instance, in our example, here are some questions you may ask: What exactly is a word? In the sentence &quot;I have 7 cats, and they're all great.&quot;, which things are and aren't words? Is &quot;7&quot; a word?How do we need to handle punctuation? &quot;cats,&quot; should probably be &quot;cats&quot;, but &quot;they're&quot; should probably stay as &quot;they're&quot;? Or maybe words containing punctuation shouldn't count? What should we do if there's more than one longest word? For example, the sentence &quot;I like cats&quot;. Maybe we should return an array with both of them?Maybe we should return the one that comes alphabetically first? Or last?Maybe we should return the first one in the sentence? Or the last one? Or just any one?Maybe you should throw an exception? For each edge case, if there seems to be an obvious answer, suggest it and check if that's ok (even if you think it's obvious - the interviewer may still have a different idea). For instance, you may say: &quot;I think we should strip any leading or trailing punctuation from each word - sound ok?&quot; If you don't think there's an obvious answer, ask (ideally with an example, to make sure you're talking about the same thing). For instance, you may say: &quot;What should I do if there's more than one longest word? For instance in the sentence 'I like cats', both 'like' and 'cats' are four letters?&quot; The interviewer may tell you what to do, or may ask you what you think. If they ask you, give your answer and the reason why you think that. For instance you may say: &quot;It probably doesn't matter which word we return, but it'd probably be useful for our function to be consistent, so maybe returning the first longest word in the sentence.&quot; Your interviewer may also tell you that you don't need to worry about a particular edge case, e.g. they may say: &quot;We know that this function will only be called with sentences that don't contain any punctuation - you can just split on whitespace.&quot; "},{"title":"Solving the problem​","type":1,"pageTitle":"Technical Interviews","url":"/workshops/interviews/technical/workshop#solving-the-problem","content":"Now that you understand and are agreed on the problem, it's time to make a solution! (We're going to assume you're writing the solution, but the same ideas apply if you're just talking about it). "},{"title":"Get something working, then get it great​","type":1,"pageTitle":"Technical Interviews","url":"/workshops/interviews/technical/workshop#get-something-working-then-get-it-great","content":"Your next step is to come up with a solution. Some important guidelines: It's more important to come up with a solution than the perfect solution.​ So get something working, and then you can think about restructuring it if you want to improve it. For example, if you think you can either solve a problem with a for loop or with a few calls to map and filter, do whichever one you think is easiest. Once you've got that working, you can talk to your interviewer about improving it. e.g. after writing a solution with a for loop you may say &quot;I think this would be cleaner if I used filter&quot; - the interviewer may let you do that, may say &quot;yeah, maybe, but don't worry about doing it, I'd rather talk about something else&quot;, or may ask you to talk through the difference without actually writing down the changes. One of the reasons for this is that if your interview runs out of time, if you've solved a problem an easier way, an interviewer can easily say &quot;They solved the problem, and could talk about how they'd improve/finish it&quot;. If you try to solve a problem in a complicated way, and don't finish, the interviewer can only really say &quot;They didn't solve the problem&quot;. It's really really important that you talk through what you're thinking, particularly if you're stuck or confused.​ Remember An interviewer's goal is to see you at your best. They want you to succeed, which means if you need a little hint, they want to give it to you. But they can only do that if they know what you're stuck on. It can feel unnatural to talk through what you're thinking, particularly when you're confused or stuck. But in a technical interview, it's really important to do it anyway. Here's an example of how you might talk aloud for our example problem: I need to split the string into words, and then I need to find the longest word... To split the string into words, I need to remove any punctuation, and then split it on whitespace. Let's start with that, and I can work out the longest word part after. Ok, so I know I can use String.replace to get rid of the punctuation, as long as I know what characters are punctuation... But I'm not sure how to work out which characters are punctuation. At which point your interviewer may say something like &quot;Let's assume there's no punctuation&quot; (because they're not interested in that part), or &quot;assume you can call a function called stripPunctuation()&quot; (because they know we use libraries for lots of things, and this isn't what they want to focucs on), or they may give you a hint, like &quot;could we use a regular expression to find all of the characters that aren't letters or whitespace?&quot;. But if the interviewer doesn't know what you're thinking, they can't help - and they want to help. Remember An interviewer wants to see what you can do, not watch you struggle - they will help if they can! Saying aloud what you're thinking also allows the interviewer to see how you're thinking about the problem, which is something they want to see - you're making it easy for them to say &quot;Yes, I saw them break down the problem in a logical way&quot; and hire you. One other benefit of saying what you're thinking is it means if you're going in the wrong direction, the interviewer can help out! Imagine you're quitely trying to work out how to strip punctuation from a string, and the interviewer doesn't care about punctuation at all. If you're saying what you're thinking, the interviewer can say &quot;don't worry about that, it's not the interesting part of the problem&quot;. If you're just sitting quietly, the interviewer may think you're trying to work something else out, and can't help point you in the right direction. Naming is really important in an interview​ Because you're trying to quickly convey code to your inteviewer, it's even more important than usual to use clear names for variables. If you have variables x, y, and z, neither you nor the interviewer will probably find it very easy to follow your code. Pay attention to your variable names! Run through examples, out loud​ Once you think you've finished part of the problem, try talking through your code with an example, line-by-line. You have lots of experience of this from the &quot;Playing computer&quot; exercises you've done through the course. Your goal here is both to check that your code works, and to show your interviewer that your code works. It also shows that you're someone who cares that their code works, which is a really good thing in a colleague! For example, let's say you've written the following solution to our example problem: function longestWord(sentence) { const sentenceWithoutPunctuation = sentence.replace(/[^A-Za-z ]g/, &quot;&quot;); const words = sentenceWithoutPunctuation.split(&quot; &quot;); let longestWord = words[0]; for (const word of words) { if (word.length &gt; longestWord.length) { longestWord = word; } } return longestWord; }  Play computer with this code! You may say something like: sentence starts as &quot;I like cats!&quot; After running the replace, sentenceWithoutPunctuation will be &quot;I like cats&quot; After the split, words will be the array [&quot;I&quot;, &quot;like&quot;, &quot;cats&quot;]. longestWord will start off as the string &quot;I&quot;. We're going to loop through the words - the first time, word will be &quot;I&quot; &quot;I&quot;.length is 1 which is not greater than &quot;I&quot;.length&quot; which is also 1 so we skip the body of the if, and move on to the next word. &quot;like&quot;.length is 4 which is greater than 1, so we set longestWord to &quot;like&quot;, and continue around the loop. &quot;cats&quot;.length is 4, which is not greater than 4, so we skip the if. That's the end of the loop, so we will return &quot;like&quot;, which is the longest word of the sentence. If you find a problem with your code, say, and fix it! We all make bugs - by noticing the bug yourself, you're showing the interviewer that you pay attention to your code and whether it's right. It's a good idea to talk through each of the edge-cases you came up with earlier in the interview. If you're writing code on a text editor or whiteboard, it can also be useful to write values of variables next to them while you're talking through the code, so you don't have to remember them (and to make it easier for your interviewer to follow) - you can delete/erase the old values when they get overwritten. So the above code, in the middle of talking through an example, may look like: function longestWord(sentence) { const sentenceWithoutPunctuation = sentence.replace(/[^A-Za-z ]g/, &quot;&quot;); // &quot;I like cats&quot; const words = sentenceWithoutPunctuation.split(&quot; &quot;); // [&quot;I&quot;, &quot;like&quot;, &quot;cats&quot;] let longestWord = words[0]; // &quot;I&quot; for (const word of words) { // word = &quot;like&quot; if (word.length &gt; longestWord.length) { // 4 &gt; 1 longestWord = word; } } return longestWord; }  Suggest possible refactorings/improvements​ If you think you'd like to change your code to improve it (e.g. to improve a variable name, or to extract a function for a piece of repeated code), describe how you would like to change it to your interviewer. Because writing code on whiteboards or shared text environments can be fiddly, the interviewer may just say &quot;That's a good idea, but let's not bother&quot;, or they may ask you to make the change. But you suggesting an improvement highlights that you care about your code quality. Of course, if you think your code is fine as it is, that's fine too! "},{"title":"Answering questions about your solution​","type":1,"pageTitle":"Technical Interviews","url":"/workshops/interviews/technical/workshop#answering-questions-about-your-solution","content":"Your interviewer may now ask you some questions about your solution. Some examples of things the interviewer may ask about: Why you chose to do something one way rather than another (e.g. why you used a for loop instead of a call to map).Whether there are any interesting edge cases your code doesn't handle.If there is anything you would change about the code.TODO: Think about how to discuss: If there are any trade-offs you've made in your codeTODO: Think about whether to discuss efficiency at all.TODO: Expand this list. tip Asking you about other ways of solving the problem does not mean you did it wrong! It can still be interesting to talk about other ways to do things, even if yours is a good one! "},{"title":"Handling changing constraints​","type":1,"pageTitle":"Technical Interviews","url":"/workshops/interviews/technical/workshop#handling-changing-constraints","content":"After you've finished solving the problem, your interviewer may ask you to change your code, or change the problem a bit. This does not mean anything was wrong with your code, it's a normal way to expand a problem. For example, with our example question, the interviewer may tell you that, actually, words containing punctuation should be completely ignored and must never be returned, or that punctuation inside words counts as a letter. The interviewer may ask you to change your code, or may just ask you to talk through how you would change it without actually doing so. When making this kind of change, follow exactly the same steps as you did the first time - make sure you understand the problem, talk through any edge cases, and remember to keep thinking aloud! Follow-up questions and changes do not mean that you made a mistake. They're a normal part of an interview - don't worry about them. "},{"title":"Workshop​","type":1,"pageTitle":"Technical Interviews","url":"/workshops/interviews/technical/workshop#workshop","content":"We're now going to split into breakout rooms and practice some interview questions together. Your TA will have a list of technical interview questions to try out. "},{"title":"MongoDB 101","type":0,"sectionRef":"#","url":"/workshops/mongodb-101","content":"","keywords":""},{"title":"Before we start​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#before-we-start","content":"Download and install MongoDB fromhttps://www.mongodb.com/download-center#community. Follow the instructions for your platform (Windows, Linux or OS X). Open two instances of terminal. Run mongod in the first instance - this will start MongoDB. In the second instance, first download the sample data script:curl https://gist.githubusercontent.com/agiamas/35b2b954cc942f95709273d3cb9d2cf3/raw/b1bb399942dab287832d41b3b75f6b54c6f00bb1/mongodb_data.js &gt; mongo_data.js then import the data we just downloaded using mongo &lt; mongo_data.js  Finally, run mongo in the second terminal instance. "},{"title":"Lesson 1 - SQL and NoSQL​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#lesson-1---sql-and-nosql","content":"SQL is a well known paradigm in data storage and retrieval, serving us for decades. Our data was living in mainframes and being stored and processed in isolation. The nature of Web and mobile has created a paradigm shift in the past decade. Data has exploded in volume, veracity and velocity. We have many times semi-structured data of varying quality and unpredictable volumes of them. This has led to a new breed of databases, the NoSQL ones. Document databases, e.g. MongoDBGraph stores, e.g. Neo4Jkey-value stores, e.g. RedisWide-column stores , e.g. Cassandra In this class we will examine Document databases and its most popular one, MongoDB. First of all, how does MongoDB compare with traditional SQL queries that we have learned in the past? MongoDB to SQL Mapping https://s3.amazonaws.com/info-mongodb-com/sql_to_mongo.pdf "},{"title":"Lesson 2 - Why MongoDB​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#lesson-2---why-mongodb","content":"MongoDB is a leader in NoSQL database space. de facto leader in NoSQL database space.uses JSON, you are familiar with json in FE/Node, you can use it in DB layer too!one language to rule them all, part of MEAN stackmongodb data types as compared to JSON https://docs.mongodb.com/manual/reference/bson-types/We can even query by type!https://docs.mongodb.com/manual/reference/operator/query/type/ "},{"title":"Lesson 3 - Basic Commands​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#lesson-3---basic-commands","content":"Open the terminal that you ran mongo. First type show dbs You should see something similar to: admin 0.000GB local 0.000GB  Then type use cyf You should now get: switched to db cyf  That's it! You have created a new database. Now type again show dbs admin 0.000GB local 0.000GB  ??? Where is our new database? ??? Lazy initialisation. "},{"title":"Databases​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#databases","content":""},{"title":"Collections and Documents​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#collections-and-documents","content":"Collections are like tables in SQL databases. Initialising a collection is also happening lazily like this: &gt; db.Student.insert({name: 'alex'}) Now if we run again show dbs after we create a collection with a document we will see that the database appears in the list. This is because at the moment that we inserted this document, the document was created, which in turn created the collection which in turn created the database. "},{"title":"Exercise 1​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#exercise-1","content":"Insert a new student with name: Mary "},{"title":"Exercise 2​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#exercise-2","content":"Insert a new student with name: Madeline and id=2 (integer) "},{"title":"Exercise 3​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#exercise-3","content":"Insert a new student with name: Steve, midterm score of 80 and final score of 100 Scores should be embedded in a sub-document like this: scores: { midterm: 0, final: 0 }  "},{"title":"Finding Documents​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#finding-documents","content":"Finding a document by a single attribute: &gt; db.Student.find({name: 'alex'})  Querying embedded attributes: &gt; db.Student.find({&quot;scores.midterm&quot;: {$gte: 40}} )  AND / OR queries: &gt; db.Student.find({&quot;$or&quot;: [{&quot;scores.midterm&quot;: {$gt: 60}}, {&quot;scores.final&quot;: {$lte: 75}}]} )  "},{"title":"Exercise 4a​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#exercise-4a","content":"Find the user Mary that you inserted in exercise 1 "},{"title":"Exercise 4b​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#exercise-4b","content":"Search for students that have scored between [50,80) in midterm AND [80,100] in final exam In these two examples above we can see the operators GreaterThanEquals &gt;=, GreaterThan &gt; and LessThanEquals &lt;= in action. All operators in MongoDB:https://docs.mongodb.com/manual/reference/operator/query/ "},{"title":"Updating Documents​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#updating-documents","content":"Updating documents has 2 parts. The first one is finding the document(s) we want to update and the second one is modifying their values. (!) db.Student.update({name: 'alex'}, {name: 'alexander'})  What will this command do? REPLACE the first instance of document matching {name:'alex'} with the new {name:'alexander'} !!!! Definitely not what we want... &gt; db.Student.update({name: 'alex'}, {$set: {name: 'alexander'}})  We can also use other operators like $inc, $mul, $min, $max https://docs.mongodb.com/manual/reference/operator/update/#fields (!) Update by default will update only the first instance it matches. multi:true (!) We can get update to update or create the document by using upsert:true "},{"title":"Exercise 5​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#exercise-5","content":"Update the student madeline that you created back in exercise 2 to have midterm score of 50 and final score of 100 respectively. "},{"title":"Exercise 6​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#exercise-6","content":"Update the grades of all students to be 90 (!) How could we boost the grades of all students by 10%? (!) "},{"title":"Deleting documents​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#deleting-documents","content":"Deleting a single or more documents is as simple as: &gt; db.Student.remove({&quot;_id&quot;:ObjectId(&quot;5a99e1209056c9e237d071d9&quot;)}) WriteResult({ &quot;nRemoved&quot; : 1 })  Deleting a whole collection: db.Student.drop()  Deleting a database:db.dropDatabase() to delete the current database "},{"title":"Exercise 7​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#exercise-7","content":"Delete user steve that you created back in exercise 3 "},{"title":"Exercise 8​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#exercise-8","content":"Delete all users with midterm score less than 80 "},{"title":"Lesson 4 - Administration​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#lesson-4---administration","content":""},{"title":"Scripting the shell​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#scripting-the-shell","content":"There are several ways to write scripts for MongoDB shell: use mongo &lt; mongo_script.shuse mongo mongo_script.js What's the difference? The first one will pipe in our script and execute its lines one by one as if we were typing them in Mongo shell. The second one will evaluate our javascript and attempt to run it with Mongo shell. Always test scripts locally in MongoDB (and in general). Always test in staging before production. Always keep backups in production. And test that you can restore from these backups regualarly. All of these are important for every database system but even more important in MongoDB as... THERE IS NO ROLLBACK! There are no transactions. Once you delete something, it's gone. "},{"title":"Exercise 9​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#exercise-9","content":"Using MongoDB shell, create a script to output in a new collection named BoostedStudents one document for every document in Student collection with their final grade being boosted by 10%. "},{"title":"Aggregation​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#aggregation","content":"Why aggregation framework? Aggregation framework in MongoDB is modelled after the familiar concept of data processing pipelines. Documents enter the pipeline with the MongoDB structure and exit the other end transformed into BSON documents with calculated fields. Commands in a pipeline are executed sequentially and in the order that they appear in the array []. SQL\tAggregation frameworkWHERE / HAVING\t\\$match GROUP BY\t\\$group SELECT\t\\$project ORDER BY\t\\$sort LIMIT\t\\$limit sum() / count()\t\\$sum average()\t\\$avg join\t\\$lookup db.students.aggregate([ 1. { $match: { name: {$regex: /^aA/} } }, 2. { $group: { _id: &quot;$name&quot;, average: { $avg: &quot;$scores.final&quot; } } }, 3. { $sort: { average: -1 } }, 4. { $project: { name: 1, average: 1 } } ])  What does the pipeline above do? matches all documents with a name starting from aAgroups them by average final scoresorts them by average scoreprojects(selects) name and average score in the output What's the output like? {_id: .., name: .., average: ..}  More information: https://docs.mongodb.com/manual/aggregation/ "},{"title":"Exercise 10​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#exercise-10","content":"Now let's redo Exercise 9 using the aggregation framework. "},{"title":"Replication​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#replication","content":"Replication in MongoDB is used to increase redundancy and data availability. In its essence it's a way for 3 or more (or even 2 with some caveats..) servers to keep the same copy of data.  Writes always go to the primary and get propagated asynchronously to the secondaries. Reads can go to the primary or any of the secondaries. Election process: Replica sets implement by default automatic failover. If a primary server fails, the remaining secondaries will elect the new primary. This will by default be the secondary that is most &quot;up to date&quot; with the primary but we can affect (rig) the election process by assigning different votes to each server. More information:https://docs.mongodb.com/manual/core/replica-set-elections/ Using replication we can perform a few interesting tasks: delayed replica for backup. Delay backups by an hour, enabling us to recover from dropping a database in productionhidden replicas for reporting. These replicas will never become primaries so we can safely apply read load to them for reporting purposesreplicas in different location for disaster recoveryreplicas in different location to be closer to our users "},{"title":"Sharding​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#sharding","content":"Sharding is a method for horizontal scaling that MongoDB uses. It essentially partitions data across the shard key in different servers thereby distributing the read and write load. What is horizontal scaling? When our data exceeds the disk space, I/O capacity and/or memory available in a single server we have two options: Buy/Rent a bigger server. This is vertical scaling. It's of course the easiest way to scale but does not scale linearly in terms of cost and capacity.Distribute our data across different servers of the same initial capacity. This is called horizontal scaling, is more difficult to achieve but theoretically if we achieve linear scaling then our system can be infinitely scaleable. With MongoDB it's important to understand that we will start with #1 for as long as it makes financial sense. If we are on AWS it will probably be easier to tweak our replica set from S to M to L sized servers rether than implement sharding. At some point though, we should start planning for sharding, definitely sooner rather than later.  Sharding as we can see from the diagram above is not a trivial task. We need router(s) config servers and shards. Router: The router is essentially our query server. Queries no longer go to individual servers but must go to the router which will decide which server(s) hold our data. Config Servers: Config servers are holding configuration information for the whole cluster. They must be deployed as a replica set in order to achieve high availability. Shards: Each shard is essentially a replica set. Each shard holds a cut of our data and all the shards together hold the total of our data. More information:https://docs.mongodb.com/manual/sharding/ "},{"title":"What's next​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#whats-next","content":"If you have time and interest, please register to this class or any other class in MongoDB university. All classes are free and on average require 6-10 hours of time per week. https://university.mongodb.com/courses/M001/about "},{"title":"Shameless plug​","type":1,"pageTitle":"MongoDB 101","url":"/workshops/mongodb-101#shameless-plug","content":"I am also the author of the Mastering MongoDB 3.X book by Packt publishing, available here. "},{"title":"Processing.js Workshop","type":0,"sectionRef":"#","url":"/workshops/processing-js-workshop","content":"","keywords":""},{"title":"Where to start coding with p5.js​","type":1,"pageTitle":"Processing.js Workshop","url":"/workshops/processing-js-workshop#where-to-start-coding-with-p5js","content":"We recommend the site called OpenProcessing - it makes it easy to click &quot;new sketch&quot; and start immediately Alternatively, here's a starting sketch that defines functions the way you have learned so far If you want to use CodePen, here's a p5.js starting &quot;pen&quot;If you want to see the whole picture of how you could use this on a website, here's a website project on Glitch with HTML, CSS, and JavaScript filesA tutorial for a random words poster which works through a project using p5.js "},{"title":"Why change?​","type":1,"pageTitle":"Processing.js Workshop","url":"/workshops/processing-js-workshop#why-change","content":"Khan Academy platform is not stable for complicated programsKhan Academy doesn't &quot;feel professional&quot; or &quot;polished&quot;The Processing.js library used by Khan Academy has been retiredp5.js is much more widely used than Processing.jsp5.js has more and better documentation and tutorialsp5.js is more advanced and more powerful than Processing.js. You can make sketches that: Process video from the webcamProcess audio from your microphone Simplest example Load and show 3d modelsInteract with all sorts of other interesting JavaScript libraries Random example: p5.js pose-detection with using PoseNet You can use modern javascript language features, which make things nicer "},{"title":"Pick one element at random from an array​","type":1,"pageTitle":"Processing.js Workshop","url":"/workshops/processing-js-workshop#pick-one-element-at-random-from-an-array","content":"However, some of my favourite differences are very, very small. Here's one: If you have an array, you can pick one element of it at random, simply by passing the array as a parameter to the random() function. Example: // (inside your draw() function...) var colorNames = [&quot;maroon&quot;, &quot;skyblue&quot;, &quot;whitesmoke&quot;]; var chosenColor = random(colorNames); fill(chosenColor); var words = [&quot;code&quot;, &quot;your&quot;, &quot;future&quot;]; var chosenWord = random(words); text(chosenWord, 100, 100);  "},{"title":"Best place to learn p5.js​","type":1,"pageTitle":"Processing.js Workshop","url":"/workshops/processing-js-workshop#best-place-to-learn-p5js","content":"We recommend Daniel Shiffman's Youtube course: &quot;Code! Programming with p5.js&quot;. "},{"title":"What's OpenProcessing.org?​","type":1,"pageTitle":"Processing.js Workshop","url":"/workshops/processing-js-workshop#whats-openprocessingorg","content":"The above course introduces a website called &quot;p5.js web editor&quot; which allows you to quickly write your projects and test them out. It's ok, but we recommend a different website which does the same thing: https://www.openprocessing.org/. It has a huge gallery of work by other artists, and you can see all of their code to learn from! "},{"title":"When you read others' code and it makes no sense...​","type":1,"pageTitle":"Processing.js Workshop","url":"/workshops/processing-js-workshop#when-you-read-others-code-and-it-makes-no-sense","content":"Don't Panic! Do not be worried when you find a project that looks amazing but then you look at the code and can't understand it - this is normal. These projects can become VERY complex and the artists often aren't very concerned about how easy their code is to readCode reading is a skill you have to work onTake it slow. Study simpler projects to start with "},{"title":"Other courses​","type":1,"pageTitle":"Processing.js Workshop","url":"/workshops/processing-js-workshop#other-courses","content":"In addition to &quot;Code! Programming with p5.js&quot;... The creators of processing have a p5.js course on kadenze.com - &quot;Introduction to Programming for the Visual Arts with p5.js&quot; Joshua Davis has some courses on processing on skillshare, which is free for 2 months. Programming Graphics I: Introduction to Generative Art. This does not teach in javascript but in Processing, which uses the Java language instead. However, if you LOVE the topic, you could skim these videos and still learn a lot. Normally I would recommend getting strong in ONE language (JavaScript) for the first year or two of your programming journey. Mostly aimed at teachers: Introduction to Computational Media with p5.js has material for teachers to run a course. Trainees can find some interesting project ideas. If you want to stick with processing.js and Khan Academy longer, there is Advanced JS: Games and Visualizations. I haven't worked through this course, yet. "},{"title":"Some more differences between Processing.js and p5.js​","type":1,"pageTitle":"Processing.js Workshop","url":"/workshops/processing-js-workshop#some-more-differences-between-processingjs-and-p5js","content":"As discussed above, there are some differences between Processing.js (used in the Khan Academy environment) and p5.js. Here are some more details of the differences. "},{"title":"You must always define the draw() function​","type":1,"pageTitle":"Processing.js Workshop","url":"/workshops/processing-js-workshop#you-must-always-define-the-draw-function","content":"The draw function is not optional.All drawing operations (fill(), ellipse(), rect(), etc) should go inside the draw() function. "},{"title":"You can provide a setup() function for set-up​","type":1,"pageTitle":"Processing.js Workshop","url":"/workshops/processing-js-workshop#you-can-provide-a-setup-function-for-set-up","content":"It will be called before the first call to your draw() function. "},{"title":"If you don't want animation, you must call noLoop()​","type":1,"pageTitle":"Processing.js Workshop","url":"/workshops/processing-js-workshop#if-you-dont-want-animation-you-must-call-noloop","content":"Unlike Khan Academy's Processing.js, you must always define a draw() function, even if you don't want animation. noLoop() and loop() can be used to prevent or enable animation by repeated calls to the draw() function. The default is to animate. Live Demo: var setup = function () { noLoop(); }; var draw = function () { fill(random(255), random(255), random(255)); rect(50, 50, 400, 400); };  "},{"title":"You can't call Processing.js functions at the top level​","type":1,"pageTitle":"Processing.js Workshop","url":"/workshops/processing-js-workshop#you-cant-call-processingjs-functions-at-the-top-level","content":"You can't call functions like random(), fill(), color(), rect() at the top-level (i.e. outside of the p5.js functions such setup(), draw(), mousePressed(), etc). If you try to do this, you'll get an error such as Uncaught ReferenceError: random is not defined The editor at OpenProcessing.org is kind enough to add the following good advice - read your error messages! Did you just try to use p5.js's random() function? If so, you may want to move it into your sketch's setup() function. "},{"title":"Global variables must be initialised in setup(), if they need p5.js functions​","type":1,"pageTitle":"Processing.js Workshop","url":"/workshops/processing-js-workshop#global-variables-must-be-initialised-in-setup-if-they-need-p5js-functions","content":"If you want a global variable to be initialised at random, using p5.js's random() function, you must do it in two parts: Declare the variable var xPos; outside of the setup() functionInitialise the variable inside the setup() function. Example: xPos = random(0, 400); GOOD CODE example - do this if you need to initialise a global variable using random() or color() or width or height... var xPos; var setup = function () { xPos = random(0, 400); };  BAD CODE example - this won't work // Start of program var xPos = random(0, 400); // can't call random() outside of setup() or draw(), etc. var draw = function () { rect(xPos, 100, 50, 50); };  "},{"title":"The default canvas is only 100, 100...​","type":1,"pageTitle":"Processing.js Workshop","url":"/workshops/processing-js-workshop#the-default-canvas-is-only-100-100","content":"However, you can make it bigger calling createCanvas() in setup(). Live Demo of specifying canvas size: var setup = function () { createCanvas(windowWidth, windowHeight); };  p5.js provides global variables windowWidth and windowHeight, AND width and height which will hold the size of the canvas. "},{"title":"Where's the documentation?​","type":1,"pageTitle":"Processing.js Workshop","url":"/workshops/processing-js-workshop#wheres-the-documentation","content":"The p5.js documentation is at https://p5js.org/reference/. Each function has multiple examples of how it can be used. "},{"title":"Other migration guides​","type":1,"pageTitle":"Processing.js Workshop","url":"/workshops/processing-js-workshop#other-migration-guides","content":"If you want to stick with Processing.js, Khan Academy have this guide to using Processing.js outside Khan Academy. "}]