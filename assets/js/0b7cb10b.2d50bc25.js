"use strict";(self.webpackChunkcodeyourfuture_syllabus=self.webpackChunkcodeyourfuture_syllabus||[]).push([[2298],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return c}});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=p(n),c=a,m=h["".concat(l,".").concat(c)]||h[c]||d[c]||r;return n?o.createElement(m,i(i({ref:t},u),{},{components:n})):o.createElement(m,i({ref:t},u))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},60987:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},assets:function(){return u},toc:function(){return d},default:function(){return c}});var o=n(87462),a=n(63366),r=(n(67294),n(3905)),i=["components"],s={id:"workshop",title:"Express Workshop",sidebar_label:"Express Workshop"},l=void 0,p={unversionedId:"node/workshops/workshop",id:"node/workshops/workshop",title:"Express Workshop",description:"This class is based on the Node Girls Express Workshop",source:"@site/docs/node/workshops/workshop.md",sourceDirName:"node/workshops",slug:"/node/workshops/workshop",permalink:"/node/workshops/workshop",editUrl:"https://github.com/CodeYourFuture/Syllabus-V2/edit/master/docs/node/workshops/workshop.md",tags:[],version:"current",frontMatter:{id:"workshop",title:"Express Workshop",sidebar_label:"Express Workshop"},sidebar:"Node",previous:{title:"Instructor Notes",permalink:"/node/week-3/instructors"},next:{title:"CYF Hotel Workshop",permalink:"/node/workshops/cyf-hotel"}},u={},d=[{value:"1. Make a <code>package.json</code> file",id:"1-make-a-packagejson-file",level:2},{value:"1. Create a <code>server.js</code> file",id:"1-create-a-serverjs-file",level:2},{value:"2. <code>require</code> the <code>express</code> library",id:"2-require-the-express-library",level:2},{value:"3. Initialise the server",id:"3-initialise-the-server",level:2},{value:"4. Start &#39;listening&#39; for potential requests",id:"4-start-listening-for-potential-requests",level:2},{value:"5. Switch the server on!",id:"5-switch-the-server-on",level:2},{value:"What is a handler function?",id:"what-is-a-handler-function",level:3},{value:"What does a handler function look like in Express?",id:"what-does-a-handler-function-look-like-in-express",level:3},{value:"1. Create your own handler function.",id:"1-create-your-own-handler-function",level:2},{value:"2. Tell your handler function what to do",id:"2-tell-your-handler-function-what-to-do",level:2},{value:"3. Check it out in your browser",id:"3-check-it-out-in-your-browser",level:2},{value:"What is an endpoint?",id:"what-is-an-endpoint",level:3},{value:"What is URL?",id:"what-is-url",level:3},{value:"1. Create your own endpoints and send different responses",id:"1-create-your-own-endpoints-and-send-different-responses",level:2},{value:"Step 6 - Serving static files",id:"step-6---serving-static-files",level:3},{value:"1. Serve static files from your server",id:"1-serve-static-files-from-your-server",level:2},{value:"HTTP request methods",id:"http-request-methods",level:3},{value:"The <code>POST</code> http request method",id:"the-post-http-request-method",level:3},{value:"Receiving the blog post on the server",id:"receiving-the-blog-post-on-the-server",level:3},{value:"Extracting the blog post",id:"extracting-the-blog-post",level:3},{value:"Step 8 - Saving your blog post",id:"step-8---saving-your-blog-post",level:3},{value:"Writing to your hard drive",id:"writing-to-your-hard-drive",level:3},{value:"Reading from your hard drive",id:"reading-from-your-hard-drive",level:3},{value:"Things to remember",id:"things-to-remember",level:3},{value:"Step 9 - Displaying your blog posts",id:"step-9---displaying-your-blog-posts",level:3}],h={toc:d};function c(e){var t=e.components,s=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},h,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This class is based on the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/node-girls/express-workshop"},"Node Girls Express Workshop"))),(0,r.kt)("p",null,"Fork the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CodeYourFuture/express-workshop"},"express-workshop repository")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"git clone https://github.com/YOUR-USERNAME/express-workshop\n")),(0,r.kt)("h1",{id:"step-1---setting-up-your-project"},"Step 1 - Setting up your project"),(0,r.kt)("p",null,"When creating a Node.js project, you will be installing a lot of different\nthings along the way. If you want to share your project with others, you need to\nhave a list of the things you installed, so that other people know what to\ninstall in order to run the project."),(0,r.kt)("p",null,"In Node.js, this 'list' file is called a ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),". The 'things you've\ninstalled' are referred to as ",(0,r.kt)("strong",{parentName:"p"},"dependencies"),". Creating this file is the first\nstep in setting up your Node.js project."),(0,r.kt)("h2",{id:"1-make-a-packagejson-file"},"1. Make a ",(0,r.kt)("inlineCode",{parentName:"h2"},"package.json")," file"),(0,r.kt)("p",null,"Let's start by creating the ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," file. We can add things to it as the\nproject grows. The ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," file is easy to create from the command line.\nType the following command into your terminal to get started:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"$ npm init\n")),(0,r.kt)("p",null,"This command will initialise a step-by-step process for creating the\n",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),". You should see something like this:"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/node-girls/workshop-cms/master/readme-images/step1-npm-init01.png",alt:"starting npm init"})),(0,r.kt)("p",null,"It will ask you a bunch of questions."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"You can skip most of the questions but change the ",(0,r.kt)("inlineCode",{parentName:"p"},"entry point")," from\n",(0,r.kt)("inlineCode",{parentName:"p"},"(index.js)")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"server.js"),".")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The wizard asks you for the following information: ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"version"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"description"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"main"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"test"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"repository"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"keywords"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"author"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"license")," -\ndo you understand all of them?")),(0,r.kt)("p",null,"At the endo of the wizard, you should see a new file called ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," in\nyour project's folder."),(0,r.kt)("p",null,"Here is an example ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," file for a project called\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jaredhanson/passport/blob/master/package.json"},"Passport"),"."),(0,r.kt)("h1",{id:"what-is-json"},"What is JSON?"),(0,r.kt)("p",null,"JSON is a type of file for structuring data in a readable way. It is also a\nreally popular format for sending data across the web. JSON is a string\nrepresentation of a Javascript object. JSON objects convert really easily to\nJavascript objects, and vice versa, with ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON.parse()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON.stringify()"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "firstName": "John",\n  "lastName": "Smith",\n  "isAlive": true,\n  "age": 25,\n  "address": {\n    "streetAddress": "21 2nd Street",\n    "city": "New York",\n    "state": "NY",\n    "postalCode": "10021-3100"\n  },\n  "phoneNumbers": [\n    {\n      "type": "home",\n      "number": "212 555-1234"\n    },\n    {\n      "type": "office",\n      "number": "646 555-4567"\n    },\n    {\n      "type": "mobile",\n      "number": "123 456-7890"\n    }\n  ],\n  "children": [],\n  "spouse": null\n}\n')),(0,r.kt)("h1",{id:"step-2---installing-express"},"Step 2 - Installing Express"),(0,r.kt)("p",null,"Before we write any code, you'll need to install the Express library. We're\ngoing to use the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://www.npmjs.com/"},"Node Package Manager (npm)"))," to\ndownload it using the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"npm install"))," command."),(0,r.kt)("p",null,'NPM is the place to go to download other Node code written by other people.\nThere are thousands of open-source, 3rd-party Node modules (also known as\n"packages") by other people that you can download and use in your own projects.'),(0,r.kt)("p",null,"As we install Express, we'll need to update the ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," to add Express as\na dependency. We do this so that other people working on the project will know\nto install Express before running any of the code. This can be done by adding\n",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"--save"))," to the end of your command."),(0,r.kt)("p",null,"Run the following command in your terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm install express --save\n")),(0,r.kt)("p",null,"Express should now be installed. Check your ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," file to make sure it\nhas been added as a dependency. It will look like this:"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://cloud.githubusercontent.com/assets/10683087/16382664/be35f0b4-3c79-11e6-82b6-ae9e4a037c3f.png",alt:"package.json screenshot"})),(0,r.kt)("h1",{id:"step-3---building-the-server"},"Step 3 - Building the server"),(0,r.kt)("p",null,"The first thing we need to do is build our server. You will always need to build\na server when writing back-end code. A server can be built in pure Node.js, but\nExpress gives us simpler syntax to work with."),(0,r.kt)("h2",{id:"1-create-a-serverjs-file"},"1. Create a ",(0,r.kt)("inlineCode",{parentName:"h2"},"server.js")," file"),(0,r.kt)("p",null,"Let's build our server! Before we do anything, let's create a new file called\n",(0,r.kt)("inlineCode",{parentName:"p"},"server.js"),". This is where all our server code is going to live."),(0,r.kt)("h2",{id:"2-require-the-express-library"},"2. ",(0,r.kt)("inlineCode",{parentName:"h2"},"require")," the ",(0,r.kt)("inlineCode",{parentName:"h2"},"express")," library"),(0,r.kt)("p",null,"We already installed Express in Step 2, but we need to make sure it is included\nin this file specifically so we can make use of its methods. In Node.js, when\nyou want to access the functionality of a library or module in another file, you\n",(0,r.kt)("inlineCode",{parentName:"p"},"require")," it."),(0,r.kt)("p",null,"To import Express, write the following inside ",(0,r.kt)("inlineCode",{parentName:"p"},"server.js"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const express = require("express");\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"We will try and get used to ES6 syntax - so use ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," instead of\n",(0,r.kt)("inlineCode",{parentName:"p"},"var"),".")),(0,r.kt)("h2",{id:"3-initialise-the-server"},"3. Initialise the server"),(0,r.kt)("p",null,"To initialise our server, we just need to call the ",(0,r.kt)("inlineCode",{parentName:"p"},"express()")," function. This\nwill create an Express application for us to work with."),(0,r.kt)("p",null,"Add the second line of code to your ",(0,r.kt)("inlineCode",{parentName:"p"},"server.js")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const express = require("express");\nconst app = express();\n')),(0,r.kt)("h2",{id:"4-start-listening-for-potential-requests"},"4. Start 'listening' for potential requests"),(0,r.kt)("p",null,"One more step left, we need to set a ",(0,r.kt)("strong",{parentName:"p"},"port")," for our server to listen to. Think\nof a port as a door number; any requests that come to the server will come via\nthat door. Setting a port will allow us to find where our server is running."),(0,r.kt)("p",null,"We use the ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"app.listen"))," method to do this. This method takes two arguments:\na ",(0,r.kt)("strong",{parentName:"p"},"port")," and a ",(0,r.kt)("strong",{parentName:"p"},"callback function")," telling it what to do once the server is\nrunning. Need clarification? Read more about the ",(0,r.kt)("inlineCode",{parentName:"p"},"app.listen")," method in the\n",(0,r.kt)("a",{parentName:"p",href:"https://expressjs.com/en/4x/api.html#app.listen"},"Express documentation"),"."),(0,r.kt)("p",null,"We're going to run our server on port ",(0,r.kt)("inlineCode",{parentName:"p"},"3000"),", and run a simple ",(0,r.kt)("inlineCode",{parentName:"p"},"console.log")," as\nour callback function. Update your ",(0,r.kt)("inlineCode",{parentName:"p"},"server.js")," file, calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"app.listen"),"\nmethod:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const express = require("express");\nconst app = express();\n\napp.listen(3000, function () {\n  console.log("Server is listening on port 3000. Ready to accept requests!");\n});\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Try to use ES6 arrow functions instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"function"),".")),(0,r.kt)("h2",{id:"5-switch-the-server-on"},"5. Switch the server on!"),(0,r.kt)("p",null,"You've built your server, but it isn't running yet. We need to run a command in\nthe terminal to do this. We are going to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"node")," keyword to run the\nserver file."),(0,r.kt)("p",null,"Type the following command in your terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"node server.js\n")),(0,r.kt)("p",null,"If you see this, congratulations! You have built yourself a server!"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/node-girls/workshop-cms/master/readme-images/step2-server02.png",alt:"success"})),(0,r.kt)("h1",{id:"step-4---communicating-with-the-server"},"Step 4 - Communicating with the server"),(0,r.kt)("p",null,"Now that we've built the server, we need to communicate with it. We're going to\ncontrol the server with ",(0,r.kt)("strong",{parentName:"p"},"handler functions"),"."),(0,r.kt)("h3",{id:"what-is-a-handler-function"},"What is a handler function?"),(0,r.kt)("p",null,"When a request reaches the server, we need a way of responding to it. In comes\nthe handler function. The handler function is just a function which receives\nrequests and handles them, hence the name."),(0,r.kt)("p",null,"The handler function always takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"request")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"response")," object, and sends\nthe response back to the client along with some information. You can decide what\nto send back in your response."),(0,r.kt)("h3",{id:"what-does-a-handler-function-look-like-in-express"},"What does a handler function look like in Express?"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"get()")," ",(0,r.kt)("a",{parentName:"p",href:"https://expressjs.com/en/api.html#app.get.method"},"method")," is used to\ndefine a handler function in Express. It takes two parameters: the ",(0,r.kt)("strong",{parentName:"p"},"endpoint"),"\nat which to trigger an action (we'll explain more about this in the next step),\nand the handler function that tells it exactly what to do. Here's a simple\n\"Hello World!\" example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// req is the Request object, res is the Response object\n// (these are just variable names, they can be anything but it\'s a convention to call them req and res)\napp.get("/", function (req, res) {\n  res.send("Hello World!");\n});\n')),(0,r.kt)("p",null,'Here, we are telling our server to respond with "Hello World!" when someone\ntries to access the webpage.'),(0,r.kt)("h2",{id:"1-create-your-own-handler-function"},"1. Create your own handler function."),(0,r.kt)("p",null,"We are now making a handler function with a custom message in our response. You\ncan write any message you want."),(0,r.kt)("p",null,"Update your ",(0,r.kt)("inlineCode",{parentName:"p"},"server.js")," file with an empty ",(0,r.kt)("inlineCode",{parentName:"p"},"app.get()")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const express = require("express");\nconst app = express();\n\napp.get("/", function (req, res) {});\n\napp.listen(3000, function () {\n  console.log("Server is listening on port 3000. Ready to accept requests!");\n});\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Exercise: Try to ",(0,r.kt)("inlineCode",{parentName:"p"},"console.log")," the ",(0,r.kt)("inlineCode",{parentName:"p"},"request")," object inside the handler\nfunction. Restart your server, refresh the browser, then go to your terminal\nto see what it looks like. You should see a lot of data come through.")),(0,r.kt)("h2",{id:"2-tell-your-handler-function-what-to-do"},"2. Tell your handler function what to do"),(0,r.kt)("p",null,"We want our handler function to send back a message to the client. To do that,\nwe're going to use the Express ",(0,r.kt)("inlineCode",{parentName:"p"},"send()"),"\n",(0,r.kt)("a",{parentName:"p",href:"https://expressjs.com/en/api.html#res.send"},"method"),". This will update the\nresponse object with the message."),(0,r.kt)("p",null,"Update your handler function like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const express = require("express");\nconst app = express();\n\napp.get("/", function (req, res) {\n  res.send("Yay Node Girls!");\n});\n\napp.listen(3000, function () {\n  console.log("Server is listening on port 3000. Ready to accept requests!");\n});\n')),(0,r.kt)("h2",{id:"3-check-it-out-in-your-browser"},"3. Check it out in your browser"),(0,r.kt)("p",null,"Quit your server in the terminal with ",(0,r.kt)("inlineCode",{parentName:"p"},"ctrl + c"),". Then restart it to run your\nnew changes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"node server.js\n")),(0,r.kt)("p",null,"Now, open your favourite browser (we like Chrome), and navigate to\n",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:3000"),". If you see your message in the browser,\ncongratulations! You just sent your first response from the server."),(0,r.kt)("h1",{id:"step-5---routing"},"Step 5 - Routing"),(0,r.kt)("p",null,"At the moment our server only does one thing. When it receives a request from\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"/"),' endpoint, it sends back the same response: "Yay Node Girls!".'),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Try typing http://localhost:3000/nodegirls and see what happens.")),(0,r.kt)("p",null,"However by making use of endpoints, we can make the server send different\nresponses for different requests. This concept is called ",(0,r.kt)("strong",{parentName:"p"},"routing"),"."),(0,r.kt)("h3",{id:"what-is-an-endpoint"},"What is an endpoint?"),(0,r.kt)("p",null,"An endpoint is the part of the URL which comes after ",(0,r.kt)("inlineCode",{parentName:"p"},"/"),". For example:\n",(0,r.kt)("inlineCode",{parentName:"p"},"/chocolate"),' is the "chocolate" endpoint. It\'s the URL to which you send a\nrequest.'),(0,r.kt)("h3",{id:"what-is-url"},"What is URL?"),(0,r.kt)("p",null,(0,r.kt)("img",{loading:"lazy",alt:"URL structure",src:n(99795).Z,title:"URL",width:"707",height:"168"})),(0,r.kt)("h2",{id:"1-create-your-own-endpoints-and-send-different-responses"},"1. Create your own endpoints and send different responses"),(0,r.kt)("p",null,"We're going to try sending different responses at different endpoints. Remember\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"app.get()")," method? To set up routing in your server, we just need to repeat\nthis method with different endpoints."),(0,r.kt)("p",null,"For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'app.get("/", function (req, res) {\n  res.send("Hello World!");\n});\n\napp.get("/chocolate", function (req, res) {\n  res.send("Mm chocolate :O");\n});\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Exercise:")," Add some code so that your server sends one message when the\nendpoint is ",(0,r.kt)("inlineCode",{parentName:"p"},"/node")," and another one when it's ",(0,r.kt)("inlineCode",{parentName:"p"},"/girls"),".")),(0,r.kt)("h3",{id:"step-6---serving-static-files"},"Step 6 - Serving static files"),(0,r.kt)("p",null,"So we know how to send back a simple message. But what if you want to send back\na whole HTML page, or an image?"),(0,r.kt)("p",null,"Things like HTML files, images etc are known as ",(0,r.kt)("strong",{parentName:"p"},"static assets"),'. If you want\nyour server to "serve" static assets back to the browser, you need to do\nsomething different than just using the ',(0,r.kt)("inlineCode",{parentName:"p"},"res.send()")," method."),(0,r.kt)("p",null,"To be able to send any file from the server we need a special, built-in\n",(0,r.kt)("strong",{parentName:"p"},"middleware")," function that comes with Express: ",(0,r.kt)("inlineCode",{parentName:"p"},"express.static()"),". Read more\nabout it ",(0,r.kt)("a",{parentName:"p",href:"https://expressjs.com/en/starter/static-files.html"},"here"),"."),(0,r.kt)("p",null,'Say we want to serve all the static assets in our "public" folder. The\n',(0,r.kt)("inlineCode",{parentName:"p"},"express.static()")," function will look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'app.use(express.static("public"));\n')),(0,r.kt)("h2",{id:"1-serve-static-files-from-your-server"},"1. Serve static files from your server"),(0,r.kt)("p",null,"Delete all your ",(0,r.kt)("inlineCode",{parentName:"p"},"app.get")," endpoint functions, and replace them with the line of\ncode above. Restart your server, refresh your browser and see what happens! If\nyou see a Node Girls CMS, then your static assets have been successfully served."),(0,r.kt)("h3",{id:"http-request-methods"},"HTTP request methods"),(0,r.kt)("p",null,"All requests use one of the ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP methods"),". The main ones are: ",(0,r.kt)("inlineCode",{parentName:"p"},"GET, POST, PUT, DELETE"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"app.get")," deals with requests that use the ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," HTTP method."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"We will go into these Methods into more details, but for now, think of ",(0,r.kt)("inlineCode",{parentName:"p"},"GET"),"\nas a method for Getting data. ",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," is for POSTing/inserting new data. ",(0,r.kt)("inlineCode",{parentName:"p"},"PUT"),"\nis for updating. ",(0,r.kt)("inlineCode",{parentName:"p"},"DELETE")," is for deleting data.")),(0,r.kt)("h3",{id:"the-post-http-request-method"},"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"POST")," http request method"),(0,r.kt)("p",null,"When sending data to the server, we use the ",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," http request method, instead\nof ",(0,r.kt)("inlineCode",{parentName:"p"},"GET"),"."),(0,r.kt)("p",null,"Let's try ",(0,r.kt)("inlineCode",{parentName:"p"},"POST"),"ing some text to the server."),(0,r.kt)("p",null,"We're going to add a form to the ",(0,r.kt)("inlineCode",{parentName:"p"},"index.html")," page, so that you can write your\nblogposts from there."),(0,r.kt)("p",null,"Open up the ",(0,r.kt)("inlineCode",{parentName:"p"},"index.html")," file in your text editor. If you have a look, you\nshould see this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<div class="entry-container">\n  \x3c!--PASTE YOUR CODE HERE!! --\x3e\n</div>\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Replace the greyed-out comment with this code snippet:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<h3>Create a blog post</h3>\n<form action="/create-post" method="POST">\n  <textarea name="blogpost" rows="10" cols="14"></textarea>\n  <button type="submit">Send</button>\n</form>\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"This form has a text area and a Send button."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"action")," attribute is the endpoint form data will be sent to."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"name")," attribute will be used later to reference the data.")),(0,r.kt)("p",null,"When you hit Send, the form will send a ",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," request to the server, using\nwhatever is in the ",(0,r.kt)("inlineCode",{parentName:"p"},"action")," attribute as the endpoint. In our case it's\n",(0,r.kt)("inlineCode",{parentName:"p"},"/create-post"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Exercise:")," Open Chrome Developers tool, click the button and see what\nhappens.")),(0,r.kt)("h3",{id:"receiving-the-blog-post-on-the-server"},"Receiving the blog post on the server"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Data doesn't come through the server in one go; it flows to the server in a\n",(0,r.kt)("strong",{parentName:"p"},"stream"),". Think of a stream as water flowing from a tap into a bucket. Your\njob is to collect this water in the server.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"If we were writing a pure Node server, we would have to think about how to\ncollect the stream of data properly. But luckily for us, Express handles all\nof that stuff under the hood.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"All you need to do is define a route to deal with requests that come through\non the ",(0,r.kt)("inlineCode",{parentName:"p"},"/create-post")," endpoint."))),(0,r.kt)("p",null,"Let's remind ourselves of a simple ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," route in Express:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'app.get("/hello-world", function (req, res) {\n  res.send("Hello there!");\n});\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Exercise:")," This time we want to define a route to deal with a ",(0,r.kt)("inlineCode",{parentName:"p"},"POST"),"\nrequest not a ",(0,r.kt)("inlineCode",{parentName:"p"},"GET"),". What do you think you would need to do differently?\nExperiment and see if you can define a route for the ",(0,r.kt)("inlineCode",{parentName:"p"},"/create-post")," endpoint!"),(0,r.kt)("p",{parentName:"blockquote"},"For now, make your ",(0,r.kt)("inlineCode",{parentName:"p"},"/create-post")," handler simply do this: ",(0,r.kt)("inlineCode",{parentName:"p"},"console.log('I am /create-post endpoint')"),".")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"extracting-the-blog-post"},"Extracting the blog post"),(0,r.kt)("p",null,"Now the contents of your blogpost is hidden in your ",(0,r.kt)("inlineCode",{parentName:"p"},"req")," object somewhere.\nNormally you would extract it using ",(0,r.kt)("inlineCode",{parentName:"p"},"req.body"),". Try to console.log ",(0,r.kt)("inlineCode",{parentName:"p"},"req.body"),"\nnow."),(0,r.kt)("p",null,"Getting ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),"? Not to worry, that's normal. When data has been ",(0,r.kt)("inlineCode",{parentName:"p"},"POST"),"ed to\nthe server as ",(0,r.kt)("inlineCode",{parentName:"p"},"FormData"),", we need to do things slightly differently to access\nthe data that's come through in the request."),(0,r.kt)("p",null,"We need another middleware function. Something that can get extract the contents\nout of the special ",(0,r.kt)("inlineCode",{parentName:"p"},"FormData")," object. For this we will use ",(0,r.kt)("inlineCode",{parentName:"p"},"express-formidable"),".\n",(0,r.kt)("inlineCode",{parentName:"p"},"express-formidable")," is another Express middleware. It will extract the form\ndata from the request and make it available to you when you do ",(0,r.kt)("inlineCode",{parentName:"p"},"req.fields"),"."),(0,r.kt)("p",null,"This time though, ",(0,r.kt)("inlineCode",{parentName:"p"},"express-formidable")," is not built-in, we need to explicitly\ninstall it."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"In your terminal, install express-formidable")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install express-formidable --save\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"require")," ",(0,r.kt)("inlineCode",{parentName:"p"},"express-formidable")," so you can use it in your code. You can't use\ndashes in JavaScript variable names, so just call it ",(0,r.kt)("inlineCode",{parentName:"p"},"const formidable"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const formidable = require("express-formidable");\n')),(0,r.kt)("p",null,"Now add this towards the top of your server, after your ",(0,r.kt)("inlineCode",{parentName:"p"},"require"),"s and\n",(0,r.kt)("inlineCode",{parentName:"p"},"app.use(express.static('public'))"),", but before your ",(0,r.kt)("inlineCode",{parentName:"p"},"/create-post")," endpoint:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"app.use(formidable());\n")),(0,r.kt)("p",null,"Now inside your ",(0,r.kt)("inlineCode",{parentName:"p"},"/create-post")," function, add:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"console.log(req.fields);\n")),(0,r.kt)("p",null,"Refresh your server and have another go at writing a blogpost."),(0,r.kt)("p",null,"You should now see an object in the console. The key should be ",(0,r.kt)("inlineCode",{parentName:"p"},"blogpost"),", just\nlike the name attribute in the form on the HTML page. The value of ",(0,r.kt)("inlineCode",{parentName:"p"},"blogpost"),"\nwill be your message!"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Exercise"),": Try putting ",(0,r.kt)("inlineCode",{parentName:"p"},"app.use(formidable());")," at the end of the file\n(after the ",(0,r.kt)("inlineCode",{parentName:"p"},"create-post")," but before starting the server)")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"What is a middleware in Express?")," Middleware functions are functions that\nhave access to the request object (req), the response object (res), and the\nnext function in the application\u2019s request-response cycle. The next function\nis a function in the Express router which, when invoked, executes the\nmiddleware succeeding the current middleware. Read more on\n",(0,r.kt)("a",{parentName:"p",href:"https://expressjs.com/en/guide/writing-middleware.html"},"the Express documentation"))),(0,r.kt)("h3",{id:"step-8---saving-your-blog-post"},"Step 8 - Saving your blog post"),(0,r.kt)("p",null,"Right now, your precious blog posts aren't being saved anywhere, which is a bit\nof a shame. Let's do something about that."),(0,r.kt)("p",null,"You'll note that in the data folder there's a new file called ",(0,r.kt)("inlineCode",{parentName:"p"},"posts.json"),"."),(0,r.kt)("p",null,"If you look at ",(0,r.kt)("inlineCode",{parentName:"p"},"posts.json")," will see there's already one blog post there. The\nformat is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"{\n    [timestamp]: [blog post message]\n}\n")),(0,r.kt)("p",null,"We've used a timestamp as the key so that the blog posts are listed in\nchronological order. Also, it's a record of when the blog post was created."),(0,r.kt)("h3",{id:"writing-to-your-hard-drive"},"Writing to your hard drive"),(0,r.kt)("p",null,"Anytime a blog post comes through to the server, we want to save the data on\nyour computer's hard drive. To do this, we need to use a built-in Node module:\n",(0,r.kt)("inlineCode",{parentName:"p"},"fs"),", which stands for 'file-system'."),(0,r.kt)("p",null,"Built-in Node modules - ",(0,r.kt)("strong",{parentName:"p"},"core Node modules")," - are rather like the built-in\nExpress middleware functions. Only difference is that where you need to have\ninstalled Express to use Express middleware functions, the core Node modules\ncome automatically with Node itself."),(0,r.kt)("p",null,"To use ",(0,r.kt)("inlineCode",{parentName:"p"},"fs"),", you'll need to require it at the top of your server file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const fs = require("fs");\n')),(0,r.kt)("p",null,"The method we need to write to your hard drive is ",(0,r.kt)("inlineCode",{parentName:"p"},"fs.writeFile"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'fs.writeFile("path/to/file", yourData, function (error) {\n  // do something\n});\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Argument 1: the location of the file you want to write to"),(0,r.kt)("li",{parentName:"ul"},"Argument 2: the data you want to write"),(0,r.kt)("li",{parentName:"ul"},"Argument 3: the callback function")),(0,r.kt)("p",null,"The 'path/to/file' will be replaced with the actual path to the file you want to\nwrite to. If it doesn't exist, ",(0,r.kt)("inlineCode",{parentName:"p"},"fs.writeFile")," cleverly creates one for you. But\nwe already have ",(0,r.kt)("inlineCode",{parentName:"p"},"posts.json"),", so not to worry."),(0,r.kt)("h3",{id:"reading-from-your-hard-drive"},"Reading from your hard drive"),(0,r.kt)("p",null,"To read data that's already there, you would use ",(0,r.kt)("inlineCode",{parentName:"p"},"fs.readFile"),". The way to use\n",(0,r.kt)("inlineCode",{parentName:"p"},"fs.readFile")," is very similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"fs.writeFile"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'fs.readFile("path/to/file", function (error, file) {\n  // do something\n});\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Argument 1: the location of the file you want to read from"),(0,r.kt)("li",{parentName:"ul"},"Argument 2: the callback function")),(0,r.kt)("p",null,"You'll notice that ",(0,r.kt)("inlineCode",{parentName:"p"},"fs.readFile"),"'s callback function takes a second argument.\nThat argument would be the file you're reading."),(0,r.kt)("p",null,"Let's read the data from the ",(0,r.kt)("inlineCode",{parentName:"p"},"posts.json")," file. Make sure you've ",(0,r.kt)("inlineCode",{parentName:"p"},"require"),"d the\n",(0,r.kt)("inlineCode",{parentName:"p"},"fs")," core Node module at the top of your server file somewhere."),(0,r.kt)("p",null,"Add this code to your server (put it anywhere after the ",(0,r.kt)("inlineCode",{parentName:"p"},"require"),"s for now):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'fs.readFile(__dirname + "/data/posts.json", function (error, file) {\n  console.log(file);\n});\n')),(0,r.kt)("p",null,"(",(0,r.kt)("inlineCode",{parentName:"p"},"__dirname")," is a Node global object that gives you a path to current working\ndirectory. It's handy if we want to avoid writing the whole path out in full.)"),(0,r.kt)("p",null,"If you restart the server, you'll probably see something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"<Buffer 7b 0a 20 20 20 20 22 31 34 36 37 33 39 30 33 35 36 32 39 31 22 3a 20 22 54 68 69 73 20 69 73 20 6d 79 20 76 65 72 79 20 66 69 72 73 74 20 62 6c 6f 67 ... >\n")),(0,r.kt)("p",null,"This is actually the contents of your ",(0,r.kt)("inlineCode",{parentName:"p"},"posts.json")," file, but in a format called\na ",(0,r.kt)("strong",{parentName:"p"},"buffer"),". To make it a bit more human-readable, you can console.log the file\nto a string, like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"console.log(file.toString());\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"file")," is in JSON format right now. If we want to access the blog post message\ninside ",(0,r.kt)("inlineCode",{parentName:"p"},"file"),", we need to parse it from JSON back to a JavaScipt object."),(0,r.kt)("p",null,"Add this next bit of code to your ",(0,r.kt)("inlineCode",{parentName:"p"},"fs.readFile"),"'s callback function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const parsedFile = JSON.parse(file);\n")),(0,r.kt)("p",null,"Now ",(0,r.kt)("inlineCode",{parentName:"p"},"parsedFile")," is a normal JavaScript object, and we can access the data\ninside it."),(0,r.kt)("p",null,"Ok, so we've talked about JSON and we've talked about reading and writing files.\nYou now have the power to save new blog post data to your hard drive! Work with\nyour partner and your mentor to see if you can figure the next steps out on your\nown."),(0,r.kt)("p",null,"Here's a breakdown of what you want to achieve:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When new blog post data comes through, read from ",(0,r.kt)("inlineCode",{parentName:"li"},"posts.json")," to access its\ncontents"),(0,r.kt)("li",{parentName:"ul"},"Add your new blog post data to the old ones."),(0,r.kt)("li",{parentName:"ul"},"Write your new combined data back to the ",(0,r.kt)("inlineCode",{parentName:"li"},"posts.json")," file.")),(0,r.kt)("h3",{id:"things-to-remember"},"Things to remember"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"fs.writeFile()")," normally overwrites the target file you've given it. Chances\nare you don't want to lose all your old blog posts every time you get a new\none, so think about how you can combine ",(0,r.kt)("inlineCode",{parentName:"p"},"fs.readFile()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"fs.writeFile()"),"\nto prevent overwriting.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You will need to convert between JSON and a JavaScript object several times.\n",(0,r.kt)("inlineCode",{parentName:"p"},"JSON.parse()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON.stringify()")," are what you need."))),(0,r.kt)("p",null,"Oh by the way, if you want to get the current timestamp, use the JavaScript\n",(0,r.kt)("inlineCode",{parentName:"p"},"Date.now()")," method."),(0,r.kt)("h3",{id:"step-9---displaying-your-blog-posts"},"Step 9 - Displaying your blog posts"),(0,r.kt)("p",null,"So now we're saving the blog posts to the server. Time to get them and display\nthem on the page!"),(0,r.kt)("p",null,"If you look inside ",(0,r.kt)("inlineCode",{parentName:"p"},"public/script.js"),", there's a whole bunch of JavaScript code\nin there. Don't worry about what all the code means, just know that it's\nresponsible for sending a request to GET old blog posts and display them on the\npage underneath \"Recent Posts\"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"script.js")," is trying to load existing posts by making a GET request. Look\ninside ",(0,r.kt)("inlineCode",{parentName:"p"},"script.js")," and see if you can find any useful endpoints."),(0,r.kt)("p",null,"Your ",(0,r.kt)("inlineCode",{parentName:"p"},"script.js")," file will want to receive the JSON containing your blog posts.\nYour job is to make that happen!"),(0,r.kt)("p",null,"Express has a handy method called ",(0,r.kt)("inlineCode",{parentName:"p"},"res.sendFile()")," that makes it easy to send\nfiles back to the client. Feel free to use this with your JSON."),(0,r.kt)("p",null,"If all goes well, you should have a fully functional CMS!"))}c.isMDXComponent=!0},99795:function(e,t,n){t.Z=n.p+"assets/images/http1-url-structure-20f6e9249e0f11322516234d24e5cb35.png"}}]);