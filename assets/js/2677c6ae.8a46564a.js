(self.webpackChunkcodeyourfuture_syllabus=self.webpackChunkcodeyourfuture_syllabus||[]).push([[4621],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6956:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return s},default:function(){return c}});var a=n(4034),r=n(9973),o=(n(7294),n(3905)),i={id:"paradigm",title:"What we teach and why",sidebar_label:"Our Approach"},l={unversionedId:"guides/paradigm",id:"guides/paradigm",isDocsHomePage:!1,title:"What are we actually teaching?",description:"We can only teach a subset of programming in our syllabus and because we teach React, that means that we teach functional programming. Further, we teach declarative programming. Our strategy is to build a coherent journey in programming that guides our trainees to their final project with the tools to write great React code. After this, they will go off into many different directions, and they should!",source:"@site/docs/guides/paradigm.md",sourceDirName:"guides",slug:"/guides/paradigm",permalink:"/guides/paradigm",editUrl:"https://github.com/CodeYourFuture/Syllabus-V2/edit/master/docs/guides/paradigm.md",version:"current",sidebar_label:"Our Approach",frontMatter:{id:"paradigm",title:"What we teach and why",sidebar_label:"Our Approach"}},s=[{value:"What don\u2019t we teach?",id:"what-dont-we-teach",children:[{value:"For time reasons",id:"for-time-reasons",children:[]},{value:"For simplicity and clarity",id:"for-simplicity-and-clarity",children:[]}]},{value:"What do we teach?",id:"what-do-we-teach",children:[{value:"Declarative",id:"declarative",children:[]},{value:"Functional",id:"functional",children:[]},{value:"Code as documentation",id:"code-as-documentation",children:[]},{value:"Test driven development",id:"test-driven-development",children:[]}]}],u={toc:s};function c(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"We can only teach a subset of programming in our syllabus and because we teach React, that means that we teach functional programming. Further, we teach declarative programming. Our strategy is to build a coherent journey in programming that guides our trainees to their final project with the tools to write great React code. After this, they will go off into many different directions, and they should!"),(0,o.kt)("p",null,"We don\u2019t teach them this is the only way, but this ",(0,o.kt)("em",{parentName:"p"},"is")," the only way we teach them."),(0,o.kt)("p",null,"Let\u2019s articulate together our clear and guiding principles."),(0,o.kt)("h2",{id:"what-dont-we-teach"},"What don\u2019t we teach?"),(0,o.kt)("p",null,"There\u2019s so much we don\u2019t cover in our syllabus. It\u2019s not always obvious what we skip because it\u2019s out of paradigm, and what we skip because we\u2019re out of time. So let\u2019s notice some things that are missing and say why:"),(0,o.kt)("h3",{id:"for-time-reasons"},"For time reasons"),(0,o.kt)("p",null,"We don\u2019t teach the following topics, though useful and important, simply because we don\u2019t have time to cover them:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Recursion"),(0,o.kt)("li",{parentName:"ul"},"Regex (though we typically mention them in JS1W3, we don\u2019t teach them or expect trainees to be able to write them)"),(0,o.kt)("li",{parentName:"ul"},"Handling null")),(0,o.kt)("p",null,"We have some Codewars collections around these topics."),(0,o.kt)("h3",{id:"for-simplicity-and-clarity"},"For simplicity and clarity"),(0,o.kt)("p",null,"The following topics are largely unnecessary for writing code in the style we teach. We omit them for clarity and focus."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"OOP generally"),(0,o.kt)("li",{parentName:"ul"},"JS classes and constructors",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"this")," keyword is famously unintuitive. React changed its API to avoid using this. Since JS classes tend not to be useful without the this keyword, we avoid them altogether."))),(0,o.kt)("li",{parentName:"ul"},"Mutability/immutability"),(0,o.kt)("li",{parentName:"ul"},"Passing by value vs reference")),(0,o.kt)("p",null,"In general: while we cover basic language features like for loops, we quickly move on to higher order functions and encourage these over imperative strategies. We downplay strategies that mutate arrays, like push, and pop."),(0,o.kt)("h2",{id:"what-do-we-teach"},"What do we teach?"),(0,o.kt)("p",null,"We teach a subset, so what do we focus on? We broadly focus on Declarative and Functional programming paradigms."),(0,o.kt)("h3",{id:"declarative"},"Declarative"),(0,o.kt)("p",null,"We teach three purely declarative languages: HTML, CSS, & SQL and one multiparadigmatic language, JavaScript, focusing on React, a declarative framework."),(0,o.kt)("h3",{id:"functional"},"Functional"),(0,o.kt)("p",null,"When we mentor students we guide them with these principles:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Prefer pure functions")),(0,o.kt)("p",null,"Pure functions are predictable. The same input will always produce the same output."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Prefer composable functions")),(0,o.kt)("p",null,"Break up your functions."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Minimise side effects")),(0,o.kt)("p",null,"A function without side effects is pure."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Avoid mutation")),(0,o.kt)("p",null,"In practical terms this means preferring methods that return new objects, arrays, or values over methods that mutate data. Yes to ",(0,o.kt)("inlineCode",{parentName:"p"},"map"),", no to ",(0,o.kt)("inlineCode",{parentName:"p"},"forEach"),"."),(0,o.kt)("p",null,"And so therefore: ",(0,o.kt)("strong",{parentName:"p"},"prefer arrow functions")),(0,o.kt)("p",null,"Arrow functions do not have their own bindings to ",(0,o.kt)("inlineCode",{parentName:"p"},"this")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"super"),", or an arguments object. "),(0,o.kt)("h3",{id:"code-as-documentation"},"Code as documentation"),(0,o.kt)("p",null,"Expressing ideas clearly in code. Code should be simple, clearly named, and easy to follow."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Name data clearly")),(0,o.kt)("p",null,"Prefer verbose and specific naming conventions over algebraic ones so students can trace the function. Yes to ",(0,o.kt)("inlineCode",{parentName:"p"},"numberOfDevelopers.map(developer => ..."),", no to ",(0,o.kt)("inlineCode",{parentName:"p"},"xs.map(x => ...")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Comments are why not what")),(0,o.kt)("p",null,"Encourage skeleton code in comments as part of development. Then delete those comments as part of refactoring. Use comments to explain choices."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Documentation")),(0,o.kt)("p",null,"Documentation is expected, simple and routine. Our students must practice writing."),(0,o.kt)("h3",{id:"test-driven-development"},"Test driven development"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Red, green, refactor")),(0,o.kt)("p",null,"Ideally: Requirements are expressed as tests. Production code is only written to pass a test. Implementation details are not tested."))}c.isMDXComponent=!0}}]);