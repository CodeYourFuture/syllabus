"use strict";(self.webpackChunkcodeyourfuture_syllabus=self.webpackChunkcodeyourfuture_syllabus||[]).push([[1065],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),f=u(n),d=a,m=f["".concat(s,".").concat(d)]||f[d]||p[d]||o;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},79472:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],l={},s="possible solutions + variants (with/without for loops)",u={unversionedId:"js-core-2/mentor-guide",id:"js-core-2/mentor-guide",title:"possible solutions + variants (with/without for loops)",description:"iterating and printing off an object",source:"@site/docs/js-core-2/mentor-guide.md",sourceDirName:"js-core-2",slug:"/js-core-2/mentor-guide",permalink:"/js-core-2/mentor-guide",draft:!1,editUrl:"https://github.com/CodeYourFuture/Syllabus-V2/edit/master/docs/js-core-2/mentor-guide.md",tags:[],version:"current",frontMatter:{}},c={},p=[{value:"iterating and printing off an object",id:"iterating-and-printing-off-an-object",level:2},{value:"More advanced working with objects",id:"more-advanced-working-with-objects",level:2}],f={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"possible-solutions--variants-withwithout-for-loops"},"possible solutions + variants (with/without ",(0,o.kt)("inlineCode",{parentName:"h1"},"for")," loops)"),(0,o.kt)("h2",{id:"iterating-and-printing-off-an-object"},"iterating and printing off an object"),(0,o.kt)("p",null,'Exercise Write a function "printProperties" that takes an object and prints its\nproperties'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// with for loop\nfunction printProperties(trainee) {\n  var properties = [];\n  for (var p of trainee) {\n    properties.push(p);\n  }\n  console.log(properties.join(","));\n}\n\n// without for loop\nfunction printProperties(trainee) {\n  var properties = Object.keys(trainee);\n  console.log(properties.join(","));\n}\n')),(0,o.kt)("p",null,"Write a function called hasProperty that takes an object and a property. The\nfunction should return true if the property exists,false if it doesn't."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// with for loop\nfunction hasProperty(trainee, propertyName) {\n  for (var p of trainee) {\n    if (p === propertyName) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// without for loop\nfunction hasProperty(trainee, propertyName) {\n  Object.keys(trainee).some(function (p) {\n    return p === propertyName;\n  });\n}\n\n// shortcut/lazy way (js already has a method like this)\nfunction hasProperty(trainee, propertyName) {\n  return trainee.hasOwnProperty(propertyName);\n}\n")),(0,o.kt)("p",null,"Write a function called printObject that takes an object and iterates through\nall its properties and prints a string formatted property: value Bonus point if\nyou can format the list of interests properly"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'// with for loop (and not handling array property (interests)\nfunction printObject(trainee) {\n  var result = []\n  for (var p of trainee) {\n    result.push(`${p} is ${trainee[p]}`)\n  }\n  console.log(result.join("\\n"))\n}\n\n// with for loop, handling array values\nfunction printObject(trainee) {\n  var result = []\n  for (var p of trainee) {\n    if (Array.isArray(trainee[p])) {\n      result.push(`${p} are ${trainee[p].join(",")}`)\n    } else {\n      result.push(`${p} is ${trainee[p]}`)\n    }\n  }\n  console.log(result.join("\\n"))\n}\n\n// without for loop, handling array values\n// could be more concise with a ternary, this seemed easier to read/parse\nfunction printObject(trainee) {\n  var result = Object.keys(trainee).map(function (p) {\n    if (Array.isArray(trainee[p]) {\n      return `${p} are ${trainee[p].join(",")}`;\n    } else {\n      return `${p} is ${trainee[p]}`\n    }\n  })\n  console.log(result.join("\\n"))\n}\n')),(0,o.kt)("h2",{id:"more-advanced-working-with-objects"},"More advanced working with objects"),(0,o.kt)("p",null,"Notes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"examples here are done on with the most straightforwar/simplest way possible\n",(0,o.kt)("em",{parentName:"li"},"first")," - if you were to write ",(0,o.kt)("inlineCode",{parentName:"li"},"sumWallet")," as dynamic for different note\ndenominations on the first attempt, you'd basically have finished the entire\nsection."),(0,o.kt)("li",{parentName:"ul"},"they are also using ",(0,o.kt)("inlineCode",{parentName:"li"},"forEach")," and mutations in favour of ",(0,o.kt)("inlineCode",{parentName:"li"},"reduce")," in order to\nkeep it simple. feel free to demonstrate a solution using reduce if you feel\nit's appropriate.")),(0,o.kt)("p",null,"Write a function that takes in the wallet as an argument, and returns the total\nmoney in the wallet."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// quotes or no quotes will work for these keys\nfunction sumWallet(wallet) {\n  var total = 0;\n  total += wallet[5];\n  total += wallet[10];\n  total += wallet[20];\n  return total;\n}\n")),(0,o.kt)("p",null,"Write a function that takes the array ",(0,o.kt)("inlineCode",{parentName:"p"},"wallets")," and returns the total amount of\nmoney for all of the wallets."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"function sumAllWallets(walletArray) {\n  var total = 0;\n  walletArray.forEach(function (wallet) {\n    total += wallet[5];\n    total += wallet[10];\n    total += wallet[20];\n  });\n  return total;\n}\n")),(0,o.kt)("p",null,"Write another function that takes the array of wallets and combines all of the\nnotes in each of them, returning a single wallet with all of the other wallets'\nnotes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"function combineWallets(walletArray) {\n  var resultWallet = {\n    5: 0,\n    10: 0,\n    20: 0,\n  };\n  walletArray.forEach(function (wallet) {\n    resultWallet[5] += wallet[5];\n    resultWallet[10] += wallet[10];\n    resultWallet[20] += wallet[20];\n  });\n  return resultWallet;\n}\n")),(0,o.kt)("p",null,"See if you can write a function that will sum up and return the total amount in\na single wallet, but it could have any denomination of notes inside it (\xa37 note\nor a \xa313 or any other number)."),(0,o.kt)("p",null,"Note: we're using javascript's coercion for the ",(0,o.kt)("inlineCode",{parentName:"p"},"*")," operator for our object key\n",(0,o.kt)("inlineCode",{parentName:"p"},"note")," (it's a string). If that coercion fails - it will not throw and will\nresult in ",(0,o.kt)("inlineCode",{parentName:"p"},"NaN")," polluting the rest of the calculation. I've decided to leave out\nany ",(0,o.kt)("inlineCode",{parentName:"p"},"isNaN")," checks here to keep the example code clear."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"function sumDynamicWallet(wallet) {\n  var total = 0;\n  Object.keys(wallet).forEach(function (note) {\n    total += note * wallet[note];\n  });\n  return total;\n}\n")),(0,o.kt)("p",null,"See if you can write a function that takes in any number of wallets, which could\ncontain any denomination/type of notes inside them (each being different). Tip:\nhave a think about if you could re-use a function from a previous example..."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"function sumDynamicWallets(walletArray) {\n  var grandTotal = 0; // could be `total`, renamed for clarity/to avoid confusion\n  walletArray.forEach(function (wallet) {\n    grandTotal += sumDynamicWallet(wallet);\n  });\n  return grandTotal;\n}\n\n// with reduce (I'd recommend showing this example if you can get to it)\nfunction sumDynamicWallets(walletArray) {\n  return walletArray.reduce(sumDynamicWalletForReduce, 0);\n}\n\n// modifying the previous example's function `sumDynamicWallet` to take a total in\n// and return a new total with the wallet total added to it\nfunction sumDynamicWalletForReduce(acc, wallet) {\n  Object.keys(wallet).forEach(function (note) {\n    acc += note * wallet[note];\n  });\n  return acc;\n}\n")))}d.isMDXComponent=!0}}]);