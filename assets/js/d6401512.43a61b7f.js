"use strict";(self.webpackChunkcodeyourfuture_syllabus=self.webpackChunkcodeyourfuture_syllabus||[]).push([[7295],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=o,h=m["".concat(l,".").concat(d)]||m[d]||c[d]||r;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var u=2;u<r;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},76641:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return u},assets:function(){return p},toc:function(){return c},default:function(){return d}});var a=n(87462),o=n(63366),r=(n(67294),n(3905)),s=["components"],i={id:"js-testing-workshop",title:"JavaScript Testing Workshop",sidebar_label:"JavaScript Testing Workshop"},l=void 0,u={unversionedId:"workshops/js-testing-workshop",id:"workshops/js-testing-workshop",title:"JavaScript Testing Workshop",description:"What will we learn today?",source:"@site/docs/workshops/js-testing-workshop.md",sourceDirName:"workshops",slug:"/workshops/js-testing-workshop",permalink:"/workshops/js-testing-workshop",editUrl:"https://github.com/CodeYourFuture/Syllabus-V2/edit/master/docs/workshops/js-testing-workshop.md",tags:[],version:"current",frontMatter:{id:"js-testing-workshop",title:"JavaScript Testing Workshop",sidebar_label:"JavaScript Testing Workshop"}},p={},c=[{value:"What will we learn today?",id:"what-will-we-learn-today",level:2},{value:"Tracing Code",id:"tracing-code",level:2},{value:"Testing our code",id:"testing-our-code",level:2},{value:"Unit Testing",id:"unit-testing",level:2},{value:"Unit testing frameworks",id:"unit-testing-frameworks",level:3},{value:"Jest",id:"jest",level:3},{value:"Test Driven Development",id:"test-driven-development",level:2},{value:"More on Testing",id:"more-on-testing",level:2},{value:"Test coverage",id:"test-coverage",level:3},{value:"Refactoring",id:"refactoring",level:3},{value:"Modules",id:"modules",level:2},{value:"Creating modules, exporting code",id:"creating-modules-exporting-code",level:3},{value:"Using modules, importing code",id:"using-modules-importing-code",level:3},{value:"Separating code and tests",id:"separating-code-and-tests",level:3},{value:"Tracing code resources",id:"tracing-code-resources",level:2},{value:"Coursework",id:"coursework",level:2},{value:"Research",id:"research",level:2}],m={toc:c};function d(e){var t=e.components,n=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"what-will-we-learn-today"},"What will we learn today?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#tracing-code"},"Tracing Code")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#testing-our-code"},"Testing")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#unit-testing"},"Unit Testing")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#jest"},"Unit Testing Frameworks - JEST")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#test-driven-development"},"Test-driven Development")),(0,r.kt)("li",{parentName:"ul"},"More on Testing",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#test-coverage"},"Test coverage")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#refactoring"},"Refactoring")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#modules"},"Modules"))))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Fork and Clone the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CodeYourFuture/js-exercises-tdd"},"js-exercises-tdd repo"))),(0,r.kt)("h2",{id:"tracing-code"},"Tracing Code"),(0,r.kt)("p",null,"What is Code? Computer code is a ",(0,r.kt)("strong",{parentName:"p"},"set of rules or instructions"),". It is made up of words and numbers and when you put them in the ",(0,r.kt)("strong",{parentName:"p"},"right order")," it will tell your computer what you want it to do."),(0,r.kt)("p",null,"Let's trace these code samples together:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/CodeYourFuture/js-exercises-tdd/blob/master/I.write-tests/01-greet-people/greet-people.js"},"Sample 1"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/CodeYourFuture/js-exercises-tdd/blob/master/I.write-tests/02-remove-vowels/remove-vowels.js"},"Sample 2"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/CodeYourFuture/js-exercises-tdd/blob/master/I.write-tests/03-remove-vowels-from-array/remove-vowels-in-array.js"},"Sample 3")))),(0,r.kt)("h2",{id:"testing-our-code"},"Testing our code"),(0,r.kt)("p",null,"We have just traced the output of some code on paper, but how do ensure that the code actually does what it is supposed to do when we run it."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Discussion: How have we been testing our code so far? How do ensure it is ",(0,r.kt)("em",{parentName:"p"},"correct"),'. What is "',(0,r.kt)("em",{parentName:"p"},"correct"),'" anyhow?')),(0,r.kt)("p",null,"In many organisations, there are full teams dedicated to ",(0,r.kt)("strong",{parentName:"p"},"testing")," and ensuring that the code written behaves correctly, to report ",(0,r.kt)("strong",{parentName:"p"},"bugs")," and make sure that they are fixed on time. In general, ",(0,r.kt)("strong",{parentName:"p"},"Quality Assurance")," is a responsibility of everyone in a team starting from Project Manager, Scrum Masters, Developers and Testers."),(0,r.kt)("p",null,"There are typically several levels of testing when working on a project:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Unit testing"),(0,r.kt)("li",{parentName:"ul"},"Integration testing"),(0,r.kt)("li",{parentName:"ul"},"Functional, End to End testing and User Acceptance Testing (UAT)")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/4904533"},"This answer from Stack Overflow")," has a good explanation of types of testing. The defintions for Functional, e2e and UAT are often mean different things in different teams, the responisibility for them also falls on different individuals depending on the team."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Unit testing")," though is always the responsibility of the Developer, and it is a very important skill for any professional developer to be able to write tests, and also write code that is testable."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Discussion: What is testable code?")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"var result;\n\nfunction getMentorInfo(mentors, name) {\n  var greeting = \"Hello \";\n\n  result = mentors.find(function (person) {\n    return person.name === name;\n  });\n\n  var mentorTitle = \"Junior Developer\";\n\n  if (result.yearsOfExp > 10) {\n    mentorTitle = \"Senior Developer\";\n  } else if (result.yearsOfExp > 20) {\n    mentorTitle = \"Very Senior Developer\";\n  }\n\n  result.jobTitle = mentorTitle;\n  result.fullName = result.title + \" \" + result.name;\n\n  return result;\n}\n\n/*\n  var mentors = [\n      {\n          name: 'Irina',\n          title: 'Dr.',\n          yearsOfExperience: 10\n      }, {\n          name: 'Ashleigh',\n          title: 'Dame',\n          yearsOfExperience: 20\n      }, {\n          name: 'Etza',\n          title: 'Professor',\n          yearsOfExperience: 30\n      }\n  ];\n  \n  var result = getMentorInfo(mentors, 'Etza')\n  Trace the value of \"result\"\n*/\n")),(0,r.kt)("h2",{id:"unit-testing"},"Unit Testing"),(0,r.kt)("p",null,"Testing is a key skill for any software programmer. We need to make sure our\nsoftware is thoroughly tested, otherwise bad things happen. Testing makes sure\nour programs behave like we intend them to do - ",(0,r.kt)("strong",{parentName:"p"},"if we don't test, we can cause\nsevere bugs"),". Bad software can make planes crash, companies bankrupt, and users\nof your software really frustrated."),(0,r.kt)("p",null,"There are different levels on which we can test software, for example\nintegration testing, end-to-end testing, and unit testing. Today we will deal\nwith unit testing, which is probably the most universal testing discipline."),(0,r.kt)("p",null,"A unit test is exactly that - it tests a ",(0,r.kt)("em",{parentName:"p"},"unit"),' of code. "Unit" can mean\ndifferent things, but in JavaScript it usually refers to a single function.'),(0,r.kt)("p",null,"Remember when we talked about functions? Functions take ",(0,r.kt)("em",{parentName:"p"},"input")," (as arguments),\ndo something with it (in the function body), and return ",(0,r.kt)("em",{parentName:"p"},"output")," (using the\n",(0,r.kt)("inlineCode",{parentName:"p"},"return")," statement). Ideally, a function should always return the same output if\nthe same input is given. It makes it predictable and testable - and that's what\nwe want!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"         |-----------------|\ninput => | doing something | => output\n         |-----------------|\n")),(0,r.kt)("p",null,"So, when unit testing a function, we want to make sure that ",(0,r.kt)("em",{parentName:"p"},"for a certain\ninput, we get the expected output"),". For this we need to make sure that the\noutput matches our expectations. In the simplest form that means we do an\nequality check:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"myFunction(input) === expectedOutput;\n")),(0,r.kt)("p",null,"We can formalise this using another function that compares two values and\ncomplains when they do not match. Such a function is prepared in\n",(0,r.kt)("inlineCode",{parentName:"p"},"unit-testing/equals.js"),"."),(0,r.kt)("p",null,"We can use this function to simply compare to values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'equals(1, 1); // This should pass\nequals(1, 2); // This should fail\nequals("Hello", "Hello"); // This should pass\n')),(0,r.kt)("p",null,"Now we can use this ",(0,r.kt)("inlineCode",{parentName:"p"},"equals()")," function to test our own code by comparing a\nfunction result to an expected value."),(0,r.kt)("p",null,"Remember that one function can be used as an argument when a second function is called. In this instance, the function we are testing would represent our first function, and our ",(0,r.kt)("inlineCode",{parentName:"p"},"equals()")," function would represent the second, like so..."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"equals(myNewFunction(arg1, arg2, etc), expectedOutput);\n")),(0,r.kt)("p",null,"As you can see in this example, instead of using a number as the first argument to the ",(0,r.kt)("inlineCode",{parentName:"p"},"equals()")," function, we have used a function instead; the one we wish to test."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Exercise: Write tests for the the exercises under ",(0,r.kt)("inlineCode",{parentName:"p"},"I.write-tests"))),(0,r.kt)("h3",{id:"unit-testing-frameworks"},"Unit testing frameworks"),(0,r.kt)("p",null,"There are lots of other things you might want to test for than two things being\nequal. You might want to test if a number is smaller or greater than another, if\na function was called, if an error happened, or if one thing happened before\nanother thing, or how long a function call took to execute."),(0,r.kt)("p",null,"We don't have to build all these things ourselves. Instead there are ",(0,r.kt)("em",{parentName:"p"},"unit\ntesting frameworks")," that take all that work off our shoulders. All we need to do\nis provide the code and the tests."),(0,r.kt)("h3",{id:"jest"},"Jest"),(0,r.kt)("p",null,"The unit testing framework we are trying to day is called\n",(0,r.kt)("a",{parentName:"p",href:"https://facebook.github.io/jest/"},"Jest"),". It's created by Facebook and useful\nfor all kinds of unit testing (especially testing React, which we will do in a\nlater lesson)."),(0,r.kt)("p",null,"Look into your ",(0,r.kt)("inlineCode",{parentName:"p"},"jest/")," folder. You will find a file there, ",(0,r.kt)("inlineCode",{parentName:"p"},"sum.test.js"),". The\nsuffix ",(0,r.kt)("inlineCode",{parentName:"p"},".test.js")," tells Jest that this file contains tests it should execute. To\nexecute the test, run the following command in your terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm test\n")),(0,r.kt)("p",null,"This command runs the test in ",(0,r.kt)("inlineCode",{parentName:"p"},"sum.test.js"),", which tests the ",(0,r.kt)("inlineCode",{parentName:"p"},"sum()")," function.\nYou can see the test output and the fact that the test passed."),(0,r.kt)("p",null,"Tests cases in Jest have the following structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'test("test description", function () {\n  // Test instructions\n});\n')),(0,r.kt)("p",null,"Jest provides a set of functions that you can use to write your actual tests.\nThey are created in a way that imitates natural language, for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"_Expect_ sum of 1 and 2 _to be_ 3\n")),(0,r.kt)("p",null,"becomes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"expect(sum(1, 2)).toBe(3);\n")),(0,r.kt)("p",null,"You can add multiple test statements in the same test case (a test case is one\ncall of the ",(0,r.kt)("inlineCode",{parentName:"p"},"test")," function, but you can also create multiple test cases in one\nfile. It is important that you give all your test cases meaningful descriptions."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},"Exercise:")," Add another test case to ",(0,r.kt)("inlineCode",{parentName:"p"},"sum.test.js"),". Is the sum of 10 and -10\nreally zero? Run the tests using Jest.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},"Exercise:")," Take the ",(0,r.kt)("inlineCode",{parentName:"p"},"findNeedle")," function you have tested previously, copy it\ninto the ",(0,r.kt)("inlineCode",{parentName:"p"},"jest/")," folder and call it ",(0,r.kt)("inlineCode",{parentName:"p"},"findNeedle.test.js"),". Then write a test to\nbe used with Jest, similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"sum.test.js"),". Make sure you cover multiple\ninputs and give all tests meaningful descriptions! Run the tests using Jest.")),(0,r.kt)("h2",{id:"test-driven-development"},"Test Driven Development"),(0,r.kt)("p",null,"Test-driven development (TDD) is a software development process that relies on the repetition of a very short development cycle: requirements are turned into very specific test cases, then the software is improved to pass the new tests, only. This is opposed to software development that allows software to be added that is not proven to meet requirements. ","[Wikipedia]"),(0,r.kt)("p",null,"When developing following TDD, you normally follow this sequence:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Add a test"),(0,r.kt)("li",{parentName:"ol"},"Run all tests and see if the new test fails (Red)"),(0,r.kt)("li",{parentName:"ol"},"Write the simplest code to make the test pass (Green)"),(0,r.kt)("li",{parentName:"ol"},"Refactor"),(0,r.kt)("li",{parentName:"ol"},"Repeat")),(0,r.kt)("p",null,"Read more on the ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Test-driven_development"},"Wikipedia article")," and the resources at the end."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.codecademy.com/articles/tdd-red-green-refactor"},"Red Green Refactor")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},'Exercise: Two mentors pair on a problem doing "ping pong" TDD. One writing the test, the other writing the implementation.')),(0,r.kt)("h2",{id:"more-on-testing"},"More on Testing"),(0,r.kt)("h3",{id:"test-coverage"},"Test coverage"),(0,r.kt)("p",null,"Test coverage describes the extent to which a code base is tested. When Jest\nruns your tests, it generates a so-called ",(0,r.kt)("em",{parentName:"p"},"coverage report"),". This report tells\nyou how many of your ",(0,r.kt)("em",{parentName:"p"},"lines of code")," are covered by tests, how many functions,\nstatements, and branches."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"A branch is one of multiple ways a code control flow can go. For example, if\nyou have an ",(0,r.kt)("inlineCode",{parentName:"p"},"if() ... else ..."),', both the "if" and the "else" branch must be\ncovered by tests.')),(0,r.kt)("p",null,"We want to keep our code coverage as high as possible. Jest allows us to\ngenerate a coverage report when we run the following command in the terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm test -- --coverage\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},"Exercise:")," Check your code coverage for the tests you wrote. Is any of the\nnumbers below 100%? If so, try and bring it up to 100%!")),(0,r.kt)("h3",{id:"refactoring"},"Refactoring"),(0,r.kt)("p",null,"There are times when we want to make our code better without changing any\nfunctionality, for example because we just learnt about a better way to solve a\ncertain problem (like, finding needles in haystacks). This is called\n",(0,r.kt)("em",{parentName:"p"},"refactoring"),"."),(0,r.kt)("p",null,"When previously ",(0,r.kt)("strong",{parentName:"p"},"GREEN")," code - working code! - suddenly does not work anymore,\nwe call this a ",(0,r.kt)("em",{parentName:"p"},"regression"),". Our existing tests can make sure that when we\nrefactor, the functionality of our code actually stays the same, and does not\nregress."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Exercise: Refactor some of the exercise we've written tests for.")),(0,r.kt)("h2",{id:"modules"},"Modules"),(0,r.kt)("p",null,"So far, all our programs have been in their own single files. But Node programs\ncan become really large, and having all our code in only one file will not be\nmaintainable."),(0,r.kt)("p",null,"We can therefore split our code into so-called ",(0,r.kt)("em",{parentName:"p"},"modules"),". A module is basically\na JavaScript file that makes its functionality available to other modules and\nprograms."),(0,r.kt)("h3",{id:"creating-modules-exporting-code"},"Creating modules, exporting code"),(0,r.kt)("p",null,"It is really simple to take existing JavaScript code and turn it into a module\nby exporting its functionality:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'function printName(name) {\n  console.log("My name is " + name);\n}\n\nmodule.exports = printName;\n')),(0,r.kt)("p",null,"The key here is the line containing ",(0,r.kt)("inlineCode",{parentName:"p"},"module.exports"),". As you see, this is an\nassignment, and whatever is assigned to ",(0,r.kt)("inlineCode",{parentName:"p"},"module.exports")," will be made available\nto other modules and program when this file is imported."),(0,r.kt)("h3",{id:"using-modules-importing-code"},"Using modules, importing code"),(0,r.kt)("p",null,"But how do we make use of another module in our program? We need to ",(0,r.kt)("em",{parentName:"p"},"import")," it,\nand this is done using a function called ",(0,r.kt)("inlineCode",{parentName:"p"},"require()"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"There are different module formats for JavaScript. The one we are using here,\nwhich is natively supported by Node, is called ",(0,r.kt)("strong",{parentName:"p"},"CommonJS"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'var printName = require("./printName.js");\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The string passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"require()")," function is a ",(0,r.kt)("em",{parentName:"p"},"path")," to the file you are\nimporting. ",(0,r.kt)("inlineCode",{parentName:"p"},"./"),' signifies the current directory, so the above command will\nimport a file called "printName.js" that is in the same directory as our\nprogram.')),(0,r.kt)("p",null,"Assuming our program is in the same folder as ",(0,r.kt)("inlineCode",{parentName:"p"},"printName.js"),", we can use the\nabove code to import the functionality provided by that module and store it in\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"printName")," variable."),(0,r.kt)("p",null,"We can then continue to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"printName")," function as if it we defined it in\nour own program!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"var printName = require('./printName.js');\n\nprintName();\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Modules can not only export functions, but all variable types you already\nlearned about. Most commonly, they export a function or an object containing\nmultiple functions.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},"Together:")," Edit the file ",(0,r.kt)("inlineCode",{parentName:"p"},"modules/main.js")," and follow the instructions.")),(0,r.kt)("h3",{id:"separating-code-and-tests"},"Separating code and tests"),(0,r.kt)("p",null,"Exporting and importing modules is really useful for testing, too."),(0,r.kt)("p",null,"As a rule of thumb, we never want to mix our actual code with our tests. It is\ntherefore common to put them in separate files. We are going to call the file\ncontaining the tests after the file containing the code to be tested, just\nappending ",(0,r.kt)("inlineCode",{parentName:"p"},".test")," at the end of the filename. Like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'main.js               # Our main program\nmain.test.js          # Tests for our main program\nsomeOtherCode.js      # A module called "someOtherCode"\nsomeOtherCode.test.js # Tests for the "someOtherCode" module\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},'The naming is really up to convention - you can even put your tests in a\ndifferent folder! However, for Jest it is important to call test files\n"',"*",'.test.js".')),(0,r.kt)("h1",{id:"glossary"},"Glossary"),(0,r.kt)("p",null,"You should know these terms by the end of this class: Testing, Quality Assurance, Unit Tests, Integration Tests, Refactoring, Regression Tests .. any more?"),(0,r.kt)("h1",{id:"resources"},"Resources"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics"},"MDN Objects basics")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object-oriented_JS"},"MDN OOP in JS")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Test-driven_development"},"Test-driven development")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://facebook.github.io/jest/"},"Jest")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://nodejs.org/api/modules.html"},"Modules")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://medium.com/software-developer/debugging-facebooks-jest-for-react-in-visual-studio-code-9059223e1e71"},"Setup VS Code for Debugging"))),(0,r.kt)("h2",{id:"tracing-code-resources"},"Tracing code resources"),(0,r.kt)("p",null,"Check out these videos. They contain code that is not JavaScript being traced on paper."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=TZss5ukwN8s"},"Hand Tracing - Intro to Java Programming")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=tJGrie7k97c"},"Tracing code by hand")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=SEtNBShckCg"},"Tracing a flowchart")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=niwBxBUzDu4"},"Java Tracing Arrays Worksheet 1")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=5mxT9x5rgCg"},"Nested loops")),(0,r.kt)("h2",{id:"coursework"},"Coursework"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Finish the Katas and exercises in the project we've worked on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/CodeYourFuture/js-exercises-tdd"},"today"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Follow this tutorial about ",(0,r.kt)("a",{parentName:"p",href:"https://developers.google.com/web/tools/chrome-devtools/javascript/"},"Debugging with Chrome"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Register yourself on the Marc Littlemore's free ",(0,r.kt)("a",{parentName:"p",href:"https://www.marclittlemore.com/courses/javascript-testing-beginners-course/?signup=cyf-course"},"JavaScript Testing for Beginners")," course and work your way through the 7 lessons, which are delivered via a daily email. The course uses a Mocha/Chai framework, which is in common use within the web development industry. This will give you more TDD practice using a different approach to Jest, as well as more exposure to ES2015/ES6 JavaScript."))),(0,r.kt)("h2",{id:"research"},"Research"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Research other module formats than CommonJS. What is AMD? What are ES6\nmodules and how do their differ from CommonJS?"),(0,r.kt)("li",{parentName:"ol"},"What are other test frameworks for JavaScript?"),(0,r.kt)("li",{parentName:"ol"},"More parts of the Jest (Jasmine) DSL than just ",(0,r.kt)("inlineCode",{parentName:"li"},".toBe()"))))}d.isMDXComponent=!0}}]);