"use strict";(self.webpackChunkcodeyourfuture_syllabus=self.webpackChunkcodeyourfuture_syllabus||[]).push([[7909],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return h}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),u=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(l.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(t),p=r,h=d["".concat(l,".").concat(p)]||d[p]||m[p]||s;return t?a.createElement(h,o(o({ref:n},c),{},{components:t})):a.createElement(h,o({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=p;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[d]="string"==typeof e?e:r,o[1]=i;for(var u=2;u<s;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},85162:function(e,n,t){t.d(n,{Z:function(){return o}});var a=t(67294),r=t(86010),s={tabItem:"tabItem_Ymn6"};function o(e){var n=e.children,t=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s.tabItem,o),hidden:t},n)}},74866:function(e,n,t){t.d(n,{Z:function(){return N}});var a=t(87462),r=t(67294),s=t(86010),o=t(12466),i=t(16550),l=t(91980),u=t(67392),c=t(50012);function d(e){return function(e){return r.Children.map(e,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')}))}(e).map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes,default:n.default}}))}function m(e){var n=e.values,t=e.children;return(0,r.useMemo)((function(){var e=null!=n?n:d(t);return function(e){var n=(0,u.l)(e,(function(e,n){return e.value===n.value}));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,t])}function p(e){var n=e.value;return e.tabValues.some((function(e){return e.value===n}))}function h(e){var n=e.queryString,t=void 0!==n&&n,a=e.groupId,s=(0,i.k6)(),o=function(e){var n=e.queryString,t=void 0!==n&&n,a=e.groupId;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:t,groupId:a});return[(0,l._X)(o),(0,r.useCallback)((function(e){if(o){var n=new URLSearchParams(s.location.search);n.set(o,e),s.replace(Object.assign({},s.location,{search:n.toString()}))}}),[o,s])]}function f(e){var n,t,a,s,o=e.defaultValue,i=e.queryString,l=void 0!==i&&i,u=e.groupId,d=m(e),f=(0,r.useState)((function(){return function(e){var n,t=e.defaultValue,a=e.tabValues;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:a}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+a.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}var r=null!=(n=a.find((function(e){return e.default})))?n:a[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:o,tabValues:d})})),b=f[0],g=f[1],k=h({queryString:l,groupId:u}),y=k[0],v=k[1],N=(n=function(e){return e?"docusaurus.tab."+e:null}({groupId:u}.groupId),t=(0,c.Nk)(n),a=t[0],s=t[1],[a,(0,r.useCallback)((function(e){n&&s.set(e)}),[n,s])]),w=N[0],E=N[1],T=function(){var e=null!=y?y:w;return p({value:e,tabValues:d})?e:null}();return(0,r.useLayoutEffect)((function(){T&&g(T)}),[T]),{selectedValue:b,selectValue:(0,r.useCallback)((function(e){if(!p({value:e,tabValues:d}))throw new Error("Can't select invalid tab value="+e);g(e),v(e),E(e)}),[v,E,d]),tabValues:d}}var b=t(72389),g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function k(e){var n=e.className,t=e.block,i=e.selectedValue,l=e.selectValue,u=e.tabValues,c=[],d=(0,o.o5)().blockElementScrollPositionUntilNextRender,m=function(e){var n=e.currentTarget,t=c.indexOf(n),a=u[t].value;a!==i&&(d(n),l(a))},p=function(e){var n,t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":var a,r=c.indexOf(e.currentTarget)+1;t=null!=(a=c[r])?a:c[0];break;case"ArrowLeft":var s,o=c.indexOf(e.currentTarget)-1;t=null!=(s=c[o])?s:c[c.length-1]}null==(n=t)||n.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":t},n)},u.map((function(e){var n=e.value,t=e.label,o=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,key:n,ref:function(e){return c.push(e)},onKeyDown:p,onClick:m},o,{className:(0,s.Z)("tabs__item",g.tabItem,null==o?void 0:o.className,{"tabs__item--active":i===n})}),null!=t?t:n)})))}function y(e){var n=e.lazy,t=e.children,a=e.selectedValue;if(t=Array.isArray(t)?t:[t],n){var s=t.find((function(e){return e.props.value===a}));return s?(0,r.cloneElement)(s,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},t.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a})})))}function v(e){var n=f(e);return r.createElement("div",{className:(0,s.Z)("tabs-container",g.tabList)},r.createElement(k,(0,a.Z)({},e,n)),r.createElement(y,(0,a.Z)({},e,n)))}function N(e){var n=(0,b.Z)();return r.createElement(v,(0,a.Z)({key:String(n)},e))}},15926:function(e,n,t){t.d(n,{Z:function(){return r}});var a=t(67294);function r(e){var n=e.password,t=e.children,r=(0,a.useState)(!1),o=r[0],i=r[1];return a.createElement("div",{className:"exercise-solutions"},o?t:a.createElement(s,{password:n,onCorrectPassword:function(){return i(!0)}}))}function s(e){var n=e.password,t=e.onCorrectPassword;return a.createElement("form",{onSubmit:function(e){e.preventDefault(),e.target.elements.solutionPassword.value===n&&t()},className:"exercise-solutions__password"},a.createElement("div",null,a.createElement("label",{htmlFor:"solutionPassword"},"Enter the password to reveal the answers:"),a.createElement("input",{type:"password",name:"solutionPassword",id:"solutionPassword",className:"exercise-solutions__input",placeholder:"Password"})),a.createElement("button",{className:"button button--outline button--info exercise-solutions__submit"},"Submit"))}},57723:function(e,n,t){t.d(n,{Z:function(){return r}});var a=t(67294);function r(e){var n="https://docs.google.com/forms/d/e/1FAIpQLScq8Zgr0pz7aMDj0D768eCpW798XgtDsKfpA6BquqK5Hdtj4A/viewform?embedded=true&entry.1672476057="+e.module.replace(" ","+")+"&entry.74981796="+e.week.replace(" ","+");return a.createElement("div",{className:"feedback"},a.createElement("div",{className:"feedback__wrapper"},a.createElement("iframe",{src:n,width:"640",height:"640",frameborder:"0",marginheight:"0",marginwidth:"0"},"Loading\u2026"),a.createElement("center",null,a.createElement("p",null,"Not loading? Form can be found"," ",a.createElement("a",{target:"_blank",href:n},"here"),". Click"," ",a.createElement("a",{target:"_blank",href:"https://docs.google.com/forms/d/1F2mB10japkHAPb3H-9Q4YrYH0i61GoMG1tk-P4ZT808/edit"},"here")," ","to get edit access."))))}},75730:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return d},default:function(){return g},frontMatter:function(){return c},metadata:function(){return m},toc:function(){return h}});var a=t(87462),r=t(63366),s=(t(67294),t(3905)),o=t(57723),i=t(74866),l=t(85162),u=(t(15926),["components"]),c={id:"lesson",title:"JavaScript Core II - 2",sidebar_label:"Lesson"},d=void 0,m={unversionedId:"js-core-2/week-2/lesson",id:"js-core-2/week-2/lesson",title:"JavaScript Core II - 2",description:"Learning Objectives",source:"@site/docs/js-core-2/week-2/lesson.md",sourceDirName:"js-core-2/week-2",slug:"/js-core-2/week-2/lesson",permalink:"/js-core-2/week-2/lesson",draft:!1,editUrl:"https://github.com/CodeYourFuture/Syllabus-V2/edit/master/docs/js-core-2/week-2/lesson.md",tags:[],version:"current",frontMatter:{id:"lesson",title:"JavaScript Core II - 2",sidebar_label:"Lesson"},sidebar:"JavaScriptCore2",previous:{title:"Instructor Notes",permalink:"/js-core-2/week-1/instructors"},next:{title:"Coursework",permalink:"/js-core-2/week-2/homework"}},p={},h=[{value:"Learning Objectives",id:"learning-objectives",level:2},{value:"TDD and Methods",id:"tdd-and-methods",level:2},{value:"Red, Green, Refactor",id:"red-green-refactor",level:3},{value:"Red",id:"red",level:4},{value:"Green",id:"green",level:4},{value:"Refactor",id:"refactor",level:4},{value:"Kata",id:"kata",level:3},{value:"Arrays of objects",id:"arrays-of-objects",level:2},{value:"Exercise (1)",id:"exercise-1",level:3},{value:"Exercise (2)",id:"exercise-2",level:3},{value:"Exercise (3)",id:"exercise-3",level:3},{value:"Object built-in methods",id:"object-built-in-methods",level:2},{value:"Object.keys()",id:"objectkeys",level:3},{value:"Object.values()",id:"objectvalues",level:3},{value:"Exercise (1)",id:"exercise-1-1",level:3},{value:"Exercise (2)",id:"exercise-2-1",level:3},{value:"Exercise (3)",id:"exercise-3-1",level:3},{value:"Loop through an Object",id:"loop-through-an-object",level:2},{value:"Use <code>for...in</code> statement",id:"use-forin-statement",level:3},{value:"Convert object into an array and loop through the array",id:"convert-object-into-an-array-and-loop-through-the-array",level:3},{value:"Exercise (1)",id:"exercise-1-2",level:4},{value:"Pair Programming Kata",id:"pair-programming-kata",level:2},{value:"PD (Gathering requirements)",id:"pd-gathering-requirements",level:2},{value:"Coursework",id:"coursework",level:2},{value:"Feedback",id:"feedback",level:2}],f={toc:h},b="wrapper";function g(e){var n=e.components,t=(0,r.Z)(e,u);return(0,s.kt)(b,(0,a.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"learning-objectives"},"Learning Objectives"),(0,s.kt)("p",null,"By the end of this lesson trainees should be able to:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Describe the TDD cycle"),(0,s.kt)("li",{parentName:"ul"},"Write and call methods inside JavaScript objects"),(0,s.kt)("li",{parentName:"ul"},"Use Objects when contained inside an array"),(0,s.kt)("li",{parentName:"ul"},"Write code that uses objects built-in methods"),(0,s.kt)("li",{parentName:"ul"},"Write code that can iterate through an object"),(0,s.kt)("li",{parentName:"ul"},"In a pair, complete a kata using array and object methods")),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"tdd-and-methods"},"TDD and Methods"),(0,s.kt)("p",null,"We've used string methods. We've used array methods. We've used object methods. This week we will bring all these things together and start understanding how to use methods on arrays of objects. Then, to help you embed this learning we will practice some kata together. But first, let's spend a short time talking about Test Driven Development, so you can start using it to help you in your kata practice."),(0,s.kt)("h3",{id:"red-green-refactor"},"Red, Green, Refactor"),(0,s.kt)("p",null,"Test Driven Development (TDD) is a method of writing code. Instead of writing code and then writing tests, you write the test first."),(0,s.kt)("h4",{id:"red"},"Red"),(0,s.kt)("p",null,'Begin by writing the simplest test you can, to satisfy the smallest requirement you can see. Of course, this test will fail, as there is no code! This is the "red" stage.'),(0,s.kt)("h4",{id:"green"},"Green"),(0,s.kt)("p",null,'Next, write just enough code to pass the test. TDD is all about finding the smallest, simplest step to take. Once your test is passing, you have reached the "green" stage.'),(0,s.kt)("h4",{id:"refactor"},"Refactor"),(0,s.kt)("p",null,'The final stage is "refactor". To refactor your code, you will improve the form without changing the function. With TDD, you can do this safely, because if the refactor changes the underlying function, the test will fail.'),(0,s.kt)("h3",{id:"kata"},"Kata"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"First, mentors will demonstrate pairing on a kata using Test Driven Development."),(0,s.kt)("li",{parentName:"ul"},"Then we will work through exercises to understand the methods the mentors used in the kata."),(0,s.kt)("li",{parentName:"ul"},"Last, everyone will pair on a kata from ",(0,s.kt)("a",{parentName:"li",href:"https://www.codewars.com/collections/cyf-array-and-object-methods"},"CYF Array and Object Methods"),".")),(0,s.kt)("admonition",{title:"TDD Kata 20 minutes",type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Two mentors (or a mentor and trainee) will pair on ",(0,s.kt)("a",{parentName:"p",href:"https://www.codewars.com/kata/582746fa14b3892727000c4f"},"this kata")," from ",(0,s.kt)("a",{parentName:"p",href:"https://www.codewars.com/collections/cyf-array-and-object-methods"},"CYF Array and Object Methods")," in a TDD style."),(0,s.kt)("p",{parentName:"admonition"},"Remember the Steps: ",(0,s.kt)("em",{parentName:"p"},"Red, Green, Refactor")),(0,s.kt)("ul",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ul"},"Red: Write a failing test"),(0,s.kt)("li",{parentName:"ul"},"Green: Write the minimum code to make your test pass"),(0,s.kt)("li",{parentName:"ul"},"Refactor"))),(0,s.kt)("admonition",{title:"Exercise: Reflect on TDD",type:"note"},(0,s.kt)("p",{parentName:"admonition"},"TDD is a popular method for writing code among professional programmers. Why do you think this is?"),(0,s.kt)("p",{parentName:"admonition"},"In small groups, take 5 minutes to discuss what you think the benefits of TDD might be?"),(0,s.kt)("p",{parentName:"admonition"},"Then report your findings back to the group. There isn't really a \"correct\" answer here, it's a good idea to discuss with other trainees and volunteers.")),(0,s.kt)("h2",{id:"arrays-of-objects"},"Arrays of objects"),(0,s.kt)("p",null,"In the past weeks, you've learned about using arrays of numbers, arrays of string etc... In the following, we will learn how to use arrays of objects."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'let kitten1 = {\n  name: "Fluffy",\n  weeksOld: 2,\n};\n\nlet kitten2 = {\n  name: "Megatron",\n  weeksOld: 1,\n};\n\nlet kitten3 = {\n  name: "Billy",\n  weeksOld: 5,\n};\n\nlet kittens = [kitten1, kitten2, kitten3];\n')),(0,s.kt)("p",null,"You can also use all the functions for arrays that you learned before: find, some, every, filter, map, forEach... As an example, we want to filter all the kittens who are less than 3 weeks old:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"function isYoungerThan3Weeks(kitten) {\n  return kitten.weeksOld <= 3;\n}\n\nkittens.filter(isYoungerThan3Weeks); // returns [kitten1, kitten2];\n")),(0,s.kt)("p",null,"What if we want to get an array of all the kitties names?"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'function getName(kitten) {\n  return kitten.name;\n}\n\nkittens.map(getName); // returns ["Fluffy", "Megatron", "Billy"]\n')),(0,s.kt)("h3",{id:"exercise-1"},"Exercise (1)"),(0,s.kt)(i.Z,{defaultValue:"exercise",values:[{label:"Exercise",value:"exercise"},{label:"Solution",value:"solution"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"exercise",mdxType:"TabItem"},(0,s.kt)("admonition",{title:"Exercise",type:"note"},(0,s.kt)("ol",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ol"},"Define an array containing the 3 persons defined below."),(0,s.kt)("li",{parentName:"ol"},"Return an array of the person names (hint: use map)."),(0,s.kt)("li",{parentName:"ol"},"Filter the persons to return an array with the person younger than 28 years old (hint: use filter).")),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},'\nlet person1 = {\n  name: "Alice",\n  age: 25,\n};\n\nlet person2 = {\n  name: "Bob",\n  age: 30,\n};\n\nlet person3 = {\n  name: "John",\n  age: 20,\n};\n\n/*\nDO NOT EDIT ANYTHING ABOVE THIS LINE\nWRITE YOUR CODE BELOW\n*/\n\nlet persons = // Complete here\n\nlet personNames = // Complete here\n\nlet personsYoungerThan28YearsOld = // Complete here\n\n/*\nDO NOT EDIT ANYTHING BELOW THIS LINE\n*/\n\nconsole.log(\n  "Question 1: array defined with 3 persons -> ",\n  persons[0] === person1 && persons[1] === person2 && persons[2] === person3\n    ? "Passed :)"\n    : "Not yet :("\n);\n\nconsole.log(\n  "Question 2: array containing the person names -> ",\n  personNames[0] === "Alice" &&\n    personNames[1] === "Bob" &&\n    personNames[2] === "John"\n    ? "Passed :)"\n    : "Not yet :("\n);\n\nconsole.log(\n  "Question 3: array containing the persons younger than 28 years old -> ",\n  personsYoungerThan28YearsOld[0] === person1 &&\n    personsYoungerThan28YearsOld[1] === person3\n    ? "Passed :)"\n    : "Not yet :("\n);\n')))),(0,s.kt)(l.Z,{value:"solution",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'/*\n1) Define an array containing the 3 persons defined below.\n2) Return an array of the person names (hint: use map).\n3) Filter the persons to return an array with the person younger than 28 years old (hint: use filter).\n*/\n\nlet person1 = {\n  name: "Alice",\n  age: 25,\n};\n\nlet person2 = {\n  name: "Bob",\n  age: 30,\n};\n\nlet person3 = {\n  name: "John",\n  age: 20,\n};\n\n/*\nDO NOT EDIT ANYTHING ABOVE THIS LINE\nWRITE YOUR CODE BELOW\n*/\n\nlet persons = [person1, person2, person3];\n\nlet personNames = persons.map((person) => person.name);\n\nlet personsYoungerThan28YearsOld = persons.filter((person) => person.age < 28);\n\n/*\nDO NOT EDIT ANYTHING BELOW THIS LINE\n*/\n\nconsole.log(\n  "Question 1: array defined with 3 persons -> ",\n  persons[0] === person1 && persons[1] === person2 && persons[2] === person3\n    ? "Passed :)"\n    : "Not yet :("\n);\n\nconsole.log(\n  "Question 2: array containing the person names -> ",\n  personNames[0] === "Alice" &&\n    personNames[1] === "Bob" &&\n    personNames[2] === "John"\n    ? "Passed :)"\n    : "Not yet :("\n);\n\nconsole.log(\n  "Question 3: array containing the persons younger than 28 years old -> ",\n  personsYoungerThan28YearsOld[0] === person1 &&\n    personsYoungerThan28YearsOld[1] === person3\n    ? "Passed :)"\n    : "Not yet :("\n);\n')))),(0,s.kt)("h3",{id:"exercise-2"},"Exercise (2)"),(0,s.kt)(i.Z,{defaultValue:"exercise",values:[{label:"Exercise",value:"exercise"},{label:"Solution",value:"solution"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"exercise",mdxType:"TabItem"},(0,s.kt)("admonition",{title:"Exercise",type:"note"},(0,s.kt)("p",{parentName:"admonition"},"An array of travel destinations is defined below.\nEach destination has a name, a distance from Glasgow, and a list of transportations available to go there."),(0,s.kt)("ol",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ol"},"Filter the travelDestinations array to return all destination names reachable within 500 kms."),(0,s.kt)("li",{parentName:"ol"},"Find a destination name reachable by ferry."),(0,s.kt)("li",{parentName:"ol"},"Print in the console all the destination names more than 300 kms far away and reachable by train.")),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},'\nlet destination1 = {\n  destinationName: "Edinburgh",\n  distanceKms: 80,\n  transportations: ["car", "bus", "train"],\n};\n\nlet destination2 = {\n  destinationName: "London",\n  distanceKms: 650,\n  transportations: ["car", "bus", "train"],\n};\n\nlet destination3 = {\n  destinationName: "Paris",\n  distanceKms: 900,\n  transportations: ["train", "plane"],\n};\n\nlet destination4 = {\n  destinationName: "Dublin",\n  distanceKms: 350,\n  transportations: ["plane", "ferry"],\n};\n\nlet travelDestinations = [\n  destination1,\n  destination2,\n  destination3,\n  destination4,\n];\n\n/*\nDO NOT EDIT ANYTHING ABOVE THIS LINE\nWRITE YOUR CODE BELOW\n*/\n\nlet destinationNamesWithin500Kms = // Complete here\n\nlet destinationNameReachableByFerry = // Complete here\n\nlet destinationNamesMoreThan300KmsAwayByTrain = // Complete here (PRINT THE RESULT IN THE CONSOLE USING FOREACH)\n\n/*\nDO NOT EDIT ANYTHING BELOW THIS LINE\n*/\n\nconsole.log(\n  `Question 1) Expected result: Edinburgh,Dublin, actual result: ${destinationNamesWithin500Kms}`\n);\nconsole.log(\n  `Question 2) Expected result: Dublin, actual result: ${destinationNameReachableByFerry}`\n);\nconsole.log(\n  `Question 3) Expected result: London,Paris, actual result: ${destinationNamesMoreThan300KmsAwayByTrain}`\n);\n\n')))),(0,s.kt)(l.Z,{value:"solution",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'/*\nAn array of travel destinations is defined below.\nEach destination has a name, a distance from Glasgow, and a list of transportations available to go there.\n\n1) Filter the travelDestinations array to return all destination names reachable within 500 kms.\n2) Find a destination name reachable by ferry.\n3) Print in the console all the destination names more than 300 kms far away and reachable by train.\n*/\n\nlet destination1 = {\n  destinationName: "Edinburgh",\n  distanceKms: 80,\n  transportations: ["car", "bus", "train"],\n};\n\nlet destination2 = {\n  destinationName: "London",\n  distanceKms: 650,\n  transportations: ["car", "bus", "train"],\n};\n\nlet destination3 = {\n  destinationName: "Paris",\n  distanceKms: 900,\n  transportations: ["train", "plane"],\n};\n\nlet destination4 = {\n  destinationName: "Dublin",\n  distanceKms: 350,\n  transportations: ["plane", "ferry"],\n};\n\nlet travelDestinations = [\n  destination1,\n  destination2,\n  destination3,\n  destination4,\n];\n\n/* \nDO NOT EDIT ANYTHING ABOVE THIS LINE\nWRITE YOUR CODE BELOW\n*/\n\nlet getDestinationName = (destination) => destination.destinationName;\n\nlet isWithin500Kms = (destination) => destination.distanceKms <= 500;\nlet destinationNamesWithin500Kms = travelDestinations\n  .filter(isWithin500Kms)\n  .map(getDestinationName);\n// or in one line\n// let destinationNamesWithin500Kms = travelDestinations.filter(destination=>destination.distanceKms<=500).map(destination=>destination.destinationName);\n\nlet isReachableByFerry = (destination) =>\n  destination.transportations.includes("ferry");\nlet destinationNameReachableByFerry = travelDestinations\n  .filter(isReachableByFerry)\n  .map(getDestinationName);\n// or in one line\n// let destinationNameReachableByFerry = travelDestinations.filter(destination=>destination.transportations.includes(\'ferry\')).map(destination=>destination.destinationName);\n\nlet isMoreThan300KmsAwayByTrain = (destination) =>\n  destination.distanceKms > 300 &&\n  destination.transportations.includes("train");\nlet destinationNamesMoreThan300KmsAwayByTrain = travelDestinations\n  .filter(isMoreThan300KmsAwayByTrain)\n  .map(getDestinationName);\n// or in one line\n// let destinationNamesMoreThan300KmsAwayByTrain = travelDestinations.filter(destination=>destination.distanceKms>300 && destination.transportations.includes(\'train\')).map(destination=>destination.destinationName)\n\n/*\nDO NOT EDIT ANYTHING BELOW THIS LINE\n*/\n\nconsole.log(\n  `Question 1) Expected result: Edinburgh,Dublin, actual result: ${destinationNamesWithin500Kms}`\n);\nconsole.log(\n  `Question 2) Expected result: Dublin, actual result: ${destinationNameReachableByFerry}`\n);\nconsole.log(\n  `Question 3) Expected result: London,Paris, actual result: ${destinationNamesMoreThan300KmsAwayByTrain}`\n);\n')))),(0,s.kt)("h3",{id:"exercise-3"},"Exercise (3)"),(0,s.kt)(i.Z,{defaultValue:"exercise",values:[{label:"Exercise",value:"exercise"},{label:"Solution",value:"solution"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"exercise",mdxType:"TabItem"},(0,s.kt)("admonition",{title:"Exercise",type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Below are some restaurants in Glasgow. Each restaurant has a name, the number of total seats,\nthe number of customers in the restaurant at the moment and the menu with prices."),(0,s.kt)("p",{parentName:"admonition"},"We want to build an object to simulate a Restaurant Finder application (see below restaurantFinderApplication)."),(0,s.kt)("ol",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Define a method findAvailableRestaurants which takes a number of people in parameter and returns\nall the restaurant names which have the required number of seats available at the moment.")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Define a method findRestaurantServingDish which takes a dish name in parameter and returns\nall the restaurant names serving this dish.")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Define a method countNumberOfRestaurantsInArea which takes an area of Glasgow in parameter (center, west),\nand returns the number of restaurants in this area."))),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},'let restaurant1 = {\n  name: "Paesano",\n  totalSeats: 10,\n  numberOfCustomers: 8,\n  address: {\n    city: "Glasgow",\n    area: "center",\n  },\n  menu: ["pizza", "calzone", "salad"],\n};\n\nlet restaurant2 = {\n  name: "Ubiquitous Chip",\n  totalSeats: 20,\n  numberOfCustomers: 10,\n  address: {\n    city: "Glasgow",\n    area: "west",\n  },\n  menu: ["salad", "chocolate cake", "roast lamb"],\n};\n\nlet restaurant3 = {\n  name: "Monkeyz",\n  totalSeats: 15,\n  numberOfCustomers: 8,\n  address: {\n    city: "Glasgow",\n    area: "center",\n  },\n  menu: ["stew", "chocolate cake", "panini"],\n};\n\nlet restaurants = [restaurant1, restaurant2, restaurant3];\n\n/*\nDO NOT EDIT ANYTHING ABOVE THIS LINE\nWRITE YOUR CODE BELOW\n*/\n\nlet restaurantFinderApplication = {\n  applicationName: "Restaurant Finder",\n  applicationVersion: "1.0",\n  restaurants: restaurants,\n  findAvailableRestaurants: function (numberOfPeople) {\n    // Complete here\n  },\n  findRestaurantServingDish: function (dishName) {\n    // Complete here\n  },\n  countNumberOfRestaurantsInArea: function (area) {\n    // Complete here\n  },\n};\n\n/*\nDO NOT EDIT ANYTHING BELOW THIS LINE\n*/\n\nlet restaurantsAvailableFor5People =\n  restaurantFinderApplication.findAvailableRestaurants(5);\nconsole.log(\n  `Find available restaurants for 5 people: Expected result: Ubiquitous Chip,Monkeyz, actual result: ${restaurantsAvailableFor5People}`\n);\n\nlet restaurantsServingSalad =\n  restaurantFinderApplication.findRestaurantServingDish("salad");\nconsole.log(\n  `Find restaurants serving salad: Expected result: Paesano,Ubiquitous Chip, actual result: ${restaurantsServingSalad}`\n);\n\nlet numberOfRestaurantsInCityCentre =\n  restaurantFinderApplication.countNumberOfRestaurantsInArea("center");\nconsole.log(\n  `Number of restaurants in city centre: Expected result: 2, actual result: ${numberOfRestaurantsInCityCentre}`\n);\n')))),(0,s.kt)(l.Z,{value:"solution",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'/* \nBelow are some restaurants in Glasgow. Each restaurant has a name, the number of total seats, \nthe number of customers in the restaurant at the moment and the menu with prices.\n\nWe want to build an object to simulate a Restaurant Finder application (see below restaurantFinderApplication).\n\n1) Define a method findAvailableRestaurants which takes a number of people in parameter and returns \nall the restaurant names which have the required number of seats available at the moment.\n\n2) Define a method findRestaurantServingDish which takes a dish name in parameter and returns\nall the restaurant names serving this dish.\n\n3) Define a method countNumberOfRestaurantsInArea which takes an area of Glasgow in parameter (center, west),\nand returns the number of restaurants in this area.\n*/\n\nlet restaurant1 = {\n  name: "Paesano",\n  totalSeats: 10,\n  numberOfCustomers: 8,\n  address: {\n    city: "Glasgow",\n    area: "center",\n  },\n  menu: ["pizza", "calzone", "salad"],\n};\n\nlet restaurant2 = {\n  name: "Ubiquitous Chip",\n  totalSeats: 20,\n  numberOfCustomers: 10,\n  address: {\n    city: "Glasgow",\n    area: "west",\n  },\n  menu: ["salad", "chocolate cake", "roast lamb"],\n};\n\nlet restaurant3 = {\n  name: "Monkeyz",\n  totalSeats: 15,\n  numberOfCustomers: 8,\n  address: {\n    city: "Glasgow",\n    area: "center",\n  },\n  menu: ["stew", "chocolate cake", "panini"],\n};\n\nlet restaurants = [restaurant1, restaurant2, restaurant3];\n\n/* \nDO NOT EDIT ANYTHING ABOVE THIS LINE\nWRITE YOUR CODE BELOW\n*/\n\nconst isRestaurantAvailable = (restaurant, numberOfPeople) => {\n  const availableSeats = restaurant.totalSeats - restaurant.numberOfCustomers;\n  return availableSeats >= numberOfPeople;\n};\n\nconst includesDish = (restaurant, dishName) =>\n  restaurant.menu.includes(dishName);\n\nlet restaurantFinderApplication = {\n  applicationName: "Restaurant Finder",\n  applicationVersion: "1.0",\n  restaurants: restaurants,\n  findAvailableRestaurants: function (numberOfPeople) {\n    return restaurants\n      .filter((restaurant) => isRestaurantAvailable(restaurant, numberOfPeople))\n      .map((restaurant) => restaurant.name);\n    // or\n    // return restaurants.filter((restaurant) => (restaurant.totalSeats - restaurant.numberOfCustomers) >= numberOfPeople ).map(restaurant => restaurant.name);\n  },\n  findRestaurantServingDish: function (dishName) {\n    return restaurants\n      .filter((restaurant) => includesDish(restaurant, dishName))\n      .map((restaurant) => restaurant.name);\n    // or\n    // return restaurants.filter(restaurant => restaurant.menu.includes(dishName)).map(restaurant => restaurant.name);\n  },\n  countNumberOfRestaurantsInArea: function (area) {\n    return restaurants.filter((restaurant) => restaurant.address.area === area)\n      .length;\n  },\n};\n\n/*\nDO NOT EDIT ANYTHING BELOW THIS LINE\n*/\n\nlet restaurantsAvailableFor5People =\n  restaurantFinderApplication.findAvailableRestaurants(5);\nconsole.log(\n  `Find available restaurants for 5 people: Expected result: Ubiquitous Chip,Monkeyz, actual result: ${restaurantsAvailableFor5People}`\n);\n\nlet restaurantsServingSalad =\n  restaurantFinderApplication.findRestaurantServingDish("salad");\nconsole.log(\n  `Find restaurants serving salad: Expected result: Paesano,Ubiquitous Chip, actual result: ${restaurantsServingSalad}`\n);\n\nlet numberOfRestaurantsInCityCentre =\n  restaurantFinderApplication.countNumberOfRestaurantsInArea("center");\nconsole.log(\n  `Number of restaurants in city centre: Expected result: 2, actual result: ${numberOfRestaurantsInCityCentre}`\n);\n')))),(0,s.kt)("h2",{id:"object-built-in-methods"},"Object built-in methods"),(0,s.kt)("p",null,"Since we started JavaScript, we have used ",(0,s.kt)("inlineCode",{parentName:"p"},"console.log")," to print things to our console."),(0,s.kt)("p",null,"In week 2 and 3, you learned about array methods like ",(0,s.kt)("inlineCode",{parentName:"p"},".map()"),", and ",(0,s.kt)("inlineCode",{parentName:"p"},".filter()"),"."),(0,s.kt)("p",null,"These are what we call built-in methods, and they're part of the JavaScript language. Someone else created these methods, and we can use them in our code."),(0,s.kt)("p",null,"Like arrays, objects have built-in methods that can help us. In this lesson, we will learn about ",(0,s.kt)("inlineCode",{parentName:"p"},"Object.keys()")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"Object.values()"),"."),(0,s.kt)("h3",{id:"objectkeys"},"Object.keys()"),(0,s.kt)("p",null,"This method goes into our object, and returns the object property names as an array."),(0,s.kt)("p",null,"Here is an example output for using ",(0,s.kt)("inlineCode",{parentName:"p"},".keys()"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let footballClubs = {\n  chelsea_fc: \"England\",\n  fc_barcelona: \"Spain\",\n  ac_milan: \"Italy\",\n};\n\nconsole.log(Object.keys(footballClubs));\n// prints [ 'chelsea_fc', 'fc_barcelona', 'ac_milan' ]\n")),(0,s.kt)("h3",{id:"objectvalues"},"Object.values()"),(0,s.kt)("p",null,"This method goes into our object, and returns the values of every property as an array."),(0,s.kt)("p",null,"Here is an example output for using ",(0,s.kt)("inlineCode",{parentName:"p"},".values()"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"let footballClubs = {\n  chelsea_fc: \"England\",\n  fc_barcelona: \"Spain\",\n  ac_milan: \"Italy\",\n};\n\nconsole.log(Object.values(footballClubs));\n// prints [ 'England', 'Spain', 'Italy' ]\n")),(0,s.kt)("h3",{id:"exercise-1-1"},"Exercise (1)"),(0,s.kt)(i.Z,{defaultValue:"exercise",values:[{label:"Exercise",value:"exercise"},{label:"Solution",value:"solution"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"exercise",mdxType:"TabItem"},(0,s.kt)("admonition",{title:"Exercise",type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Return the keys and values of the following object"),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},"\nlet capitalCities = {\n  scotland: \"Edinburgh\",\n  kenya: \"Nairobi\",\n  australia: \"Canberra\",\n  canada: \"Ottawa\",\n};\n\nlet highScores = {\n  55: \"Alistair\",\n  100: \"David\",\n  89: \"Hannah\",\n  34: [\"Sergi\", \"Frank\"],\n};\n\n// ONLY EDIT BELOW HERE\n\nlet capitalCitiesKeys = ;\nlet highScoresKeys = ;\nlet capitalCitiesValues = ;\nlet highScoresValues = ;\n\n// ONLY EDIT ABOVE HERE\n\nconsole.log(capitalCitiesKeys);\n// prints [ 'scotland', 'kenya', 'australia', 'canada' ]\n\nconsole.log(highScoresKeys);\n// prints ['34, '55', '89', '100']\n\nconsole.log(capitalCitiesValues);\n// prints [ 'Edinburgh', 'Nairobi', 'Canberra', 'Ottawa' ]\n\nconsole.log(highScoresValues);\n// prints [[ 'Sergi', 'Frank' ], 'Alistair, 'David', 'Hannah']\n")))),(0,s.kt)(l.Z,{value:"solution",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"/*\n\nReturn the keys and values of the following object\n\n*/\n\nlet capitalCities = {\n  scotland: \"Edinburgh\",\n  kenya: \"Nairobi\",\n  australia: \"Canberra\",\n  canada: \"Ottawa\",\n};\n\nlet highScores = {\n  55: \"Alistair\",\n  100: \"David\",\n  89: \"Hannah\",\n  34: [\"Sergi\", \"Frank\"],\n};\n\n// ONLY EDIT BELOW HERE\n\nlet capitalCitiesKeys = Object.keys(capitalCities);\nlet highScoresKeys = Object.keys(highScores);\nlet capitalCitiesValues = Object.values(capitalCities);\nlet highScoresValues = Object.values(highScores);\n\n// ONLY EDIT ABOVE HERE\n\nconsole.log(capitalCitiesKeys);\n// prints [ 'scotland', 'kenya', 'australia', 'canada' ]\n\nconsole.log(highScoresKeys);\n// prints ['34, '55', '89', '100']\n\nconsole.log(capitalCitiesValues);\n// prints [ 'Edinburgh', 'Nairobi', 'Canberra', 'Ottawa' ]\n\nconsole.log(highScoresValues);\n// prints [[ 'Sergi', 'Frank' ], 'Alistair, 'David', 'Hannah']\n")))),(0,s.kt)("h3",{id:"exercise-2-1"},"Exercise (2)"),(0,s.kt)(i.Z,{defaultValue:"exercise",values:[{label:"Exercise",value:"exercise"},{label:"Solution",value:"solution"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"exercise",mdxType:"TabItem"},(0,s.kt)("admonition",{title:"Exercise",type:"note"},(0,s.kt)("p",{parentName:"admonition"},"You have an object of mentors and their ages below, but the keys are inconsistent. JOSH and JAMIE are uppercase, while james and Mozafar are not. You want to return an array of mentors with the names in uppercase."),(0,s.kt)("p",{parentName:"admonition"},"You're going to have to used what we learned at the start of this lesson, and some other JavaScript methods to accomplish this task."),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},"\nlet mentorsAges = {\n  james: 29,\n  JOSH: 35,\n  JAMIE: 25,\n  Mozafar: 30,\n};\n\n// ONLY EDIT BELOW THIS LINE\n\nlet mentorsNames = ;\n\nlet mentorsNamedUppercased = ;\n\n// ONLY EDIT ABOVE THIS LINE\n\nconsole.log(mentorsNamedUppercased);\n// prints [ 'JAMES', 'JOSH', 'JAMIE', 'MOZAFAR' ]\n\n")))),(0,s.kt)(l.Z,{value:"solution",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"/*\n\nYou have an object of mentors and their ages below, but the keys are inconsistent. JOSH and JAMIE are uppercase, while james and Mozafar are not. You want to return an array of mentors with the names in uppercase.\n\nYou're going to have to used what we learned at the start of this lesson, and some other JavaScript methods to accomplish this task.\n\n*/\n\nlet mentorsAges = {\n  james: 29,\n  JOSH: 35,\n  JAMIE: 25,\n  Mozafar: 30,\n};\n\n// ONLY EDIT BELOW THIS LINE\n\nlet mentorsNames = Object.keys(mentorsAges);\n\nlet mentorsNamedUppercased = mentorsNames.map((mentorName) =>\n  mentorName.toUpperCase()\n);\n\n// ONLY EDIT ABOVE THIS LINE\n\nconsole.log(mentorsNamedUppercased);\n// prints [ 'JAMES', 'JOSH', 'JAMIE', 'MOZAFAR' ]\n")))),(0,s.kt)("h3",{id:"exercise-3-1"},"Exercise (3)"),(0,s.kt)(i.Z,{defaultValue:"exercise",values:[{label:"Exercise",value:"exercise"},{label:"Solution",value:"solution"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"exercise",mdxType:"TabItem"},(0,s.kt)("admonition",{title:"Exercise",type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Objects very often contain other objects."),(0,s.kt)("p",{parentName:"admonition"},"This exercise will give you practice in getting the keys of objects inside other objects."),(0,s.kt)("p",{parentName:"admonition"},"Use the provided console.log statements below and follow the instructions above them."),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},'let storeBranches = {\n  glasgow: {\n    manager: "Andrew",\n    assistant: "Laura",\n    interns: {\n      head_intern: "Mozafar",\n      intern: "James",\n    },\n  },\n\n  edinburgh: {\n    director: "Kelly",\n    manager: "Sally",\n    assistant: "Derek",\n    interns: {\n      head_intern: "John",\n      intern: "Sarah",\n    },\n  },\n};\n\n// ONLY EDIT BELOW THIS LINE\n\n// # 1\n// prints [ \'glasgow\', \'edinburgh\' ]\nconsole.log();\n\n// # 2\n// prints [ \'manager\', \'assistant\', \'interns\' ]\nconsole.log();\n\n// # 3\n// prints [ \'head_intern\', \'intern\' ]\nconsole.log();\n\n// ONLY EDIT ABOVE THIS LINE\n')))),(0,s.kt)(l.Z,{value:"solution",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},'/*\n\nObjects very often contain other objects.\n\nThis exercise will give you practice in getting the keys of objects inside other objects.\n\nUse the provided console.log statements below and follow the instructions above them.\n\n*/\n\nlet storeBranches = {\n  glasgow: {\n    manager: "Andrew",\n    assistant: "Laura",\n    interns: {\n      head_intern: "Mozafar",\n      intern: "James",\n    },\n  },\n\n  edinburgh: {\n    director: "Kelly",\n    manager: "Sally",\n    assistant: "Derek",\n    interns: {\n      head_intern: "John",\n      intern: "Sarah",\n    },\n  },\n};\n\n// ONLY EDIT BELOW THIS LINE\n\n// # 1\n// prints [ \'glasgow\', \'edinburgh\' ]\nconsole.log(Object.keys(storeBranches));\n\n// # 2\n// prints [ \'manager\', \'assistant\', \'interns\' ]\nconsole.log(Object.keys(storeBranches.glasgow));\n\n// # 3\n// prints [ \'head_intern\', \'intern\' ]\nconsole.log(Object.keys(storeBranches.glasgow.interns));\n\n// ONLY EDIT ABOVE THIS LINE\n')))),(0,s.kt)("h2",{id:"loop-through-an-object"},"Loop through an Object"),(0,s.kt)("p",null,"Once in a while it will be required to loop through objects. You can achieve this in various ways."),(0,s.kt)("h3",{id:"use-forin-statement"},"Use ",(0,s.kt)("inlineCode",{parentName:"h3"},"for...in")," statement"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"for...in")," statement iterates over all distinct properties of an object."),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const flowers = {\n  tulip: 20,\n  rose: 10,\n  lily: 15,\n};\n\nfor (const key in flowers) {\n  console.log(`${key}: ${flowers[key]}`);\n}\n\n// Prints\n// tulip: 20\n// rose: 10\n// lily: 15\n")),(0,s.kt)("h3",{id:"convert-object-into-an-array-and-loop-through-the-array"},"Convert object into an array and loop through the array"),(0,s.kt)("p",null,"Since we started JavaScript, we have used ",(0,s.kt)("inlineCode",{parentName:"p"},"console.log")," to print things to our console."),(0,s.kt)("p",null,"Once you create an array of the object's keys or values using the ",(0,s.kt)("inlineCode",{parentName:"p"},"Object.keys"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"Object.values")," methods, you can loop through it as if it was a normal array using array methods like ",(0,s.kt)("inlineCode",{parentName:"p"},"forEach"),"."),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const flowers = {\n  tulip: 20,\n  rose: 10,\n  lily: 15,\n};\n\n// Looping through the array created from Object.keys\nconst flowerKeys = Object.keys(flowers);\n\nflowerKeys.forEach((key) => {\n  console.log(`${key}: ${flowers[key]}`);\n});\n\n// Prints\n// tulip: 20\n// rose: 10\n// lily: 15\n")),(0,s.kt)("h4",{id:"exercise-1-2"},"Exercise (1)"),(0,s.kt)(i.Z,{defaultValue:"exercise",values:[{label:"Exercise",value:"exercise"},{label:"Solution",value:"solution"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"exercise",mdxType:"TabItem"},(0,s.kt)("admonition",{title:"Exercise",type:"note"},(0,s.kt)("p",{parentName:"admonition"},"You are given an object of trainee names and grades\nLoop through all the trainees' grades and console log the name and grade of the ones with grade more than 18\nTry to use both methods shown above to achieve this"),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},"const traineeGrades = {\n  tom: 20,\n  george: 17,\n  abdul: 19,\n};\n\n// Prints\n// TOM - 20\n// ABDUL - 19\n")))),(0,s.kt)(l.Z,{value:"solution",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// You are given an object of trainee names and grades\n// Loop through all the trainees' grades and console log the name and grade of the ones with grade more than 18\n// Try to use both methods shown above to achieve this\n\nconst traineeGrades = {\n  tom: 20,\n  george: 17,\n  abdul: 19,\n};\n\nfor (let name in traineeGrades) {\n  if (traineeGrades[name] > 18) {\n    console.log(`${name.toUpperCase()} - ${traineeGrades[name]}`);\n  }\n}\n\n// Alternatively:\n// const traineeNames = Object.keys(traineeGrades);\n// traineeNames.forEach((name) => {\n//     if (traineeGrades[name] > 18) {\n//         console.log(`${name.toUpperCase()} - ${traineeGrades[name]}`)\n//     }\n// });\n\n// Prints\n// TOM - 20\n// ABDUL - 19\n")))),(0,s.kt)("h2",{id:"pair-programming-kata"},"Pair Programming Kata"),(0,s.kt)("p",null,"You will be randomly assigned a pair."),(0,s.kt)("admonition",{title:"exercise Coding Meetup 25 minutes",type:"note"},(0,s.kt)("ul",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://www.google.com/search?q=ten+minute+timer"},"Set a timer")," and switch between driver and navigator roles after 10 minutes"),(0,s.kt)("li",{parentName:"ul"},'The "driver" is the person typing on the keyboard, just thinking about what needs to be written'),(0,s.kt)("li",{parentName:"ul"},'The "navigator" reviews what the driver is doing and is thinking about to write next')),(0,s.kt)("p",{parentName:"admonition"},"Choose a kata from ",(0,s.kt)("a",{parentName:"p",href:"https://www.codewars.com/collections/cyf-array-and-object-methods"},"CYF Array and Object Methods")," that suits you both.")),(0,s.kt)("h2",{id:"pd-gathering-requirements"},"PD (Gathering requirements)"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Session objective:")," This session will explore what a tech product is, who are the users of a product, and how the product meets user needs."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"What is a product?")),(0,s.kt)("p",null,'Let\'s talk about briefly as a class what we mean when say a "product".'),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"Quick definition"),": Product is something that satisfies a Business Need. Products deliver value to the business stakeholders (internal or external)."),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Exercise (20 minutes)"),(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("strong",{parentName:"p"},"Exercise objective:")," To understand the mission of a product"),(0,s.kt)("p",{parentName:"admonition"},"During the previous week's coursework you defined your team's product. Discuss the following questions to identify the users for your product."),(0,s.kt)("ul",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ul"},"Who are your users? What different user profiles will there be?"),(0,s.kt)("li",{parentName:"ul"},"What user needs is your product trying to address?")),(0,s.kt)("p",{parentName:"admonition"},"Volunteer to share your thoughts with the class.")),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Exercise (20 minutes)"),(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("strong",{parentName:"p"},"Exercise objective"),": To identify how products achieve user needs"),(0,s.kt)("p",{parentName:"admonition"},"Brainstorm the following questions in your teams to understand your product better."),(0,s.kt)("ul",{parentName:"admonition"},(0,s.kt)("li",{parentName:"ul"},"What is the functionality of your product?"),(0,s.kt)("li",{parentName:"ul"},"How does it address the user needs / solve their problem?")),(0,s.kt)("p",{parentName:"admonition"},"Volunteer to share your thoughts with the class for group discussion. Invite other groups to provide feedback, thoughts, additional suggestions.")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Quick definitions")),(0,s.kt)("p",null,"Go through the following definitions. You don't need to go into details, you will need to have a basic understanding of these concepts for this week's coursework."),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"What is an MVP?")),(0,s.kt)("p",null,"MVP (Minimum Viable Product) refers to a product that has just enough features to satisfy the needs of early customers and, more importantly, give them something to provide feedback on to shape the future of the product."),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"What is a feature?")),(0,s.kt)("p",null,"A feature is the product\u2019s service/function that provides business value and meets customer needs. A single product is likely to have multiple features."),(0,s.kt)("p",null,(0,s.kt)("em",{parentName:"p"},"What is a user story?")),(0,s.kt)("p",null,"A user story is a brief description of software features, written from the user's perspective, that describes how that functionality will provide some values."),(0,s.kt)("h2",{id:"coursework"},"Coursework"),(0,s.kt)("p",null,"Click ",(0,s.kt)("a",{parentName:"p",href:"./homework"},"here")," to view the homework for this lesson."),(0,s.kt)("h2",{id:"feedback"},"Feedback"),(0,s.kt)("p",null,"Please spend two minutes reviewing this lesson to help us improve it for the future. This feedback will be shared with volunteers."),(0,s.kt)(o.Z,{module:"JavaScript Core 2",week:"Week 2",mdxType:"Feedback"}))}g.isMDXComponent=!0}}]);